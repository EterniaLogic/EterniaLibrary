The hallmark of a large-scale player created system is flexibility.

However, with flexibility, that means that players can... go around built-in rules. These should be stated first, as to establish ground rules.

Examples of rule breaking:
    * In-game sex toys (people get bored...)
    * Virus/malware-like activity from scripts, using up player's CPU/GPU, Malicious spam/advertising/phishing.
    * getting around CPU limits (Maximal 15ms run time per 20 Ticks per second)
    * Very massive clunky objects composed of thousands to millions of parts. Use of server CPU/GPU power to pre-calculate positions.

Built-in Helper systems for Graphics, parts, manufacturing:
    SERVER:
    * Factory Efficiency estimation, output throttling. (factory script runs once based on input/output, post-calculates rates)
    *   Example ingot Factory: generates 5.001 ingots every 30 seconds, input of 30 kg ores of % average density of target metal.
    * Malicious activity detection, prevention. (performance tokens given to player based on script type)
    * State caching for low-level systems, such as electronics, bio-based. (High-frequency radio/power, bio-cell states, merging, viruses, are all estimated, )
    CLIENT:
    * Level of detail pre-calculation. Allows for millions of objects to be on-screen from far away. Throttles way-down based on closeness to prevent FPS drops.

    
Creativity Goals:
    * Get around developer laziness on the front-end.
    * Simulate an open universe from bio/nano/electric fields to high-level factories, governments.
    * Allow "Qualified" Individuals to run large-scale grid computing experiments with no massive performance drops for players. (I.e: University professors)
    * Allow for unique objects and blueprints to be made in-game and out of game, objects cached.
    