!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	include/Eternia/constants.h	/^        const double A = 27.50;$/;"	m	namespace:electromagnetic::sound
A	include/Eternia/constants.h	/^        const double A = Ampere;$/;"	m	namespace:physical::unit
A	src/constants.h	/^        const double A = 27.50;$/;"	m	namespace:electromagnetic::sound
A	src/constants.h	/^        const double A = Ampere;$/;"	m	namespace:physical::unit
ACCATT_Account	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^enum accountATTRIBUTE {ACCATT_Account, ACCATT_Credit, ACCATT_Loan};$/;"	e	enum:accountATTRIBUTE
ACCATT_Account	src/Gamelogic/Economics/Banking/Account.h	/^enum accountATTRIBUTE {ACCATT_Account, ACCATT_Credit, ACCATT_Loan};$/;"	e	enum:accountATTRIBUTE
ACCATT_Credit	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^enum accountATTRIBUTE {ACCATT_Account, ACCATT_Credit, ACCATT_Loan};$/;"	e	enum:accountATTRIBUTE
ACCATT_Credit	src/Gamelogic/Economics/Banking/Account.h	/^enum accountATTRIBUTE {ACCATT_Account, ACCATT_Credit, ACCATT_Loan};$/;"	e	enum:accountATTRIBUTE
ACCATT_Loan	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^enum accountATTRIBUTE {ACCATT_Account, ACCATT_Credit, ACCATT_Loan};$/;"	e	enum:accountATTRIBUTE
ACCATT_Loan	src/Gamelogic/Economics/Banking/Account.h	/^enum accountATTRIBUTE {ACCATT_Account, ACCATT_Credit, ACCATT_Loan};$/;"	e	enum:accountATTRIBUTE
ACCURACY	src/Math/Functions/Basic.cpp	/^#define ACCURACY /;"	d	file:
ACCURACY	src/Math/Functions/Trig.cpp	/^#define ACCURACY /;"	d	file:
ACCVIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ACCVIE /;"	d
ACCVIE	src/Emulation/MPU/msp430g2553.h	/^#define ACCVIE /;"	d
ACCVIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ACCVIFG /;"	d
ACCVIFG	src/Emulation/MPU/msp430g2553.h	/^#define ACCVIFG /;"	d
ADBF_TYPE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^enum ADBF_TYPE { DB_CHAR, DB_INT, DB_LONG,$/;"	g
ADBF_TYPE	src/Data/AbstractDatabase/AbstractDB.h	/^enum ADBF_TYPE { DB_CHAR, DB_INT, DB_LONG,$/;"	g
ADBT_AES256	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^enum ADBT_SECURITY {ADBT_NONE, ADBT_AES256};$/;"	e	enum:ADBT_SECURITY
ADBT_AES256	src/Data/AbstractDatabase/AbstractDB.h	/^enum ADBT_SECURITY {ADBT_NONE, ADBT_AES256};$/;"	e	enum:ADBT_SECURITY
ADBT_NONE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^enum ADBT_SECURITY {ADBT_NONE, ADBT_AES256};$/;"	e	enum:ADBT_SECURITY
ADBT_NONE	src/Data/AbstractDatabase/AbstractDB.h	/^enum ADBT_SECURITY {ADBT_NONE, ADBT_AES256};$/;"	e	enum:ADBT_SECURITY
ADBT_SECURITY	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^enum ADBT_SECURITY {ADBT_NONE, ADBT_AES256};$/;"	g
ADBT_SECURITY	src/Data/AbstractDatabase/AbstractDB.h	/^enum ADBT_SECURITY {ADBT_NONE, ADBT_AES256};$/;"	g
ADB_BASE_2	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_2, ADB_BASE_2_EXTENDED, ADB_BASE_2_WIDE, \/\/ 32, 64,  2048  << DYNAMIC PERFORMANCE AND DATAINDEX SIZES with dynamic ram and disk usage$/;"	e	enum:ADB_STOREBASE
ADB_BASE_2	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_2, ADB_BASE_2_EXTENDED, ADB_BASE_2_WIDE, \/\/ 32, 64,  2048  << DYNAMIC PERFORMANCE AND DATAINDEX SIZES with dynamic ram and disk usage$/;"	e	enum:ADB_STOREBASE
ADB_BASE_2_EXTENDED	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_2, ADB_BASE_2_EXTENDED, ADB_BASE_2_WIDE, \/\/ 32, 64,  2048  << DYNAMIC PERFORMANCE AND DATAINDEX SIZES with dynamic ram and disk usage$/;"	e	enum:ADB_STOREBASE
ADB_BASE_2_EXTENDED	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_2, ADB_BASE_2_EXTENDED, ADB_BASE_2_WIDE, \/\/ 32, 64,  2048  << DYNAMIC PERFORMANCE AND DATAINDEX SIZES with dynamic ram and disk usage$/;"	e	enum:ADB_STOREBASE
ADB_BASE_2_WIDE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_2, ADB_BASE_2_EXTENDED, ADB_BASE_2_WIDE, \/\/ 32, 64,  2048  << DYNAMIC PERFORMANCE AND DATAINDEX SIZES with dynamic ram and disk usage$/;"	e	enum:ADB_STOREBASE
ADB_BASE_2_WIDE	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_2, ADB_BASE_2_EXTENDED, ADB_BASE_2_WIDE, \/\/ 32, 64,  2048  << DYNAMIC PERFORMANCE AND DATAINDEX SIZES with dynamic ram and disk usage$/;"	e	enum:ADB_STOREBASE
ADB_BASE_3	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_3, ADB_BASE_3_EXTENDED, ADB_BASE_3_WIDE, \/\/ 32, 96,  3078$/;"	e	enum:ADB_STOREBASE
ADB_BASE_3	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_3, ADB_BASE_3_EXTENDED, ADB_BASE_3_WIDE, \/\/ 32, 96,  3078$/;"	e	enum:ADB_STOREBASE
ADB_BASE_3_EXTENDED	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_3, ADB_BASE_3_EXTENDED, ADB_BASE_3_WIDE, \/\/ 32, 96,  3078$/;"	e	enum:ADB_STOREBASE
ADB_BASE_3_EXTENDED	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_3, ADB_BASE_3_EXTENDED, ADB_BASE_3_WIDE, \/\/ 32, 96,  3078$/;"	e	enum:ADB_STOREBASE
ADB_BASE_3_WIDE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_3, ADB_BASE_3_EXTENDED, ADB_BASE_3_WIDE, \/\/ 32, 96,  3078$/;"	e	enum:ADB_STOREBASE
ADB_BASE_3_WIDE	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_3, ADB_BASE_3_EXTENDED, ADB_BASE_3_WIDE, \/\/ 32, 96,  3078$/;"	e	enum:ADB_STOREBASE
ADB_BASE_5	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_5, ADB_BASE_5_EXTENDED, ADB_BASE_5_WIDE, \/\/ 32, 160, 5120$/;"	e	enum:ADB_STOREBASE
ADB_BASE_5	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_5, ADB_BASE_5_EXTENDED, ADB_BASE_5_WIDE, \/\/ 32, 160, 5120$/;"	e	enum:ADB_STOREBASE
ADB_BASE_5_EXTENDED	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_5, ADB_BASE_5_EXTENDED, ADB_BASE_5_WIDE, \/\/ 32, 160, 5120$/;"	e	enum:ADB_STOREBASE
ADB_BASE_5_EXTENDED	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_5, ADB_BASE_5_EXTENDED, ADB_BASE_5_WIDE, \/\/ 32, 160, 5120$/;"	e	enum:ADB_STOREBASE
ADB_BASE_5_WIDE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_5, ADB_BASE_5_EXTENDED, ADB_BASE_5_WIDE, \/\/ 32, 160, 5120$/;"	e	enum:ADB_STOREBASE
ADB_BASE_5_WIDE	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_5, ADB_BASE_5_EXTENDED, ADB_BASE_5_WIDE, \/\/ 32, 160, 5120$/;"	e	enum:ADB_STOREBASE
ADB_BASE_7	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_7, ADB_BASE_7_EXTENDED, ADB_BASE_7_WIDE, \/\/ 32, 224, 7168$/;"	e	enum:ADB_STOREBASE
ADB_BASE_7	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_7, ADB_BASE_7_EXTENDED, ADB_BASE_7_WIDE, \/\/ 32, 224, 7168$/;"	e	enum:ADB_STOREBASE
ADB_BASE_7_EXTENDED	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_7, ADB_BASE_7_EXTENDED, ADB_BASE_7_WIDE, \/\/ 32, 224, 7168$/;"	e	enum:ADB_STOREBASE
ADB_BASE_7_EXTENDED	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_7, ADB_BASE_7_EXTENDED, ADB_BASE_7_WIDE, \/\/ 32, 224, 7168$/;"	e	enum:ADB_STOREBASE
ADB_BASE_7_WIDE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_7, ADB_BASE_7_EXTENDED, ADB_BASE_7_WIDE, \/\/ 32, 224, 7168$/;"	e	enum:ADB_STOREBASE
ADB_BASE_7_WIDE	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_7, ADB_BASE_7_EXTENDED, ADB_BASE_7_WIDE, \/\/ 32, 224, 7168$/;"	e	enum:ADB_STOREBASE
ADB_BASE_DYNAMIC	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_DYNAMIC$/;"	e	enum:ADB_STOREBASE
ADB_BASE_DYNAMIC	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_DYNAMIC$/;"	e	enum:ADB_STOREBASE
ADB_BASE_MAXV_1000	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_MAXV_1000, ADB_BASE_MAXV_10000,          \/\/ 1000,     10000$/;"	e	enum:ADB_STOREBASE
ADB_BASE_MAXV_1000	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_MAXV_1000, ADB_BASE_MAXV_10000,          \/\/ 1000,     10000$/;"	e	enum:ADB_STOREBASE
ADB_BASE_MAXV_10000	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_MAXV_1000, ADB_BASE_MAXV_10000,          \/\/ 1000,     10000$/;"	e	enum:ADB_STOREBASE
ADB_BASE_MAXV_10000	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_MAXV_1000, ADB_BASE_MAXV_10000,          \/\/ 1000,     10000$/;"	e	enum:ADB_STOREBASE
ADB_BASE_MAXV_100000	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_MAXV_100000, ADB_BASE_MAXV_1000000,      \/\/ 100000,   1000000  << HIGH PERFORMANCE DATAINDEX SIZES, predefined disk and ram usage$/;"	e	enum:ADB_STOREBASE
ADB_BASE_MAXV_100000	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_MAXV_100000, ADB_BASE_MAXV_1000000,      \/\/ 100000,   1000000  << HIGH PERFORMANCE DATAINDEX SIZES, predefined disk and ram usage$/;"	e	enum:ADB_STOREBASE
ADB_BASE_MAXV_1000000	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_MAXV_100000, ADB_BASE_MAXV_1000000,      \/\/ 100000,   1000000  << HIGH PERFORMANCE DATAINDEX SIZES, predefined disk and ram usage$/;"	e	enum:ADB_STOREBASE
ADB_BASE_MAXV_1000000	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_MAXV_100000, ADB_BASE_MAXV_1000000,      \/\/ 100000,   1000000  << HIGH PERFORMANCE DATAINDEX SIZES, predefined disk and ram usage$/;"	e	enum:ADB_STOREBASE
ADB_BASE_MAXV_10000000	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_MAXV_10000000, ADB_BASE_MAXV_100000000,  \/\/ 10000000, 100000000 \/\/ WARNING: will use a LOT of ram just to hold the main map$/;"	e	enum:ADB_STOREBASE
ADB_BASE_MAXV_10000000	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_MAXV_10000000, ADB_BASE_MAXV_100000000,  \/\/ 10000000, 100000000 \/\/ WARNING: will use a LOT of ram just to hold the main map$/;"	e	enum:ADB_STOREBASE
ADB_BASE_MAXV_100000000	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_MAXV_10000000, ADB_BASE_MAXV_100000000,  \/\/ 10000000, 100000000 \/\/ WARNING: will use a LOT of ram just to hold the main map$/;"	e	enum:ADB_STOREBASE
ADB_BASE_MAXV_100000000	src/Data/AbstractDatabase/AbstractDB.h	/^    ADB_BASE_MAXV_10000000, ADB_BASE_MAXV_100000000,  \/\/ 10000000, 100000000 \/\/ WARNING: will use a LOT of ram just to hold the main map$/;"	e	enum:ADB_STOREBASE
ADB_STOREBASE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^enum ADB_STOREBASE {                                  \/\/ MapSize: Normal = 32, Extended = b*32. Wide = b*1000*32 (b = base number)$/;"	g
ADB_STOREBASE	src/Data/AbstractDatabase/AbstractDB.h	/^enum ADB_STOREBASE {                                  \/\/ MapSize: Normal = 32, Extended = b*32. Wide = b*1000*32 (b = base number)$/;"	g
ADC10AE0	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10AE0 /;"	d
ADC10AE0	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(ADC10AE0);                           \/* ADC10 Analog Enable 0 *\/$/;"	v
ADC10AE0	src/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10AE0 /;"	d
ADC10AE0	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(ADC10AE0);                           \/* ADC10 Analog Enable 0 *\/$/;"	v
ADC10B1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10B1 /;"	d
ADC10B1	src/Emulation/MPU/msp430g2553.h	/^#define ADC10B1 /;"	d
ADC10BUSY	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10BUSY /;"	d
ADC10BUSY	src/Emulation/MPU/msp430g2553.h	/^#define ADC10BUSY /;"	d
ADC10CT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10CT /;"	d
ADC10CT	src/Emulation/MPU/msp430g2553.h	/^#define ADC10CT /;"	d
ADC10CTL0	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10CTL0 /;"	d
ADC10CTL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(ADC10CTL0);                         \/* ADC10 Control 0 *\/$/;"	v
ADC10CTL0	src/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10CTL0 /;"	d
ADC10CTL0	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(ADC10CTL0);                         \/* ADC10 Control 0 *\/$/;"	v
ADC10CTL1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10CTL1 /;"	d
ADC10CTL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(ADC10CTL1);                         \/* ADC10 Control 1 *\/$/;"	v
ADC10CTL1	src/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10CTL1 /;"	d
ADC10CTL1	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(ADC10CTL1);                         \/* ADC10 Control 1 *\/$/;"	v
ADC10DF	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DF /;"	d
ADC10DF	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DF /;"	d
ADC10DISABLE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DISABLE /;"	d
ADC10DISABLE	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DISABLE /;"	d
ADC10DIV0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV0 /;"	d
ADC10DIV0	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV0 /;"	d
ADC10DIV1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV1 /;"	d
ADC10DIV1	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV1 /;"	d
ADC10DIV2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV2 /;"	d
ADC10DIV2	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV2 /;"	d
ADC10DIV_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_0 /;"	d
ADC10DIV_0	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_0 /;"	d
ADC10DIV_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_1 /;"	d
ADC10DIV_1	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_1 /;"	d
ADC10DIV_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_2 /;"	d
ADC10DIV_2	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_2 /;"	d
ADC10DIV_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_3 /;"	d
ADC10DIV_3	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_3 /;"	d
ADC10DIV_4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_4 /;"	d
ADC10DIV_4	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_4 /;"	d
ADC10DIV_5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_5 /;"	d
ADC10DIV_5	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_5 /;"	d
ADC10DIV_6	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_6 /;"	d
ADC10DIV_6	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_6 /;"	d
ADC10DIV_7	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_7 /;"	d
ADC10DIV_7	src/Emulation/MPU/msp430g2553.h	/^#define ADC10DIV_7 /;"	d
ADC10DTC0	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10DTC0 /;"	d
ADC10DTC0	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(ADC10DTC0);                          \/* ADC10 Data Transfer Control 0 *\/$/;"	v
ADC10DTC0	src/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10DTC0 /;"	d
ADC10DTC0	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(ADC10DTC0);                          \/* ADC10 Data Transfer Control 0 *\/$/;"	v
ADC10DTC1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10DTC1 /;"	d
ADC10DTC1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(ADC10DTC1);                          \/* ADC10 Data Transfer Control 1 *\/$/;"	v
ADC10DTC1	src/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10DTC1 /;"	d
ADC10DTC1	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(ADC10DTC1);                          \/* ADC10 Data Transfer Control 1 *\/$/;"	v
ADC10FETCH	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10FETCH /;"	d
ADC10FETCH	src/Emulation/MPU/msp430g2553.h	/^#define ADC10FETCH /;"	d
ADC10IE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10IE /;"	d
ADC10IE	src/Emulation/MPU/msp430g2553.h	/^#define ADC10IE /;"	d
ADC10IFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10IFG /;"	d
ADC10IFG	src/Emulation/MPU/msp430g2553.h	/^#define ADC10IFG /;"	d
ADC10MEM	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10MEM /;"	d
ADC10MEM	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(ADC10MEM);                          \/* ADC10 Memory *\/$/;"	v
ADC10MEM	src/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10MEM /;"	d
ADC10MEM	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(ADC10MEM);                          \/* ADC10 Memory *\/$/;"	v
ADC10ON	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10ON /;"	d
ADC10ON	src/Emulation/MPU/msp430g2553.h	/^#define ADC10ON /;"	d
ADC10SA	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10SA /;"	d
ADC10SA	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(ADC10SA);                           \/* ADC10 Data Transfer Start Address *\/$/;"	v
ADC10SA	src/Emulation/MPU/msp430_declare_consts.h	/^#define ADC10SA /;"	d
ADC10SA	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(ADC10SA);                           \/* ADC10 Data Transfer Start Address *\/$/;"	v
ADC10SC	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SC /;"	d
ADC10SC	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SC /;"	d
ADC10SHT0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SHT0 /;"	d
ADC10SHT0	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SHT0 /;"	d
ADC10SHT1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SHT1 /;"	d
ADC10SHT1	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SHT1 /;"	d
ADC10SHT_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SHT_0 /;"	d
ADC10SHT_0	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SHT_0 /;"	d
ADC10SHT_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SHT_1 /;"	d
ADC10SHT_1	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SHT_1 /;"	d
ADC10SHT_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SHT_2 /;"	d
ADC10SHT_2	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SHT_2 /;"	d
ADC10SHT_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SHT_3 /;"	d
ADC10SHT_3	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SHT_3 /;"	d
ADC10SR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SR /;"	d
ADC10SR	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SR /;"	d
ADC10SSEL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SSEL0 /;"	d
ADC10SSEL0	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SSEL0 /;"	d
ADC10SSEL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SSEL1 /;"	d
ADC10SSEL1	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SSEL1 /;"	d
ADC10SSEL_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SSEL_0 /;"	d
ADC10SSEL_0	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SSEL_0 /;"	d
ADC10SSEL_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SSEL_1 /;"	d
ADC10SSEL_1	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SSEL_1 /;"	d
ADC10SSEL_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SSEL_2 /;"	d
ADC10SSEL_2	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SSEL_2 /;"	d
ADC10SSEL_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10SSEL_3 /;"	d
ADC10SSEL_3	src/Emulation/MPU/msp430g2553.h	/^#define ADC10SSEL_3 /;"	d
ADC10TB	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10TB /;"	d
ADC10TB	src/Emulation/MPU/msp430g2553.h	/^#define ADC10TB /;"	d
ADC10_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ADC10_VECTOR /;"	d
ADC10_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define ADC10_VECTOR /;"	d
AES256_h_	include/Eternia/Algorithm/Cryptography/Aes256.h	/^#define AES256_h_$/;"	d
AES256_h_	src/Algorithm/Cryptography/Aes256.h	/^#define AES256_h_$/;"	d
AI	include/Eternia/Gamelogic/AI/AI.h	/^        AI();$/;"	p	class:AI
AI	include/Eternia/Gamelogic/AI/AI.h	/^class AI {$/;"	c
AI	src/Gamelogic/AI/AI.h	/^        AI();$/;"	p	class:AI
AI	src/Gamelogic/AI/AI.h	/^class AI {$/;"	c
AI::AI	include/Eternia/Gamelogic/AI/AI.h	/^        AI();$/;"	p	class:AI
AI::AI	src/Gamelogic/AI/AI.h	/^        AI();$/;"	p	class:AI
AI::addInteractable	include/Eternia/Gamelogic/AI/AI.h	/^        void addInteractable(); \/\/ add an object that the AI can interact with$/;"	p	class:AI
AI::addInteractable	src/Gamelogic/AI/AI.h	/^        void addInteractable(); \/\/ add an object that the AI can interact with$/;"	p	class:AI
AI::decide	include/Eternia/Gamelogic/AI/AI.h	/^        void decide(); \/\/ make a decision to do something$/;"	p	class:AI
AI::decide	src/Gamelogic/AI/AI.h	/^        void decide(); \/\/ make a decision to do something$/;"	p	class:AI
AI::predictability	include/Eternia/Gamelogic/AI/AI.h	/^        double predictability; \/\/ how predictable is this AI? (i.e: randomness of the AI, 0% for insane)$/;"	m	class:AI
AI::predictability	src/Gamelogic/AI/AI.h	/^        double predictability; \/\/ how predictable is this AI? (i.e: randomness of the AI, 0% for insane)$/;"	m	class:AI
AI::sailor_mouth	include/Eternia/Gamelogic/AI/AI.h	/^        double sailor_mouth; \/\/ how often will this AI curse?$/;"	m	class:AI
AI::sailor_mouth	src/Gamelogic/AI/AI.h	/^        double sailor_mouth; \/\/ how often will this AI curse?$/;"	m	class:AI
AI::smarts	include/Eternia/Gamelogic/AI/AI.h	/^        double smarts; \/\/ this combined with taint will completely obliterate you$/;"	m	class:AI
AI::smarts	src/Gamelogic/AI/AI.h	/^        double smarts; \/\/ this combined with taint will completely obliterate you$/;"	m	class:AI
AI::strength	include/Eternia/Gamelogic/AI/AI.h	/^        double strength; \/\/ how "Tough" is this AI? (0% for a total wimp, 100% for a Tychus)$/;"	m	class:AI
AI::strength	src/Gamelogic/AI/AI.h	/^        double strength; \/\/ how "Tough" is this AI? (0% for a total wimp, 100% for a Tychus)$/;"	m	class:AI
AI::stuborness	include/Eternia/Gamelogic/AI/AI.h	/^        double stuborness; \/\/ does not want to follow orders (100% for true enemy)$/;"	m	class:AI
AI::stuborness	src/Gamelogic/AI/AI.h	/^        double stuborness; \/\/ does not want to follow orders (100% for true enemy)$/;"	m	class:AI
AI::taint	include/Eternia/Gamelogic/AI/AI.h	/^        double taint; \/\/ how often will this AI betray you? (100% for true enemy)$/;"	m	class:AI
AI::taint	src/Gamelogic/AI/AI.h	/^        double taint; \/\/ how often will this AI betray you? (100% for true enemy)$/;"	m	class:AI
AIACTION	include/Eternia/Gamelogic/AI/AI.h	/^enum AIACTION {};$/;"	g
AIACTION	src/Gamelogic/AI/AI.h	/^enum AIACTION {};$/;"	g
AICommand	include/Eternia/Gamelogic/AI/AICommand.h	/^        AICommand();$/;"	p	class:AICommand
AICommand	include/Eternia/Gamelogic/AI/AICommand.h	/^class AICommand {$/;"	c
AICommand	src/Gamelogic/AI/AICommand.h	/^        AICommand();$/;"	p	class:AICommand
AICommand	src/Gamelogic/AI/AICommand.h	/^class AICommand {$/;"	c
AICommand::AICommand	include/Eternia/Gamelogic/AI/AICommand.h	/^        AICommand();$/;"	p	class:AICommand
AICommand::AICommand	src/Gamelogic/AI/AICommand.h	/^        AICommand();$/;"	p	class:AICommand
AIDECISION	include/Eternia/Gamelogic/AI/AI.h	/^enum AIDECISION {};$/;"	g
AIDECISION	src/Gamelogic/AI/AI.h	/^enum AIDECISION {};$/;"	g
AIDecide	include/Eternia/Gamelogic/AI/AIDecide.h	/^        AIDecide();$/;"	p	class:AIDecide
AIDecide	include/Eternia/Gamelogic/AI/AIDecide.h	/^class AIDecide {$/;"	c
AIDecide	src/Gamelogic/AI/AIDecide.h	/^        AIDecide();$/;"	p	class:AIDecide
AIDecide	src/Gamelogic/AI/AIDecide.h	/^class AIDecide {$/;"	c
AIDecide::AIDecide	include/Eternia/Gamelogic/AI/AIDecide.h	/^        AIDecide();$/;"	p	class:AIDecide
AIDecide::AIDecide	src/Gamelogic/AI/AIDecide.h	/^        AIDecide();$/;"	p	class:AIDecide
AIDecide::command	include/Eternia/Gamelogic/AI/AIDecide.h	/^        void command(); \/\/ AI will command squad or group$/;"	p	class:AIDecide
AIDecide::command	src/Gamelogic/AI/AIDecide.h	/^        void command(); \/\/ AI will command squad or group$/;"	p	class:AIDecide
AIDecide::plot	include/Eternia/Gamelogic/AI/AIDecide.h	/^        void plot(); \/\/ AI will plot (Strategize) if in command or tainted\/smart.$/;"	p	class:AIDecide
AIDecide::plot	src/Gamelogic/AI/AIDecide.h	/^        void plot(); \/\/ AI will plot (Strategize) if in command or tainted\/smart.$/;"	p	class:AIDecide
AIDecide::stuff	include/Eternia/Gamelogic/AI/AIDecide.h	/^        void stuff(); \/\/ AI will do stuff if he\/she is not commanded or is bored.$/;"	p	class:AIDecide
AIDecide::stuff	src/Gamelogic/AI/AIDecide.h	/^        void stuff(); \/\/ AI will do stuff if he\/she is not commanded or is bored.$/;"	p	class:AIDecide
AIDecide::tick	include/Eternia/Gamelogic/AI/AIDecide.h	/^        void tick(); \/\/ game time tick$/;"	p	class:AIDecide
AIDecide::tick	src/Gamelogic/AI/AIDecide.h	/^        void tick(); \/\/ game time tick$/;"	p	class:AIDecide
AIEVOLVER_H_	include/Eternia/Gamelogic/Buildings/Computing/AIEvolver.h	/^#define AIEVOLVER_H_$/;"	d
AIEVOLVER_H_	src/Gamelogic/Buildings/Computing/AIEvolver.h	/^#define AIEVOLVER_H_$/;"	d
AIEvolver	include/Eternia/Gamelogic/Buildings/Computing/AIEvolver.h	/^class AIEvolver : public Building{$/;"	c
AIEvolver	src/Gamelogic/Buildings/Computing/AIEvolver.h	/^class AIEvolver : public Building{$/;"	c
AIMain_h_	include/Eternia/Gamelogic/AI/AI.h	/^#define AIMain_h_$/;"	d
AIMain_h_	src/Gamelogic/AI/AI.h	/^#define AIMain_h_$/;"	d
AIMovement	include/Eternia/Gamelogic/AI/AIMovement.h	/^        AIMovement();$/;"	p	class:AIMovement
AIMovement	include/Eternia/Gamelogic/AI/AIMovement.h	/^class AIMovement {$/;"	c
AIMovement	src/Gamelogic/AI/AIMovement.h	/^        AIMovement();$/;"	p	class:AIMovement
AIMovement	src/Gamelogic/AI/AIMovement.h	/^class AIMovement {$/;"	c
AIMovement::AIMovement	include/Eternia/Gamelogic/AI/AIMovement.h	/^        AIMovement();$/;"	p	class:AIMovement
AIMovement::AIMovement	src/Gamelogic/AI/AIMovement.h	/^        AIMovement();$/;"	p	class:AIMovement
AIMovement::current	include/Eternia/Gamelogic/AI/AIMovement.h	/^        vertex* current; \/\/ current location for reference$/;"	m	class:AIMovement
AIMovement::current	src/Gamelogic/AI/AIMovement.h	/^        vertex* current; \/\/ current location for reference$/;"	m	class:AIMovement
AIMovement::isBlocked	include/Eternia/Gamelogic/AI/AIMovement.h	/^        bool isBlocked(vertex* loc); \/\/ is a location blocked? (Bad terrain)$/;"	p	class:AIMovement
AIMovement::isBlocked	src/Gamelogic/AI/AIMovement.h	/^        bool isBlocked(vertex* loc); \/\/ is a location blocked? (Bad terrain)$/;"	p	class:AIMovement
AIMovement::pathTo	include/Eternia/Gamelogic/AI/AIMovement.h	/^        void pathTo(vertex* location); \/\/ tell AI to goto this location. (Direct and pure order)$/;"	p	class:AIMovement
AIMovement::pathTo	src/Gamelogic/AI/AIMovement.h	/^        void pathTo(vertex* location); \/\/ tell AI to goto this location. (Direct and pure order)$/;"	p	class:AIMovement
AIMovement::solvePath	include/Eternia/Gamelogic/AI/AIMovement.h	/^        LinkedList<vertex>* solvePath(); \/\/ solve path, AI predictability is accounted for. (Lee Algorithm)$/;"	p	class:AIMovement
AIMovement::solvePath	src/Gamelogic/AI/AIMovement.h	/^        LinkedList<vertex>* solvePath(); \/\/ solve path, AI predictability is accounted for. (Lee Algorithm)$/;"	p	class:AIMovement
AIMovement::togo	include/Eternia/Gamelogic/AI/AIMovement.h	/^        LinkedList<vertex>* togo; \/\/ verticies to go through$/;"	m	class:AIMovement
AIMovement::togo	src/Gamelogic/AI/AIMovement.h	/^        LinkedList<vertex>* togo; \/\/ verticies to go through$/;"	m	class:AIMovement
AIUse	include/Eternia/Gamelogic/AI/AIUse.h	/^        AIUse();$/;"	p	class:AIUse
AIUse	include/Eternia/Gamelogic/AI/AIUse.h	/^class AIUse {$/;"	c
AIUse	src/Gamelogic/AI/AIUse.h	/^        AIUse();$/;"	p	class:AIUse
AIUse	src/Gamelogic/AI/AIUse.h	/^class AIUse {$/;"	c
AIUse::AIUse	include/Eternia/Gamelogic/AI/AIUse.h	/^        AIUse();$/;"	p	class:AIUse
AIUse::AIUse	src/Gamelogic/AI/AIUse.h	/^        AIUse();$/;"	p	class:AIUse
AI_Command_h_	include/Eternia/Gamelogic/AI/AICommand.h	/^#define AI_Command_h_$/;"	d
AI_Command_h_	src/Gamelogic/AI/AICommand.h	/^#define AI_Command_h_$/;"	d
AI_Decide_h_	include/Eternia/Gamelogic/AI/AIDecide.h	/^#define AI_Decide_h_$/;"	d
AI_Decide_h_	src/Gamelogic/AI/AIDecide.h	/^#define AI_Decide_h_$/;"	d
AI_Movement_h_	include/Eternia/Gamelogic/AI/AIMovement.h	/^#define AI_Movement_h_$/;"	d
AI_Movement_h_	src/Gamelogic/AI/AIMovement.h	/^#define AI_Movement_h_$/;"	d
AI_Use_h_	include/Eternia/Gamelogic/AI/AIUse.h	/^#define AI_Use_h_$/;"	d
AI_Use_h_	src/Gamelogic/AI/AIUse.h	/^#define AI_Use_h_$/;"	d
AMPS	include/Eternia/Engineering/Electrical/PowerValue.h	/^#define AMPS /;"	d
AMPS	src/Engineering/Electrical/PowerValue.h	/^#define AMPS /;"	d
AM_Accomplished	include/Eternia/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Accomplished	src/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Alone	include/Eternia/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Alone	src/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Amused	include/Eternia/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Amused	src/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Annoyed	include/Eternia/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Annoyed	src/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Anxious	include/Eternia/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Anxious	src/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Apathetic	include/Eternia/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Apathetic	src/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Awake	include/Eternia/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Awake	src/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Bewildered	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Bewildered	src/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Calm	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Calm	src/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Cheerful	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Cheerful	src/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Content	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Content	src/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Cranky	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Cranky	src/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Dark	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Dark	src/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Depressed	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Depressed	src/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Devious	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Devious	src/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Disappointed	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Disappointed	src/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Discontent	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Discontent	src/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Dorky	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Dorky	src/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Drained	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Drained	src/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Drunk	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Drunk	src/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Enthralled	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Enthralled	src/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Excited	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Excited	src/Gamelogic/Avatar/Mood.h	/^           AM_Bewildered, AM_Cheerful, AM_Calm, AM_Excited, AM_Cranky, AM_Content, AM_Depressed, AM_Dark, AM_Devious, AM_Disappointed,$/;"	e	enum:MOOD
AM_Flirty	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Flirty	src/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Frustrated	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Frustrated	src/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Giggly	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Giggly	src/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Gloomy	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Gloomy	src/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Grumpy	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Grumpy	src/Gamelogic/Avatar/Mood.h	/^           AM_Discontent, AM_Dorky, AM_Drained, AM_Drunk, AM_Enthralled, AM_Frustrated, AM_Flirty, AM_Giggly, AM_Gloomy, AM_Grumpy,$/;"	e	enum:MOOD
AM_Happy	include/Eternia/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Happy	src/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_High	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_High	src/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Hopeful	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Hopeful	src/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Hot	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Hot	src/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Hungry	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Hungry	src/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Hyper	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Hyper	src/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Irritated	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Irritated	src/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Jealous	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Jealous	src/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Lonely	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Lonely	src/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Mad	include/Eternia/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Mad	src/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Melancholy	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Melancholy	src/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Mellow	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Mellow	src/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Naughty	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Naughty	src/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Numb	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Numb	src/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Peaceful	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Peaceful	src/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Pessimistic	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Pessimistic	src/Gamelogic/Avatar/Mood.h	/^           AM_High, AM_Hopeful, AM_Hot, AM_Hungry, AM_Hyper, AM_Jealous, AM_Irritated, AM_Lonely, AM_Numb, AM_Peaceful, AM_Pessimistic,$/;"	e	enum:MOOD
AM_Predetory	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Predetory	src/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Rejected	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Rejected	src/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Rejuvenated	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Rejuvenated	src/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Relieved	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Relieved	src/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Restless	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Restless	src/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Rushed	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Rushed	src/Gamelogic/Avatar/Mood.h	/^           AM_Mellow, AM_Melancholy, AM_Naughty, AM_Predetory, AM_Rejected, AM_Restless, AM_Rejuvenated, AM_Relieved, AM_Rushed,$/;"	e	enum:MOOD
AM_Sad	include/Eternia/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Sad	src/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	e	enum:MOOD
AM_Shocked	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Shocked	src/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Sick	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Sick	src/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Silly	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Silly	src/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Sleepy	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Sleepy	src/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Smart	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Smart	src/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Stressed	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Stressed	src/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Supprised	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Supprised	src/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Sympathetic	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Sympathetic	src/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Thankful	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Thankful	src/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Tired	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Tired	src/Gamelogic/Avatar/Mood.h	/^           AM_Shocked, AM_Sick, AM_Silly, AM_Sleepy, AM_Smart, AM_Stressed, AM_Supprised, AM_Sympathetic, AM_Thankful, AM_Tired,$/;"	e	enum:MOOD
AM_Touched	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Uncomfortable, AM_Touched$/;"	e	enum:MOOD
AM_Touched	src/Gamelogic/Avatar/Mood.h	/^           AM_Uncomfortable, AM_Touched$/;"	e	enum:MOOD
AM_Uncomfortable	include/Eternia/Gamelogic/Avatar/Mood.h	/^           AM_Uncomfortable, AM_Touched$/;"	e	enum:MOOD
AM_Uncomfortable	src/Gamelogic/Avatar/Mood.h	/^           AM_Uncomfortable, AM_Touched$/;"	e	enum:MOOD
APICore	include/Eternia/API/APICore.h	/^    APICore();$/;"	p	class:APICore
APICore	include/Eternia/API/APICore.h	/^    APICore(CharString modfolder, CharString logfile);$/;"	p	class:APICore
APICore	include/Eternia/API/APICore.h	/^class APICore{$/;"	c
APICore	include/Eternia/API/APIMod.h	/^    class APICore;$/;"	x
APICore	src/API/APICore.cpp	/^APICore::APICore(){$/;"	f	class:APICore
APICore	src/API/APICore.h	/^    APICore();$/;"	p	class:APICore
APICore	src/API/APICore.h	/^    APICore(CharString modfolder, CharString logfile);$/;"	p	class:APICore
APICore	src/API/APICore.h	/^class APICore{$/;"	c
APICore	src/API/APIMod.h	/^    class APICore;$/;"	x
APICore::APICore	include/Eternia/API/APICore.h	/^    APICore();$/;"	p	class:APICore
APICore::APICore	include/Eternia/API/APICore.h	/^    APICore(CharString modfolder, CharString logfile);$/;"	p	class:APICore
APICore::APICore	src/API/APICore.cpp	/^APICore::APICore(){$/;"	f	class:APICore
APICore::APICore	src/API/APICore.h	/^    APICore();$/;"	p	class:APICore
APICore::APICore	src/API/APICore.h	/^    APICore(CharString modfolder, CharString logfile);$/;"	p	class:APICore
APICore::events	include/Eternia/API/APICore.h	/^    APIEventRegistry events; \/\/ registry for event listeners$/;"	m	class:APICore
APICore::events	src/API/APICore.h	/^    APIEventRegistry events; \/\/ registry for event listeners$/;"	m	class:APICore
APICore::getEvents	include/Eternia/API/APICore.h	/^    APIEventRegistry* getEvents();$/;"	p	class:APICore
APICore::getEvents	src/API/APICore.h	/^    APIEventRegistry* getEvents();$/;"	p	class:APICore
APICore::getLogger	include/Eternia/API/APICore.h	/^    Logger* getLogger(); \/\/ General logger used by this API$/;"	p	class:APICore
APICore::getLogger	src/API/APICore.h	/^    Logger* getLogger(); \/\/ General logger used by this API$/;"	p	class:APICore
APICore::getPermissions	include/Eternia/API/APICore.h	/^    APIPermissionsRegistry* getPermissions();$/;"	p	class:APICore
APICore::getPermissions	src/API/APICore.h	/^    APIPermissionsRegistry* getPermissions();$/;"	p	class:APICore
APICore::loadMods	include/Eternia/API/APICore.h	/^    void loadMods(); \/\/ begins the process to load all of the mods$/;"	p	class:APICore
APICore::loadMods	src/API/APICore.h	/^    void loadMods(); \/\/ begins the process to load all of the mods$/;"	p	class:APICore
APICore::loadModule	include/Eternia/API/APICore.h	/^    bool loadModule(CharString file); \/\/ load a module from a file or folder. false if not loaded.$/;"	p	class:APICore
APICore::loadModule	src/API/APICore.h	/^    bool loadModule(CharString file); \/\/ load a module from a file or folder. false if not loaded.$/;"	p	class:APICore
APICore::logs	include/Eternia/API/APICore.h	/^    Logger logs;$/;"	m	class:APICore
APICore::logs	src/API/APICore.h	/^    Logger logs;$/;"	m	class:APICore
APICore::mods	include/Eternia/API/APICore.h	/^    LinkedList<APIMod> mods; \/\/ loaded mods$/;"	m	class:APICore
APICore::mods	src/API/APICore.h	/^    LinkedList<APIMod> mods; \/\/ loaded mods$/;"	m	class:APICore
APICore::onDisable	include/Eternia/API/APICore.h	/^    void onDisable(); \/\/ runs to tell the module to turn "off". (Does not actually stop, mod dev has to do it)$/;"	p	class:APICore
APICore::onDisable	src/API/APICore.h	/^    void onDisable(); \/\/ runs to tell the module to turn "off". (Does not actually stop, mod dev has to do it)$/;"	p	class:APICore
APICore::onEnable	include/Eternia/API/APICore.h	/^    void onEnable(); \/\/ runs to tell the module to turn "on" and start processing.$/;"	p	class:APICore
APICore::onEnable	src/API/APICore.h	/^    void onEnable(); \/\/ runs to tell the module to turn "on" and start processing.$/;"	p	class:APICore
APICore::onInit	include/Eternia/API/APICore.h	/^    void onInit(); \/\/ runs after a module is loaded.$/;"	p	class:APICore
APICore::onInit	src/API/APICore.h	/^    void onInit(); \/\/ runs after a module is loaded.$/;"	p	class:APICore
APICore::onUnload	include/Eternia/API/APICore.h	/^    void onUnload(); \/\/ runs when module is stopping.$/;"	p	class:APICore
APICore::onUnload	src/API/APICore.h	/^    void onUnload(); \/\/ runs when module is stopping.$/;"	p	class:APICore
APICore::perms	include/Eternia/API/APICore.h	/^    APIPermissionsRegistry perms; \/\/ permissions registry$/;"	m	class:APICore
APICore::perms	src/API/APICore.h	/^    APIPermissionsRegistry perms; \/\/ permissions registry$/;"	m	class:APICore
APICore::preloadMods	include/Eternia/API/APICore.h	/^    void preloadMods(); \/\/ pre-loads mod files and dependencies chains$/;"	p	class:APICore
APICore::preloadMods	src/API/APICore.h	/^    void preloadMods(); \/\/ pre-loads mod files and dependencies chains$/;"	p	class:APICore
APICore::preloadModule	include/Eternia/API/APICore.h	/^    APIMod* preloadModule(CharString file); \/\/ preloads the module, reads "mod.properties" file.$/;"	p	class:APICore
APICore::preloadModule	src/API/APICore.h	/^    APIMod* preloadModule(CharString file); \/\/ preloads the module, reads "mod.properties" file.$/;"	p	class:APICore
APICore::unloadModule	include/Eternia/API/APICore.h	/^    bool unloadModule(APIMod* mod); \/\/ unload a module. false if kept loaded.$/;"	p	class:APICore
APICore::unloadModule	src/API/APICore.h	/^    bool unloadModule(APIMod* mod); \/\/ unload a module. false if kept loaded.$/;"	p	class:APICore
APICore_H_	include/Eternia/API/APICore.h	/^#define APICore_H_$/;"	d
APICore_H_	src/API/APICore.h	/^#define APICore_H_$/;"	d
APIEVENTREG_H_	include/Eternia/API/APIEventRegistry.h	/^#define APIEVENTREG_H_$/;"	d
APIEVENTREG_H_	src/API/APIEventRegistry.h	/^#define APIEVENTREG_H_$/;"	d
APIEventRegistry	include/Eternia/API/APIEventRegistry.h	/^    APIEventRegistry();$/;"	p	class:APIEventRegistry
APIEventRegistry	include/Eternia/API/APIEventRegistry.h	/^class APIEventRegistry{$/;"	c
APIEventRegistry	src/API/APIEventRegistry.cpp	/^APIEventRegistry::APIEventRegistry(){$/;"	f	class:APIEventRegistry
APIEventRegistry	src/API/APIEventRegistry.h	/^    APIEventRegistry();$/;"	p	class:APIEventRegistry
APIEventRegistry	src/API/APIEventRegistry.h	/^class APIEventRegistry{$/;"	c
APIEventRegistry::APIEventRegistry	include/Eternia/API/APIEventRegistry.h	/^    APIEventRegistry();$/;"	p	class:APIEventRegistry
APIEventRegistry::APIEventRegistry	src/API/APIEventRegistry.cpp	/^APIEventRegistry::APIEventRegistry(){$/;"	f	class:APIEventRegistry
APIEventRegistry::APIEventRegistry	src/API/APIEventRegistry.h	/^    APIEventRegistry();$/;"	p	class:APIEventRegistry
APIEventRegistry::addEventHandler	include/Eternia/API/APIEventRegistry.h	/^    bool addEventHandler(CharString name, EventHandler* handler); \/\/ add a new event handler, return ID$/;"	p	class:APIEventRegistry
APIEventRegistry::addEventHandler	src/API/APIEventRegistry.cpp	/^bool APIEventRegistry::addEventHandler(CharString name, EventHandler* handler){$/;"	f	class:APIEventRegistry
APIEventRegistry::addEventHandler	src/API/APIEventRegistry.h	/^    bool addEventHandler(CharString name, EventHandler* handler); \/\/ add a new event handler, return ID$/;"	p	class:APIEventRegistry
APIEventRegistry::callEvent	include/Eternia/API/APIEventRegistry.h	/^    bool callEvent(CharString name, Event* event); \/\/ call an event, used by dev. Returns false if cancelled.$/;"	p	class:APIEventRegistry
APIEventRegistry::callEvent	src/API/APIEventRegistry.cpp	/^bool APIEventRegistry::callEvent(CharString name, Event* event){$/;"	f	class:APIEventRegistry
APIEventRegistry::callEvent	src/API/APIEventRegistry.h	/^    bool callEvent(CharString name, Event* event); \/\/ call an event, used by dev. Returns false if cancelled.$/;"	p	class:APIEventRegistry
APIEventRegistry::getHandler	include/Eternia/API/APIEventRegistry.h	/^    EventHandler* getHandler(CharString name); \/\/ get an event handler$/;"	p	class:APIEventRegistry
APIEventRegistry::getHandler	src/API/APIEventRegistry.cpp	/^EventHandler* APIEventRegistry::getHandler(CharString name){$/;"	f	class:APIEventRegistry
APIEventRegistry::getHandler	src/API/APIEventRegistry.h	/^    EventHandler* getHandler(CharString name); \/\/ get an event handler$/;"	p	class:APIEventRegistry
APIEventRegistry::getHandlers	include/Eternia/API/APIEventRegistry.h	/^    LinkedList<EventHandler> getHandlers(); \/\/ get list of all handlers$/;"	p	class:APIEventRegistry
APIEventRegistry::getHandlers	src/API/APIEventRegistry.cpp	/^LinkedList<EventHandler> APIEventRegistry::getHandlers(){$/;"	f	class:APIEventRegistry
APIEventRegistry::getHandlers	src/API/APIEventRegistry.h	/^    LinkedList<EventHandler> getHandlers(); \/\/ get list of all handlers$/;"	p	class:APIEventRegistry
APIEventRegistry::handlerList	include/Eternia/API/APIEventRegistry.h	/^    LinkedList<EventHandler> handlerList;$/;"	m	class:APIEventRegistry
APIEventRegistry::handlerList	src/API/APIEventRegistry.h	/^    LinkedList<EventHandler> handlerList;$/;"	m	class:APIEventRegistry
APIEventRegistry::handlers	include/Eternia/API/APIEventRegistry.h	/^    HashMap<EventHandler> handlers; \/\/ list of known handlers$/;"	m	class:APIEventRegistry
APIEventRegistry::handlers	src/API/APIEventRegistry.h	/^    HashMap<EventHandler> handlers; \/\/ list of known handlers$/;"	m	class:APIEventRegistry
APIEventRegistry::registerHandle	include/Eternia/API/APIEventRegistry.h	/^    bool registerHandle(CharString name, EventHandle *handle, int priority); \/\/ register a handle with a specific handler (returns false if handler doesn't exist.$/;"	p	class:APIEventRegistry
APIEventRegistry::registerHandle	src/API/APIEventRegistry.cpp	/^bool APIEventRegistry::registerHandle(CharString name, EventHandle *handle, int priority){$/;"	f	class:APIEventRegistry
APIEventRegistry::registerHandle	src/API/APIEventRegistry.h	/^    bool registerHandle(CharString name, EventHandle *handle, int priority); \/\/ register a handle with a specific handler (returns false if handler doesn't exist.$/;"	p	class:APIEventRegistry
APIEventRegistry::~APIEventRegistry	include/Eternia/API/APIEventRegistry.h	/^    virtual ~APIEventRegistry();$/;"	p	class:APIEventRegistry
APIEventRegistry::~APIEventRegistry	src/API/APIEventRegistry.cpp	/^APIEventRegistry::~APIEventRegistry(){$/;"	f	class:APIEventRegistry
APIEventRegistry::~APIEventRegistry	src/API/APIEventRegistry.h	/^    virtual ~APIEventRegistry();$/;"	p	class:APIEventRegistry
APIMT_Client	include/Eternia/API/APIMod.h	/^enum APIModType {APIMT_Server, APIMT_Client, APIMT_Shared, APIMT_Node};$/;"	e	enum:APIModType
APIMT_Client	src/API/APIMod.h	/^enum APIModType {APIMT_Server, APIMT_Client, APIMT_Shared, APIMT_Node};$/;"	e	enum:APIModType
APIMT_Node	include/Eternia/API/APIMod.h	/^enum APIModType {APIMT_Server, APIMT_Client, APIMT_Shared, APIMT_Node};$/;"	e	enum:APIModType
APIMT_Node	src/API/APIMod.h	/^enum APIModType {APIMT_Server, APIMT_Client, APIMT_Shared, APIMT_Node};$/;"	e	enum:APIModType
APIMT_Server	include/Eternia/API/APIMod.h	/^enum APIModType {APIMT_Server, APIMT_Client, APIMT_Shared, APIMT_Node};$/;"	e	enum:APIModType
APIMT_Server	src/API/APIMod.h	/^enum APIModType {APIMT_Server, APIMT_Client, APIMT_Shared, APIMT_Node};$/;"	e	enum:APIModType
APIMT_Shared	include/Eternia/API/APIMod.h	/^enum APIModType {APIMT_Server, APIMT_Client, APIMT_Shared, APIMT_Node};$/;"	e	enum:APIModType
APIMT_Shared	src/API/APIMod.h	/^enum APIModType {APIMT_Server, APIMT_Client, APIMT_Shared, APIMT_Node};$/;"	e	enum:APIModType
APIMod	include/Eternia/API/APICore.h	/^    class APIMod;$/;"	x
APIMod	include/Eternia/API/APIMod.h	/^    APIMod();$/;"	p	class:APIMod
APIMod	include/Eternia/API/APIMod.h	/^    APIMod(CharString file, CharString name, CharString language, CharString version);$/;"	p	class:APIMod
APIMod	include/Eternia/API/APIMod.h	/^class APIMod : public APIUser{$/;"	c
APIMod	src/API/APICore.h	/^    class APIMod;$/;"	x
APIMod	src/API/APIMod.cpp	/^APIMod::APIMod(){$/;"	f	class:APIMod
APIMod	src/API/APIMod.cpp	/^APIMod::APIMod(CharString file, CharString name, CharString language, CharString version){$/;"	f	class:APIMod
APIMod	src/API/APIMod.h	/^    APIMod();$/;"	p	class:APIMod
APIMod	src/API/APIMod.h	/^    APIMod(CharString file, CharString name, CharString language, CharString version);$/;"	p	class:APIMod
APIMod	src/API/APIMod.h	/^class APIMod : public APIUser{$/;"	c
APIMod::APIMod	include/Eternia/API/APIMod.h	/^    APIMod();$/;"	p	class:APIMod
APIMod::APIMod	include/Eternia/API/APIMod.h	/^    APIMod(CharString file, CharString name, CharString language, CharString version);$/;"	p	class:APIMod
APIMod::APIMod	src/API/APIMod.cpp	/^APIMod::APIMod(){$/;"	f	class:APIMod
APIMod::APIMod	src/API/APIMod.cpp	/^APIMod::APIMod(CharString file, CharString name, CharString language, CharString version){$/;"	f	class:APIMod
APIMod::APIMod	src/API/APIMod.h	/^    APIMod();$/;"	p	class:APIMod
APIMod::APIMod	src/API/APIMod.h	/^    APIMod(CharString file, CharString name, CharString language, CharString version);$/;"	p	class:APIMod
APIMod::addClass	include/Eternia/API/APIMod.h	/^	virtual void addClass(int size); \/\/ add a class for use by scripts$/;"	p	class:APIMod
APIMod::addClass	src/API/APIMod.cpp	/^void APIMod::addClass(int size){$/;"	f	class:APIMod
APIMod::addClass	src/API/APIMod.h	/^	virtual void addClass(int size); \/\/ add a class for use by scripts$/;"	p	class:APIMod
APIMod::addFunction	include/Eternia/API/APIMod.h	/^	virtual void addFunction(void* func, int params); \/\/ add a function for use by scripts$/;"	p	class:APIMod
APIMod::addFunction	src/API/APIMod.cpp	/^void APIMod::addFunction(void* func, int params){$/;"	f	class:APIMod
APIMod::addFunction	src/API/APIMod.h	/^	virtual void addFunction(void* func, int params); \/\/ add a function for use by scripts$/;"	p	class:APIMod
APIMod::compile	include/Eternia/API/APIMod.h	/^	virtual void compile(); \/\/ compileable languages can be dynamically compiled, others will just run a check$/;"	p	class:APIMod
APIMod::compile	src/API/APIMod.cpp	/^void APIMod::compile(){$/;"	f	class:APIMod
APIMod::compile	src/API/APIMod.h	/^	virtual void compile(); \/\/ compileable languages can be dynamically compiled, others will just run a check$/;"	p	class:APIMod
APIMod::core	include/Eternia/API/APIMod.h	/^    APICore* core; \/\/ Linked core$/;"	m	class:APIMod
APIMod::core	src/API/APIMod.h	/^    APICore* core; \/\/ Linked core$/;"	m	class:APIMod
APIMod::dependencies	include/Eternia/API/APIMod.h	/^    LinkedList<APIMod> dependencies;$/;"	m	class:APIMod
APIMod::dependencies	src/API/APIMod.h	/^    LinkedList<APIMod> dependencies;$/;"	m	class:APIMod
APIMod::file	include/Eternia/API/APIMod.h	/^    CharString file, language, version;$/;"	m	class:APIMod
APIMod::file	src/API/APIMod.h	/^    CharString file, language, version;$/;"	m	class:APIMod
APIMod::gc	include/Eternia/API/APIMod.h	/^    virtual void gc();    \/\/ clear garbage (For specific languages, such as java and C#)$/;"	p	class:APIMod
APIMod::gc	src/API/APIMod.cpp	/^void APIMod::gc(){$/;"	f	class:APIMod
APIMod::gc	src/API/APIMod.h	/^    virtual void gc();    \/\/ clear garbage (For specific languages, such as java and C#)$/;"	p	class:APIMod
APIMod::getClass	include/Eternia/API/APIMod.h	/^    void* getClass(APIMod* mod, CharString classN); \/\/ retrieve a class$/;"	p	class:APIMod
APIMod::getClass	src/API/APIMod.h	/^    void* getClass(APIMod* mod, CharString classN); \/\/ retrieve a class$/;"	p	class:APIMod
APIMod::getConfigDir	include/Eternia/API/APIMod.h	/^    CharString getConfigDir(); \/\/ specific dir string for the directory$/;"	p	class:APIMod
APIMod::getConfigDir	src/API/APIMod.h	/^    CharString getConfigDir(); \/\/ specific dir string for the directory$/;"	p	class:APIMod
APIMod::getDataDir	include/Eternia/API/APIMod.h	/^    CharString getDataDir();$/;"	p	class:APIMod
APIMod::getDataDir	src/API/APIMod.h	/^    CharString getDataDir();$/;"	p	class:APIMod
APIMod::getLanguage	include/Eternia/API/APIMod.h	/^    CharString getLanguage(); \/\/ get the language of the module (e.g: C++, Lua, ect.)$/;"	p	class:APIMod
APIMod::getLanguage	src/API/APIMod.h	/^    CharString getLanguage(); \/\/ get the language of the module (e.g: C++, Lua, ect.)$/;"	p	class:APIMod
APIMod::getLogDir	include/Eternia/API/APIMod.h	/^    CharString getLogDir();$/;"	p	class:APIMod
APIMod::getLogDir	src/API/APIMod.h	/^    CharString getLogDir();$/;"	p	class:APIMod
APIMod::getName	include/Eternia/API/APIMod.h	/^    CharString getName(); \/\/ module name$/;"	p	class:APIMod
APIMod::getName	src/API/APIMod.h	/^    CharString getName(); \/\/ module name$/;"	p	class:APIMod
APIMod::getValue	include/Eternia/API/APIMod.h	/^    void* getValue(APIMod* mod, CharString valname); \/\/ retrieve a value$/;"	p	class:APIMod
APIMod::getValue	src/API/APIMod.h	/^    void* getValue(APIMod* mod, CharString valname); \/\/ retrieve a value$/;"	p	class:APIMod
APIMod::getVersion	include/Eternia/API/APIMod.h	/^    CharString getVersion(); \/\/ get the versions of the module$/;"	p	class:APIMod
APIMod::getVersion	src/API/APIMod.h	/^    CharString getVersion(); \/\/ get the versions of the module$/;"	p	class:APIMod
APIMod::init	include/Eternia/API/APIMod.h	/^    void init(CharString file, CharString name, CharString language, CharString version);$/;"	p	class:APIMod
APIMod::init	src/API/APIMod.cpp	/^void APIMod::init(CharString file, CharString name, CharString language, CharString version){$/;"	f	class:APIMod
APIMod::init	src/API/APIMod.h	/^    void init(CharString file, CharString name, CharString language, CharString version);$/;"	p	class:APIMod
APIMod::language	include/Eternia/API/APIMod.h	/^    CharString file, language, version;$/;"	m	class:APIMod
APIMod::language	src/API/APIMod.h	/^    CharString file, language, version;$/;"	m	class:APIMod
APIMod::onDisable	include/Eternia/API/APIMod.h	/^    virtual void onDisable();$/;"	p	class:APIMod
APIMod::onDisable	src/API/APIMod.cpp	/^void APIMod::onDisable(){$/;"	f	class:APIMod
APIMod::onDisable	src/API/APIMod.h	/^    virtual void onDisable();$/;"	p	class:APIMod
APIMod::onEnable	include/Eternia/API/APIMod.h	/^    virtual void onEnable();$/;"	p	class:APIMod
APIMod::onEnable	src/API/APIMod.cpp	/^void APIMod::onEnable(){$/;"	f	class:APIMod
APIMod::onEnable	src/API/APIMod.h	/^    virtual void onEnable();$/;"	p	class:APIMod
APIMod::onEvent	include/Eternia/API/APIMod.h	/^    virtual Event onEvent(Event event); \/\/ send an event to the scripts$/;"	p	class:APIMod
APIMod::onEvent	src/API/APIMod.cpp	/^Event APIMod::onEvent(Event event){$/;"	f	class:APIMod
APIMod::onEvent	src/API/APIMod.h	/^    virtual Event onEvent(Event event); \/\/ send an event to the scripts$/;"	p	class:APIMod
APIMod::onGuiDraw	include/Eternia/API/APIMod.h	/^    virtual void onGuiDraw(); \/\/ [SYNC] specific function that enables openGL contexts$/;"	p	class:APIMod
APIMod::onGuiDraw	src/API/APIMod.cpp	/^void APIMod::onGuiDraw(){$/;"	f	class:APIMod
APIMod::onGuiDraw	src/API/APIMod.h	/^    virtual void onGuiDraw(); \/\/ [SYNC] specific function that enables openGL contexts$/;"	p	class:APIMod
APIMod::onLoad	include/Eternia/API/APIMod.h	/^    virtual void onLoad();$/;"	p	class:APIMod
APIMod::onLoad	src/API/APIMod.cpp	/^void APIMod::onLoad(){$/;"	f	class:APIMod
APIMod::onLoad	src/API/APIMod.h	/^    virtual void onLoad();$/;"	p	class:APIMod
APIMod::onNetworkTick	include/Eternia/API/APIMod.h	/^    virtual void onNetworkTick();$/;"	p	class:APIMod
APIMod::onNetworkTick	src/API/APIMod.cpp	/^void APIMod::onNetworkTick(){$/;"	f	class:APIMod
APIMod::onNetworkTick	src/API/APIMod.h	/^    virtual void onNetworkTick();$/;"	p	class:APIMod
APIMod::onNodeTick	include/Eternia/API/APIMod.h	/^    virtual void onNodeTick(); \/\/ Node processing$/;"	p	class:APIMod
APIMod::onNodeTick	src/API/APIMod.cpp	/^void APIMod::onNodeTick(){$/;"	f	class:APIMod
APIMod::onNodeTick	src/API/APIMod.h	/^    virtual void onNodeTick(); \/\/ Node processing$/;"	p	class:APIMod
APIMod::onReload	include/Eternia/API/APIMod.h	/^    virtual void onReload(); \/\/ reload configs$/;"	p	class:APIMod
APIMod::onReload	src/API/APIMod.cpp	/^void APIMod::onReload(){$/;"	f	class:APIMod
APIMod::onReload	src/API/APIMod.h	/^    virtual void onReload(); \/\/ reload configs$/;"	p	class:APIMod
APIMod::onRenderDraw	include/Eternia/API/APIMod.h	/^    virtual void onRenderDraw(); \/\/ [SYNC] Draw 3D things$/;"	p	class:APIMod
APIMod::onRenderDraw	src/API/APIMod.cpp	/^void APIMod::onRenderDraw(){$/;"	f	class:APIMod
APIMod::onRenderDraw	src/API/APIMod.h	/^    virtual void onRenderDraw(); \/\/ [SYNC] Draw 3D things$/;"	p	class:APIMod
APIMod::onShader	include/Eternia/API/APIMod.h	/^    virtual void onShader(); \/\/ [SYNC] draw a specific shader$/;"	p	class:APIMod
APIMod::onShader	src/API/APIMod.cpp	/^void APIMod::onShader(){$/;"	f	class:APIMod
APIMod::onShader	src/API/APIMod.h	/^    virtual void onShader(); \/\/ [SYNC] draw a specific shader$/;"	p	class:APIMod
APIMod::onTick	include/Eternia/API/APIMod.h	/^    virtual void onTick(double time); \/\/ time between ticks given to script engines$/;"	p	class:APIMod
APIMod::onTick	src/API/APIMod.cpp	/^void APIMod::onTick(double time){$/;"	f	class:APIMod
APIMod::onTick	src/API/APIMod.h	/^    virtual void onTick(double time); \/\/ time between ticks given to script engines$/;"	p	class:APIMod
APIMod::onUnload	include/Eternia/API/APIMod.h	/^    virtual void onUnload(); \/\/ C\/C++\/Go modules cannot be directly unloaded.$/;"	p	class:APIMod
APIMod::onUnload	src/API/APIMod.cpp	/^void APIMod::onUnload(){$/;"	f	class:APIMod
APIMod::onUnload	src/API/APIMod.h	/^    virtual void onUnload(); \/\/ C\/C++\/Go modules cannot be directly unloaded.$/;"	p	class:APIMod
APIMod::restart	include/Eternia/API/APIMod.h	/^    virtual void restart(); \/\/ runs Stop() then Start()$/;"	p	class:APIMod
APIMod::restart	src/API/APIMod.cpp	/^void APIMod::restart(){$/;"	f	class:APIMod
APIMod::restart	src/API/APIMod.h	/^    virtual void restart(); \/\/ runs Stop() then Start()$/;"	p	class:APIMod
APIMod::setValue	include/Eternia/API/APIMod.h	/^    bool setValue(APIMod* mod, CharString valname, void* val);$/;"	p	class:APIMod
APIMod::setValue	src/API/APIMod.h	/^    bool setValue(APIMod* mod, CharString valname, void* val);$/;"	p	class:APIMod
APIMod::start	include/Eternia/API/APIMod.h	/^    virtual void start(); \/\/ start the script engine (Loads the script, preps modules)$/;"	p	class:APIMod
APIMod::start	src/API/APIMod.cpp	/^void APIMod::start(){$/;"	f	class:APIMod
APIMod::start	src/API/APIMod.h	/^    virtual void start(); \/\/ start the script engine (Loads the script, preps modules)$/;"	p	class:APIMod
APIMod::stop	include/Eternia/API/APIMod.h	/^    virtual void stop(); \/\/ stop the script engine (Unloads script, attempts to unload DLL)$/;"	p	class:APIMod
APIMod::stop	src/API/APIMod.cpp	/^void APIMod::stop(){$/;"	f	class:APIMod
APIMod::stop	src/API/APIMod.h	/^    virtual void stop(); \/\/ stop the script engine (Unloads script, attempts to unload DLL)$/;"	p	class:APIMod
APIMod::type	include/Eternia/API/APIMod.h	/^    APIModType type;$/;"	m	class:APIMod
APIMod::type	src/API/APIMod.h	/^    APIModType type;$/;"	m	class:APIMod
APIMod::version	include/Eternia/API/APIMod.h	/^    CharString file, language, version;$/;"	m	class:APIMod
APIMod::version	src/API/APIMod.h	/^    CharString file, language, version;$/;"	m	class:APIMod
APIMod::~APIMod	include/Eternia/API/APIMod.h	/^    virtual ~APIMod();$/;"	p	class:APIMod
APIMod::~APIMod	src/API/APIMod.cpp	/^APIMod::~APIMod(){$/;"	f	class:APIMod
APIMod::~APIMod	src/API/APIMod.h	/^    virtual ~APIMod();$/;"	p	class:APIMod
APIModType	include/Eternia/API/APIMod.h	/^enum APIModType {APIMT_Server, APIMT_Client, APIMT_Shared, APIMT_Node};$/;"	g
APIModType	src/API/APIMod.h	/^enum APIModType {APIMT_Server, APIMT_Client, APIMT_Shared, APIMT_Node};$/;"	g
APIMod_H_	include/Eternia/API/APIMod.h	/^#define APIMod_H_$/;"	d
APIMod_H_	src/API/APIMod.h	/^#define APIMod_H_$/;"	d
APIPERMISSION_H_	include/Eternia/API/APIPermission.h	/^#define APIPERMISSION_H_$/;"	d
APIPERMISSION_H_	src/API/APIPermission.h	/^#define APIPERMISSION_H_$/;"	d
APIPERMS_H_	include/Eternia/API/APIPermissionsRegistry.h	/^#define APIPERMS_H_$/;"	d
APIPERMS_H_	src/API/APIPermissionsRegistry.h	/^#define APIPERMS_H_$/;"	d
APIPermType	include/Eternia/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	g
APIPermType	src/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	g
APIPermission	include/Eternia/API/APIPermission.h	/^    APIPermission(APIPermType type, CharString perm);$/;"	p	class:APIPermission
APIPermission	include/Eternia/API/APIPermission.h	/^class APIPermission{$/;"	c
APIPermission	src/API/APIPermission.cpp	/^APIPermission::APIPermission(APIPermType type, CharString perm){$/;"	f	class:APIPermission
APIPermission	src/API/APIPermission.h	/^    APIPermission(APIPermType type, CharString perm);$/;"	p	class:APIPermission
APIPermission	src/API/APIPermission.h	/^class APIPermission{$/;"	c
APIPermission::APIPermission	include/Eternia/API/APIPermission.h	/^    APIPermission(APIPermType type, CharString perm);$/;"	p	class:APIPermission
APIPermission::APIPermission	src/API/APIPermission.cpp	/^APIPermission::APIPermission(APIPermType type, CharString perm){$/;"	f	class:APIPermission
APIPermission::APIPermission	src/API/APIPermission.h	/^    APIPermission(APIPermType type, CharString perm);$/;"	p	class:APIPermission
APIPermission::perm	include/Eternia/API/APIPermission.h	/^    CharString perm;$/;"	m	class:APIPermission
APIPermission::perm	src/API/APIPermission.h	/^    CharString perm;$/;"	m	class:APIPermission
APIPermission::type	include/Eternia/API/APIPermission.h	/^    APIPermType type;$/;"	m	class:APIPermission
APIPermission::type	src/API/APIPermission.h	/^    APIPermType type;$/;"	m	class:APIPermission
APIPermissionsRegistry	include/Eternia/API/APIPermissionsRegistry.h	/^    APIPermissionsRegistry();$/;"	p	class:APIPermissionsRegistry
APIPermissionsRegistry	include/Eternia/API/APIPermissionsRegistry.h	/^class APIPermissionsRegistry{$/;"	c
APIPermissionsRegistry	src/API/APIPermissionsRegistry.cpp	/^APIPermissionsRegistry::APIPermissionsRegistry(){$/;"	f	class:APIPermissionsRegistry
APIPermissionsRegistry	src/API/APIPermissionsRegistry.h	/^    APIPermissionsRegistry();$/;"	p	class:APIPermissionsRegistry
APIPermissionsRegistry	src/API/APIPermissionsRegistry.h	/^class APIPermissionsRegistry{$/;"	c
APIPermissionsRegistry::APIPermissionsRegistry	include/Eternia/API/APIPermissionsRegistry.h	/^    APIPermissionsRegistry();$/;"	p	class:APIPermissionsRegistry
APIPermissionsRegistry::APIPermissionsRegistry	src/API/APIPermissionsRegistry.cpp	/^APIPermissionsRegistry::APIPermissionsRegistry(){$/;"	f	class:APIPermissionsRegistry
APIPermissionsRegistry::APIPermissionsRegistry	src/API/APIPermissionsRegistry.h	/^    APIPermissionsRegistry();$/;"	p	class:APIPermissionsRegistry
APIPermissionsRegistry::registerUser	include/Eternia/API/APIPermissionsRegistry.h	/^    void registerUser(APIUser *user); \/\/ register a user if it doesn't exist.$/;"	p	class:APIPermissionsRegistry
APIPermissionsRegistry::registerUser	src/API/APIPermissionsRegistry.cpp	/^void APIPermissionsRegistry::registerUser(APIUser *user){$/;"	f	class:APIPermissionsRegistry
APIPermissionsRegistry::registerUser	src/API/APIPermissionsRegistry.h	/^    void registerUser(APIUser *user); \/\/ register a user if it doesn't exist.$/;"	p	class:APIPermissionsRegistry
APIPermissionsRegistry::userHasPermission	include/Eternia/API/APIPermissionsRegistry.h	/^    bool userHasPermission(APIUser *user, APIPermission perm);$/;"	p	class:APIPermissionsRegistry
APIPermissionsRegistry::userHasPermission	src/API/APIPermissionsRegistry.cpp	/^bool APIPermissionsRegistry::userHasPermission(APIUser *user, APIPermission perm){$/;"	f	class:APIPermissionsRegistry
APIPermissionsRegistry::userHasPermission	src/API/APIPermissionsRegistry.h	/^    bool userHasPermission(APIUser *user, APIPermission perm);$/;"	p	class:APIPermissionsRegistry
APIPermissionsRegistry::users	include/Eternia/API/APIPermissionsRegistry.h	/^    LinkedList<APIUser> users;$/;"	m	class:APIPermissionsRegistry
APIPermissionsRegistry::users	src/API/APIPermissionsRegistry.h	/^    LinkedList<APIUser> users;$/;"	m	class:APIPermissionsRegistry
APIPermissionsRegistry::~APIPermissionsRegistry	include/Eternia/API/APIPermissionsRegistry.h	/^    virtual ~APIPermissionsRegistry();$/;"	p	class:APIPermissionsRegistry
APIPermissionsRegistry::~APIPermissionsRegistry	src/API/APIPermissionsRegistry.cpp	/^APIPermissionsRegistry::~APIPermissionsRegistry(){}$/;"	f	class:APIPermissionsRegistry
APIPermissionsRegistry::~APIPermissionsRegistry	src/API/APIPermissionsRegistry.h	/^    virtual ~APIPermissionsRegistry();$/;"	p	class:APIPermissionsRegistry
APIUser	include/Eternia/API/APIUser.h	/^    APIUser();$/;"	p	class:APIUser
APIUser	include/Eternia/API/APIUser.h	/^    APIUser(CharString name);$/;"	p	class:APIUser
APIUser	include/Eternia/API/APIUser.h	/^class APIUser : public SpecificSerializer{$/;"	c
APIUser	src/API/APIUser.cpp	/^APIUser::APIUser(){$/;"	f	class:APIUser
APIUser	src/API/APIUser.h	/^    APIUser();$/;"	p	class:APIUser
APIUser	src/API/APIUser.h	/^    APIUser(CharString name);$/;"	p	class:APIUser
APIUser	src/API/APIUser.h	/^class APIUser : public SpecificSerializer{$/;"	c
APIUser::APIUser	include/Eternia/API/APIUser.h	/^    APIUser();$/;"	p	class:APIUser
APIUser::APIUser	include/Eternia/API/APIUser.h	/^    APIUser(CharString name);$/;"	p	class:APIUser
APIUser::APIUser	src/API/APIUser.cpp	/^APIUser::APIUser(){$/;"	f	class:APIUser
APIUser::APIUser	src/API/APIUser.h	/^    APIUser();$/;"	p	class:APIUser
APIUser::APIUser	src/API/APIUser.h	/^    APIUser(CharString name);$/;"	p	class:APIUser
APIUser::addPermission	include/Eternia/API/APIUser.h	/^    bool addPermission(APIUser* user, APIPermission* perm); \/\/ returns false if that user does not have perms to add perms to this user.$/;"	p	class:APIUser
APIUser::addPermission	src/API/APIUser.cpp	/^bool APIUser::addPermission(APIUser* user, APIPermission* perm){$/;"	f	class:APIUser
APIUser::addPermission	src/API/APIUser.h	/^    bool addPermission(APIUser* user, APIPermission* perm); \/\/ returns false if that user does not have perms to add perms to this user.$/;"	p	class:APIUser
APIUser::hasPermission	include/Eternia/API/APIUser.h	/^    bool hasPermission(APIPermission perm);$/;"	p	class:APIUser
APIUser::hasPermission	src/API/APIUser.cpp	/^bool APIUser::hasPermission(APIPermission perm){$/;"	f	class:APIUser
APIUser::hasPermission	src/API/APIUser.h	/^    bool hasPermission(APIPermission perm);$/;"	p	class:APIUser
APIUser::name	include/Eternia/API/APIUser.h	/^    CharString name;$/;"	m	class:APIUser
APIUser::name	src/API/APIUser.h	/^    CharString name;$/;"	m	class:APIUser
APIUser::pAPI	include/Eternia/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
APIUser::pAPI	src/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
APIUser::pDB	include/Eternia/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
APIUser::pDB	src/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
APIUser::pGLOBAL	include/Eternia/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
APIUser::pGLOBAL	src/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
APIUser::pMOD	include/Eternia/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
APIUser::pMOD	src/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
APIUser::pUSER	include/Eternia/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
APIUser::pUSER	src/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
APIUser::permissions	include/Eternia/API/APIUser.h	/^    LinkedList<APIPermission> permissions;$/;"	m	class:APIUser
APIUser::permissions	src/API/APIUser.h	/^    LinkedList<APIPermission> permissions;$/;"	m	class:APIUser
APIUser::permscope	include/Eternia/API/APIUser.h	/^    APIPermType permscope; \/\/ APIUser uses P_USER, but a MOD uses P_MOD.$/;"	m	class:APIUser
APIUser::permscope	src/API/APIUser.h	/^    APIPermType permscope; \/\/ APIUser uses P_USER, but a MOD uses P_MOD.$/;"	m	class:APIUser
APIUser::removePermission	include/Eternia/API/APIUser.h	/^    bool removePermission(APIUser* user, APIPermission* perm); \/\/ returns false if that user does not have perms to remove perms.$/;"	p	class:APIUser
APIUser::removePermission	src/API/APIUser.cpp	/^bool APIUser::removePermission(APIUser* user, APIPermission* perm){$/;"	f	class:APIUser
APIUser::removePermission	src/API/APIUser.h	/^    bool removePermission(APIUser* user, APIPermission* perm); \/\/ returns false if that user does not have perms to remove perms.$/;"	p	class:APIUser
APIUser::~APIUser	include/Eternia/API/APIUser.h	/^    virtual ~APIUser();$/;"	p	class:APIUser
APIUser::~APIUser	src/API/APIUser.cpp	/^APIUser::~APIUser(){}$/;"	f	class:APIUser
APIUser::~APIUser	src/API/APIUser.h	/^    virtual ~APIUser();$/;"	p	class:APIUser
API_USER_H_	include/Eternia/API/APIUser.h	/^#define API_USER_H_$/;"	d
API_USER_H_	src/API/APIUser.h	/^#define API_USER_H_$/;"	d
AP_ASEXUAL	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^enum AP_GENDER {AP_MALE, AP_FEMALE, AP_ROBOT, AP_ASEXUAL};$/;"	e	enum:AP_GENDER
AP_ASEXUAL	src/Gamelogic/Avatar/AvatarAppearance.h	/^enum AP_GENDER {AP_MALE, AP_FEMALE, AP_ROBOT, AP_ASEXUAL};$/;"	e	enum:AP_GENDER
AP_FEMALE	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^enum AP_GENDER {AP_MALE, AP_FEMALE, AP_ROBOT, AP_ASEXUAL};$/;"	e	enum:AP_GENDER
AP_FEMALE	src/Gamelogic/Avatar/AvatarAppearance.h	/^enum AP_GENDER {AP_MALE, AP_FEMALE, AP_ROBOT, AP_ASEXUAL};$/;"	e	enum:AP_GENDER
AP_GENDER	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^enum AP_GENDER {AP_MALE, AP_FEMALE, AP_ROBOT, AP_ASEXUAL};$/;"	g
AP_GENDER	src/Gamelogic/Avatar/AvatarAppearance.h	/^enum AP_GENDER {AP_MALE, AP_FEMALE, AP_ROBOT, AP_ASEXUAL};$/;"	g
AP_MALE	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^enum AP_GENDER {AP_MALE, AP_FEMALE, AP_ROBOT, AP_ASEXUAL};$/;"	e	enum:AP_GENDER
AP_MALE	src/Gamelogic/Avatar/AvatarAppearance.h	/^enum AP_GENDER {AP_MALE, AP_FEMALE, AP_ROBOT, AP_ASEXUAL};$/;"	e	enum:AP_GENDER
AP_ROBOT	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^enum AP_GENDER {AP_MALE, AP_FEMALE, AP_ROBOT, AP_ASEXUAL};$/;"	e	enum:AP_GENDER
AP_ROBOT	src/Gamelogic/Avatar/AvatarAppearance.h	/^enum AP_GENDER {AP_MALE, AP_FEMALE, AP_ROBOT, AP_ASEXUAL};$/;"	e	enum:AP_GENDER
ARCHITECTURE_ID	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARRAY_SIZE	src/Serialization/test/testSerializers.hpp	/^#define ARRAY_SIZE(/;"	d
ASM1_h_	include/Eternia/asm/asm1.h	/^#define ASM1_h_$/;"	d
ASM1_h_	src/asm/asm1.h	/^#define ASM1_h_$/;"	d
ATOM_H_	include/Eternia/Engineering/Chemistry/Atom.h	/^#define ATOM_H_$/;"	d
ATOM_H_	src/Engineering/Chemistry/Atom.h	/^#define ATOM_H_$/;"	d
AT_AI	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum AvatarTYPE {AT_Player, AT_AI, AT_Static, AT_Mob, AT_Boss};$/;"	e	enum:AvatarTYPE
AT_AI	src/Gamelogic/Avatar/Avatar.h	/^enum AvatarTYPE {AT_Player, AT_AI, AT_Static, AT_Mob, AT_Boss};$/;"	e	enum:AvatarTYPE
AT_Boss	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum AvatarTYPE {AT_Player, AT_AI, AT_Static, AT_Mob, AT_Boss};$/;"	e	enum:AvatarTYPE
AT_Boss	src/Gamelogic/Avatar/Avatar.h	/^enum AvatarTYPE {AT_Player, AT_AI, AT_Static, AT_Mob, AT_Boss};$/;"	e	enum:AvatarTYPE
AT_Mob	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum AvatarTYPE {AT_Player, AT_AI, AT_Static, AT_Mob, AT_Boss};$/;"	e	enum:AvatarTYPE
AT_Mob	src/Gamelogic/Avatar/Avatar.h	/^enum AvatarTYPE {AT_Player, AT_AI, AT_Static, AT_Mob, AT_Boss};$/;"	e	enum:AvatarTYPE
AT_Player	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum AvatarTYPE {AT_Player, AT_AI, AT_Static, AT_Mob, AT_Boss};$/;"	e	enum:AvatarTYPE
AT_Player	src/Gamelogic/Avatar/Avatar.h	/^enum AvatarTYPE {AT_Player, AT_AI, AT_Static, AT_Mob, AT_Boss};$/;"	e	enum:AvatarTYPE
AT_Static	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum AvatarTYPE {AT_Player, AT_AI, AT_Static, AT_Mob, AT_Boss};$/;"	e	enum:AvatarTYPE
AT_Static	src/Gamelogic/Avatar/Avatar.h	/^enum AvatarTYPE {AT_Player, AT_AI, AT_Static, AT_Mob, AT_Boss};$/;"	e	enum:AvatarTYPE
AU	include/Eternia/constants.h	/^        const double AU = astronomical_unit;$/;"	m	namespace:physical::unit
AU	src/constants.h	/^        const double AU = astronomical_unit;$/;"	m	namespace:physical::unit
AUDIOBUF_	include/Eternia/Audio/AudioBuffer.h	/^#define AUDIOBUF_$/;"	d
AUDIOBUF_	src/Audio/AudioBuffer.h	/^#define AUDIOBUF_$/;"	d
AUTOPILOT_H_	include/Eternia/Gamelogic/Ship/Autopilot/Autopilot.h	/^#define AUTOPILOT_H_$/;"	d
AUTOPILOT_H_	src/Gamelogic/Ship/Autopilot/Autopilot.h	/^#define AUTOPILOT_H_$/;"	d
AbstractDBCacheMap	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBCacheMap(ADB_STOREBASE Base, ADBT_SECURITY Security);$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBCacheMap {$/;"	c
AbstractDBCacheMap	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBCacheMap(ADB_STOREBASE Base, ADBT_SECURITY Security);$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap	src/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBCacheMap {$/;"	c
AbstractDBCacheMap	src/Data/AbstractDatabase/AbstractDBCacheMap.cpp	/^AbstractDBCacheMap::AbstractDBCacheMap(ADB_STOREBASE Base, ADBT_SECURITY Security) {$/;"	f	class:AbstractDBCacheMap
AbstractDBCacheMap::AbstractDBCacheMap	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBCacheMap(ADB_STOREBASE Base, ADBT_SECURITY Security);$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap::AbstractDBCacheMap	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBCacheMap(ADB_STOREBASE Base, ADBT_SECURITY Security);$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap::AbstractDBCacheMap	src/Data/AbstractDatabase/AbstractDBCacheMap.cpp	/^AbstractDBCacheMap::AbstractDBCacheMap(ADB_STOREBASE Base, ADBT_SECURITY Security) {$/;"	f	class:AbstractDBCacheMap
AbstractDBCacheMap::base	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ADB_STOREBASE base;$/;"	m	class:AbstractDBCacheMap
AbstractDBCacheMap::base	src/Data/AbstractDatabase/AbstractDB.h	/^        ADB_STOREBASE base;$/;"	m	class:AbstractDBCacheMap
AbstractDBCacheMap::clearCache	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void clearCache();$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap::clearCache	src/Data/AbstractDatabase/AbstractDB.h	/^        void clearCache();$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap::clearCache	src/Data/AbstractDatabase/AbstractDBCacheMap.cpp	/^void AbstractDBCacheMap::clearCache() {$/;"	f	class:AbstractDBCacheMap
AbstractDBCacheMap::getAllRows	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getAllRows();$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap::getAllRows	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getAllRows();$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap::getAllRows	src/Data/AbstractDatabase/AbstractDBCacheMap.cpp	/^AbstractDBLinkedDataset* AbstractDBCacheMap::getAllRows() {$/;"	f	class:AbstractDBCacheMap
AbstractDBCacheMap::getKey	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int getKey(double index);$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap::getKey	src/Data/AbstractDatabase/AbstractDB.h	/^        int getKey(double index);$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap::getKey	src/Data/AbstractDatabase/AbstractDBCacheMap.cpp	/^int AbstractDBCacheMap::getKey(double index) {$/;"	f	class:AbstractDBCacheMap
AbstractDBCacheMap::getRow	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBRow* getRow(double index);$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap::getRow	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBRow* getRow(double index);$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap::getRow	src/Data/AbstractDatabase/AbstractDBCacheMap.cpp	/^AbstractDBRow* AbstractDBCacheMap::getRow(double index) {$/;"	f	class:AbstractDBCacheMap
AbstractDBCacheMap::mapArray	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void** mapArray;$/;"	m	class:AbstractDBCacheMap
AbstractDBCacheMap::mapArray	src/Data/AbstractDatabase/AbstractDB.h	/^        void** mapArray;$/;"	m	class:AbstractDBCacheMap
AbstractDBCacheMap::rowList	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* rowList;$/;"	m	class:AbstractDBCacheMap
AbstractDBCacheMap::rowList	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* rowList;$/;"	m	class:AbstractDBCacheMap
AbstractDBCacheMap::security	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ADBT_SECURITY security;$/;"	m	class:AbstractDBCacheMap
AbstractDBCacheMap::security	src/Data/AbstractDatabase/AbstractDB.h	/^        ADBT_SECURITY security;$/;"	m	class:AbstractDBCacheMap
AbstractDBCacheMap::~AbstractDBCacheMap	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBCacheMap();$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap::~AbstractDBCacheMap	src/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBCacheMap();$/;"	p	class:AbstractDBCacheMap
AbstractDBCacheMap::~AbstractDBCacheMap	src/Data/AbstractDatabase/AbstractDBCacheMap.cpp	/^AbstractDBCacheMap::~AbstractDBCacheMap() {$/;"	f	class:AbstractDBCacheMap
AbstractDBDate	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBDate {$/;"	c
AbstractDBDate	src/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBDate {$/;"	c
AbstractDBDate::day	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int day, month, year;$/;"	m	class:AbstractDBDate
AbstractDBDate::day	src/Data/AbstractDatabase/AbstractDB.h	/^        int day, month, year;$/;"	m	class:AbstractDBDate
AbstractDBDate::hour	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int second, minute, hour;$/;"	m	class:AbstractDBDate
AbstractDBDate::hour	src/Data/AbstractDatabase/AbstractDB.h	/^        int second, minute, hour;$/;"	m	class:AbstractDBDate
AbstractDBDate::minute	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int second, minute, hour;$/;"	m	class:AbstractDBDate
AbstractDBDate::minute	src/Data/AbstractDatabase/AbstractDB.h	/^        int second, minute, hour;$/;"	m	class:AbstractDBDate
AbstractDBDate::month	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int day, month, year;$/;"	m	class:AbstractDBDate
AbstractDBDate::month	src/Data/AbstractDatabase/AbstractDB.h	/^        int day, month, year;$/;"	m	class:AbstractDBDate
AbstractDBDate::second	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int second, minute, hour;$/;"	m	class:AbstractDBDate
AbstractDBDate::second	src/Data/AbstractDatabase/AbstractDB.h	/^        int second, minute, hour;$/;"	m	class:AbstractDBDate
AbstractDBDate::year	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int day, month, year;$/;"	m	class:AbstractDBDate
AbstractDBDate::year	src/Data/AbstractDatabase/AbstractDB.h	/^        int day, month, year;$/;"	m	class:AbstractDBDate
AbstractDBField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBField(ADBF_TYPE type);$/;"	p	class:AbstractDBField
AbstractDBField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBField(ADBF_TYPE type, bool isKey);$/;"	p	class:AbstractDBField
AbstractDBField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBField {$/;"	c
AbstractDBField	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBField(ADBF_TYPE type);$/;"	p	class:AbstractDBField
AbstractDBField	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBField(ADBF_TYPE type, bool isKey);$/;"	p	class:AbstractDBField
AbstractDBField	src/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBField {$/;"	c
AbstractDBField	src/Data/AbstractDatabase/AbstractDBField.cpp	/^AbstractDBField::AbstractDBField(ADBF_TYPE type) {$/;"	f	class:AbstractDBField
AbstractDBField	src/Data/AbstractDatabase/AbstractDBField.cpp	/^AbstractDBField::AbstractDBField(ADBF_TYPE type, bool isKey = false) {$/;"	f	class:AbstractDBField
AbstractDBField::AbstractDBField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBField(ADBF_TYPE type);$/;"	p	class:AbstractDBField
AbstractDBField::AbstractDBField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBField(ADBF_TYPE type, bool isKey);$/;"	p	class:AbstractDBField
AbstractDBField::AbstractDBField	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBField(ADBF_TYPE type);$/;"	p	class:AbstractDBField
AbstractDBField::AbstractDBField	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBField(ADBF_TYPE type, bool isKey);$/;"	p	class:AbstractDBField
AbstractDBField::AbstractDBField	src/Data/AbstractDatabase/AbstractDBField.cpp	/^AbstractDBField::AbstractDBField(ADBF_TYPE type) {$/;"	f	class:AbstractDBField
AbstractDBField::AbstractDBField	src/Data/AbstractDatabase/AbstractDBField.cpp	/^AbstractDBField::AbstractDBField(ADBF_TYPE type, bool isKey = false) {$/;"	f	class:AbstractDBField
AbstractDBField::fieldtype	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ADBF_TYPE fieldtype;$/;"	m	class:AbstractDBField
AbstractDBField::fieldtype	src/Data/AbstractDatabase/AbstractDB.h	/^        ADBF_TYPE fieldtype;$/;"	m	class:AbstractDBField
AbstractDBField::getIsKey	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        bool getIsKey();$/;"	p	class:AbstractDBField
AbstractDBField::getIsKey	src/Data/AbstractDatabase/AbstractDB.h	/^        bool getIsKey();$/;"	p	class:AbstractDBField
AbstractDBField::getIsKey	src/Data/AbstractDatabase/AbstractDBField.cpp	/^bool AbstractDBField::getIsKey() {$/;"	f	class:AbstractDBField
AbstractDBField::getSize	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int getSize();$/;"	p	class:AbstractDBField
AbstractDBField::getSize	src/Data/AbstractDatabase/AbstractDB.h	/^        int getSize();$/;"	p	class:AbstractDBField
AbstractDBField::getSize	src/Data/AbstractDatabase/AbstractDBField.cpp	/^int AbstractDBField::getSize() {$/;"	f	class:AbstractDBField
AbstractDBField::getType	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ADBF_TYPE getType();$/;"	p	class:AbstractDBField
AbstractDBField::getType	src/Data/AbstractDatabase/AbstractDB.h	/^        ADBF_TYPE getType();$/;"	p	class:AbstractDBField
AbstractDBField::getType	src/Data/AbstractDatabase/AbstractDBField.cpp	/^ADBF_TYPE AbstractDBField::getType() {$/;"	f	class:AbstractDBField
AbstractDBField::init	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void init(ADBF_TYPE type, bool isKey);$/;"	p	class:AbstractDBField
AbstractDBField::init	src/Data/AbstractDatabase/AbstractDB.h	/^        void init(ADBF_TYPE type, bool isKey);$/;"	p	class:AbstractDBField
AbstractDBField::init	src/Data/AbstractDatabase/AbstractDBField.cpp	/^void AbstractDBField::init(ADBF_TYPE type, bool isKey) {$/;"	f	class:AbstractDBField
AbstractDBField::iskey	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        bool iskey;$/;"	m	class:AbstractDBField
AbstractDBField::iskey	src/Data/AbstractDatabase/AbstractDB.h	/^        bool iskey;$/;"	m	class:AbstractDBField
AbstractDBField::~AbstractDBField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBField();$/;"	p	class:AbstractDBField
AbstractDBField::~AbstractDBField	src/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBField();$/;"	p	class:AbstractDBField
AbstractDBField::~AbstractDBField	src/Data/AbstractDatabase/AbstractDBField.cpp	/^AbstractDBField::~AbstractDBField() {$/;"	f	class:AbstractDBField
AbstractDBFieldValue	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBFieldValue(AbstractDBField* Field);$/;"	p	class:AbstractDBFieldValue
AbstractDBFieldValue	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBFieldValue {$/;"	c
AbstractDBFieldValue	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBFieldValue(AbstractDBField* Field);$/;"	p	class:AbstractDBFieldValue
AbstractDBFieldValue	src/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBFieldValue {$/;"	c
AbstractDBFieldValue::AbstractDBFieldValue	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBFieldValue(AbstractDBField* Field);$/;"	p	class:AbstractDBFieldValue
AbstractDBFieldValue::AbstractDBFieldValue	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBFieldValue(AbstractDBField* Field);$/;"	p	class:AbstractDBFieldValue
AbstractDBFieldValue::field	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBField* field;$/;"	m	class:AbstractDBFieldValue
AbstractDBFieldValue::field	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBField* field;$/;"	m	class:AbstractDBFieldValue
AbstractDBFieldValue::getDateValue	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBDate* getDateValue();$/;"	p	class:AbstractDBFieldValue
AbstractDBFieldValue::getDateValue	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBDate* getDateValue();$/;"	p	class:AbstractDBFieldValue
AbstractDBFieldValue::getIntValue	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int getIntValue();$/;"	p	class:AbstractDBFieldValue
AbstractDBFieldValue::getIntValue	src/Data/AbstractDatabase/AbstractDB.h	/^        int getIntValue();$/;"	p	class:AbstractDBFieldValue
AbstractDBFieldValue::getStringValue	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        char* getStringValue();$/;"	p	class:AbstractDBFieldValue
AbstractDBFieldValue::getStringValue	src/Data/AbstractDatabase/AbstractDB.h	/^        char* getStringValue();$/;"	p	class:AbstractDBFieldValue
AbstractDBFieldValue::vLen	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int vLen;$/;"	m	class:AbstractDBFieldValue
AbstractDBFieldValue::vLen	src/Data/AbstractDatabase/AbstractDB.h	/^        int vLen;$/;"	m	class:AbstractDBFieldValue
AbstractDBFieldValue::value	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        char* value; \/\/ raw character value list$/;"	m	class:AbstractDBFieldValue
AbstractDBFieldValue::value	src/Data/AbstractDatabase/AbstractDB.h	/^        char* value; \/\/ raw character value list$/;"	m	class:AbstractDBFieldValue
AbstractDBFieldValue::~AbstractDBFieldValue	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        virtual ~AbstractDBFieldValue();$/;"	p	class:AbstractDBFieldValue
AbstractDBFieldValue::~AbstractDBFieldValue	src/Data/AbstractDatabase/AbstractDB.h	/^        virtual ~AbstractDBFieldValue();$/;"	p	class:AbstractDBFieldValue
AbstractDBLinkedDataset	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBLinkedDataset {$/;"	c
AbstractDBLinkedDataset	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset	src/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBLinkedDataset {$/;"	c
AbstractDBLinkedDataset	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^AbstractDBLinkedDataset::AbstractDBLinkedDataset() {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::AbstractDBLinkedDataset	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::AbstractDBLinkedDataset	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::AbstractDBLinkedDataset	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^AbstractDBLinkedDataset::AbstractDBLinkedDataset() {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::changed	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        bool changed;$/;"	m	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::changed	src/Data/AbstractDatabase/AbstractDB.h	/^        bool changed;$/;"	m	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::clearAll	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void clearAll(); \/\/ removes all of the elements from the list$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::clearAll	src/Data/AbstractDatabase/AbstractDB.h	/^        void clearAll(); \/\/ removes all of the elements from the list$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::clearAll	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void AbstractDBLinkedDataset::clearAll() {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::clearFreeze	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void clearFreeze();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::clearFreeze	src/Data/AbstractDatabase/AbstractDB.h	/^        void clearFreeze();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::clearFreeze	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void AbstractDBLinkedDataset::clearFreeze() {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::frozenList	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode** frozenList;$/;"	m	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::frozenList	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode** frozenList;$/;"	m	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::frozen_get	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* frozen_get(int index);  \/\/ get an element$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::frozen_get	src/Data/AbstractDatabase/AbstractDB.h	/^        void* frozen_get(int index);  \/\/ get an element$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::frozen_get	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void* AbstractDBLinkedDataset::frozen_get(int index) {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::frozen_remove	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* frozen_remove(int index); \/\/ remove an element$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::frozen_remove	src/Data/AbstractDatabase/AbstractDB.h	/^        void* frozen_remove(int index); \/\/ remove an element$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::frozen_remove	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void* AbstractDBLinkedDataset::frozen_remove(int index) {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::frozen_set	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void frozen_set(int index, void* value); \/\/ set an element$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::frozen_set	src/Data/AbstractDatabase/AbstractDB.h	/^        void frozen_set(int index, void* value); \/\/ set an element$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::frozen_set	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void AbstractDBLinkedDataset::frozen_set(int index, void* value) {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::getSize	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int getSize();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::getSize	src/Data/AbstractDatabase/AbstractDB.h	/^        int getSize();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::getSize	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^int AbstractDBLinkedDataset::getSize() {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::head	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *head, *tail;$/;"	m	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::head	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *head, *tail;$/;"	m	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::length	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int length;$/;"	m	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::length	src/Data/AbstractDatabase/AbstractDB.h	/^        int length;$/;"	m	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::listFreeze	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void listFreeze();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::listFreeze	src/Data/AbstractDatabase/AbstractDB.h	/^        void listFreeze();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::listFreeze	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void AbstractDBLinkedDataset::listFreeze() {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::pop_back	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* pop_back();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::pop_back	src/Data/AbstractDatabase/AbstractDB.h	/^        void* pop_back();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::pop_back	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void* AbstractDBLinkedDataset::pop_back() {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::pop_front	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* pop_front();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::pop_front	src/Data/AbstractDatabase/AbstractDB.h	/^        void* pop_front();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::pop_front	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void* AbstractDBLinkedDataset::pop_front() {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::push_back	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void push_back(void* data);$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::push_back	src/Data/AbstractDatabase/AbstractDB.h	/^        void push_back(void* data);$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::push_back	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void AbstractDBLinkedDataset::push_back(void* data) {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::push_front	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void push_front(void* data);$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::push_front	src/Data/AbstractDatabase/AbstractDB.h	/^        void push_front(void* data);$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::push_front	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void AbstractDBLinkedDataset::push_front(void* data) {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::remove	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* remove(AbstractDBLinkedNode* node);$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::remove	src/Data/AbstractDatabase/AbstractDB.h	/^        void* remove(AbstractDBLinkedNode* node);$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::remove	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void* AbstractDBLinkedDataset::remove(AbstractDBLinkedNode* node) {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::tail	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *head, *tail;$/;"	m	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::tail	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *head, *tail;$/;"	m	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::traverse_find	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        bool traverse_find(void* data); \/\/ find if data exists$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::traverse_find	src/Data/AbstractDatabase/AbstractDB.h	/^        bool traverse_find(void* data); \/\/ find if data exists$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::~AbstractDBLinkedDataset	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBLinkedDataset();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::~AbstractDBLinkedDataset	src/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBLinkedDataset();$/;"	p	class:AbstractDBLinkedDataset
AbstractDBLinkedDataset::~AbstractDBLinkedDataset	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^AbstractDBLinkedDataset::~AbstractDBLinkedDataset() {$/;"	f	class:AbstractDBLinkedDataset
AbstractDBLinkedNode	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBLinkedNode {$/;"	c
AbstractDBLinkedNode	src/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBLinkedNode {$/;"	c
AbstractDBLinkedNode::data	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* data;$/;"	m	class:AbstractDBLinkedNode
AbstractDBLinkedNode::data	src/Data/AbstractDatabase/AbstractDB.h	/^        void* data;$/;"	m	class:AbstractDBLinkedNode
AbstractDBLinkedNode::next	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *prev, *next;$/;"	m	class:AbstractDBLinkedNode
AbstractDBLinkedNode::next	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *prev, *next;$/;"	m	class:AbstractDBLinkedNode
AbstractDBLinkedNode::prev	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *prev, *next;$/;"	m	class:AbstractDBLinkedNode
AbstractDBLinkedNode::prev	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *prev, *next;$/;"	m	class:AbstractDBLinkedNode
AbstractDBRow	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBRow();$/;"	p	class:AbstractDBRow
AbstractDBRow	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBRow {$/;"	c
AbstractDBRow	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBRow();$/;"	p	class:AbstractDBRow
AbstractDBRow	src/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBRow {$/;"	c
AbstractDBRow	src/Data/AbstractDatabase/AbstractDBRow.cpp	/^AbstractDBRow::AbstractDBRow() {$/;"	f	class:AbstractDBRow
AbstractDBRow::AbstractDBRow	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBRow();$/;"	p	class:AbstractDBRow
AbstractDBRow::AbstractDBRow	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBRow();$/;"	p	class:AbstractDBRow
AbstractDBRow::AbstractDBRow	src/Data/AbstractDatabase/AbstractDBRow.cpp	/^AbstractDBRow::AbstractDBRow() {$/;"	f	class:AbstractDBRow
AbstractDBRow::addField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void addField(AbstractDBField* field);$/;"	p	class:AbstractDBRow
AbstractDBRow::addField	src/Data/AbstractDatabase/AbstractDB.h	/^        void addField(AbstractDBField* field);$/;"	p	class:AbstractDBRow
AbstractDBRow::addField	src/Data/AbstractDatabase/AbstractDBRow.cpp	/^void AbstractDBRow::addField(AbstractDBField* field) {$/;"	f	class:AbstractDBRow
AbstractDBRow::clearRow	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void clearRow();$/;"	p	class:AbstractDBRow
AbstractDBRow::clearRow	src/Data/AbstractDatabase/AbstractDB.h	/^        void clearRow();$/;"	p	class:AbstractDBRow
AbstractDBRow::clearRow	src/Data/AbstractDatabase/AbstractDBRow.cpp	/^void AbstractDBRow::clearRow() {$/;"	f	class:AbstractDBRow
AbstractDBRow::fieldList	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* fieldList;$/;"	m	class:AbstractDBRow
AbstractDBRow::fieldList	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* fieldList;$/;"	m	class:AbstractDBRow
AbstractDBRow::getFieldValues	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getFieldValues();$/;"	p	class:AbstractDBRow
AbstractDBRow::getFieldValues	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getFieldValues();$/;"	p	class:AbstractDBRow
AbstractDBRow::mapindex	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int mapindex;$/;"	m	class:AbstractDBRow
AbstractDBRow::mapindex	src/Data/AbstractDatabase/AbstractDB.h	/^        int mapindex;$/;"	m	class:AbstractDBRow
AbstractDBRow::valueList	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* valueList;$/;"	m	class:AbstractDBRow
AbstractDBRow::valueList	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* valueList;$/;"	m	class:AbstractDBRow
AbstractDBTable	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBTable(const char* file); \/\/ no security, Default Base 2$/;"	p	class:AbstractDBTable
AbstractDBTable	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBTable(const char* file, ADB_STOREBASE Base, ADBT_SECURITY Security);$/;"	p	class:AbstractDBTable
AbstractDBTable	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBTable {$/;"	c
AbstractDBTable	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBTable(const char* file); \/\/ no security, Default Base 2$/;"	p	class:AbstractDBTable
AbstractDBTable	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBTable(const char* file, ADB_STOREBASE Base, ADBT_SECURITY Security);$/;"	p	class:AbstractDBTable
AbstractDBTable	src/Data/AbstractDatabase/AbstractDB.h	/^class AbstractDBTable {$/;"	c
AbstractDBTable	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^AbstractDBTable::AbstractDBTable(const char* loc) {$/;"	f	class:AbstractDBTable
AbstractDBTable	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^AbstractDBTable::AbstractDBTable(const char* loc, ADB_STOREBASE Base, ADBT_SECURITY sec) {$/;"	f	class:AbstractDBTable
AbstractDBTable::AbstractDBTable	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBTable(const char* file); \/\/ no security, Default Base 2$/;"	p	class:AbstractDBTable
AbstractDBTable::AbstractDBTable	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBTable(const char* file, ADB_STOREBASE Base, ADBT_SECURITY Security);$/;"	p	class:AbstractDBTable
AbstractDBTable::AbstractDBTable	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBTable(const char* file); \/\/ no security, Default Base 2$/;"	p	class:AbstractDBTable
AbstractDBTable::AbstractDBTable	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBTable(const char* file, ADB_STOREBASE Base, ADBT_SECURITY Security);$/;"	p	class:AbstractDBTable
AbstractDBTable::AbstractDBTable	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^AbstractDBTable::AbstractDBTable(const char* loc) {$/;"	f	class:AbstractDBTable
AbstractDBTable::AbstractDBTable	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^AbstractDBTable::AbstractDBTable(const char* loc, ADB_STOREBASE Base, ADBT_SECURITY sec) {$/;"	f	class:AbstractDBTable
AbstractDBTable::addField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void addField(AbstractDBField* field); \/\/ add a field (insert data into file and change all rows)$/;"	p	class:AbstractDBTable
AbstractDBTable::addField	src/Data/AbstractDatabase/AbstractDB.h	/^        void addField(AbstractDBField* field); \/\/ add a field (insert data into file and change all rows)$/;"	p	class:AbstractDBTable
AbstractDBTable::addField	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^void AbstractDBTable::addField(AbstractDBField* field) {$/;"	f	class:AbstractDBTable
AbstractDBTable::base	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ADB_STOREBASE base;$/;"	m	class:AbstractDBTable
AbstractDBTable::base	src/Data/AbstractDatabase/AbstractDB.h	/^        ADB_STOREBASE base;$/;"	m	class:AbstractDBTable
AbstractDBTable::cache	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBCacheMap *cache;$/;"	m	class:AbstractDBTable
AbstractDBTable::cache	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBCacheMap *cache;$/;"	m	class:AbstractDBTable
AbstractDBTable::deleteField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void deleteField(AbstractDBField* field); \/\/ remove a field$/;"	p	class:AbstractDBTable
AbstractDBTable::deleteField	src/Data/AbstractDatabase/AbstractDB.h	/^        void deleteField(AbstractDBField* field); \/\/ remove a field$/;"	p	class:AbstractDBTable
AbstractDBTable::fields	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset *fields;$/;"	m	class:AbstractDBTable
AbstractDBTable::fields	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset *fields;$/;"	m	class:AbstractDBTable
AbstractDBTable::file	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        fstream file, filetmp;$/;"	m	class:AbstractDBTable
AbstractDBTable::file	src/Data/AbstractDatabase/AbstractDB.h	/^        fstream file, filetmp;$/;"	m	class:AbstractDBTable
AbstractDBTable::fileloc	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        char* fileloc;$/;"	m	class:AbstractDBTable
AbstractDBTable::fileloc	src/Data/AbstractDatabase/AbstractDB.h	/^        char* fileloc;$/;"	m	class:AbstractDBTable
AbstractDBTable::filetmp	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        fstream file, filetmp;$/;"	m	class:AbstractDBTable
AbstractDBTable::filetmp	src/Data/AbstractDatabase/AbstractDB.h	/^        fstream file, filetmp;$/;"	m	class:AbstractDBTable
AbstractDBTable::flushTable	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void flushTable(); \/\/ writes all data in cache to file$/;"	p	class:AbstractDBTable
AbstractDBTable::flushTable	src/Data/AbstractDatabase/AbstractDB.h	/^        void flushTable(); \/\/ writes all data in cache to file$/;"	p	class:AbstractDBTable
AbstractDBTable::flushTable	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^void AbstractDBTable::flushTable() {$/;"	f	class:AbstractDBTable
AbstractDBTable::getAllRows	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getAllRows(); \/\/ SLOW: reads all data from DB file$/;"	p	class:AbstractDBTable
AbstractDBTable::getAllRows	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getAllRows(); \/\/ SLOW: reads all data from DB file$/;"	p	class:AbstractDBTable
AbstractDBTable::getFields	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getFields(); \/\/ returns header that was read from file on init$/;"	p	class:AbstractDBTable
AbstractDBTable::getFields	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getFields(); \/\/ returns header that was read from file on init$/;"	p	class:AbstractDBTable
AbstractDBTable::headersize	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int headersize;$/;"	m	class:AbstractDBTable
AbstractDBTable::headersize	src/Data/AbstractDatabase/AbstractDB.h	/^        int headersize;$/;"	m	class:AbstractDBTable
AbstractDBTable::initFile	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void initFile(const char* file);$/;"	p	class:AbstractDBTable
AbstractDBTable::initFile	src/Data/AbstractDatabase/AbstractDB.h	/^        void initFile(const char* file);$/;"	p	class:AbstractDBTable
AbstractDBTable::initFile	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^void AbstractDBTable::initFile(const char* loc) {$/;"	f	class:AbstractDBTable
AbstractDBTable::insertRow	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void insertRow(int index, AbstractDBRow* row);$/;"	p	class:AbstractDBTable
AbstractDBTable::insertRow	src/Data/AbstractDatabase/AbstractDB.h	/^        void insertRow(int index, AbstractDBRow* row);$/;"	p	class:AbstractDBTable
AbstractDBTable::readHeader	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void readHeader();$/;"	p	class:AbstractDBTable
AbstractDBTable::readHeader	src/Data/AbstractDatabase/AbstractDB.h	/^        void readHeader();$/;"	p	class:AbstractDBTable
AbstractDBTable::readHeader	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^void AbstractDBTable::readHeader() {$/;"	f	class:AbstractDBTable
AbstractDBTable::reinitTable	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void reinitTable(); \/\/ close resources for reinit$/;"	p	class:AbstractDBTable
AbstractDBTable::reinitTable	src/Data/AbstractDatabase/AbstractDB.h	/^        void reinitTable(); \/\/ close resources for reinit$/;"	p	class:AbstractDBTable
AbstractDBTable::reinitTable	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^void AbstractDBTable::reinitTable() {$/;"	f	class:AbstractDBTable
AbstractDBTable::removeIndex	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void removeIndex(int index); \/\/ remove row from index$/;"	p	class:AbstractDBTable
AbstractDBTable::removeIndex	src/Data/AbstractDatabase/AbstractDB.h	/^        void removeIndex(int index); \/\/ remove row from index$/;"	p	class:AbstractDBTable
AbstractDBTable::security	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ADBT_SECURITY security;$/;"	m	class:AbstractDBTable
AbstractDBTable::security	src/Data/AbstractDatabase/AbstractDB.h	/^        ADBT_SECURITY security;$/;"	m	class:AbstractDBTable
AbstractDBTable::seekfirst	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int seekfirst; \/\/ seek to go to get to first row$/;"	m	class:AbstractDBTable
AbstractDBTable::seekfirst	src/Data/AbstractDatabase/AbstractDB.h	/^        int seekfirst; \/\/ seek to go to get to first row$/;"	m	class:AbstractDBTable
AbstractDBTable::seeksize	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int seeksize; \/\/ size total of each row$/;"	m	class:AbstractDBTable
AbstractDBTable::seeksize	src/Data/AbstractDatabase/AbstractDB.h	/^        int seeksize; \/\/ size total of each row$/;"	m	class:AbstractDBTable
AbstractDBTable::~AbstractDBTable	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBTable();$/;"	p	class:AbstractDBTable
AbstractDBTable::~AbstractDBTable	src/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBTable();$/;"	p	class:AbstractDBTable
AbstractDBTable::~AbstractDBTable	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^AbstractDBTable::~AbstractDBTable() {$/;"	f	class:AbstractDBTable
Account	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    Account(double ID, double Value, double key);$/;"	p	class:Account
Account	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^class Account {$/;"	c
Account	src/Gamelogic/Economics/Banking/Account.h	/^    Account(double ID, double Value, double key);$/;"	p	class:Account
Account	src/Gamelogic/Economics/Banking/Account.h	/^class Account {$/;"	c
Account::Account	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    Account(double ID, double Value, double key);$/;"	p	class:Account
Account::Account	src/Gamelogic/Economics/Banking/Account.h	/^    Account(double ID, double Value, double key);$/;"	p	class:Account
Account::challengeKey	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    void challengeKey(CharString passcode); \/\/ Challenge the key, user entering PIN$/;"	p	class:Account
Account::challengeKey	src/Gamelogic/Economics/Banking/Account.h	/^    void challengeKey(CharString passcode); \/\/ Challenge the key, user entering PIN$/;"	p	class:Account
Account::createKey	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    double createKey(CharString passcode); \/\/ Create a key based on a passcode$/;"	p	class:Account
Account::createKey	src/Gamelogic/Economics/Banking/Account.h	/^    double createKey(CharString passcode); \/\/ Create a key based on a passcode$/;"	p	class:Account
Account::getID	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    double getID(); \/\/ return the account id$/;"	p	class:Account
Account::getID	src/Gamelogic/Economics/Banking/Account.h	/^    double getID(); \/\/ return the account id$/;"	p	class:Account
Account::getKey	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    double getKey();$/;"	p	class:Account
Account::getKey	src/Gamelogic/Economics/Banking/Account.h	/^    double getKey();$/;"	p	class:Account
Account::getValue	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    double getValue();$/;"	p	class:Account
Account::getValue	src/Gamelogic/Economics/Banking/Account.h	/^    double getValue();$/;"	p	class:Account
Account::id	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<int> id; \/\/ account id$/;"	m	class:Account
Account::id	src/Gamelogic/Economics/Banking/Account.h	/^    PType<int> id; \/\/ account id$/;"	m	class:Account
Account::interest	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<double> interest; \/\/ percent interest$/;"	m	class:Account
Account::interest	src/Gamelogic/Economics/Banking/Account.h	/^    PType<double> interest; \/\/ percent interest$/;"	m	class:Account
Account::interest_type	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<interestTYPE> interest_type;$/;"	m	class:Account
Account::interest_type	src/Gamelogic/Economics/Banking/Account.h	/^    PType<interestTYPE> interest_type;$/;"	m	class:Account
Account::key	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<double> key; \/\/ number-key for accessing account, hashed$/;"	m	class:Account
Account::key	src/Gamelogic/Economics/Banking/Account.h	/^    PType<double> key; \/\/ number-key for accessing account, hashed$/;"	m	class:Account
Account::main_attribute	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<accountATTRIBUTE> main_attribute; \/\/ account or a loan?$/;"	m	class:Account
Account::main_attribute	src/Gamelogic/Economics/Banking/Account.h	/^    PType<accountATTRIBUTE> main_attribute; \/\/ account or a loan?$/;"	m	class:Account
Account::tick	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    void tick(double tps); \/\/ perform interest ticks$/;"	p	class:Account
Account::tick	src/Gamelogic/Economics/Banking/Account.h	/^    void tick(double tps); \/\/ perform interest ticks$/;"	p	class:Account
Account::transferAccount	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    bool transferAccount(); \/\/ perform a full account transfer$/;"	p	class:Account
Account::transferAccount	src/Gamelogic/Economics/Banking/Account.h	/^    bool transferAccount(); \/\/ perform a full account transfer$/;"	p	class:Account
Account::unlocked	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<bool> unlocked; \/\/ account unlocked$/;"	m	class:Account
Account::unlocked	src/Gamelogic/Economics/Banking/Account.h	/^    PType<bool> unlocked; \/\/ account unlocked$/;"	m	class:Account
Account::value	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<double> value; \/\/ account value$/;"	m	class:Account
Account::value	src/Gamelogic/Economics/Banking/Account.h	/^    PType<double> value; \/\/ account value$/;"	m	class:Account
Account_h_	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^#define Account_h_$/;"	d
Account_h_	src/Gamelogic/Economics/Banking/Account.h	/^#define Account_h_$/;"	d
Actinium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Actinium = new Atom("Actinium", "Ac", 0, 7, 89, 138,88, 10.07,UNKNOWN, 0.012, 1323,3471, 0.12, 3, COLOR_Silver,ELEM_Actinide);$/;"	v
Actinium	src/Engineering/Chemistry/elementals.h	/^const Atom Actinium = new Atom("Actinium", "Ac", 0, 7, 89, 138,88, 10.07,UNKNOWN, 0.012, 1323,3471, 0.12, 3, COLOR_Silver,ELEM_Actinide);$/;"	v
AdjacencyMatrix	include/Eternia/Data/Graph.h	/^        GEdge*** AdjacencyMatrix;$/;"	m	class:Graph
AdjacencyMatrix	src/Data/Graph.h	/^        GEdge*** AdjacencyMatrix;$/;"	m	class:Graph
Aluminum	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Aluminum = new Atom("Aluminum", "Al", 13, 3, 13, 14,12, 2.698,0.000000026, 0.235, 933.47,2792, 0.897, 3, COLOR_Silver,ELEM_Poor);$/;"	v
Aluminum	src/Engineering/Chemistry/elementals.h	/^const Atom Aluminum = new Atom("Aluminum", "Al", 13, 3, 13, 14,12, 2.698,0.000000026, 0.235, 933.47,2792, 0.897, 3, COLOR_Silver,ELEM_Poor);$/;"	v
Americium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Americium = new Atom("Americium", "Am", 0, 7, 95, 148,94, 13.69,UNKNOWN, 0.01, 1449,2880, UNKNOWN, 4, COLOR_Silver,ELEM_Actinide);$/;"	v
Americium	src/Engineering/Chemistry/elementals.h	/^const Atom Americium = new Atom("Americium", "Am", 0, 7, 95, 148,94, 13.69,UNKNOWN, 0.01, 1449,2880, UNKNOWN, 4, COLOR_Silver,ELEM_Actinide);$/;"	v
Ampere	include/Eternia/constants.h	/^        const double Ampere = 1.0;$/;"	m	namespace:physical::unit
Ampere	src/constants.h	/^        const double Ampere = 1.0;$/;"	m	namespace:physical::unit
Amperes	include/Eternia/constants.h	/^        const double Amperes = Ampere;$/;"	m	namespace:physical::unit
Amperes	src/constants.h	/^        const double Amperes = Ampere;$/;"	m	namespace:physical::unit
Angstrom	include/Eternia/constants.h	/^        const double Angstrom = decinanometer;$/;"	m	namespace:physical::unit
Angstrom	src/constants.h	/^        const double Angstrom = decinanometer;$/;"	m	namespace:physical::unit
Angstroms	include/Eternia/constants.h	/^        const double Angstroms = Angstrom;$/;"	m	namespace:physical::unit
Angstroms	src/constants.h	/^        const double Angstroms = Angstrom;$/;"	m	namespace:physical::unit
AntiNeutron	include/Eternia/Engineering/Chemistry/Hadron/AntiNeutron.h	/^        AntiNeutron();$/;"	p	class:AntiNeutron
AntiNeutron	include/Eternia/Engineering/Chemistry/Hadron/AntiNeutron.h	/^class AntiNeutron {$/;"	c
AntiNeutron	src/Engineering/Chemistry/Hadron/AntiNeutron.h	/^        AntiNeutron();$/;"	p	class:AntiNeutron
AntiNeutron	src/Engineering/Chemistry/Hadron/AntiNeutron.h	/^class AntiNeutron {$/;"	c
AntiNeutron::AntiNeutron	include/Eternia/Engineering/Chemistry/Hadron/AntiNeutron.h	/^        AntiNeutron();$/;"	p	class:AntiNeutron
AntiNeutron::AntiNeutron	src/Engineering/Chemistry/Hadron/AntiNeutron.h	/^        AntiNeutron();$/;"	p	class:AntiNeutron
AntiNeutron::~AntiNeutron	include/Eternia/Engineering/Chemistry/Hadron/AntiNeutron.h	/^        virtual ~AntiNeutron();$/;"	p	class:AntiNeutron
AntiNeutron::~AntiNeutron	src/Engineering/Chemistry/Hadron/AntiNeutron.h	/^        virtual ~AntiNeutron();$/;"	p	class:AntiNeutron
AntiNeutron_h_	include/Eternia/Engineering/Chemistry/Hadron/AntiNeutron.h	/^#define AntiNeutron_h_$/;"	d
AntiNeutron_h_	src/Engineering/Chemistry/Hadron/AntiNeutron.h	/^#define AntiNeutron_h_$/;"	d
AntiProton	include/Eternia/Engineering/Chemistry/Hadron/AntiProton.h	/^        AntiProton();$/;"	p	class:AntiProton
AntiProton	include/Eternia/Engineering/Chemistry/Hadron/AntiProton.h	/^class AntiProton {$/;"	c
AntiProton	src/Engineering/Chemistry/Hadron/AntiProton.h	/^        AntiProton();$/;"	p	class:AntiProton
AntiProton	src/Engineering/Chemistry/Hadron/AntiProton.h	/^class AntiProton {$/;"	c
AntiProton::AntiProton	include/Eternia/Engineering/Chemistry/Hadron/AntiProton.h	/^        AntiProton();$/;"	p	class:AntiProton
AntiProton::AntiProton	src/Engineering/Chemistry/Hadron/AntiProton.h	/^        AntiProton();$/;"	p	class:AntiProton
AntiProton::~AntiProton	include/Eternia/Engineering/Chemistry/Hadron/AntiProton.h	/^        virtual ~AntiProton();$/;"	p	class:AntiProton
AntiProton::~AntiProton	src/Engineering/Chemistry/Hadron/AntiProton.h	/^        virtual ~AntiProton();$/;"	p	class:AntiProton
AntiProton_h_	include/Eternia/Engineering/Chemistry/Hadron/AntiProton.h	/^#define AntiProton_h_$/;"	d
AntiProton_h_	src/Engineering/Chemistry/Hadron/AntiProton.h	/^#define AntiProton_h_$/;"	d
Antimony	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Antimony = new Atom("Antimony", "Sb", 15, 5, 51, 71,50, 6.685,0.0000004, 0.024, 903.78,1860, 0.207, 5, COLOR_Silver,ELEM_Metalloid);$/;"	v
Antimony	src/Engineering/Chemistry/elementals.h	/^const Atom Antimony = new Atom("Antimony", "Sb", 15, 5, 51, 71,50, 6.685,0.0000004, 0.024, 903.78,1860, 0.207, 5, COLOR_Silver,ELEM_Metalloid);$/;"	v
Argon	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Argon = new Atom("Argon", "Ar", 18, 3, 18, 22,17, 0.0017837,UNKNOWN, 0.00001772, 83.8,87.3, 0.52, 0, COLOR_None,ELEM_Noble);$/;"	v
Argon	src/Engineering/Chemistry/elementals.h	/^const Atom Argon = new Atom("Argon", "Ar", 18, 3, 18, 22,17, 0.0017837,UNKNOWN, 0.00001772, 83.8,87.3, 0.52, 0, COLOR_None,ELEM_Noble);$/;"	v
Arsenic	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Arsenic = new Atom("Arsenic", "As", 15, 4, 33, 42,32, 5.776,0.0000003, 0.05, 10907,887, 0.329, 5, COLOR_Silver,ELEM_Metalloid);$/;"	v
Arsenic	src/Engineering/Chemistry/elementals.h	/^const Atom Arsenic = new Atom("Arsenic", "As", 15, 4, 33, 42,32, 5.776,0.0000003, 0.05, 10907,887, 0.329, 5, COLOR_Silver,ELEM_Metalloid);$/;"	v
Astanine	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Astanine = new Atom("Astanine", "At", 17, 6, 85, 125,84, 7,UNKNOWN, 0.002, 575,610, UNKNOWN, 7, COLOR_Silver,ELEM_Halogen);$/;"	v
Astanine	src/Engineering/Chemistry/elementals.h	/^const Atom Astanine = new Atom("Astanine", "At", 17, 6, 85, 125,84, 7,UNKNOWN, 0.002, 575,610, UNKNOWN, 7, COLOR_Silver,ELEM_Halogen);$/;"	v
Asteroid	include/Eternia/Gamelogic/Environment/Space/Asteroid.h	/^        Asteroid();$/;"	p	class:Asteroid
Asteroid	include/Eternia/Gamelogic/Environment/Space/Asteroid.h	/^class Asteroid {$/;"	c
Asteroid	src/Gamelogic/Environment/Space/Asteroid.h	/^        Asteroid();$/;"	p	class:Asteroid
Asteroid	src/Gamelogic/Environment/Space/Asteroid.h	/^class Asteroid {$/;"	c
Asteroid::Asteroid	include/Eternia/Gamelogic/Environment/Space/Asteroid.h	/^        Asteroid();$/;"	p	class:Asteroid
Asteroid::Asteroid	src/Gamelogic/Environment/Space/Asteroid.h	/^        Asteroid();$/;"	p	class:Asteroid
Asteroid_H_	include/Eternia/Gamelogic/Environment/Space/Asteroid.h	/^#define Asteroid_H_$/;"	d
Asteroid_H_	src/Gamelogic/Environment/Space/Asteroid.h	/^#define Asteroid_H_$/;"	d
Atmosphere	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Atmosphere();$/;"	p	class:Atmosphere
Atmosphere	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Atmosphere(long long seed, long long seed2);$/;"	p	class:Atmosphere
Atmosphere	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^class Atmosphere {$/;"	c
Atmosphere	src/Gamelogic/Environment/Planet/Planet.h	/^    Atmosphere();$/;"	p	class:Atmosphere
Atmosphere	src/Gamelogic/Environment/Planet/Planet.h	/^    Atmosphere(long long seed, long long seed2);$/;"	p	class:Atmosphere
Atmosphere	src/Gamelogic/Environment/Planet/Planet.h	/^class Atmosphere {$/;"	c
Atmosphere	src/Gamelogic/Environment/Planet/Planet_Atmosphere.cpp	/^Atmosphere::Atmosphere(){}$/;"	f	class:Atmosphere
Atmosphere	src/Gamelogic/Environment/Planet/Planet_Atmosphere.cpp	/^Atmosphere::Atmosphere(long long seed, long long seed2){$/;"	f	class:Atmosphere
Atmosphere::Atmosphere	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Atmosphere();$/;"	p	class:Atmosphere
Atmosphere::Atmosphere	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Atmosphere(long long seed, long long seed2);$/;"	p	class:Atmosphere
Atmosphere::Atmosphere	src/Gamelogic/Environment/Planet/Planet.h	/^    Atmosphere();$/;"	p	class:Atmosphere
Atmosphere::Atmosphere	src/Gamelogic/Environment/Planet/Planet.h	/^    Atmosphere(long long seed, long long seed2);$/;"	p	class:Atmosphere
Atmosphere::Atmosphere	src/Gamelogic/Environment/Planet/Planet_Atmosphere.cpp	/^Atmosphere::Atmosphere(){}$/;"	f	class:Atmosphere
Atmosphere::Atmosphere	src/Gamelogic/Environment/Planet/Planet_Atmosphere.cpp	/^Atmosphere::Atmosphere(long long seed, long long seed2){$/;"	f	class:Atmosphere
Atmosphere::getDensity	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    double getDensity(double relativeHeight); \/\/ returns current air density at location, relative to ground$/;"	p	class:Atmosphere
Atmosphere::getDensity	src/Gamelogic/Environment/Planet/Planet.h	/^    double getDensity(double relativeHeight); \/\/ returns current air density at location, relative to ground$/;"	p	class:Atmosphere
Atmosphere::getDensity	src/Gamelogic/Environment/Planet/Planet_Atmosphere.cpp	/^double Atmosphere::getDensity(double relativeHeight) {$/;"	f	class:Atmosphere
Atmosphere::groundDensity	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    double groundDensity; \/\/ density of atmosphere near ground. (M*V, km*m^3)$/;"	m	class:Atmosphere
Atmosphere::groundDensity	src/Gamelogic/Environment/Planet/Planet.h	/^    double groundDensity; \/\/ density of atmosphere near ground. (M*V, km*m^3)$/;"	m	class:Atmosphere
Atmosphere::height	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    double height; \/\/ max height (km)$/;"	m	class:Atmosphere
Atmosphere::height	src/Gamelogic/Environment/Planet/Planet.h	/^    double height; \/\/ max height (km)$/;"	m	class:Atmosphere
Atmosphere::seed	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2;$/;"	m	class:Atmosphere
Atmosphere::seed	src/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2;$/;"	m	class:Atmosphere
Atmosphere::seed2	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2;$/;"	m	class:Atmosphere
Atmosphere::seed2	src/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2;$/;"	m	class:Atmosphere
Atmosphere::~Atmosphere	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    virtual ~Atmosphere();$/;"	p	class:Atmosphere
Atmosphere::~Atmosphere	src/Gamelogic/Environment/Planet/Planet.h	/^    virtual ~Atmosphere();$/;"	p	class:Atmosphere
Atmosphere::~Atmosphere	src/Gamelogic/Environment/Planet/Planet_Atmosphere.cpp	/^Atmosphere::~Atmosphere(){$/;"	f	class:Atmosphere
Atom	include/Eternia/Engineering/Chemistry/Atom.h	/^        Atom(const char* Name, const char* label, double Group, double Period, double Protons, double Neutrons, double Electrons, double Density, double Resistivity, double ThermConductivity, double Melting, double Boiling, double SpecificHeat, double Valence, vertex Color, ELEMENT_TYPE Type); \/\/ assign base constants$/;"	p	class:Atom
Atom	include/Eternia/Engineering/Chemistry/Atom.h	/^class Atom {$/;"	c
Atom	src/Engineering/Chemistry/Atom.cpp	/^Atom::Atom(const char* Name, const char* label, double Group, double Period,$/;"	f	class:Atom
Atom	src/Engineering/Chemistry/Atom.h	/^        Atom(const char* Name, const char* label, double Group, double Period, double Protons, double Neutrons, double Electrons, double Density, double Resistivity, double ThermConductivity, double Melting, double Boiling, double SpecificHeat, double Valence, vertex Color, ELEMENT_TYPE Type); \/\/ assign base constants$/;"	p	class:Atom
Atom	src/Engineering/Chemistry/Atom.h	/^class Atom {$/;"	c
Atom::Atom	include/Eternia/Engineering/Chemistry/Atom.h	/^        Atom(const char* Name, const char* label, double Group, double Period, double Protons, double Neutrons, double Electrons, double Density, double Resistivity, double ThermConductivity, double Melting, double Boiling, double SpecificHeat, double Valence, vertex Color, ELEMENT_TYPE Type); \/\/ assign base constants$/;"	p	class:Atom
Atom::Atom	src/Engineering/Chemistry/Atom.cpp	/^Atom::Atom(const char* Name, const char* label, double Group, double Period,$/;"	f	class:Atom
Atom::Atom	src/Engineering/Chemistry/Atom.h	/^        Atom(const char* Name, const char* label, double Group, double Period, double Protons, double Neutrons, double Electrons, double Density, double Resistivity, double ThermConductivity, double Melting, double Boiling, double SpecificHeat, double Valence, vertex Color, ELEMENT_TYPE Type); \/\/ assign base constants$/;"	p	class:Atom
Atom::boiling_point	include/Eternia/Engineering/Chemistry/Atom.h	/^        double boiling_point;$/;"	m	class:Atom
Atom::boiling_point	src/Engineering/Chemistry/Atom.h	/^        double boiling_point;$/;"	m	class:Atom
Atom::color	include/Eternia/Engineering/Chemistry/Atom.h	/^        vertex color;$/;"	m	class:Atom
Atom::color	src/Engineering/Chemistry/Atom.h	/^        vertex color;$/;"	m	class:Atom
Atom::density	include/Eternia/Engineering/Chemistry/Atom.h	/^        double density;$/;"	m	class:Atom
Atom::density	src/Engineering/Chemistry/Atom.h	/^        double density;$/;"	m	class:Atom
Atom::electrons	include/Eternia/Engineering/Chemistry/Atom.h	/^        int electrons;$/;"	m	class:Atom
Atom::electrons	src/Engineering/Chemistry/Atom.h	/^        int electrons;$/;"	m	class:Atom
Atom::getAtom	include/Eternia/Engineering/Chemistry/Atom.h	/^        Atom* getAtom(); \/\/ get this material's atom.$/;"	p	class:Atom
Atom::getAtom	src/Engineering/Chemistry/Atom.cpp	/^Atom* Atom::getAtom() {} \/\/ get this material's atom.$/;"	f	class:Atom
Atom::getAtom	src/Engineering/Chemistry/Atom.h	/^        Atom* getAtom(); \/\/ get this material's atom.$/;"	p	class:Atom
Atom::getAtomicNumber	include/Eternia/Engineering/Chemistry/Atom.h	/^        double getAtomicNumber(); \/\/ N = p$/;"	p	class:Atom
Atom::getAtomicNumber	src/Engineering/Chemistry/Atom.cpp	/^double Atom::getAtomicNumber() {$/;"	f	class:Atom
Atom::getAtomicNumber	src/Engineering/Chemistry/Atom.h	/^        double getAtomicNumber(); \/\/ N = p$/;"	p	class:Atom
Atom::getAtomicWeight	include/Eternia/Engineering/Chemistry/Atom.h	/^        double getAtomicWeight(); \/\/ W = (p+n+e)$/;"	p	class:Atom
Atom::getAtomicWeight	src/Engineering/Chemistry/Atom.cpp	/^double Atom::getAtomicWeight() {$/;"	f	class:Atom
Atom::getAtomicWeight	src/Engineering/Chemistry/Atom.h	/^        double getAtomicWeight(); \/\/ W = (p+n+e)$/;"	p	class:Atom
Atom::getConductivity	include/Eternia/Engineering/Chemistry/Atom.h	/^        double getConductivity();$/;"	p	class:Atom
Atom::getConductivity	src/Engineering/Chemistry/Atom.cpp	/^double Atom::getConductivity() {$/;"	f	class:Atom
Atom::getConductivity	src/Engineering/Chemistry/Atom.h	/^        double getConductivity();$/;"	p	class:Atom
Atom::getPhase	include/Eternia/Engineering/Chemistry/Atom.h	/^        CHEMPHASE getPhase(double temp, double pressure); \/\/ get the phase of the material$/;"	p	class:Atom
Atom::getPhase	src/Engineering/Chemistry/Atom.cpp	/^CHEMPHASE Atom::getPhase(double temp, double Pressure) {$/;"	f	class:Atom
Atom::getPhase	src/Engineering/Chemistry/Atom.h	/^        CHEMPHASE getPhase(double temp, double pressure); \/\/ get the phase of the material$/;"	p	class:Atom
Atom::group	include/Eternia/Engineering/Chemistry/Atom.h	/^        char group;$/;"	m	class:Atom
Atom::group	src/Engineering/Chemistry/Atom.h	/^        char group;$/;"	m	class:Atom
Atom::isBondPossible	include/Eternia/Engineering/Chemistry/Atom.h	/^        bool isBondPossible(Atom* atom); \/\/ checks valence and ions$/;"	p	class:Atom
Atom::isBondPossible	src/Engineering/Chemistry/Atom.h	/^        bool isBondPossible(Atom* atom); \/\/ checks valence and ions$/;"	p	class:Atom
Atom::melting_point	include/Eternia/Engineering/Chemistry/Atom.h	/^        double melting_point;$/;"	m	class:Atom
Atom::melting_point	src/Engineering/Chemistry/Atom.h	/^        double melting_point;$/;"	m	class:Atom
Atom::name	include/Eternia/Engineering/Chemistry/Atom.h	/^        char* name;$/;"	m	class:Atom
Atom::name	src/Engineering/Chemistry/Atom.h	/^        char* name;$/;"	m	class:Atom
Atom::neutrons	include/Eternia/Engineering/Chemistry/Atom.h	/^        int neutrons;$/;"	m	class:Atom
Atom::neutrons	src/Engineering/Chemistry/Atom.h	/^        int neutrons;$/;"	m	class:Atom
Atom::period	include/Eternia/Engineering/Chemistry/Atom.h	/^        char period;$/;"	m	class:Atom
Atom::period	src/Engineering/Chemistry/Atom.h	/^        char period;$/;"	m	class:Atom
Atom::protons	include/Eternia/Engineering/Chemistry/Atom.h	/^        int protons;$/;"	m	class:Atom
Atom::protons	src/Engineering/Chemistry/Atom.h	/^        int protons;$/;"	m	class:Atom
Atom::resistivity	include/Eternia/Engineering/Chemistry/Atom.h	/^        double resistivity;$/;"	m	class:Atom
Atom::resistivity	src/Engineering/Chemistry/Atom.h	/^        double resistivity;$/;"	m	class:Atom
Atom::specific_heat	include/Eternia/Engineering/Chemistry/Atom.h	/^        double specific_heat;$/;"	m	class:Atom
Atom::specific_heat	src/Engineering/Chemistry/Atom.h	/^        double specific_heat;$/;"	m	class:Atom
Atom::symbol	include/Eternia/Engineering/Chemistry/Atom.h	/^        char* symbol;$/;"	m	class:Atom
Atom::symbol	src/Engineering/Chemistry/Atom.h	/^        char* symbol;$/;"	m	class:Atom
Atom::thermal_conductivity	include/Eternia/Engineering/Chemistry/Atom.h	/^        double thermal_conductivity;$/;"	m	class:Atom
Atom::thermal_conductivity	src/Engineering/Chemistry/Atom.h	/^        double thermal_conductivity;$/;"	m	class:Atom
Atom::type	include/Eternia/Engineering/Chemistry/Atom.h	/^        ELEMENT_TYPE type;$/;"	m	class:Atom
Atom::type	src/Engineering/Chemistry/Atom.h	/^        ELEMENT_TYPE type;$/;"	m	class:Atom
Atom::valence	include/Eternia/Engineering/Chemistry/Atom.h	/^        char valence; \/\/ "bond-slots"$/;"	m	class:Atom
Atom::valence	src/Engineering/Chemistry/Atom.h	/^        char valence; \/\/ "bond-slots"$/;"	m	class:Atom
Atom::~Atom	include/Eternia/Engineering/Chemistry/Atom.h	/^        virtual ~Atom();$/;"	p	class:Atom
Atom::~Atom	src/Engineering/Chemistry/Atom.cpp	/^Atom::~Atom() {}$/;"	f	class:Atom
Atom::~Atom	src/Engineering/Chemistry/Atom.h	/^        virtual ~Atom();$/;"	p	class:Atom
AtomBond	include/Eternia/Engineering/Chemistry/Composite.h	/^class AtomBond {$/;"	c
AtomBond	src/Engineering/Chemistry/Composite.h	/^class AtomBond {$/;"	c
AtomBond::a	include/Eternia/Engineering/Chemistry/Composite.h	/^	Atom *a, *b;$/;"	m	class:AtomBond
AtomBond::a	src/Engineering/Chemistry/Composite.h	/^	Atom *a, *b;$/;"	m	class:AtomBond
AtomBond::b	include/Eternia/Engineering/Chemistry/Composite.h	/^	Atom *a, *b;$/;"	m	class:AtomBond
AtomBond::b	src/Engineering/Chemistry/Composite.h	/^	Atom *a, *b;$/;"	m	class:AtomBond
AtomBond::length	include/Eternia/Engineering/Chemistry/Composite.h	/^	float length; \/\/ distance, normal in pico-meters$/;"	m	class:AtomBond
AtomBond::length	src/Engineering/Chemistry/Composite.h	/^	float length; \/\/ distance, normal in pico-meters$/;"	m	class:AtomBond
AtomBond::strength	include/Eternia/Engineering/Chemistry/Composite.h	/^	float strength; \/\/ strength, in kJ\/mol$/;"	m	class:AtomBond
AtomBond::strength	src/Engineering/Chemistry/Composite.h	/^	float strength; \/\/ strength, in kJ\/mol$/;"	m	class:AtomBond
AudioBuffer	include/Eternia/Audio/AudioBuffer.h	/^    AudioBuffer(int bitrate);$/;"	p	class:AudioBuffer
AudioBuffer	include/Eternia/Audio/AudioBuffer.h	/^class AudioBuffer{$/;"	c
AudioBuffer	src/Audio/AudioBuffer.h	/^    AudioBuffer(int bitrate);$/;"	p	class:AudioBuffer
AudioBuffer	src/Audio/AudioBuffer.h	/^class AudioBuffer{$/;"	c
AudioBuffer::AudioBuffer	include/Eternia/Audio/AudioBuffer.h	/^    AudioBuffer(int bitrate);$/;"	p	class:AudioBuffer
AudioBuffer::AudioBuffer	src/Audio/AudioBuffer.h	/^    AudioBuffer(int bitrate);$/;"	p	class:AudioBuffer
AudioBuffer::add	include/Eternia/Audio/AudioBuffer.h	/^    void add(float value);$/;"	p	class:AudioBuffer
AudioBuffer::add	src/Audio/AudioBuffer.h	/^    void add(float value);$/;"	p	class:AudioBuffer
AudioBuffer::buffer	include/Eternia/Audio/AudioBuffer.h	/^    Queue buffer;$/;"	m	class:AudioBuffer
AudioBuffer::buffer	src/Audio/AudioBuffer.h	/^    Queue buffer;$/;"	m	class:AudioBuffer
AudioBuffer::get	include/Eternia/Audio/AudioBuffer.h	/^    float get();$/;"	p	class:AudioBuffer
AudioBuffer::get	src/Audio/AudioBuffer.h	/^    float get();$/;"	p	class:AudioBuffer
AudioBuffer::getBitrate	include/Eternia/Audio/AudioBuffer.h	/^    int getBitrate();$/;"	p	class:AudioBuffer
AudioBuffer::getBitrate	src/Audio/AudioBuffer.h	/^    int getBitrate();$/;"	p	class:AudioBuffer
AudioBuffer::rate	include/Eternia/Audio/AudioBuffer.h	/^    int rate;$/;"	m	class:AudioBuffer
AudioBuffer::rate	src/Audio/AudioBuffer.h	/^    int rate;$/;"	m	class:AudioBuffer
Autopilot	include/Eternia/Gamelogic/Ship/Autopilot/Autopilot.h	/^        Autopilot(Ship* tship); \/\/ Ship to autopilot$/;"	p	class:Autopilot
Autopilot	include/Eternia/Gamelogic/Ship/Autopilot/Autopilot.h	/^class Autopilot {$/;"	c
Autopilot	src/Gamelogic/Ship/Autopilot/Autopilot.h	/^        Autopilot(Ship* tship); \/\/ Ship to autopilot$/;"	p	class:Autopilot
Autopilot	src/Gamelogic/Ship/Autopilot/Autopilot.h	/^class Autopilot {$/;"	c
Autopilot::Autopilot	include/Eternia/Gamelogic/Ship/Autopilot/Autopilot.h	/^        Autopilot(Ship* tship); \/\/ Ship to autopilot$/;"	p	class:Autopilot
Autopilot::Autopilot	src/Gamelogic/Ship/Autopilot/Autopilot.h	/^        Autopilot(Ship* tship); \/\/ Ship to autopilot$/;"	p	class:Autopilot
Autopilot::Pilot	include/Eternia/Gamelogic/Ship/Autopilot/Autopilot.h	/^        void Pilot(); \/\/ Pilot this ship$/;"	p	class:Autopilot
Autopilot::Pilot	src/Gamelogic/Ship/Autopilot/Autopilot.h	/^        void Pilot(); \/\/ Pilot this ship$/;"	p	class:Autopilot
Autopilot::Scanner	include/Eternia/Gamelogic/Ship/Autopilot/Autopilot.h	/^        void Scanner(); \/\/ Scan for ships to avoid. This is based on heading, size.$/;"	p	class:Autopilot
Autopilot::Scanner	src/Gamelogic/Ship/Autopilot/Autopilot.h	/^        void Scanner(); \/\/ Scan for ships to avoid. This is based on heading, size.$/;"	p	class:Autopilot
Avalanche_DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Avalanche_DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Avatar	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        Avatar(); \/\/ define all parameters$/;"	p	class:Avatar
Avatar	include/Eternia/Gamelogic/Avatar/Avatar.h	/^class Avatar : public SpecificSerializer {$/;"	c
Avatar	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^class Avatar;$/;"	x
Avatar	src/Gamelogic/Avatar/Avatar.cpp	/^Avatar::Avatar() {$/;"	f	class:Avatar
Avatar	src/Gamelogic/Avatar/Avatar.h	/^        Avatar(); \/\/ define all parameters$/;"	p	class:Avatar
Avatar	src/Gamelogic/Avatar/Avatar.h	/^class Avatar : public SpecificSerializer {$/;"	c
Avatar	src/Gamelogic/Inventory/PortableArmor.h	/^class Avatar;$/;"	x
Avatar::Avatar	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        Avatar(); \/\/ define all parameters$/;"	p	class:Avatar
Avatar::Avatar	src/Gamelogic/Avatar/Avatar.cpp	/^Avatar::Avatar() {$/;"	f	class:Avatar
Avatar::Avatar	src/Gamelogic/Avatar/Avatar.h	/^        Avatar(); \/\/ define all parameters$/;"	p	class:Avatar
Avatar::Die	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void Die(); \/\/ this avatar dies (Test for clones if Player or NPC)$/;"	p	class:Avatar
Avatar::Die	src/Gamelogic/Avatar/Avatar.h	/^        void Die(); \/\/ this avatar dies (Test for clones if Player or NPC)$/;"	p	class:Avatar
Avatar::addDisease	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void addDisease(Disease* d); \/\/ diseases act like debuffs, but for long-periods$/;"	p	class:Avatar
Avatar::addDisease	src/Gamelogic/Avatar/Avatar.cpp	/^void Avatar::addDisease(Disease* d) {$/;"	f	class:Avatar
Avatar::addDisease	src/Gamelogic/Avatar/Avatar.h	/^        void addDisease(Disease* d); \/\/ diseases act like debuffs, but for long-periods$/;"	p	class:Avatar
Avatar::appearance	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        AvatarAppearance appearance;$/;"	m	class:Avatar
Avatar::appearance	src/Gamelogic/Avatar/Avatar.h	/^        AvatarAppearance appearance;$/;"	m	class:Avatar
Avatar::calcAvatarExp	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        double calcAvatarExp(Avatar* av); \/\/ calculate exp based on Avatar's stats.$/;"	p	class:Avatar
Avatar::calcAvatarExp	src/Gamelogic/Avatar/Avatar.cpp	/^double Avatar::calcAvatarExp(Avatar* av) {$/;"	f	class:Avatar
Avatar::calcAvatarExp	src/Gamelogic/Avatar/Avatar.h	/^        double calcAvatarExp(Avatar* av); \/\/ calculate exp based on Avatar's stats.$/;"	p	class:Avatar
Avatar::crafting	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        CraftingStats crafting; \/\/ crafting stats$/;"	m	class:Avatar
Avatar::crafting	src/Gamelogic/Avatar/Avatar.h	/^        CraftingStats crafting; \/\/ crafting stats$/;"	m	class:Avatar
Avatar::damage	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        DAMAGERESULT damage(BODYPART part, double k); \/\/ damage this character with k damage (note: defenses are taken into account)$/;"	p	class:Avatar
Avatar::damage	src/Gamelogic/Avatar/Avatar.cpp	/^DAMAGERESULT Avatar::damage(BODYPART part, double k) {$/;"	f	class:Avatar
Avatar::damage	src/Gamelogic/Avatar/Avatar.h	/^        DAMAGERESULT damage(BODYPART part, double k); \/\/ damage this character with k damage (note: defenses are taken into account)$/;"	p	class:Avatar
Avatar::damageOther	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        DAMAGERESULT damageOther(Avatar* a, BODYPART part, double k); \/\/ damage another character with k damage (note: defenses are taken into account)$/;"	p	class:Avatar
Avatar::damageOther	src/Gamelogic/Avatar/Avatar.cpp	/^DAMAGERESULT Avatar::damageOther(Avatar* other, BODYPART part, double k) {$/;"	f	class:Avatar
Avatar::damageOther	src/Gamelogic/Avatar/Avatar.h	/^        DAMAGERESULT damageOther(Avatar* a, BODYPART part, double k); \/\/ damage another character with k damage (note: defenses are taken into account)$/;"	p	class:Avatar
Avatar::doAnimation	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void doAnimation(); \/\/ do a defined action. (Dance, hit, die, ect.)$/;"	p	class:Avatar
Avatar::doAnimation	src/Gamelogic/Avatar/Avatar.cpp	/^void Avatar::doAnimation() {$/;"	f	class:Avatar
Avatar::doAnimation	src/Gamelogic/Avatar/Avatar.h	/^        void doAnimation(); \/\/ do a defined action. (Dance, hit, die, ect.)$/;"	p	class:Avatar
Avatar::gear	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        AvatarGear gear; \/\/ equiped gear$/;"	m	class:Avatar
Avatar::gear	src/Gamelogic/Avatar/Avatar.h	/^        AvatarGear gear; \/\/ equiped gear$/;"	m	class:Avatar
Avatar::getStats	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        CharString getStats(); \/\/ retrive stats to a string.$/;"	p	class:Avatar
Avatar::getStats	src/Gamelogic/Avatar/Avatar.cpp	/^CharString Avatar::getStats() {$/;"	f	class:Avatar
Avatar::getStats	src/Gamelogic/Avatar/Avatar.h	/^        CharString getStats(); \/\/ retrive stats to a string.$/;"	p	class:Avatar
Avatar::hasDrone	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        PType<bool> hasDrone, hasShield;$/;"	m	class:Avatar
Avatar::hasDrone	src/Gamelogic/Avatar/Avatar.h	/^        PType<bool> hasDrone, hasShield;$/;"	m	class:Avatar
Avatar::hasShield	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        PType<bool> hasDrone, hasShield;$/;"	m	class:Avatar
Avatar::hasShield	src/Gamelogic/Avatar/Avatar.h	/^        PType<bool> hasDrone, hasShield;$/;"	m	class:Avatar
Avatar::health	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        AvatarHealth health; \/\/ Advanced Health class that includes physiology, diseases, ect.$/;"	m	class:Avatar
Avatar::health	src/Gamelogic/Avatar/Avatar.h	/^        AvatarHealth health; \/\/ Advanced Health class that includes physiology, diseases, ect.$/;"	m	class:Avatar
Avatar::killAvatar	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void killAvatar(Avatar* av); \/\/ Player\/NPC\/Monster kills another. EXP is calculated then distributed.$/;"	p	class:Avatar
Avatar::killAvatar	src/Gamelogic/Avatar/Avatar.cpp	/^void Avatar::killAvatar(Avatar* av) {$/;"	f	class:Avatar
Avatar::killAvatar	src/Gamelogic/Avatar/Avatar.h	/^        void killAvatar(Avatar* av); \/\/ Player\/NPC\/Monster kills another. EXP is calculated then distributed.$/;"	p	class:Avatar
Avatar::loadStats	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void loadStats(CharString statsString); \/\/ load stats directly from a string.$/;"	p	class:Avatar
Avatar::loadStats	src/Gamelogic/Avatar/Avatar.cpp	/^void Avatar::loadStats(CharString statsString) {$/;"	f	class:Avatar
Avatar::loadStats	src/Gamelogic/Avatar/Avatar.h	/^        void loadStats(CharString statsString); \/\/ load stats directly from a string.$/;"	p	class:Avatar
Avatar::loc	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        Location loc; \/\/ current location$/;"	m	class:Avatar
Avatar::loc	src/Gamelogic/Avatar/Avatar.h	/^        Location loc; \/\/ current location$/;"	m	class:Avatar
Avatar::name	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        CharString name;$/;"	m	class:Avatar
Avatar::name	src/Gamelogic/Avatar/Avatar.h	/^        CharString name;$/;"	m	class:Avatar
Avatar::skills	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        SkillSet skills;$/;"	m	class:Avatar
Avatar::skills	src/Gamelogic/Avatar/Avatar.h	/^        SkillSet skills;$/;"	m	class:Avatar
Avatar::study	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void study(StudyTYPE st, double value);$/;"	p	class:Avatar
Avatar::study	src/Gamelogic/Avatar/Avatar.h	/^        void study(StudyTYPE st, double value);$/;"	p	class:Avatar
Avatar::tick	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void tick(double t); \/\/ game tick, evaluate avatar health, equips, skills, ect.$/;"	p	class:Avatar
Avatar::tick	src/Gamelogic/Avatar/Avatar.cpp	/^void Avatar::tick(double tps) {$/;"	f	class:Avatar
Avatar::tick	src/Gamelogic/Avatar/Avatar.h	/^        void tick(double t); \/\/ game tick, evaluate avatar health, equips, skills, ect.$/;"	p	class:Avatar
Avatar::type	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        AvatarTYPE type;$/;"	m	class:Avatar
Avatar::type	src/Gamelogic/Avatar/Avatar.h	/^        AvatarTYPE type;$/;"	m	class:Avatar
AvatarAppearance	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    AvatarAppearance();$/;"	p	class:AvatarAppearance
AvatarAppearance	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^class AvatarAppearance : public SpecificSerializer{$/;"	c
AvatarAppearance	src/Gamelogic/Avatar/AvatarAppearance.cpp	/^AvatarAppearance::AvatarAppearance(){$/;"	f	class:AvatarAppearance
AvatarAppearance	src/Gamelogic/Avatar/AvatarAppearance.h	/^    AvatarAppearance();$/;"	p	class:AvatarAppearance
AvatarAppearance	src/Gamelogic/Avatar/AvatarAppearance.h	/^class AvatarAppearance : public SpecificSerializer{$/;"	c
AvatarAppearance::AvatarAppearance	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    AvatarAppearance();$/;"	p	class:AvatarAppearance
AvatarAppearance::AvatarAppearance	src/Gamelogic/Avatar/AvatarAppearance.cpp	/^AvatarAppearance::AvatarAppearance(){$/;"	f	class:AvatarAppearance
AvatarAppearance::AvatarAppearance	src/Gamelogic/Avatar/AvatarAppearance.h	/^    AvatarAppearance();$/;"	p	class:AvatarAppearance
AvatarAppearance::arm_diameter	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
AvatarAppearance::arm_diameter	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
AvatarAppearance::attack_sfx	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString attack_sfx; \/\/ list of sfx used when fighting$/;"	m	class:AvatarAppearance
AvatarAppearance::attack_sfx	src/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString attack_sfx; \/\/ list of sfx used when fighting$/;"	m	class:AvatarAppearance
AvatarAppearance::beard_color	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex hair_color, beard_color, eyebrow_color; \/\/ hair color$/;"	m	class:AvatarAppearance
AvatarAppearance::beard_color	src/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex hair_color, beard_color, eyebrow_color; \/\/ hair color$/;"	m	class:AvatarAppearance
AvatarAppearance::eye_color	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex eye_color; \/\/ eye color$/;"	m	class:AvatarAppearance
AvatarAppearance::eye_color	src/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex eye_color; \/\/ eye color$/;"	m	class:AvatarAppearance
AvatarAppearance::eyebrow_color	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex hair_color, beard_color, eyebrow_color; \/\/ hair color$/;"	m	class:AvatarAppearance
AvatarAppearance::eyebrow_color	src/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex hair_color, beard_color, eyebrow_color; \/\/ hair color$/;"	m	class:AvatarAppearance
AvatarAppearance::eyebrow_height	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> eyebrow_height, nose_height, mouth_height;$/;"	m	class:AvatarAppearance
AvatarAppearance::eyebrow_height	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> eyebrow_height, nose_height, mouth_height;$/;"	m	class:AvatarAppearance
AvatarAppearance::gender	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<AP_GENDER> gender;$/;"	m	class:AvatarAppearance
AvatarAppearance::gender	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<AP_GENDER> gender;$/;"	m	class:AvatarAppearance
AvatarAppearance::hair_color	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex hair_color, beard_color, eyebrow_color; \/\/ hair color$/;"	m	class:AvatarAppearance
AvatarAppearance::hair_color	src/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex hair_color, beard_color, eyebrow_color; \/\/ hair color$/;"	m	class:AvatarAppearance
AvatarAppearance::hair_curliness	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hair_length, hair_gloss, hair_curliness; \/\/ growable hair length$/;"	m	class:AvatarAppearance
AvatarAppearance::hair_curliness	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hair_length, hair_gloss, hair_curliness; \/\/ growable hair length$/;"	m	class:AvatarAppearance
AvatarAppearance::hair_gloss	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hair_length, hair_gloss, hair_curliness; \/\/ growable hair length$/;"	m	class:AvatarAppearance
AvatarAppearance::hair_gloss	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hair_length, hair_gloss, hair_curliness; \/\/ growable hair length$/;"	m	class:AvatarAppearance
AvatarAppearance::hair_length	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hair_length, hair_gloss, hair_curliness; \/\/ growable hair length$/;"	m	class:AvatarAppearance
AvatarAppearance::hair_length	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hair_length, hair_gloss, hair_curliness; \/\/ growable hair length$/;"	m	class:AvatarAppearance
AvatarAppearance::height	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> height; \/\/ Avatar height in meters not including hair or shoes.$/;"	m	class:AvatarAppearance
AvatarAppearance::height	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> height; \/\/ Avatar height in meters not including hair or shoes.$/;"	m	class:AvatarAppearance
AvatarAppearance::hip_width	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
AvatarAppearance::hip_width	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
AvatarAppearance::horn_length	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> tail_length, horn_length; \/\/ Alien$/;"	m	class:AvatarAppearance
AvatarAppearance::horn_length	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> tail_length, horn_length; \/\/ Alien$/;"	m	class:AvatarAppearance
AvatarAppearance::idle_sfx	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString idle_sfx; \/\/ sfx used when avatar or monster is idle$/;"	m	class:AvatarAppearance
AvatarAppearance::idle_sfx	src/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString idle_sfx; \/\/ sfx used when avatar or monster is idle$/;"	m	class:AvatarAppearance
AvatarAppearance::leg_diameter	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
AvatarAppearance::leg_diameter	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
AvatarAppearance::model	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString model; \/\/ model location$/;"	m	class:AvatarAppearance
AvatarAppearance::model	src/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString model; \/\/ model location$/;"	m	class:AvatarAppearance
AvatarAppearance::mouth_height	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> eyebrow_height, nose_height, mouth_height;$/;"	m	class:AvatarAppearance
AvatarAppearance::mouth_height	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> eyebrow_height, nose_height, mouth_height;$/;"	m	class:AvatarAppearance
AvatarAppearance::nose_height	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> eyebrow_height, nose_height, mouth_height;$/;"	m	class:AvatarAppearance
AvatarAppearance::nose_height	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> eyebrow_height, nose_height, mouth_height;$/;"	m	class:AvatarAppearance
AvatarAppearance::obesity	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> obesity; \/\/ huh.$/;"	m	class:AvatarAppearance
AvatarAppearance::obesity	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> obesity; \/\/ huh.$/;"	m	class:AvatarAppearance
AvatarAppearance::random_sfx	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString random_sfx; \/\/ sfx used at random (may be used in tandom with an animation)$/;"	m	class:AvatarAppearance
AvatarAppearance::random_sfx	src/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString random_sfx; \/\/ sfx used at random (may be used in tandom with an animation)$/;"	m	class:AvatarAppearance
AvatarAppearance::skin_color	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex skin_color; \/\/ skin color$/;"	m	class:AvatarAppearance
AvatarAppearance::skin_color	src/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex skin_color; \/\/ skin color$/;"	m	class:AvatarAppearance
AvatarAppearance::strength	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> strength; \/\/ Muscle development$/;"	m	class:AvatarAppearance
AvatarAppearance::strength	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> strength; \/\/ Muscle development$/;"	m	class:AvatarAppearance
AvatarAppearance::tail_length	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> tail_length, horn_length; \/\/ Alien$/;"	m	class:AvatarAppearance
AvatarAppearance::tail_length	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> tail_length, horn_length; \/\/ Alien$/;"	m	class:AvatarAppearance
AvatarAppearance::torso_width	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
AvatarAppearance::torso_width	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
AvatarAppearance::~AvatarAppearance	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    virtual ~AvatarAppearance();$/;"	p	class:AvatarAppearance
AvatarAppearance::~AvatarAppearance	src/Gamelogic/Avatar/AvatarAppearance.cpp	/^AvatarAppearance::~AvatarAppearance(){$/;"	f	class:AvatarAppearance
AvatarAppearance::~AvatarAppearance	src/Gamelogic/Avatar/AvatarAppearance.h	/^    virtual ~AvatarAppearance();$/;"	p	class:AvatarAppearance
AvatarGear	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^class AvatarGear {$/;"	c
AvatarGear	src/Gamelogic/Avatar/AvatarGear.h	/^class AvatarGear {$/;"	c
AvatarGear::bags	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        LinkedList<BaseInventory> bags;$/;"	m	class:AvatarGear
AvatarGear::bags	src/Gamelogic/Avatar/AvatarGear.h	/^        LinkedList<BaseInventory> bags;$/;"	m	class:AvatarGear
AvatarGear::mountedGear	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        LinkedList<MountedEquip> mountedGear;$/;"	m	class:AvatarGear
AvatarGear::mountedGear	src/Gamelogic/Avatar/AvatarGear.h	/^        LinkedList<MountedEquip> mountedGear;$/;"	m	class:AvatarGear
AvatarGear_h_	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^#define AvatarGear_h_$/;"	d
AvatarGear_h_	src/Gamelogic/Avatar/AvatarGear.h	/^#define AvatarGear_h_$/;"	d
AvatarHealth	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        AvatarHealth(); \/\/ set defaults$/;"	p	class:AvatarHealth
AvatarHealth	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^class AvatarHealth : public SpecificSerializer {$/;"	c
AvatarHealth	src/Gamelogic/Avatar/AvatarHealth.cpp	/^AvatarHealth::AvatarHealth() {$/;"	f	class:AvatarHealth
AvatarHealth	src/Gamelogic/Avatar/AvatarHealth.h	/^        AvatarHealth(); \/\/ set defaults$/;"	p	class:AvatarHealth
AvatarHealth	src/Gamelogic/Avatar/AvatarHealth.h	/^class AvatarHealth : public SpecificSerializer {$/;"	c
AvatarHealth::AvatarHealth	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        AvatarHealth(); \/\/ set defaults$/;"	p	class:AvatarHealth
AvatarHealth::AvatarHealth	src/Gamelogic/Avatar/AvatarHealth.cpp	/^AvatarHealth::AvatarHealth() {$/;"	f	class:AvatarHealth
AvatarHealth::AvatarHealth	src/Gamelogic/Avatar/AvatarHealth.h	/^        AvatarHealth(); \/\/ set defaults$/;"	p	class:AvatarHealth
AvatarHealth::abdomen	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP head, torso, abdomen;$/;"	m	class:AvatarHealth
AvatarHealth::abdomen	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP head, torso, abdomen;$/;"	m	class:AvatarHealth
AvatarHealth::blood	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP blood; \/\/ Blood in the body, if humanoid$/;"	m	class:AvatarHealth
AvatarHealth::blood	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP blood; \/\/ Blood in the body, if humanoid$/;"	m	class:AvatarHealth
AvatarHealth::diseases	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        LinkedList<Disease> diseases; \/\/ list of ailments, toxins, drugs, ect.$/;"	m	class:AvatarHealth
AvatarHealth::diseases	src/Gamelogic/Avatar/AvatarHealth.h	/^        LinkedList<Disease> diseases; \/\/ list of ailments, toxins, drugs, ect.$/;"	m	class:AvatarHealth
AvatarHealth::head	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP head, torso, abdomen;$/;"	m	class:AvatarHealth
AvatarHealth::head	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP head, torso, abdomen;$/;"	m	class:AvatarHealth
AvatarHealth::hunger	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP hunger; \/\/ Hunger is realistic. Ticks down based on eating times.$/;"	m	class:AvatarHealth
AvatarHealth::hunger	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP hunger; \/\/ Hunger is realistic. Ticks down based on eating times.$/;"	m	class:AvatarHealth
AvatarHealth::leftarm	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
AvatarHealth::leftarm	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
AvatarHealth::leftfoot	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
AvatarHealth::leftfoot	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
AvatarHealth::lefthand	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
AvatarHealth::lefthand	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
AvatarHealth::leftknee	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
AvatarHealth::leftknee	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
AvatarHealth::leftwrist	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
AvatarHealth::leftwrist	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
AvatarHealth::moods	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        LinkedList<Mood> moods; \/\/ Humans are complicated$/;"	m	class:AvatarHealth
AvatarHealth::moods	src/Gamelogic/Avatar/AvatarHealth.h	/^        LinkedList<Mood> moods; \/\/ Humans are complicated$/;"	m	class:AvatarHealth
AvatarHealth::portable_reactor	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP portable_reactor; \/\/ reactor powers detection \/ shields$/;"	m	class:AvatarHealth
AvatarHealth::portable_reactor	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP portable_reactor; \/\/ reactor powers detection \/ shields$/;"	m	class:AvatarHealth
AvatarHealth::regen	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> regen; \/\/ server-side local$/;"	m	class:AvatarHealth
AvatarHealth::regen	src/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> regen; \/\/ server-side local$/;"	m	class:AvatarHealth
AvatarHealth::regeneration	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> regeneration; \/\/ Natural healing of body parts (per second)$/;"	m	class:AvatarHealth
AvatarHealth::regeneration	src/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> regeneration; \/\/ Natural healing of body parts (per second)$/;"	m	class:AvatarHealth
AvatarHealth::rightarm	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
AvatarHealth::rightarm	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
AvatarHealth::rightfoot	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
AvatarHealth::rightfoot	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
AvatarHealth::righthand	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
AvatarHealth::righthand	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
AvatarHealth::rightknee	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
AvatarHealth::rightknee	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
AvatarHealth::rightwrist	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
AvatarHealth::rightwrist	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
AvatarHealth::shield	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP shield;$/;"	m	class:AvatarHealth
AvatarHealth::shield	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP shield;$/;"	m	class:AvatarHealth
AvatarHealth::thirst	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP thirst; \/\/ Thirst is also realistic. May be modified by NanoRobots.$/;"	m	class:AvatarHealth
AvatarHealth::thirst	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP thirst; \/\/ Thirst is also realistic. May be modified by NanoRobots.$/;"	m	class:AvatarHealth
AvatarHealth::tick	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        void tick(double tps); \/\/ tick Regen, power, diseases and moods.$/;"	p	class:AvatarHealth
AvatarHealth::tick	src/Gamelogic/Avatar/AvatarHealth.cpp	/^void AvatarHealth::tick(double tps) {$/;"	f	class:AvatarHealth
AvatarHealth::tick	src/Gamelogic/Avatar/AvatarHealth.h	/^        void tick(double tps); \/\/ tick Regen, power, diseases and moods.$/;"	p	class:AvatarHealth
AvatarHealth::torso	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP head, torso, abdomen;$/;"	m	class:AvatarHealth
AvatarHealth::torso	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP head, torso, abdomen;$/;"	m	class:AvatarHealth
AvatarSkill_h_	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^#define AvatarSkill_h_$/;"	d
AvatarSkill_h_	src/Gamelogic/Avatar/SkillSet.h	/^#define AvatarSkill_h_$/;"	d
AvatarTYPE	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum AvatarTYPE {AT_Player, AT_AI, AT_Static, AT_Mob, AT_Boss};$/;"	g
AvatarTYPE	src/Gamelogic/Avatar/Avatar.h	/^enum AvatarTYPE {AT_Player, AT_AI, AT_Static, AT_Mob, AT_Boss};$/;"	g
Avatar_h_	include/Eternia/Gamelogic/Avatar/Avatar.h	/^#define Avatar_h_$/;"	d
Avatar_h_	src/Gamelogic/Avatar/Avatar.h	/^#define Avatar_h_$/;"	d
Avatar_health_h_	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^#define Avatar_health_h_$/;"	d
Avatar_health_h_	src/Gamelogic/Avatar/AvatarHealth.h	/^#define Avatar_health_h_$/;"	d
B	include/Eternia/constants.h	/^        const double B = 30.87;$/;"	m	namespace:electromagnetic::sound
B	src/constants.h	/^        const double B = 30.87;$/;"	m	namespace:electromagnetic::sound
BA	include/Eternia/constants.h	/^        const double BA = 29.14;$/;"	m	namespace:electromagnetic::sound
BA	src/constants.h	/^        const double BA = 29.14;$/;"	m	namespace:electromagnetic::sound
BAGLIST_H_	include/Eternia/Gamelogic/Inventory/BagList.h	/^#define BAGLIST_H_$/;"	d
BAGLIST_H_	src/Gamelogic/Inventory/BagList.h	/^#define BAGLIST_H_$/;"	d
BASICSERIALIZER_H_	include/Eternia/Serialization/BasicSerializer.h	/^#define BASICSERIALIZER_H_$/;"	d
BASICSERIALIZER_H_	src/Serialization/BasicSerializer.h	/^#define BASICSERIALIZER_H_$/;"	d
BASIC_COMPRESSOR_H_	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^#define BASIC_COMPRESSOR_H_$/;"	d
BASIC_COMPRESSOR_H_	src/Algorithm/Compression/BasicCompressor.h	/^#define BASIC_COMPRESSOR_H_$/;"	d
BASIC_LAUNCHER_H_	include/Eternia/Gamelogic/Buildings/SpaceLaunchers/BasicLauncher.h	/^#define BASIC_LAUNCHER_H_$/;"	d
BASIC_LAUNCHER_H_	src/Gamelogic/Buildings/SpaceLaunchers/BasicLauncher.h	/^#define BASIC_LAUNCHER_H_$/;"	d
BASIS_H_	include/Eternia/Math/struct/Basis.h	/^#define BASIS_H_$/;"	d
BASIS_H_	src/Math/struct/Basis.h	/^#define BASIS_H_$/;"	d
BCSCTL1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define BCSCTL1 /;"	d
BCSCTL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(BCSCTL1);                            \/* Basic Clock System Control 1 *\/$/;"	v
BCSCTL1	src/Emulation/MPU/msp430_declare_consts.h	/^#define BCSCTL1 /;"	d
BCSCTL1	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(BCSCTL1);                            \/* Basic Clock System Control 1 *\/$/;"	v
BCSCTL2	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define BCSCTL2 /;"	d
BCSCTL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(BCSCTL2);                            \/* Basic Clock System Control 2 *\/$/;"	v
BCSCTL2	src/Emulation/MPU/msp430_declare_consts.h	/^#define BCSCTL2 /;"	d
BCSCTL2	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(BCSCTL2);                            \/* Basic Clock System Control 2 *\/$/;"	v
BCSCTL3	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define BCSCTL3 /;"	d
BCSCTL3	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(BCSCTL3);                            \/* Basic Clock System Control 3 *\/$/;"	v
BCSCTL3	src/Emulation/MPU/msp430_declare_consts.h	/^#define BCSCTL3 /;"	d
BCSCTL3	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(BCSCTL3);                            \/* Basic Clock System Control 3 *\/$/;"	v
BIT0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BIT0 /;"	d
BIT0	src/Emulation/MPU/msp430g2553.h	/^#define BIT0 /;"	d
BIT1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BIT1 /;"	d
BIT1	src/Emulation/MPU/msp430g2553.h	/^#define BIT1 /;"	d
BIT2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BIT2 /;"	d
BIT2	src/Emulation/MPU/msp430g2553.h	/^#define BIT2 /;"	d
BIT3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BIT3 /;"	d
BIT3	src/Emulation/MPU/msp430g2553.h	/^#define BIT3 /;"	d
BIT4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BIT4 /;"	d
BIT4	src/Emulation/MPU/msp430g2553.h	/^#define BIT4 /;"	d
BIT5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BIT5 /;"	d
BIT5	src/Emulation/MPU/msp430g2553.h	/^#define BIT5 /;"	d
BIT6	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BIT6 /;"	d
BIT6	src/Emulation/MPU/msp430g2553.h	/^#define BIT6 /;"	d
BIT7	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BIT7 /;"	d
BIT7	src/Emulation/MPU/msp430g2553.h	/^#define BIT7 /;"	d
BIT8	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BIT8 /;"	d
BIT8	src/Emulation/MPU/msp430g2553.h	/^#define BIT8 /;"	d
BIT9	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BIT9 /;"	d
BIT9	src/Emulation/MPU/msp430g2553.h	/^#define BIT9 /;"	d
BITA	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BITA /;"	d
BITA	src/Emulation/MPU/msp430g2553.h	/^#define BITA /;"	d
BITB	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BITB /;"	d
BITB	src/Emulation/MPU/msp430g2553.h	/^#define BITB /;"	d
BITC	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BITC /;"	d
BITC	src/Emulation/MPU/msp430g2553.h	/^#define BITC /;"	d
BITD	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BITD /;"	d
BITD	src/Emulation/MPU/msp430g2553.h	/^#define BITD /;"	d
BITE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BITE /;"	d
BITE	src/Emulation/MPU/msp430g2553.h	/^#define BITE /;"	d
BITF	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BITF /;"	d
BITF	src/Emulation/MPU/msp430g2553.h	/^#define BITF /;"	d
BITMAP_H_	include/Eternia/Data/BitMap.h	/^#define BITMAP_H_$/;"	d
BITMAP_H_	src/Data/BitMap.h	/^#define BITMAP_H_$/;"	d
BLKWRT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BLKWRT /;"	d
BLKWRT	src/Emulation/MPU/msp430g2553.h	/^#define BLKWRT /;"	d
BLOCKx_H	include/Eternia/Gamelogic/Voxel/Block.h	/^#define BLOCKx_H$/;"	d
BLOCKx_H	src/Gamelogic/Voxel/Block.h	/^#define BLOCKx_H$/;"	d
BODYPART	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	g
BODYPART	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	g
BP_ABDOMEN	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_ABDOMEN	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_HEAD	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_HEAD	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_LEFTARM	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_LEFTARM	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_LEFTFOOT	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_LEFTFOOT	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_LEFTHAND	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_LEFTHAND	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_LEFTKNEE	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_LEFTKNEE	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_LEFTWRIST	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_LEFTWRIST	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_RIGHTARM	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_RIGHTARM	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_RIGHTFOOT	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_RIGHTFOOT	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_RIGHTHAND	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_RIGHTHAND	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_RIGHTKNEE	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_RIGHTKNEE	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_RIGHTWRIST	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_RIGHTWRIST	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_TORSO	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BP_TORSO	src/Gamelogic/Avatar/AvatarHealth.h	/^enum BODYPART {BP_HEAD, BP_TORSO, BP_ABDOMEN, BP_LEFTFOOT, BP_RIGHTFOOT, BP_LEFTKNEE, BP_RIGHTKNEE, BP_LEFTHAND, BP_RIGHTHAND, BP_LEFTWRIST, BP_RIGHTWRIST, BP_LEFTARM, BP_RIGHTARM};$/;"	e	enum:BODYPART
BUFFER_SIZEX	include/Eternia/WebFramework/Network/SocketServer.h	/^#define BUFFER_SIZEX /;"	d
BUFFER_SIZEX	src/WebFramework/Network/SocketServer.h	/^#define BUFFER_SIZEX /;"	d
BUILD	version.h	/^#define BUILD /;"	d
BUILDING_H_	include/Eternia/Gamelogic/Buildings/Building.h	/^#define BUILDING_H_$/;"	d
BUILDING_H_	src/Gamelogic/Buildings/Building.h	/^#define BUILDING_H_$/;"	d
BUILDS_COUNT	version.h	/^#define BUILDS_COUNT /;"	d
BUILD_HISTORY	version.h	/^#define BUILD_HISTORY /;"	d
BUSY	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define BUSY /;"	d
BUSY	src/Emulation/MPU/msp430g2553.h	/^#define BUSY /;"	d
BZF_MD5_H	include/Eternia/Algorithm/Cryptography/md5.h	/^#define BZF_MD5_H$/;"	d
BZF_MD5_H	src/Algorithm/Cryptography/md5.h	/^#define BZF_MD5_H$/;"	d
BagList	include/Eternia/Gamelogic/Inventory/BagList.h	/^    BagList();$/;"	p	class:BagList
BagList	include/Eternia/Gamelogic/Inventory/BagList.h	/^class BagList{$/;"	c
BagList	src/Gamelogic/Inventory/BagList.h	/^    BagList();$/;"	p	class:BagList
BagList	src/Gamelogic/Inventory/BagList.h	/^class BagList{$/;"	c
BagList::BagList	include/Eternia/Gamelogic/Inventory/BagList.h	/^    BagList();$/;"	p	class:BagList
BagList::BagList	src/Gamelogic/Inventory/BagList.h	/^    BagList();$/;"	p	class:BagList
BagList::bags	include/Eternia/Gamelogic/Inventory/BagList.h	/^    LinkedList<BaseInventory> bags;$/;"	m	class:BagList
BagList::bags	src/Gamelogic/Inventory/BagList.h	/^    LinkedList<BaseInventory> bags;$/;"	m	class:BagList
Banking	include/Eternia/Gamelogic/Economics/Banking/Banking.h	/^        Banking();$/;"	p	class:Banking
Banking	include/Eternia/Gamelogic/Economics/Banking/Banking.h	/^class Banking {$/;"	c
Banking	src/Gamelogic/Economics/Banking/Banking.h	/^        Banking();$/;"	p	class:Banking
Banking	src/Gamelogic/Economics/Banking/Banking.h	/^class Banking {$/;"	c
Banking::Banking	include/Eternia/Gamelogic/Economics/Banking/Banking.h	/^        Banking();$/;"	p	class:Banking
Banking::Banking	src/Gamelogic/Economics/Banking/Banking.h	/^        Banking();$/;"	p	class:Banking
Banking::accounts	include/Eternia/Gamelogic/Economics/Banking/Banking.h	/^        LinkedList<Account> accounts; \/\/ list of loaded accounts$/;"	m	class:Banking
Banking::accounts	src/Gamelogic/Economics/Banking/Banking.h	/^        LinkedList<Account> accounts; \/\/ list of loaded accounts$/;"	m	class:Banking
Banking::tick	include/Eternia/Gamelogic/Economics/Banking/Banking.h	/^        void tick(); \/\/ tick for each game tick$/;"	p	class:Banking
Banking::tick	src/Gamelogic/Economics/Banking/Banking.h	/^        void tick(); \/\/ tick for each game tick$/;"	p	class:Banking
Banking::totalvalue	include/Eternia/Gamelogic/Economics/Banking/Banking.h	/^        double totalvalue; \/\/ total bank value in crypto-currency$/;"	m	class:Banking
Banking::totalvalue	src/Gamelogic/Economics/Banking/Banking.h	/^        double totalvalue; \/\/ total bank value in crypto-currency$/;"	m	class:Banking
Barie	include/Eternia/constants.h	/^        const double Barie = Pascal\/10.0;$/;"	m	namespace:physical::unit
Barie	src/constants.h	/^        const double Barie = Pascal\/10.0;$/;"	m	namespace:physical::unit
Baries	include/Eternia/constants.h	/^        const double Baries = Barie;$/;"	m	namespace:physical::unit
Baries	src/constants.h	/^        const double Baries = Barie;$/;"	m	namespace:physical::unit
Barium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Barium = new Atom("Barium", "Ba", 2, 6, 56, 82,55, 3.594,0.00000035, 0.018, 1000,2170, 0.204, 2, COLOR_Silver,ELEM_Alkaline);$/;"	v
Barium	src/Engineering/Chemistry/elementals.h	/^const Atom Barium = new Atom("Barium", "Ba", 2, 6, 56, 82,55, 3.594,0.00000035, 0.018, 1000,2170, 0.204, 2, COLOR_Silver,ELEM_Alkaline);$/;"	v
Barye	include/Eternia/constants.h	/^        const double Barye = Barie;$/;"	m	namespace:physical::unit
Barye	src/constants.h	/^        const double Barye = Barie;$/;"	m	namespace:physical::unit
Baryes	include/Eternia/constants.h	/^        const double Baryes = Barye;$/;"	m	namespace:physical::unit
Baryes	src/constants.h	/^        const double Baryes = Barye;$/;"	m	namespace:physical::unit
Baryon_h_	include/Eternia/Engineering/Chemistry/Hadron/Baryon.h	/^#define Baryon_h_$/;"	d
Baryon_h_	include/Eternia/Engineering/Chemistry/Hadron/Meson.h	/^#define Baryon_h_$/;"	d
Baryon_h_	src/Engineering/Chemistry/Hadron/Baryon.h	/^#define Baryon_h_$/;"	d
Baryon_h_	src/Engineering/Chemistry/Hadron/Meson.h	/^#define Baryon_h_$/;"	d
BaseInventory	include/Eternia/Gamelogic/Inventory/BaseInventory.h	/^    BaseInventory();$/;"	p	class:BaseInventory
BaseInventory	include/Eternia/Gamelogic/Inventory/BaseInventory.h	/^class BaseInventory : public SpecificSerializer {$/;"	c
BaseInventory	src/Gamelogic/Inventory/BaseInventory.h	/^    BaseInventory();$/;"	p	class:BaseInventory
BaseInventory	src/Gamelogic/Inventory/BaseInventory.h	/^class BaseInventory : public SpecificSerializer {$/;"	c
BaseInventory::BaseInventory	include/Eternia/Gamelogic/Inventory/BaseInventory.h	/^    BaseInventory();$/;"	p	class:BaseInventory
BaseInventory::BaseInventory	src/Gamelogic/Inventory/BaseInventory.h	/^    BaseInventory();$/;"	p	class:BaseInventory
BaseInventory::inventoryItems	include/Eternia/Gamelogic/Inventory/BaseInventory.h	/^    LinkedList<ItemBase> inventoryItems;$/;"	m	class:BaseInventory
BaseInventory::inventoryItems	src/Gamelogic/Inventory/BaseInventory.h	/^    LinkedList<ItemBase> inventoryItems;$/;"	m	class:BaseInventory
BaseInventory::maxslots	include/Eternia/Gamelogic/Inventory/BaseInventory.h	/^    int maxslots; \/\/ max slots in this bag$/;"	m	class:BaseInventory
BaseInventory::maxslots	src/Gamelogic/Inventory/BaseInventory.h	/^    int maxslots; \/\/ max slots in this bag$/;"	m	class:BaseInventory
BaseInventory_h_	include/Eternia/Gamelogic/Inventory/BaseInventory.h	/^#define BaseInventory_h_$/;"	d
BaseInventory_h_	src/Gamelogic/Inventory/BaseInventory.h	/^#define BaseInventory_h_$/;"	d
BaseStock	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^class BaseStock {$/;"	c
BaseStock	src/Gamelogic/Economics/StockMarket/Stock.h	/^class BaseStock {$/;"	c
BaseStock::boughtStocks	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^        LinkedList<Stock> boughtStocks();$/;"	p	class:BaseStock
BaseStock::boughtStocks	src/Gamelogic/Economics/StockMarket/Stock.h	/^        LinkedList<Stock> boughtStocks();$/;"	p	class:BaseStock
BaseTime	include/Eternia/Programming/EfficiencyTimer.h	/^        double BaseTime;$/;"	m	class:EfficiencyTimer
BaseTime	src/Programming/EfficiencyTimer.h	/^        double BaseTime;$/;"	m	class:EfficiencyTimer
BasicCompressor	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    BasicCompressor(int steps, CharString key);$/;"	p	class:BasicCompressor
BasicCompressor	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^class BasicCompressor{$/;"	c
BasicCompressor	src/Algorithm/Compression/BasicCompressor.h	/^    BasicCompressor(int steps, CharString key);$/;"	p	class:BasicCompressor
BasicCompressor	src/Algorithm/Compression/BasicCompressor.h	/^class BasicCompressor{$/;"	c
BasicCompressor::BasicCompressor	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    BasicCompressor(int steps, CharString key);$/;"	p	class:BasicCompressor
BasicCompressor::BasicCompressor	src/Algorithm/Compression/BasicCompressor.h	/^    BasicCompressor(int steps, CharString key);$/;"	p	class:BasicCompressor
BasicCompressor::blockLen	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    int blockLen; \/\/ length of each block$/;"	m	class:BasicCompressor
BasicCompressor::blockLen	src/Algorithm/Compression/BasicCompressor.h	/^    int blockLen; \/\/ length of each block$/;"	m	class:BasicCompressor
BasicCompressor::compress	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    CharString compress(CharString input);$/;"	p	class:BasicCompressor
BasicCompressor::compress	src/Algorithm/Compression/BasicCompressor.h	/^    CharString compress(CharString input);$/;"	p	class:BasicCompressor
BasicCompressor::decompress	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    CharString decompress(CharString input);$/;"	p	class:BasicCompressor
BasicCompressor::decompress	src/Algorithm/Compression/BasicCompressor.h	/^    CharString decompress(CharString input);$/;"	p	class:BasicCompressor
BasicCompressor::key	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    CharString key;$/;"	m	class:BasicCompressor
BasicCompressor::key	src/Algorithm/Compression/BasicCompressor.h	/^    CharString key;$/;"	m	class:BasicCompressor
BasicCompressor::loadFile	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    CharString loadFile(CharString location); \/\/ load a file and convert$/;"	p	class:BasicCompressor
BasicCompressor::loadFile	src/Algorithm/Compression/BasicCompressor.h	/^    CharString loadFile(CharString location); \/\/ load a file and convert$/;"	p	class:BasicCompressor
BasicCompressor::occurenceTable	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    LinkedList<occcurence> occurenceTable;$/;"	m	class:BasicCompressor
BasicCompressor::occurenceTable	src/Algorithm/Compression/BasicCompressor.h	/^    LinkedList<occcurence> occurenceTable;$/;"	m	class:BasicCompressor
BasicCompressor::saveFile	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    void saveFile(CharString location, CharString data); \/\/ convert and save a file$/;"	p	class:BasicCompressor
BasicCompressor::saveFile	src/Algorithm/Compression/BasicCompressor.h	/^    void saveFile(CharString location, CharString data); \/\/ convert and save a file$/;"	p	class:BasicCompressor
BasicCompressor::setBlocks	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    void setBlocks(bool use, int length);$/;"	p	class:BasicCompressor
BasicCompressor::setBlocks	src/Algorithm/Compression/BasicCompressor.h	/^    void setBlocks(bool use, int length);$/;"	p	class:BasicCompressor
BasicCompressor::useBlocks	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    bool useBlocks; \/\/ segment the data into blocks$/;"	m	class:BasicCompressor
BasicCompressor::useBlocks	src/Algorithm/Compression/BasicCompressor.h	/^    bool useBlocks; \/\/ segment the data into blocks$/;"	m	class:BasicCompressor
BasicCompressor::~BasicCompressor	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    virtual ~BasicCompressor();$/;"	p	class:BasicCompressor
BasicCompressor::~BasicCompressor	src/Algorithm/Compression/BasicCompressor.h	/^    virtual ~BasicCompressor();$/;"	p	class:BasicCompressor
BasicFixedPointerArray	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        BasicFixedPointerArray(int size);$/;"	p	class:BasicFixedPointerArray
BasicFixedPointerArray	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^class BasicFixedPointerArray {$/;"	c
BasicFixedPointerArray	src/Data/AbstractDatabase/AbstractDB.h	/^        BasicFixedPointerArray(int size);$/;"	p	class:BasicFixedPointerArray
BasicFixedPointerArray	src/Data/AbstractDatabase/AbstractDB.h	/^class BasicFixedPointerArray {$/;"	c
BasicFixedPointerArray	src/Data/AbstractDatabase/BasicFixedPointerArray.cpp	/^BasicFixedPointerArray::BasicFixedPointerArray(int size) {$/;"	f	class:BasicFixedPointerArray
BasicFixedPointerArray::BasicFixedPointerArray	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        BasicFixedPointerArray(int size);$/;"	p	class:BasicFixedPointerArray
BasicFixedPointerArray::BasicFixedPointerArray	src/Data/AbstractDatabase/AbstractDB.h	/^        BasicFixedPointerArray(int size);$/;"	p	class:BasicFixedPointerArray
BasicFixedPointerArray::BasicFixedPointerArray	src/Data/AbstractDatabase/BasicFixedPointerArray.cpp	/^BasicFixedPointerArray::BasicFixedPointerArray(int size) {$/;"	f	class:BasicFixedPointerArray
BasicFixedPointerArray::arr	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void** arr;$/;"	m	class:BasicFixedPointerArray
BasicFixedPointerArray::arr	src/Data/AbstractDatabase/AbstractDB.h	/^        void** arr;$/;"	m	class:BasicFixedPointerArray
BasicFixedPointerArray::get	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* get(int index);$/;"	p	class:BasicFixedPointerArray
BasicFixedPointerArray::get	src/Data/AbstractDatabase/AbstractDB.h	/^        void* get(int index);$/;"	p	class:BasicFixedPointerArray
BasicFixedPointerArray::get	src/Data/AbstractDatabase/BasicFixedPointerArray.cpp	/^void* BasicFixedPointerArray::get(int index) {$/;"	f	class:BasicFixedPointerArray
BasicFixedPointerArray::length	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int length;$/;"	m	class:BasicFixedPointerArray
BasicFixedPointerArray::length	src/Data/AbstractDatabase/AbstractDB.h	/^        int length;$/;"	m	class:BasicFixedPointerArray
BasicFixedPointerArray::set	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        bool set(int index, void* value);$/;"	p	class:BasicFixedPointerArray
BasicFixedPointerArray::set	src/Data/AbstractDatabase/AbstractDB.h	/^        bool set(int index, void* value);$/;"	p	class:BasicFixedPointerArray
BasicFixedPointerArray::set	src/Data/AbstractDatabase/BasicFixedPointerArray.cpp	/^bool BasicFixedPointerArray::set(int index, void* value) {$/;"	f	class:BasicFixedPointerArray
BasicFixedPointerArray::~BasicFixedPointerArray	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ~BasicFixedPointerArray();$/;"	p	class:BasicFixedPointerArray
BasicFixedPointerArray::~BasicFixedPointerArray	src/Data/AbstractDatabase/AbstractDB.h	/^        ~BasicFixedPointerArray();$/;"	p	class:BasicFixedPointerArray
BasicFixedPointerArray::~BasicFixedPointerArray	src/Data/AbstractDatabase/BasicFixedPointerArray.cpp	/^BasicFixedPointerArray::~BasicFixedPointerArray() {$/;"	f	class:BasicFixedPointerArray
BasicLauncher	include/Eternia/Gamelogic/Buildings/SpaceLaunchers/BasicLauncher.h	/^class BasicLauncher{$/;"	c
BasicLauncher	src/Gamelogic/Buildings/SpaceLaunchers/BasicLauncher.h	/^class BasicLauncher{$/;"	c
BasicSerialize	include/Eternia/Serialization/BasicSerializer.h	/^namespace BasicSerialize {$/;"	n
BasicSerialize	src/Serialization/BasicSerializer.cpp	/^namespace BasicSerialize {$/;"	n	file:
BasicSerialize	src/Serialization/BasicSerializer.h	/^namespace BasicSerialize {$/;"	n
BasicSerialize::classChecksum	include/Eternia/Serialization/BasicSerializer.h	/^    long classChecksum(void* object, int size);$/;"	p	namespace:BasicSerialize
BasicSerialize::classChecksum	src/Serialization/BasicSerializer.cpp	/^    long classChecksum(void* object, int size) {$/;"	f	namespace:BasicSerialize
BasicSerialize::classChecksum	src/Serialization/BasicSerializer.h	/^    long classChecksum(void* object, int size);$/;"	p	namespace:BasicSerialize
BasicSerialize::deserializeClass	include/Eternia/Serialization/BasicSerializer.h	/^    void* deserializeClass(char* data, int size);$/;"	p	namespace:BasicSerialize
BasicSerialize::deserializeClass	src/Serialization/BasicSerializer.cpp	/^    void* deserializeClass(char* data, int size) {$/;"	f	namespace:BasicSerialize
BasicSerialize::deserializeClass	src/Serialization/BasicSerializer.h	/^    void* deserializeClass(char* data, int size);$/;"	p	namespace:BasicSerialize
BasicSerialize::serializeClass	include/Eternia/Serialization/BasicSerializer.h	/^    char* serializeClass(void* object, int size); \/\/ use a pointer for the class$/;"	p	namespace:BasicSerialize
BasicSerialize::serializeClass	src/Serialization/BasicSerializer.cpp	/^    char* serializeClass(void* object, int size) {$/;"	f	namespace:BasicSerialize
BasicSerialize::serializeClass	src/Serialization/BasicSerializer.h	/^    char* serializeClass(void* object, int size); \/\/ use a pointer for the class$/;"	p	namespace:BasicSerialize
BasicSerializer	include/Eternia/Serialization/BasicSerializer.h	/^class BasicSerializer {$/;"	c
BasicSerializer	src/Serialization/BasicSerializer.h	/^class BasicSerializer {$/;"	c
BasicSerializer::classChecksum	include/Eternia/Serialization/BasicSerializer.h	/^        long classChecksum(); \/\/ do a checksum, useful for detecting if the class needs to be updated$/;"	p	class:BasicSerializer
BasicSerializer::classChecksum	src/Serialization/BasicSerializer.cpp	/^long BasicSerializer::classChecksum() {$/;"	f	class:BasicSerializer
BasicSerializer::classChecksum	src/Serialization/BasicSerializer.h	/^        long classChecksum(); \/\/ do a checksum, useful for detecting if the class needs to be updated$/;"	p	class:BasicSerializer
BasicSerializer::classLoc	include/Eternia/Serialization/BasicSerializer.h	/^        void* classLoc;$/;"	m	class:BasicSerializer
BasicSerializer::classLoc	src/Serialization/BasicSerializer.h	/^        void* classLoc;$/;"	m	class:BasicSerializer
BasicSerializer::classSize	include/Eternia/Serialization/BasicSerializer.h	/^        int classSize;$/;"	m	class:BasicSerializer
BasicSerializer::classSize	src/Serialization/BasicSerializer.h	/^        int classSize;$/;"	m	class:BasicSerializer
BasicSerializer::deserialize	include/Eternia/Serialization/BasicSerializer.h	/^        void deserialize(char* data); \/\/ converts a byte array into this class$/;"	p	class:BasicSerializer
BasicSerializer::deserialize	src/Serialization/BasicSerializer.cpp	/^void BasicSerializer::deserialize(char* data) {$/;"	f	class:BasicSerializer
BasicSerializer::deserialize	src/Serialization/BasicSerializer.h	/^        void deserialize(char* data); \/\/ converts a byte array into this class$/;"	p	class:BasicSerializer
BasicSerializer::initSerializer	include/Eternia/Serialization/BasicSerializer.h	/^        void initSerializer(void* thisobject, int class_size); \/\/ initialize the serializer in bytes$/;"	p	class:BasicSerializer
BasicSerializer::initSerializer	src/Serialization/BasicSerializer.cpp	/^void BasicSerializer::initSerializer(void* thisobject, int class_size) {$/;"	f	class:BasicSerializer
BasicSerializer::initSerializer	src/Serialization/BasicSerializer.h	/^        void initSerializer(void* thisobject, int class_size); \/\/ initialize the serializer in bytes$/;"	p	class:BasicSerializer
BasicSerializer::isDataDifferent	include/Eternia/Serialization/BasicSerializer.h	/^        bool isDataDifferent(long removeChecksum); \/\/ compares the checksum with the current class$/;"	p	class:BasicSerializer
BasicSerializer::isDataDifferent	src/Serialization/BasicSerializer.cpp	/^bool BasicSerializer::isDataDifferent(long removeChecksum) {$/;"	f	class:BasicSerializer
BasicSerializer::isDataDifferent	src/Serialization/BasicSerializer.h	/^        bool isDataDifferent(long removeChecksum); \/\/ compares the checksum with the current class$/;"	p	class:BasicSerializer
BasicSerializer::serialize	include/Eternia/Serialization/BasicSerializer.h	/^        char* serialize(); \/\/ converts this class into a byte stream$/;"	p	class:BasicSerializer
BasicSerializer::serialize	src/Serialization/BasicSerializer.cpp	/^char* BasicSerializer::serialize() {$/;"	f	class:BasicSerializer
BasicSerializer::serialize	src/Serialization/BasicSerializer.h	/^        char* serialize(); \/\/ converts this class into a byte stream$/;"	p	class:BasicSerializer
Basis	include/Eternia/Math/struct/Basis.h	/^        Basis();$/;"	p	class:Basis
Basis	include/Eternia/Math/struct/Basis.h	/^class Basis : public Matrix {$/;"	c
Basis	src/Math/struct/Basis.h	/^        Basis();$/;"	p	class:Basis
Basis	src/Math/struct/Basis.h	/^class Basis : public Matrix {$/;"	c
Basis::Basis	include/Eternia/Math/struct/Basis.h	/^        Basis();$/;"	p	class:Basis
Basis::Basis	src/Math/struct/Basis.h	/^        Basis();$/;"	p	class:Basis
Becquerel	include/Eternia/constants.h	/^        const double Becquerel = 1.0\/second;$/;"	m	namespace:physical::unit
Becquerel	src/constants.h	/^        const double Becquerel = 1.0\/second;$/;"	m	namespace:physical::unit
Becquerels	include/Eternia/constants.h	/^        const double Becquerels = Becquerel;$/;"	m	namespace:physical::unit
Becquerels	src/constants.h	/^        const double Becquerels = Becquerel;$/;"	m	namespace:physical::unit
Berkelium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Berkelium = new Atom("Berkelium", "Bk", 0, 7, 97, 150,96, 14.79,UNKNOWN, 0.01, 1259,UNKNOWN, UNKNOWN, 4, COLOR_SlateGray,ELEM_Actinide);$/;"	v
Berkelium	src/Engineering/Chemistry/elementals.h	/^const Atom Berkelium = new Atom("Berkelium", "Bk", 0, 7, 97, 150,96, 14.79,UNKNOWN, 0.01, 1259,UNKNOWN, UNKNOWN, 4, COLOR_SlateGray,ELEM_Actinide);$/;"	v
Beryllium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Beryllium = new Atom("Beryllium", "Be", 2, 2, 4, 5,4, 1.85,0.00000004, 0.19, 1560,2742, 1.825, 2, COLOR_SlateGray,ELEM_Alkaline);$/;"	v
Beryllium	src/Engineering/Chemistry/elementals.h	/^const Atom Beryllium = new Atom("Beryllium", "Be", 2, 2, 4, 5,4, 1.85,0.00000004, 0.19, 1560,2742, 1.825, 2, COLOR_SlateGray,ELEM_Alkaline);$/;"	v
BinomialDistribution	include/Eternia/Math/statistics/Probability.h	/^class BinomialDistribution {$/;"	c
BinomialDistribution	src/Math/statistics/Probability.h	/^class BinomialDistribution {$/;"	c
Biot	include/Eternia/constants.h	/^        const double Biot = 10.0*Amperes;$/;"	m	namespace:physical::unit
Biot	src/constants.h	/^        const double Biot = 10.0*Amperes;$/;"	m	namespace:physical::unit
Biots	include/Eternia/constants.h	/^        const double Biots = Biot;$/;"	m	namespace:physical::unit
Biots	src/constants.h	/^        const double Biots = Biot;$/;"	m	namespace:physical::unit
Bismuth	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Bismuth = new Atom("Bismuth", "Bi", 15, 6, 83, 126,82, 9.807,0.0000013, 0.008, 544.7,1837, 0.122, 5, COLOR_Gray,ELEM_Poor);$/;"	v
Bismuth	src/Engineering/Chemistry/elementals.h	/^const Atom Bismuth = new Atom("Bismuth", "Bi", 15, 6, 83, 126,82, 9.807,0.0000013, 0.008, 544.7,1837, 0.122, 5, COLOR_Gray,ELEM_Poor);$/;"	v
BitMap	include/Eternia/Data/BitMap.h	/^        BitMap(const int wid, const int hei);$/;"	p	class:BitMap
BitMap	include/Eternia/Data/BitMap.h	/^class BitMap {$/;"	c
BitMap	src/Data/BitMap.cpp	/^BitMap::BitMap(const int wid, const int hei) {$/;"	f	class:BitMap
BitMap	src/Data/BitMap.h	/^        BitMap(const int wid, const int hei);$/;"	p	class:BitMap
BitMap	src/Data/BitMap.h	/^class BitMap {$/;"	c
BitMap::BitMap	include/Eternia/Data/BitMap.h	/^        BitMap(const int wid, const int hei);$/;"	p	class:BitMap
BitMap::BitMap	src/Data/BitMap.cpp	/^BitMap::BitMap(const int wid, const int hei) {$/;"	f	class:BitMap
BitMap::BitMap	src/Data/BitMap.h	/^        BitMap(const int wid, const int hei);$/;"	p	class:BitMap
BitMap::height	include/Eternia/Data/BitMap.h	/^        int height;$/;"	m	class:BitMap
BitMap::height	src/Data/BitMap.h	/^        int height;$/;"	m	class:BitMap
BitMap::loadFromFile	include/Eternia/Data/BitMap.h	/^        void loadFromFile(CharString* fileLocation); \/\/ load this bitmap from a file.$/;"	p	class:BitMap
BitMap::loadFromFile	src/Data/BitMap.h	/^        void loadFromFile(CharString* fileLocation); \/\/ load this bitmap from a file.$/;"	p	class:BitMap
BitMap::map	include/Eternia/Data/BitMap.h	/^        bmbit** map; \/\/ 2-dim array$/;"	m	class:BitMap
BitMap::map	src/Data/BitMap.h	/^        bmbit** map; \/\/ 2-dim array$/;"	m	class:BitMap
BitMap::width	include/Eternia/Data/BitMap.h	/^        int width;$/;"	m	class:BitMap
BitMap::width	src/Data/BitMap.h	/^        int width;$/;"	m	class:BitMap
BitMap::~BitMap	include/Eternia/Data/BitMap.h	/^        virtual ~BitMap();$/;"	p	class:BitMap
BitMap::~BitMap	src/Data/BitMap.cpp	/^BitMap::~BitMap() {$/;"	f	class:BitMap
BitMap::~BitMap	src/Data/BitMap.h	/^        virtual ~BitMap();$/;"	p	class:BitMap
Block	include/Eternia/Gamelogic/Voxel/Block.h	/^class Block{$/;"	c
Block	src/Gamelogic/Voxel/Block.h	/^class Block{$/;"	c
Block::BlockID	include/Eternia/Gamelogic/Voxel/Block.h	/^    BlockID(int id){$/;"	f	class:Block
Block::BlockID	src/Gamelogic/Voxel/Block.h	/^    BlockID(int id){$/;"	f	class:Block
Block::getID	include/Eternia/Gamelogic/Voxel/Block.h	/^    int getID(){$/;"	f	class:Block
Block::getID	src/Gamelogic/Voxel/Block.h	/^    int getID(){$/;"	f	class:Block
Block::id	include/Eternia/Gamelogic/Voxel/Block.h	/^    int id;$/;"	m	class:Block
Block::id	src/Gamelogic/Voxel/Block.h	/^    int id;$/;"	m	class:Block
BlockID	include/Eternia/Gamelogic/Voxel/Block.h	/^    BlockID(int id){$/;"	f	class:Block
BlockID	src/Gamelogic/Voxel/Block.h	/^    BlockID(int id){$/;"	f	class:Block
Blondel	include/Eternia/constants.h	/^        const double Blondel = apostilb\/pi;$/;"	m	namespace:physical::unit
Blondel	src/constants.h	/^        const double Blondel = apostilb\/pi;$/;"	m	namespace:physical::unit
Blondels	include/Eternia/constants.h	/^        const double Blondels = Blondel;$/;"	m	namespace:physical::unit
Blondels	src/constants.h	/^        const double Blondels = Blondel;$/;"	m	namespace:physical::unit
BodyPartHP	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP();$/;"	p	class:BodyPartHP
BodyPartHP	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^class BodyPartHP : public SpecificSerializer {$/;"	c
BodyPartHP	src/Gamelogic/Avatar/AvatarHealth.cpp	/^BodyPartHP::BodyPartHP() {$/;"	f	class:BodyPartHP
BodyPartHP	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP();$/;"	p	class:BodyPartHP
BodyPartHP	src/Gamelogic/Avatar/AvatarHealth.h	/^class BodyPartHP : public SpecificSerializer {$/;"	c
BodyPartHP::BodyPartHP	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP();$/;"	p	class:BodyPartHP
BodyPartHP::BodyPartHP	src/Gamelogic/Avatar/AvatarHealth.cpp	/^BodyPartHP::BodyPartHP() {$/;"	f	class:BodyPartHP
BodyPartHP::BodyPartHP	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP();$/;"	p	class:BodyPartHP
BodyPartHP::armor	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        PType<int> armor; \/\/ determines armor value.$/;"	m	class:BodyPartHP
BodyPartHP::armor	src/Gamelogic/Avatar/AvatarHealth.h	/^        PType<int> armor; \/\/ determines armor value.$/;"	m	class:BodyPartHP
BodyPartHP::max	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> value, max;$/;"	m	class:BodyPartHP
BodyPartHP::max	src/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> value, max;$/;"	m	class:BodyPartHP
BodyPartHP::tickRegen	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        void tickRegen(PType<double> regen);$/;"	p	class:BodyPartHP
BodyPartHP::tickRegen	src/Gamelogic/Avatar/AvatarHealth.cpp	/^void BodyPartHP::tickRegen(PType<double> regen) {$/;"	f	class:BodyPartHP
BodyPartHP::tickRegen	src/Gamelogic/Avatar/AvatarHealth.h	/^        void tickRegen(PType<double> regen);$/;"	p	class:BodyPartHP
BodyPartHP::value	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> value, max;$/;"	m	class:BodyPartHP
BodyPartHP::value	src/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> value, max;$/;"	m	class:BodyPartHP
Bohrium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Bohrium = new Atom("Bohrium", "Bh", 7, 7, 107, 155,106, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, 7, COLOR_SlateGray,ELEM_Transition);$/;"	v
Bohrium	src/Engineering/Chemistry/elementals.h	/^const Atom Bohrium = new Atom("Bohrium", "Bh", 7, 7, 107, 155,106, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, 7, COLOR_SlateGray,ELEM_Transition);$/;"	v
Boron	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Boron = new Atom("Boron", "B", 13, 2, 5, 6,5, 2.34,10000, 0.027, 2349,4200, 1.026, 3, COLOR_Black,ELEM_Metalloid);$/;"	v
Boron	src/Engineering/Chemistry/elementals.h	/^const Atom Boron = new Atom("Boron", "B", 13, 2, 5, 6,5, 2.34,10000, 0.027, 2349,4200, 1.026, 3, COLOR_Black,ELEM_Metalloid);$/;"	v
Bq	include/Eternia/constants.h	/^        const double Bq = Becquerel;$/;"	m	namespace:physical::unit
Bq	src/constants.h	/^        const double Bq = Becquerel;$/;"	m	namespace:physical::unit
British	include/Eternia/constants.h	/^        namespace British { \/\/ long$/;"	n	namespace:physical::unit
British	include/Eternia/constants.h	/^        namespace British {$/;"	n	namespace:physical::unit
British	src/constants.h	/^        namespace British { \/\/ long$/;"	n	namespace:physical::unit
British	src/constants.h	/^        namespace British {$/;"	n	namespace:physical::unit
Bronium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Bronium = new Atom("Bronium", "Br", 17, 4, 35, 45,34, 3.122,10000000000, 0.00012, 265.8,332, 0.474, 7, COLOR_Red,ELEM_Halogen);$/;"	v
Bronium	src/Engineering/Chemistry/elementals.h	/^const Atom Bronium = new Atom("Bronium", "Br", 17, 4, 35, 45,34, 3.122,10000000000, 0.00012, 265.8,332, 0.474, 7, COLOR_Red,ELEM_Halogen);$/;"	v
Btu	include/Eternia/constants.h	/^        const double Btu = 1055.06*Joules;$/;"	m	namespace:physical::unit
Btu	src/constants.h	/^        const double Btu = 1055.06*Joules;$/;"	m	namespace:physical::unit
Building	include/Eternia/Engineering/Civil/Building.h	/^class Building{$/;"	c
Building	include/Eternia/Gamelogic/Buildings/Building.h	/^    Building(); \/\/ Code to set up a building. This is still executed even in a polymorphism case.$/;"	p	class:Building
Building	include/Eternia/Gamelogic/Buildings/Building.h	/^class Building : public SpecificSerializer {$/;"	c
Building	src/Engineering/Civil/Building.h	/^class Building{$/;"	c
Building	src/Gamelogic/Buildings/Building.cpp	/^Building::Building(){$/;"	f	class:Building
Building	src/Gamelogic/Buildings/Building.h	/^    Building(); \/\/ Code to set up a building. This is still executed even in a polymorphism case.$/;"	p	class:Building
Building	src/Gamelogic/Buildings/Building.h	/^class Building : public SpecificSerializer {$/;"	c
Building::Building	include/Eternia/Gamelogic/Buildings/Building.h	/^    Building(); \/\/ Code to set up a building. This is still executed even in a polymorphism case.$/;"	p	class:Building
Building::Building	src/Gamelogic/Buildings/Building.cpp	/^Building::Building(){$/;"	f	class:Building
Building::Building	src/Gamelogic/Buildings/Building.h	/^    Building(); \/\/ Code to set up a building. This is still executed even in a polymorphism case.$/;"	p	class:Building
Building::~Building	include/Eternia/Gamelogic/Buildings/Building.h	/^    virtual ~Building();$/;"	p	class:Building
Building::~Building	src/Gamelogic/Buildings/Building.cpp	/^Building::~Building(){$/;"	f	class:Building
Building::~Building	src/Gamelogic/Buildings/Building.h	/^    virtual ~Building();$/;"	p	class:Building
C	include/Eternia/constants.h	/^        const double C = 16.35;$/;"	m	namespace:electromagnetic::sound
C	include/Eternia/constants.h	/^        const double C = Coulomb;$/;"	m	namespace:physical::unit
C	src/constants.h	/^        const double C = 16.35;$/;"	m	namespace:electromagnetic::sound
C	src/constants.h	/^        const double C = Coulomb;$/;"	m	namespace:physical::unit
CACTL1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CACTL1 /;"	d
CACTL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CACTL1);                             \/* Comparator A Control 1 *\/$/;"	v
CACTL1	src/Emulation/MPU/msp430_declare_consts.h	/^#define CACTL1 /;"	d
CACTL1	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CACTL1);                             \/* Comparator A Control 1 *\/$/;"	v
CACTL2	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CACTL2 /;"	d
CACTL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CACTL2);                             \/* Comparator A Control 2 *\/$/;"	v
CACTL2	src/Emulation/MPU/msp430_declare_consts.h	/^#define CACTL2 /;"	d
CACTL2	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CACTL2);                             \/* Comparator A Control 2 *\/$/;"	v
CAEX	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAEX /;"	d
CAEX	src/Emulation/MPU/msp430g2553.h	/^#define CAEX /;"	d
CAF	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAF /;"	d
CAF	src/Emulation/MPU/msp430g2553.h	/^#define CAF /;"	d
CAIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAIE /;"	d
CAIE	src/Emulation/MPU/msp430g2553.h	/^#define CAIE /;"	d
CAIES	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAIES /;"	d
CAIES	src/Emulation/MPU/msp430g2553.h	/^#define CAIES /;"	d
CAIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAIFG /;"	d
CAIFG	src/Emulation/MPU/msp430g2553.h	/^#define CAIFG /;"	d
CAL12MHZ	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CAL12MHZ /;"	d
CAL12MHZ	src/Emulation/MPU/msp430_declare_consts.h	/^#define CAL12MHZ /;"	d
CAL16MHZ	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CAL16MHZ /;"	d
CAL16MHZ	src/Emulation/MPU/msp430_declare_consts.h	/^#define CAL16MHZ /;"	d
CAL1MHZ	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CAL1MHZ /;"	d
CAL1MHZ	src/Emulation/MPU/msp430_declare_consts.h	/^#define CAL1MHZ /;"	d
CAL8MHZ	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CAL8MHZ /;"	d
CAL8MHZ	src/Emulation/MPU/msp430_declare_consts.h	/^#define CAL8MHZ /;"	d
CALBC1_12MHZ	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CALBC1_12MHZ /;"	d
CALBC1_12MHZ	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALBC1_12MHZ);                       \/* BCSCTL1 Calibration Data for 12MHz *\/$/;"	v
CALBC1_12MHZ	src/Emulation/MPU/msp430_declare_consts.h	/^#define CALBC1_12MHZ /;"	d
CALBC1_12MHZ	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALBC1_12MHZ);                       \/* BCSCTL1 Calibration Data for 12MHz *\/$/;"	v
CALBC1_16MHZ	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CALBC1_16MHZ /;"	d
CALBC1_16MHZ	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALBC1_16MHZ);                       \/* BCSCTL1 Calibration Data for 16MHz *\/$/;"	v
CALBC1_16MHZ	src/Emulation/MPU/msp430_declare_consts.h	/^#define CALBC1_16MHZ /;"	d
CALBC1_16MHZ	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALBC1_16MHZ);                       \/* BCSCTL1 Calibration Data for 16MHz *\/$/;"	v
CALBC1_1MHZ	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CALBC1_1MHZ /;"	d
CALBC1_1MHZ	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALBC1_1MHZ);                        \/* BCSCTL1 Calibration Data for 1MHz *\/$/;"	v
CALBC1_1MHZ	src/Emulation/MPU/msp430_declare_consts.h	/^#define CALBC1_1MHZ /;"	d
CALBC1_1MHZ	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALBC1_1MHZ);                        \/* BCSCTL1 Calibration Data for 1MHz *\/$/;"	v
CALBC1_8MHZ	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CALBC1_8MHZ /;"	d
CALBC1_8MHZ	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALBC1_8MHZ);                        \/* BCSCTL1 Calibration Data for 8MHz *\/$/;"	v
CALBC1_8MHZ	src/Emulation/MPU/msp430_declare_consts.h	/^#define CALBC1_8MHZ /;"	d
CALBC1_8MHZ	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALBC1_8MHZ);                        \/* BCSCTL1 Calibration Data for 8MHz *\/$/;"	v
CALDCO_12MHZ	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CALDCO_12MHZ /;"	d
CALDCO_12MHZ	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALDCO_12MHZ);                       \/* DCOCTL  Calibration Data for 12MHz *\/$/;"	v
CALDCO_12MHZ	src/Emulation/MPU/msp430_declare_consts.h	/^#define CALDCO_12MHZ /;"	d
CALDCO_12MHZ	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALDCO_12MHZ);                       \/* DCOCTL  Calibration Data for 12MHz *\/$/;"	v
CALDCO_16MHZ	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CALDCO_16MHZ /;"	d
CALDCO_16MHZ	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALDCO_16MHZ);                       \/* DCOCTL  Calibration Data for 16MHz *\/$/;"	v
CALDCO_16MHZ	src/Emulation/MPU/msp430_declare_consts.h	/^#define CALDCO_16MHZ /;"	d
CALDCO_16MHZ	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALDCO_16MHZ);                       \/* DCOCTL  Calibration Data for 16MHz *\/$/;"	v
CALDCO_1MHZ	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CALDCO_1MHZ /;"	d
CALDCO_1MHZ	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALDCO_1MHZ);                        \/* DCOCTL  Calibration Data for 1MHz *\/$/;"	v
CALDCO_1MHZ	src/Emulation/MPU/msp430_declare_consts.h	/^#define CALDCO_1MHZ /;"	d
CALDCO_1MHZ	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALDCO_1MHZ);                        \/* DCOCTL  Calibration Data for 1MHz *\/$/;"	v
CALDCO_8MHZ	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CALDCO_8MHZ /;"	d
CALDCO_8MHZ	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALDCO_8MHZ);                        \/* DCOCTL  Calibration Data for 8MHz *\/$/;"	v
CALDCO_8MHZ	src/Emulation/MPU/msp430_declare_consts.h	/^#define CALDCO_8MHZ /;"	d
CALDCO_8MHZ	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CALDCO_8MHZ);                        \/* DCOCTL  Calibration Data for 8MHz *\/$/;"	v
CAON	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAON /;"	d
CAON	src/Emulation/MPU/msp430g2553.h	/^#define CAON /;"	d
CAOUT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAOUT /;"	d
CAOUT	src/Emulation/MPU/msp430g2553.h	/^#define CAOUT /;"	d
CAP	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAP /;"	d
CAP	src/Emulation/MPU/msp430g2553.h	/^#define CAP /;"	d
CAPD	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define CAPD /;"	d
CAPD	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CAPD);                               \/* Comparator A Port Disable *\/$/;"	v
CAPD	src/Emulation/MPU/msp430_declare_consts.h	/^#define CAPD /;"	d
CAPD	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(CAPD);                               \/* Comparator A Port Disable *\/$/;"	v
CAPD0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAPD0 /;"	d
CAPD0	src/Emulation/MPU/msp430g2553.h	/^#define CAPD0 /;"	d
CAPD1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAPD1 /;"	d
CAPD1	src/Emulation/MPU/msp430g2553.h	/^#define CAPD1 /;"	d
CAPD2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAPD2 /;"	d
CAPD2	src/Emulation/MPU/msp430g2553.h	/^#define CAPD2 /;"	d
CAPD3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAPD3 /;"	d
CAPD3	src/Emulation/MPU/msp430g2553.h	/^#define CAPD3 /;"	d
CAPD4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAPD4 /;"	d
CAPD4	src/Emulation/MPU/msp430g2553.h	/^#define CAPD4 /;"	d
CAPD5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAPD5 /;"	d
CAPD5	src/Emulation/MPU/msp430g2553.h	/^#define CAPD5 /;"	d
CAPD6	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAPD6 /;"	d
CAPD6	src/Emulation/MPU/msp430g2553.h	/^#define CAPD6 /;"	d
CAPD7	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAPD7 /;"	d
CAPD7	src/Emulation/MPU/msp430g2553.h	/^#define CAPD7 /;"	d
CAREF0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAREF0 /;"	d
CAREF0	src/Emulation/MPU/msp430g2553.h	/^#define CAREF0 /;"	d
CAREF1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAREF1 /;"	d
CAREF1	src/Emulation/MPU/msp430g2553.h	/^#define CAREF1 /;"	d
CAREF_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAREF_0 /;"	d
CAREF_0	src/Emulation/MPU/msp430g2553.h	/^#define CAREF_0 /;"	d
CAREF_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAREF_1 /;"	d
CAREF_1	src/Emulation/MPU/msp430g2553.h	/^#define CAREF_1 /;"	d
CAREF_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAREF_2 /;"	d
CAREF_2	src/Emulation/MPU/msp430g2553.h	/^#define CAREF_2 /;"	d
CAREF_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CAREF_3 /;"	d
CAREF_3	src/Emulation/MPU/msp430g2553.h	/^#define CAREF_3 /;"	d
CARSEL	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CARSEL /;"	d
CARSEL	src/Emulation/MPU/msp430g2553.h	/^#define CARSEL /;"	d
CASHORT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CASHORT /;"	d
CASHORT	src/Emulation/MPU/msp430g2553.h	/^#define CASHORT /;"	d
CBUILDING_H_	include/Eternia/Engineering/Civil/Building.h	/^#define CBUILDING_H_$/;"	d
CBUILDING_H_	src/Engineering/Civil/Building.h	/^#define CBUILDING_H_$/;"	d
CCI	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCI /;"	d
CCI	src/Emulation/MPU/msp430g2553.h	/^#define CCI /;"	d
CCIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCIE /;"	d
CCIE	src/Emulation/MPU/msp430g2553.h	/^#define CCIE /;"	d
CCIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCIFG /;"	d
CCIFG	src/Emulation/MPU/msp430g2553.h	/^#define CCIFG /;"	d
CCIS0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCIS0 /;"	d
CCIS0	src/Emulation/MPU/msp430g2553.h	/^#define CCIS0 /;"	d
CCIS1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCIS1 /;"	d
CCIS1	src/Emulation/MPU/msp430g2553.h	/^#define CCIS1 /;"	d
CCIS_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCIS_0 /;"	d
CCIS_0	src/Emulation/MPU/msp430g2553.h	/^#define CCIS_0 /;"	d
CCIS_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCIS_1 /;"	d
CCIS_1	src/Emulation/MPU/msp430g2553.h	/^#define CCIS_1 /;"	d
CCIS_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCIS_2 /;"	d
CCIS_2	src/Emulation/MPU/msp430g2553.h	/^#define CCIS_2 /;"	d
CCIS_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCIS_3 /;"	d
CCIS_3	src/Emulation/MPU/msp430g2553.h	/^#define CCIS_3 /;"	d
CCR0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCR0 /;"	d
CCR0	src/Emulation/MPU/msp430g2553.h	/^#define CCR0 /;"	d
CCR0_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCR0_ /;"	d
CCR0_	src/Emulation/MPU/msp430g2553.h	/^#define CCR0_ /;"	d
CCR1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCR1 /;"	d
CCR1	src/Emulation/MPU/msp430g2553.h	/^#define CCR1 /;"	d
CCR1_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCR1_ /;"	d
CCR1_	src/Emulation/MPU/msp430g2553.h	/^#define CCR1_ /;"	d
CCR2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCR2 /;"	d
CCR2	src/Emulation/MPU/msp430g2553.h	/^#define CCR2 /;"	d
CCR2_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCR2_ /;"	d
CCR2_	src/Emulation/MPU/msp430g2553.h	/^#define CCR2_ /;"	d
CCTL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCTL0 /;"	d
CCTL0	src/Emulation/MPU/msp430g2553.h	/^#define CCTL0 /;"	d
CCTL0_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCTL0_ /;"	d
CCTL0_	src/Emulation/MPU/msp430g2553.h	/^#define CCTL0_ /;"	d
CCTL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCTL1 /;"	d
CCTL1	src/Emulation/MPU/msp430g2553.h	/^#define CCTL1 /;"	d
CCTL1_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCTL1_ /;"	d
CCTL1_	src/Emulation/MPU/msp430g2553.h	/^#define CCTL1_ /;"	d
CCTL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCTL2 /;"	d
CCTL2	src/Emulation/MPU/msp430g2553.h	/^#define CCTL2 /;"	d
CCTL2_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CCTL2_ /;"	d
CCTL2_	src/Emulation/MPU/msp430g2553.h	/^#define CCTL2_ /;"	d
CD	include/Eternia/constants.h	/^        const double CD = 17.32;$/;"	m	namespace:electromagnetic::sound
CD	src/constants.h	/^        const double CD = 17.32;$/;"	m	namespace:electromagnetic::sound
CG1	include/Eternia/Emulation/MPU/msp430_Registers.h	/^#define CG1 /;"	d
CG1	src/Emulation/MPU/msp430_Registers.h	/^#define CG1 /;"	d
CG2	include/Eternia/Emulation/MPU/msp430_Registers.h	/^#define CG2 /;"	d
CG2	src/Emulation/MPU/msp430_Registers.h	/^#define CG2 /;"	d
CHANNELLED_CLIENT_H	include/Eternia/WebFramework/Network/ChannelledClient.h	/^#define CHANNELLED_CLIENT_H$/;"	d
CHANNELLED_CLIENT_H	src/WebFramework/Network/ChannelledClient.h	/^#define CHANNELLED_CLIENT_H$/;"	d
CHANNELLED_SERVER_H	include/Eternia/WebFramework/Network/ChannelledServer.h	/^#define CHANNELLED_SERVER_H$/;"	d
CHANNELLED_SERVER_H	src/WebFramework/Network/ChannelledServer.h	/^#define CHANNELLED_SERVER_H$/;"	d
CHARSTRING_H_	include/Eternia/Data/CharString.h	/^#define CHARSTRING_H_$/;"	d
CHARSTRING_H_	src/Data/CharString.h	/^#define CHARSTRING_H_$/;"	d
CHATCHANNEL_H_	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^#define CHATCHANNEL_H_$/;"	d
CHATCHANNEL_H_	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^#define CHATCHANNEL_H_$/;"	d
CHATCLIENT_H_	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^#define CHATCLIENT_H_$/;"	d
CHATCLIENT_H_	src/WebFramework/Backend/ChatManager/ChatClient.h	/^#define CHATCLIENT_H_$/;"	d
CHATMANAGER_H_	include/Eternia/WebFramework/Backend/ChatManager/ChatManager.h	/^#define CHATMANAGER_H_$/;"	d
CHATMANAGER_H_	src/WebFramework/Backend/ChatManager/ChatManager.h	/^#define CHATMANAGER_H_$/;"	d
CHAT_FILTER_H_	include/Eternia/WebFramework/Backend/ChatManager/ChatFilter.h	/^#define CHAT_FILTER_H_$/;"	d
CHAT_FILTER_H_	src/WebFramework/Backend/ChatManager/ChatFilter.h	/^#define CHAT_FILTER_H_$/;"	d
CHEMPHASE	include/Eternia/Engineering/Chemistry/Atom.h	/^enum CHEMPHASE {PHASE_Solid, PHASE_Liquid, PHASE_Gas, PHASE_Plasma};$/;"	g
CHEMPHASE	src/Engineering/Chemistry/Atom.h	/^enum CHEMPHASE {PHASE_Solid, PHASE_Liquid, PHASE_Gas, PHASE_Plasma};$/;"	g
CIRCULARMOTION_H_	include/Eternia/Engineering/Physics/Kinematics/CircularMotion.h	/^#define CIRCULARMOTION_H_$/;"	d
CIRCULARMOTION_H_	src/Engineering/Physics/Kinematics/CircularMotion.h	/^#define CIRCULARMOTION_H_$/;"	d
CLKList	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        LinkedList<CLKModule>* CLKList;$/;"	m	class:CLKProvider
CLKList	src/Engineering/Electrical/Signal/CLKProvider.h	/^        LinkedList<CLKModule>* CLKList;$/;"	m	class:CLKProvider
CLKModule	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        CLKModule(int freq);$/;"	p	class:CLKModule
CLKModule	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^class CLKModule {$/;"	c
CLKModule	src/Engineering/Electrical/Signal/CLKProvider.cpp	/^CLKModule::CLKModule(int freq) {$/;"	f	class:CLKModule
CLKModule	src/Engineering/Electrical/Signal/CLKProvider.h	/^        CLKModule(int freq);$/;"	p	class:CLKModule
CLKModule	src/Engineering/Electrical/Signal/CLKProvider.h	/^class CLKModule {$/;"	c
CLKModule::CLKModule	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        CLKModule(int freq);$/;"	p	class:CLKModule
CLKModule::CLKModule	src/Engineering/Electrical/Signal/CLKProvider.cpp	/^CLKModule::CLKModule(int freq) {$/;"	f	class:CLKModule
CLKModule::CLKModule	src/Engineering/Electrical/Signal/CLKProvider.h	/^        CLKModule(int freq);$/;"	p	class:CLKModule
CLKModule::Counter	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        int frequency, Counter;$/;"	m	class:CLKModule
CLKModule::Counter	src/Engineering/Electrical/Signal/CLKProvider.h	/^        int frequency, Counter;$/;"	m	class:CLKModule
CLKModule::frequency	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        int frequency, Counter;$/;"	m	class:CLKModule
CLKModule::frequency	src/Engineering/Electrical/Signal/CLKProvider.h	/^        int frequency, Counter;$/;"	m	class:CLKModule
CLKModule::func	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        void (func)();$/;"	p	class:CLKModule
CLKModule::func	src/Engineering/Electrical/Signal/CLKProvider.h	/^        void (func)();$/;"	p	class:CLKModule
CLKModule::setTimeDispersal	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        void setTimeDispersal(int time);$/;"	p	class:CLKModule
CLKModule::setTimeDispersal	src/Engineering/Electrical/Signal/CLKProvider.cpp	/^void CLKModule::setTimeDispersal(int time) {$/;"	f	class:CLKModule
CLKModule::setTimeDispersal	src/Engineering/Electrical/Signal/CLKProvider.h	/^        void setTimeDispersal(int time);$/;"	p	class:CLKModule
CLKModule::tick	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        void tick();$/;"	p	class:CLKModule
CLKModule::tick	src/Engineering/Electrical/Signal/CLKProvider.cpp	/^void CLKModule::tick() {$/;"	f	class:CLKModule
CLKModule::tick	src/Engineering/Electrical/Signal/CLKProvider.h	/^        void tick();$/;"	p	class:CLKModule
CLKModule::timedispersal	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        float timedispersal;$/;"	m	class:CLKModule
CLKModule::timedispersal	src/Engineering/Electrical/Signal/CLKProvider.h	/^        float timedispersal;$/;"	m	class:CLKModule
CLKProvider	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        CLKProvider();$/;"	p	class:CLKProvider
CLKProvider	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^class CLKProvider {$/;"	c
CLKProvider	src/Engineering/Electrical/Signal/CLKProvider.cpp	/^CLKProvider::CLKProvider() {$/;"	f	class:CLKProvider
CLKProvider	src/Engineering/Electrical/Signal/CLKProvider.h	/^        CLKProvider();$/;"	p	class:CLKProvider
CLKProvider	src/Engineering/Electrical/Signal/CLKProvider.h	/^class CLKProvider {$/;"	c
CLKProvider::CLKList	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        LinkedList<CLKModule>* CLKList;$/;"	m	class:CLKProvider
CLKProvider::CLKList	src/Engineering/Electrical/Signal/CLKProvider.h	/^        LinkedList<CLKModule>* CLKList;$/;"	m	class:CLKProvider
CLKProvider::CLKProvider	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        CLKProvider();$/;"	p	class:CLKProvider
CLKProvider::CLKProvider	src/Engineering/Electrical/Signal/CLKProvider.cpp	/^CLKProvider::CLKProvider() {$/;"	f	class:CLKProvider
CLKProvider::CLKProvider	src/Engineering/Electrical/Signal/CLKProvider.h	/^        CLKProvider();$/;"	p	class:CLKProvider
CLKProvider::setFrequencyEvent	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        void setFrequencyEvent(int frequency, void (function)());$/;"	p	class:CLKProvider
CLKProvider::setFrequencyEvent	src/Engineering/Electrical/Signal/CLKProvider.cpp	/^void CLKProvider::setFrequencyEvent(int frequency, void (function)()) {$/;"	f	class:CLKProvider
CLKProvider::setFrequencyEvent	src/Engineering/Electrical/Signal/CLKProvider.h	/^        void setFrequencyEvent(int frequency, void (function)());$/;"	p	class:CLKProvider
CLKProvider::tick	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        void tick();$/;"	p	class:CLKProvider
CLKProvider::tick	src/Engineering/Electrical/Signal/CLKProvider.cpp	/^void CLKProvider::tick() {$/;"	f	class:CLKProvider
CLKProvider::tick	src/Engineering/Electrical/Signal/CLKProvider.h	/^        void tick();$/;"	p	class:CLKProvider
CLKProvider_H	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^#define CLKProvider_H$/;"	d
CLKProvider_H	src/Engineering/Electrical/Signal/CLKProvider.h	/^#define CLKProvider_H$/;"	d
CM0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CM0 /;"	d
CM0	src/Emulation/MPU/msp430g2553.h	/^#define CM0 /;"	d
CM1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CM1 /;"	d
CM1	src/Emulation/MPU/msp430g2553.h	/^#define CM1 /;"	d
CM_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CM_0 /;"	d
CM_0	src/Emulation/MPU/msp430g2553.h	/^#define CM_0 /;"	d
CM_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CM_1 /;"	d
CM_1	src/Emulation/MPU/msp430g2553.h	/^#define CM_1 /;"	d
CM_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CM_2 /;"	d
CM_2	src/Emulation/MPU/msp430g2553.h	/^#define CM_2 /;"	d
CM_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CM_3 /;"	d
CM_3	src/Emulation/MPU/msp430g2553.h	/^#define CM_3 /;"	d
CNext	include/Eternia/Data/DoubleList.h	/^        DoubleNode *CNext;$/;"	m	class:DoubleList
CNext	include/Eternia/Data/IntegerList.h	/^        IntegerNode *Head, *Tail, *CNext;$/;"	m	class:IntegerList
CNext	src/Data/DoubleList.h	/^        DoubleNode *CNext;$/;"	m	class:DoubleList
CNext	src/Data/IntegerList.h	/^        IntegerNode *Head, *Tail, *CNext;$/;"	m	class:IntegerList
CODEPARSER_H_	include/Eternia/Parsing/CodeParser.h	/^#define CODEPARSER_H_$/;"	d
CODEPARSER_H_	src/Parsing/CodeParser.h	/^#define CODEPARSER_H_$/;"	d
COLLISION_H_	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^#define COLLISION_H_$/;"	d
COLLISION_H_	src/Engineering/Physics/Kinematics/Collision1D.h	/^#define COLLISION_H_$/;"	d
COMPANYTYPE	include/Eternia/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	g
COMPANYTYPE	src/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	g
COMPARATORA_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define COMPARATORA_VECTOR /;"	d
COMPARATORA_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define COMPARATORA_VECTOR /;"	d
COMPILER_ID	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPLEXNUM_H_	include/Eternia/Math/Complex.hpp	/^#define COMPLEXNUM_H_$/;"	d
COMPLEXNUM_H_	src/Math/Complex.hpp	/^#define COMPLEXNUM_H_$/;"	d
COMPONENTRATING_h_	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^#define COMPONENTRATING_h_$/;"	d
COMPONENTRATING_h_	src/Engineering/Electrical/Components/ComponentRating.h	/^#define COMPONENTRATING_h_$/;"	d
COMPONENT_h_	include/Eternia/Engineering/Electrical/Components/Component.h	/^#define COMPONENT_h_$/;"	d
COMPONENT_h_	src/Engineering/Electrical/Components/Component.h	/^#define COMPONENT_h_$/;"	d
COMPOSITE_H_	include/Eternia/Engineering/Chemistry/Composite.h	/^#define COMPOSITE_H_$/;"	d
COMPOSITE_H_	src/Engineering/Chemistry/Composite.h	/^#define COMPOSITE_H_$/;"	d
COMPRESSEDJSON_H_	include/Eternia/WebFramework/Encoding/CompressedJSON.h	/^#define COMPRESSEDJSON_H_$/;"	d
COMPRESSEDJSON_H_	src/WebFramework/Encoding/CompressedJSON.h	/^#define COMPRESSEDJSON_H_$/;"	d
CONSEQ0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CONSEQ0 /;"	d
CONSEQ0	src/Emulation/MPU/msp430g2553.h	/^#define CONSEQ0 /;"	d
CONSEQ1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CONSEQ1 /;"	d
CONSEQ1	src/Emulation/MPU/msp430g2553.h	/^#define CONSEQ1 /;"	d
CONSEQ_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CONSEQ_0 /;"	d
CONSEQ_0	src/Emulation/MPU/msp430g2553.h	/^#define CONSEQ_0 /;"	d
CONSEQ_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CONSEQ_1 /;"	d
CONSEQ_1	src/Emulation/MPU/msp430g2553.h	/^#define CONSEQ_1 /;"	d
CONSEQ_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CONSEQ_2 /;"	d
CONSEQ_2	src/Emulation/MPU/msp430g2553.h	/^#define CONSEQ_2 /;"	d
CONSEQ_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CONSEQ_3 /;"	d
CONSEQ_3	src/Emulation/MPU/msp430g2553.h	/^#define CONSEQ_3 /;"	d
CONSTANTS_H_	include/Eternia/constants.h	/^#define CONSTANTS_H_$/;"	d
CONSTANTS_H_	src/constants.h	/^#define CONSTANTS_H_$/;"	d
CONVERT_H_	include/Eternia/Math/Conversion/Convert.h	/^#define CONVERT_H_$/;"	d
CONVERT_H_	src/Math/Conversion/Convert.h	/^#define CONVERT_H_$/;"	d
COV	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define COV /;"	d
COV	src/Emulation/MPU/msp430g2553.h	/^#define COV /;"	d
CPLBASEFMT	include/Eternia/Programming/Instruction.h	/^enum CPLBASEFMT {CPL_INTEL, CPL_AMD, CPL_NVIDIA, CPL_TI, CPLOTHER};$/;"	g
CPLBASEFMT	src/Programming/Instruction.h	/^enum CPLBASEFMT {CPL_INTEL, CPL_AMD, CPL_NVIDIA, CPL_TI, CPLOTHER};$/;"	g
CPLFloat	include/Eternia/Programming/CPLScript/CPLVariable.h	/^enum CPLVarType {CPLInt, CPLString, CPLFloat}; \/\/ Variable types are automatically detected.$/;"	e	enum:CPLVarType
CPLFloat	src/Programming/CPLScript/CPLVariable.h	/^enum CPLVarType {CPLInt, CPLString, CPLFloat}; \/\/ Variable types are automatically detected.$/;"	e	enum:CPLVarType
CPLInt	include/Eternia/Programming/CPLScript/CPLVariable.h	/^enum CPLVarType {CPLInt, CPLString, CPLFloat}; \/\/ Variable types are automatically detected.$/;"	e	enum:CPLVarType
CPLInt	src/Programming/CPLScript/CPLVariable.h	/^enum CPLVarType {CPLInt, CPLString, CPLFloat}; \/\/ Variable types are automatically detected.$/;"	e	enum:CPLVarType
CPLOTHER	include/Eternia/Programming/Instruction.h	/^enum CPLBASEFMT {CPL_INTEL, CPL_AMD, CPL_NVIDIA, CPL_TI, CPLOTHER};$/;"	e	enum:CPLBASEFMT
CPLOTHER	src/Programming/Instruction.h	/^enum CPLBASEFMT {CPL_INTEL, CPL_AMD, CPL_NVIDIA, CPL_TI, CPLOTHER};$/;"	e	enum:CPLBASEFMT
CPLSCRIPTER_H_	include/Eternia/Programming/CPLScript/CPLScripter.h	/^#define CPLSCRIPTER_H_$/;"	d
CPLSCRIPTER_H_	src/Programming/CPLScript/CPLScripter.h	/^#define CPLSCRIPTER_H_$/;"	d
CPLScripter	include/Eternia/Programming/CPLScript/CPLScripter.h	/^        CPLScripter(CharString script, int spaceKb);$/;"	p	class:CPLScripter
CPLScripter	include/Eternia/Programming/CPLScript/CPLScripter.h	/^class CPLScripter {$/;"	c
CPLScripter	src/Programming/CPLScript/CPLScripter.h	/^        CPLScripter(CharString script, int spaceKb);$/;"	p	class:CPLScripter
CPLScripter	src/Programming/CPLScript/CPLScripter.h	/^class CPLScripter {$/;"	c
CPLScripter::CPLScripter	include/Eternia/Programming/CPLScript/CPLScripter.h	/^        CPLScripter(CharString script, int spaceKb);$/;"	p	class:CPLScripter
CPLScripter::CPLScripter	src/Programming/CPLScript/CPLScripter.h	/^        CPLScripter(CharString script, int spaceKb);$/;"	p	class:CPLScripter
CPLScripter::globalvars	include/Eternia/Programming/CPLScript/CPLScripter.h	/^        HashMap<CPLVariable> globalvars; \/\/ Global variables. Used everywhere in text, for this specific script.$/;"	m	class:CPLScripter
CPLScripter::globalvars	src/Programming/CPLScript/CPLScripter.h	/^        HashMap<CPLVariable> globalvars; \/\/ Global variables. Used everywhere in text, for this specific script.$/;"	m	class:CPLScripter
CPLScripter::instructions	include/Eternia/Programming/CPLScript/CPLScripter.h	/^        LinkedList<Instruction> instructions; \/\/ general list of compiled instructions.$/;"	m	class:CPLScripter
CPLScripter::instructions	src/Programming/CPLScript/CPLScripter.h	/^        LinkedList<Instruction> instructions; \/\/ general list of compiled instructions.$/;"	m	class:CPLScripter
CPLScripter::line	include/Eternia/Programming/CPLScript/CPLScripter.h	/^        int line; \/\/ current line$/;"	m	class:CPLScripter
CPLScripter::line	src/Programming/CPLScript/CPLScripter.h	/^        int line; \/\/ current line$/;"	m	class:CPLScripter
CPLScripter::precompileAll	include/Eternia/Programming/CPLScript/CPLScripter.h	/^        void precompileAll(); \/\/ precompiles all of the scripts into *.cpo files.$/;"	p	class:CPLScripter
CPLScripter::precompileAll	src/Programming/CPLScript/CPLScripter.h	/^        void precompileAll(); \/\/ precompiles all of the scripts into *.cpo files.$/;"	p	class:CPLScripter
CPLString	include/Eternia/Programming/CPLScript/CPLVariable.h	/^enum CPLVarType {CPLInt, CPLString, CPLFloat}; \/\/ Variable types are automatically detected.$/;"	e	enum:CPLVarType
CPLString	src/Programming/CPLScript/CPLVariable.h	/^enum CPLVarType {CPLInt, CPLString, CPLFloat}; \/\/ Variable types are automatically detected.$/;"	e	enum:CPLVarType
CPLVAR_H_	include/Eternia/Programming/CPLScript/CPLVariable.h	/^#define CPLVAR_H_$/;"	d
CPLVAR_H_	src/Programming/CPLScript/CPLVariable.h	/^#define CPLVAR_H_$/;"	d
CPLVarType	include/Eternia/Programming/CPLScript/CPLVariable.h	/^enum CPLVarType {CPLInt, CPLString, CPLFloat}; \/\/ Variable types are automatically detected.$/;"	g
CPLVarType	src/Programming/CPLScript/CPLVariable.h	/^enum CPLVarType {CPLInt, CPLString, CPLFloat}; \/\/ Variable types are automatically detected.$/;"	g
CPLVariable	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        CPLVariable(CharString var); \/\/ initialize variable, auto-detect type$/;"	p	class:CPLVariable
CPLVariable	include/Eternia/Programming/CPLScript/CPLVariable.h	/^class CPLVariable {$/;"	c
CPLVariable	src/Programming/CPLScript/CPLVariable.h	/^        CPLVariable(CharString var); \/\/ initialize variable, auto-detect type$/;"	p	class:CPLVariable
CPLVariable	src/Programming/CPLScript/CPLVariable.h	/^class CPLVariable {$/;"	c
CPLVariable::CPLVariable	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        CPLVariable(CharString var); \/\/ initialize variable, auto-detect type$/;"	p	class:CPLVariable
CPLVariable::CPLVariable	src/Programming/CPLScript/CPLVariable.h	/^        CPLVariable(CharString var); \/\/ initialize variable, auto-detect type$/;"	p	class:CPLVariable
CPLVariable::data	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        char* data; \/\/ direct data to be converted, length for conversion is based off of type$/;"	m	class:CPLVariable
CPLVariable::data	src/Programming/CPLScript/CPLVariable.h	/^        char* data; \/\/ direct data to be converted, length for conversion is based off of type$/;"	m	class:CPLVariable
CPLVariable::getF	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        float getF(); \/\/ get float$/;"	p	class:CPLVariable
CPLVariable::getF	src/Programming/CPLScript/CPLVariable.h	/^        float getF(); \/\/ get float$/;"	p	class:CPLVariable
CPLVariable::getI	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        int getI();   \/\/ get int$/;"	p	class:CPLVariable
CPLVariable::getI	src/Programming/CPLScript/CPLVariable.h	/^        int getI();   \/\/ get int$/;"	p	class:CPLVariable
CPLVariable::getL	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        long getL();  \/\/ get long$/;"	p	class:CPLVariable
CPLVariable::getL	src/Programming/CPLScript/CPLVariable.h	/^        long getL();  \/\/ get long$/;"	p	class:CPLVariable
CPLVariable::getS	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        char* getS(); \/\/ get string$/;"	p	class:CPLVariable
CPLVariable::getS	src/Programming/CPLScript/CPLVariable.h	/^        char* getS(); \/\/ get string$/;"	p	class:CPLVariable
CPLVariable::getType	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        CPLVarType getType(); \/\/ get data type$/;"	p	class:CPLVariable
CPLVariable::getType	src/Programming/CPLScript/CPLVariable.h	/^        CPLVarType getType(); \/\/ get data type$/;"	p	class:CPLVariable
CPLVariable::set	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        void set(CharString var); \/\/ set this variable, auto-detect type$/;"	p	class:CPLVariable
CPLVariable::set	src/Programming/CPLScript/CPLVariable.h	/^        void set(CharString var); \/\/ set this variable, auto-detect type$/;"	p	class:CPLVariable
CPLVariable::type	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        CPLVarType type;$/;"	m	class:CPLVariable
CPLVariable::type	src/Programming/CPLScript/CPLVariable.h	/^        CPLVarType type;$/;"	m	class:CPLVariable
CPL_AMD	include/Eternia/Programming/Instruction.h	/^enum CPLBASEFMT {CPL_INTEL, CPL_AMD, CPL_NVIDIA, CPL_TI, CPLOTHER};$/;"	e	enum:CPLBASEFMT
CPL_AMD	src/Programming/Instruction.h	/^enum CPLBASEFMT {CPL_INTEL, CPL_AMD, CPL_NVIDIA, CPL_TI, CPLOTHER};$/;"	e	enum:CPLBASEFMT
CPL_INTEL	include/Eternia/Programming/Instruction.h	/^enum CPLBASEFMT {CPL_INTEL, CPL_AMD, CPL_NVIDIA, CPL_TI, CPLOTHER};$/;"	e	enum:CPLBASEFMT
CPL_INTEL	src/Programming/Instruction.h	/^enum CPLBASEFMT {CPL_INTEL, CPL_AMD, CPL_NVIDIA, CPL_TI, CPLOTHER};$/;"	e	enum:CPLBASEFMT
CPL_NVIDIA	include/Eternia/Programming/Instruction.h	/^enum CPLBASEFMT {CPL_INTEL, CPL_AMD, CPL_NVIDIA, CPL_TI, CPLOTHER};$/;"	e	enum:CPLBASEFMT
CPL_NVIDIA	src/Programming/Instruction.h	/^enum CPLBASEFMT {CPL_INTEL, CPL_AMD, CPL_NVIDIA, CPL_TI, CPLOTHER};$/;"	e	enum:CPLBASEFMT
CPL_TI	include/Eternia/Programming/Instruction.h	/^enum CPLBASEFMT {CPL_INTEL, CPL_AMD, CPL_NVIDIA, CPL_TI, CPLOTHER};$/;"	e	enum:CPLBASEFMT
CPL_TI	src/Programming/Instruction.h	/^enum CPLBASEFMT {CPL_INTEL, CPL_AMD, CPL_NVIDIA, CPL_TI, CPLOTHER};$/;"	e	enum:CPLBASEFMT
CPUOFF	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CPUOFF /;"	d
CPUOFF	src/Emulation/MPU/msp430g2553.h	/^#define CPUOFF /;"	d
CRAFTING_STATS_H	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^#define CRAFTING_STATS_H$/;"	d
CRAFTING_STATS_H	src/Gamelogic/Crafting/CraftingStats.h	/^#define CRAFTING_STATS_H$/;"	d
CREATE_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define CREATE_VECTOR(/;"	d
CREATE_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define CREATE_VECTOR(/;"	d
CRYPTO_DEFINER_CLASS_H_	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^#define CRYPTO_DEFINER_CLASS_H_$/;"	d
CRYPTO_DEFINER_CLASS_H_	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^#define CRYPTO_DEFINER_CLASS_H_$/;"	d
CRYPTO_DEFINES_H_	include/Eternia/Algorithm/Cryptography/CryptoDefines.h	/^#define CRYPTO_DEFINES_H_$/;"	d
CRYPTO_DEFINES_H_	src/Algorithm/Cryptography/CryptoDefines.h	/^#define CRYPTO_DEFINES_H_$/;"	d
CR_DEATHCAUSE	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^enum CR_DEATHCAUSE {CR_None, CR_OverVoltage, CR_OverCurrent, CR_OverHeat};$/;"	g
CR_DEATHCAUSE	src/Engineering/Electrical/Components/ComponentRating.h	/^enum CR_DEATHCAUSE {CR_None, CR_OverVoltage, CR_OverCurrent, CR_OverHeat};$/;"	g
CR_None	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^enum CR_DEATHCAUSE {CR_None, CR_OverVoltage, CR_OverCurrent, CR_OverHeat};$/;"	e	enum:CR_DEATHCAUSE
CR_None	src/Engineering/Electrical/Components/ComponentRating.h	/^enum CR_DEATHCAUSE {CR_None, CR_OverVoltage, CR_OverCurrent, CR_OverHeat};$/;"	e	enum:CR_DEATHCAUSE
CR_OverCurrent	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^enum CR_DEATHCAUSE {CR_None, CR_OverVoltage, CR_OverCurrent, CR_OverHeat};$/;"	e	enum:CR_DEATHCAUSE
CR_OverCurrent	src/Engineering/Electrical/Components/ComponentRating.h	/^enum CR_DEATHCAUSE {CR_None, CR_OverVoltage, CR_OverCurrent, CR_OverHeat};$/;"	e	enum:CR_DEATHCAUSE
CR_OverHeat	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^enum CR_DEATHCAUSE {CR_None, CR_OverVoltage, CR_OverCurrent, CR_OverHeat};$/;"	e	enum:CR_DEATHCAUSE
CR_OverHeat	src/Engineering/Electrical/Components/ComponentRating.h	/^enum CR_DEATHCAUSE {CR_None, CR_OverVoltage, CR_OverCurrent, CR_OverHeat};$/;"	e	enum:CR_DEATHCAUSE
CR_OverVoltage	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^enum CR_DEATHCAUSE {CR_None, CR_OverVoltage, CR_OverCurrent, CR_OverHeat};$/;"	e	enum:CR_DEATHCAUSE
CR_OverVoltage	src/Engineering/Electrical/Components/ComponentRating.h	/^enum CR_DEATHCAUSE {CR_None, CR_OverVoltage, CR_OverCurrent, CR_OverHeat};$/;"	e	enum:CR_DEATHCAUSE
CTBanking	include/Eternia/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTBanking	src/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTBroker	include/Eternia/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTBroker	src/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTInsurance	include/Eternia/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTInsurance	src/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTManufacturing	include/Eternia/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTManufacturing	src/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTMining	include/Eternia/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTMining	src/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTResearch	include/Eternia/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTResearch	src/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTSales	include/Eternia/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CTSales	src/Gamelogic/Social/Company/CompanyConst.h	/^enum COMPANYTYPE {CTMining, CTManufacturing, CTResearch, CTBroker, CTSales, CTInsurance, CTBanking};$/;"	e	enum:COMPANYTYPE
CYCLICLIST_H_	include/Eternia/Data/CyclicList.hpp	/^#define CYCLICLIST_H_$/;"	d
CYCLICLIST_H_	src/Data/CyclicList.hpp	/^#define CYCLICLIST_H_$/;"	d
Cadmium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Cadmium = new Atom("Cadmium", "Cd", 12, 5, 48, 64,47, 8.69,0.00000007, 0.097, 594.22,1040, 0.232, 2, COLOR_Silver,ELEM_Transition);$/;"	v
Cadmium	src/Engineering/Chemistry/elementals.h	/^const Atom Cadmium = new Atom("Cadmium", "Cd", 12, 5, 48, 64,47, 8.69,0.00000007, 0.097, 594.22,1040, 0.232, 2, COLOR_Silver,ELEM_Transition);$/;"	v
Caesium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Caesium = new Atom("Caesium", "Cs", 1, 6, 55, 81,54, 1.873,0.0000002, 0.036, 301.59,944, 0.242, 1, COLOR_Silver,ELEM_Alkali);$/;"	v
Caesium	src/Engineering/Chemistry/elementals.h	/^const Atom Caesium = new Atom("Caesium", "Cs", 1, 6, 55, 81,54, 1.873,0.0000002, 0.036, 301.59,944, 0.242, 1, COLOR_Silver,ELEM_Alkali);$/;"	v
Calcium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Calcium = new Atom("Calcium", "Ca", 2, 4, 20, 20,19, 1.54,0.000000034, 0.2, 1115,1757, 0.647, 2, COLOR_Silver,ELEM_Alkaline);$/;"	v
Calcium	src/Engineering/Chemistry/elementals.h	/^const Atom Calcium = new Atom("Calcium", "Ca", 2, 4, 20, 20,19, 1.54,0.000000034, 0.2, 1115,1757, 0.647, 2, COLOR_Silver,ELEM_Alkaline);$/;"	v
Californium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Californium = new Atom("Californium", "Cf", 0, 7, 98, 153,97, 15.1,UNKNOWN, UNKNOWN, 1173,UNKNOWN, UNKNOWN, 4, COLOR_SlateGray,ELEM_Actinide);$/;"	v
Californium	src/Engineering/Chemistry/elementals.h	/^const Atom Californium = new Atom("Californium", "Cf", 0, 7, 98, 153,97, 15.1,UNKNOWN, UNKNOWN, 1173,UNKNOWN, UNKNOWN, 4, COLOR_SlateGray,ELEM_Actinide);$/;"	v
Capacitance	include/Eternia/constants.h	/^    double Capacitance(double coulomb, double volt);$/;"	p	namespace:electrical
Capacitance	src/constants.cpp	/^    double Capacitance(double coulomb, double volt) {$/;"	f	namespace:electrical
Capacitance	src/constants.h	/^    double Capacitance(double coulomb, double volt);$/;"	p	namespace:electrical
Capacitor	include/Eternia/Engineering/Electrical/Components/Capacitor.h	/^        Capacitor(double farads, double max_volts);$/;"	p	class:Capacitor
Capacitor	include/Eternia/Engineering/Electrical/Components/Capacitor.h	/^class Capacitor : private Component {$/;"	c
Capacitor	src/Engineering/Electrical/Components/Capacitor.h	/^        Capacitor(double farads, double max_volts);$/;"	p	class:Capacitor
Capacitor	src/Engineering/Electrical/Components/Capacitor.h	/^class Capacitor : private Component {$/;"	c
Capacitor::Capacitor	include/Eternia/Engineering/Electrical/Components/Capacitor.h	/^        Capacitor(double farads, double max_volts);$/;"	p	class:Capacitor
Capacitor::Capacitor	src/Engineering/Electrical/Components/Capacitor.h	/^        Capacitor(double farads, double max_volts);$/;"	p	class:Capacitor
Capacitor::Farads	include/Eternia/Engineering/Electrical/Components/Capacitor.h	/^        double Farads; \/\/ Capacitor rating$/;"	m	class:Capacitor
Capacitor::Farads	src/Engineering/Electrical/Components/Capacitor.h	/^        double Farads; \/\/ Capacitor rating$/;"	m	class:Capacitor
Capacitor::maxVolts	include/Eternia/Engineering/Electrical/Components/Capacitor.h	/^        double maxVolts;$/;"	m	class:Capacitor
Capacitor::maxVolts	src/Engineering/Electrical/Components/Capacitor.h	/^        double maxVolts;$/;"	m	class:Capacitor
Capacitor::tick	include/Eternia/Engineering/Electrical/Components/Capacitor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Capacitor
Capacitor::tick	src/Engineering/Electrical/Components/Capacitor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Capacitor
Capacitor::~Capacitor	include/Eternia/Engineering/Electrical/Components/Capacitor.h	/^        virtual ~Capacitor();$/;"	p	class:Capacitor
Capacitor::~Capacitor	src/Engineering/Electrical/Components/Capacitor.h	/^        virtual ~Capacitor();$/;"	p	class:Capacitor
Capacitor_h_	include/Eternia/Engineering/Electrical/Components/Capacitor.h	/^#define Capacitor_h_$/;"	d
Capacitor_h_	src/Engineering/Electrical/Components/Capacitor.h	/^#define Capacitor_h_$/;"	d
Carbon	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Carbon = new Atom("Carbon", "C", 14, 2, 6, 6,6, 2.267,0.00001, 0.14, 3800,4300, 0.709, 4, COLOR_Black,ELEM_NonMetal);$/;"	v
Carbon	src/Engineering/Chemistry/elementals.h	/^const Atom Carbon = new Atom("Carbon", "C", 14, 2, 6, 6,6, 2.267,0.00001, 0.14, 3800,4300, 0.709, 4, COLOR_Black,ELEM_NonMetal);$/;"	v
Cerium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Cerium = new Atom("Cerium", "Ce", 0, 6, 58, 82,57, 6.77,0.00000074, 0.011, 1068,3716, 0.192, 4, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Cerium	src/Engineering/Chemistry/elementals.h	/^const Atom Cerium = new Atom("Cerium", "Ce", 0, 6, 58, 82,57, 6.77,0.00000074, 0.011, 1068,3716, 0.192, 4, COLOR_Silver,ELEM_Lanthanide);$/;"	v
ChannelledClient	include/Eternia/WebFramework/Network/ChannelledClient.h	/^    ChannelledClient();$/;"	p	class:ChannelledClient
ChannelledClient	include/Eternia/WebFramework/Network/ChannelledClient.h	/^class ChannelledClient : public SockClient{$/;"	c
ChannelledClient	src/WebFramework/Network/ChannelledClient.cpp	/^ChannelledClient::ChannelledClient(){}$/;"	f	class:ChannelledClient
ChannelledClient	src/WebFramework/Network/ChannelledClient.h	/^    ChannelledClient();$/;"	p	class:ChannelledClient
ChannelledClient	src/WebFramework/Network/ChannelledClient.h	/^class ChannelledClient : public SockClient{$/;"	c
ChannelledClient::ChannelledClient	include/Eternia/WebFramework/Network/ChannelledClient.h	/^    ChannelledClient();$/;"	p	class:ChannelledClient
ChannelledClient::ChannelledClient	src/WebFramework/Network/ChannelledClient.cpp	/^ChannelledClient::ChannelledClient(){}$/;"	f	class:ChannelledClient
ChannelledClient::ChannelledClient	src/WebFramework/Network/ChannelledClient.h	/^    ChannelledClient();$/;"	p	class:ChannelledClient
ChannelledClient::channels	include/Eternia/WebFramework/Network/ChannelledClient.h	/^    PacketChannel channels[65536];$/;"	m	class:ChannelledClient
ChannelledClient::channels	src/WebFramework/Network/ChannelledClient.h	/^    PacketChannel channels[65536];$/;"	m	class:ChannelledClient
ChannelledClient::getChannel	include/Eternia/WebFramework/Network/ChannelledClient.h	/^    PacketChannel* getChannel(short id);$/;"	p	class:ChannelledClient
ChannelledClient::getChannel	src/WebFramework/Network/ChannelledClient.cpp	/^PacketChannel* ChannelledClient::getChannel(short id){$/;"	f	class:ChannelledClient
ChannelledClient::getChannel	src/WebFramework/Network/ChannelledClient.h	/^    PacketChannel* getChannel(short id);$/;"	p	class:ChannelledClient
ChannelledClient::~ChannelledClient	include/Eternia/WebFramework/Network/ChannelledClient.h	/^    virtual ~ChannelledClient();$/;"	p	class:ChannelledClient
ChannelledClient::~ChannelledClient	src/WebFramework/Network/ChannelledClient.cpp	/^ChannelledClient::~ChannelledClient(){}$/;"	f	class:ChannelledClient
ChannelledClient::~ChannelledClient	src/WebFramework/Network/ChannelledClient.h	/^    virtual ~ChannelledClient();$/;"	p	class:ChannelledClient
ChannelledServer	include/Eternia/WebFramework/Network/ChannelledServer.h	/^    ChannelledServer(SocketServerType serverType, CharString addr, int port);$/;"	p	class:ChannelledServer
ChannelledServer	include/Eternia/WebFramework/Network/ChannelledServer.h	/^class ChannelledServer : public SocketServer{$/;"	c
ChannelledServer	src/WebFramework/Network/ChannelledServer.cpp	/^ChannelledServer::ChannelledServer(SocketServerType serverType, CharString addr, int port){$/;"	f	class:ChannelledServer
ChannelledServer	src/WebFramework/Network/ChannelledServer.h	/^    ChannelledServer(SocketServerType serverType, CharString addr, int port);$/;"	p	class:ChannelledServer
ChannelledServer	src/WebFramework/Network/ChannelledServer.h	/^class ChannelledServer : public SocketServer{$/;"	c
ChannelledServer::ChannelledServer	include/Eternia/WebFramework/Network/ChannelledServer.h	/^    ChannelledServer(SocketServerType serverType, CharString addr, int port);$/;"	p	class:ChannelledServer
ChannelledServer::ChannelledServer	src/WebFramework/Network/ChannelledServer.cpp	/^ChannelledServer::ChannelledServer(SocketServerType serverType, CharString addr, int port){$/;"	f	class:ChannelledServer
ChannelledServer::ChannelledServer	src/WebFramework/Network/ChannelledServer.h	/^    ChannelledServer(SocketServerType serverType, CharString addr, int port);$/;"	p	class:ChannelledServer
CharString	include/Eternia/Data/CharString.h	/^        CharString();$/;"	p	class:CharString
CharString	include/Eternia/Data/CharString.h	/^        CharString(char* stringg); \/\/ initialize & populate$/;"	p	class:CharString
CharString	include/Eternia/Data/CharString.h	/^        CharString(char* stringg, int length); \/\/ initialize & populate$/;"	p	class:CharString
CharString	include/Eternia/Data/CharString.h	/^        CharString(const char* stringg);$/;"	p	class:CharString
CharString	include/Eternia/Data/CharString.h	/^        CharString(const char* stringg, const int length);$/;"	p	class:CharString
CharString	include/Eternia/Data/CharString.h	/^        CharString(const std::string &stringg);$/;"	p	class:CharString
CharString	include/Eternia/Data/CharString.h	/^        CharString(std::string &stringg);$/;"	p	class:CharString
CharString	include/Eternia/Data/CharString.h	/^class CharString {$/;"	c
CharString	include/Eternia/Data/SplitResult.h	/^class CharString;$/;"	x
CharString	include/Eternia/Math/struct/Matrix.h	/^    class CharString;$/;"	x
CharString	src/Data/CharString.cpp	/^CharString::CharString() {$/;"	f	class:CharString
CharString	src/Data/CharString.cpp	/^CharString::CharString(char* stringg) {$/;"	f	class:CharString
CharString	src/Data/CharString.cpp	/^CharString::CharString(char* stringg, int length) {$/;"	f	class:CharString
CharString	src/Data/CharString.cpp	/^CharString::CharString(const char* stringg) {$/;"	f	class:CharString
CharString	src/Data/CharString.cpp	/^CharString::CharString(const char* stringg, const int length) {$/;"	f	class:CharString
CharString	src/Data/CharString.cpp	/^CharString::CharString(const std::string &stringg) {$/;"	f	class:CharString
CharString	src/Data/CharString.cpp	/^CharString::CharString(string &stringg) {$/;"	f	class:CharString
CharString	src/Data/CharString.h	/^        CharString();$/;"	p	class:CharString
CharString	src/Data/CharString.h	/^        CharString(char* stringg); \/\/ initialize & populate$/;"	p	class:CharString
CharString	src/Data/CharString.h	/^        CharString(char* stringg, int length); \/\/ initialize & populate$/;"	p	class:CharString
CharString	src/Data/CharString.h	/^        CharString(const char* stringg);$/;"	p	class:CharString
CharString	src/Data/CharString.h	/^        CharString(const char* stringg, const int length);$/;"	p	class:CharString
CharString	src/Data/CharString.h	/^        CharString(const std::string &stringg);$/;"	p	class:CharString
CharString	src/Data/CharString.h	/^        CharString(std::string &stringg);$/;"	p	class:CharString
CharString	src/Data/CharString.h	/^class CharString {$/;"	c
CharString	src/Data/SplitResult.h	/^class CharString;$/;"	x
CharString	src/Math/struct/Matrix.h	/^    class CharString;$/;"	x
CharString::CharString	include/Eternia/Data/CharString.h	/^        CharString();$/;"	p	class:CharString
CharString::CharString	include/Eternia/Data/CharString.h	/^        CharString(char* stringg); \/\/ initialize & populate$/;"	p	class:CharString
CharString::CharString	include/Eternia/Data/CharString.h	/^        CharString(char* stringg, int length); \/\/ initialize & populate$/;"	p	class:CharString
CharString::CharString	include/Eternia/Data/CharString.h	/^        CharString(const char* stringg);$/;"	p	class:CharString
CharString::CharString	include/Eternia/Data/CharString.h	/^        CharString(const char* stringg, const int length);$/;"	p	class:CharString
CharString::CharString	include/Eternia/Data/CharString.h	/^        CharString(const std::string &stringg);$/;"	p	class:CharString
CharString::CharString	include/Eternia/Data/CharString.h	/^        CharString(std::string &stringg);$/;"	p	class:CharString
CharString::CharString	src/Data/CharString.cpp	/^CharString::CharString() {$/;"	f	class:CharString
CharString::CharString	src/Data/CharString.cpp	/^CharString::CharString(char* stringg) {$/;"	f	class:CharString
CharString::CharString	src/Data/CharString.cpp	/^CharString::CharString(char* stringg, int length) {$/;"	f	class:CharString
CharString::CharString	src/Data/CharString.cpp	/^CharString::CharString(const char* stringg) {$/;"	f	class:CharString
CharString::CharString	src/Data/CharString.cpp	/^CharString::CharString(const char* stringg, const int length) {$/;"	f	class:CharString
CharString::CharString	src/Data/CharString.cpp	/^CharString::CharString(const std::string &stringg) {$/;"	f	class:CharString
CharString::CharString	src/Data/CharString.cpp	/^CharString::CharString(string &stringg) {$/;"	f	class:CharString
CharString::CharString	src/Data/CharString.h	/^        CharString();$/;"	p	class:CharString
CharString::CharString	src/Data/CharString.h	/^        CharString(char* stringg); \/\/ initialize & populate$/;"	p	class:CharString
CharString::CharString	src/Data/CharString.h	/^        CharString(char* stringg, int length); \/\/ initialize & populate$/;"	p	class:CharString
CharString::CharString	src/Data/CharString.h	/^        CharString(const char* stringg);$/;"	p	class:CharString
CharString::CharString	src/Data/CharString.h	/^        CharString(const char* stringg, const int length);$/;"	p	class:CharString
CharString::CharString	src/Data/CharString.h	/^        CharString(const std::string &stringg);$/;"	p	class:CharString
CharString::CharString	src/Data/CharString.h	/^        CharString(std::string &stringg);$/;"	p	class:CharString
CharString::Compare	include/Eternia/Data/CharString.h	/^        bool Compare(CharString b); \/\/ compare exactly with another CharString$/;"	p	class:CharString
CharString::Compare	include/Eternia/Data/CharString.h	/^        bool Compare(CharString b,bool useCase); \/\/ compare exactly or without case with another CharString$/;"	p	class:CharString
CharString::Compare	include/Eternia/Data/CharString.h	/^        bool Compare(char* b, int c); \/\/ compare exactly with another char$/;"	p	class:CharString
CharString::Compare	include/Eternia/Data/CharString.h	/^        bool Compare(const char* b, int c); \/\/ compare exactly with another char$/;"	p	class:CharString
CharString::Compare	src/Data/CharString.cpp	/^bool CharString::Compare(CharString b) {$/;"	f	class:CharString
CharString::Compare	src/Data/CharString.cpp	/^bool CharString::Compare(CharString b, bool useCase) {$/;"	f	class:CharString
CharString::Compare	src/Data/CharString.cpp	/^bool CharString::Compare(char* b,int lenx) {$/;"	f	class:CharString
CharString::Compare	src/Data/CharString.cpp	/^bool CharString::Compare(const char* b,int lenx) {$/;"	f	class:CharString
CharString::Compare	src/Data/CharString.h	/^        bool Compare(CharString b); \/\/ compare exactly with another CharString$/;"	p	class:CharString
CharString::Compare	src/Data/CharString.h	/^        bool Compare(CharString b,bool useCase); \/\/ compare exactly or without case with another CharString$/;"	p	class:CharString
CharString::Compare	src/Data/CharString.h	/^        bool Compare(char* b, int c); \/\/ compare exactly with another char$/;"	p	class:CharString
CharString::Compare	src/Data/CharString.h	/^        bool Compare(const char* b, int c); \/\/ compare exactly with another char$/;"	p	class:CharString
CharString::CompareNoCase	include/Eternia/Data/CharString.h	/^        bool CompareNoCase(char* b, int c); \/\/ compare with a char* of length c if it contains the same letters with same case.$/;"	p	class:CharString
CharString::CompareNoCase	src/Data/CharString.cpp	/^bool CharString::CompareNoCase(char* b,int lenx) {$/;"	f	class:CharString
CharString::CompareNoCase	src/Data/CharString.h	/^        bool CompareNoCase(char* b, int c); \/\/ compare with a char* of length c if it contains the same letters with same case.$/;"	p	class:CharString
CharString::ConvertFromInt	include/Eternia/Data/CharString.h	/^        static CharString ConvertFromInt(int l);$/;"	p	class:CharString
CharString::ConvertFromInt	src/Data/CharString.cpp	/^CharString CharString::ConvertFromInt(int integer) {$/;"	f	class:CharString
CharString::ConvertFromInt	src/Data/CharString.h	/^        static CharString ConvertFromInt(int l);$/;"	p	class:CharString
CharString::ConvertFromLong	include/Eternia/Data/CharString.h	/^        static CharString ConvertFromLong(long l);$/;"	p	class:CharString
CharString::ConvertFromLong	src/Data/CharString.cpp	/^CharString CharString::ConvertFromLong(long integer) {$/;"	f	class:CharString
CharString::ConvertFromLong	src/Data/CharString.h	/^        static CharString ConvertFromLong(long l);$/;"	p	class:CharString
CharString::SortCompare	include/Eternia/Data/CharString.h	/^        SortType SortCompare(CharString str); \/\/ determines if this is "less" then another string. Used for automated sorting.$/;"	p	class:CharString
CharString::SortCompare	src/Data/CharString.cpp	/^SortType CharString::SortCompare(CharString str) {$/;"	f	class:CharString
CharString::SortCompare	src/Data/CharString.h	/^        SortType SortCompare(CharString str); \/\/ determines if this is "less" then another string. Used for automated sorting.$/;"	p	class:CharString
CharString::clone	include/Eternia/Data/CharString.h	/^        CharString clone(); \/\/ creates a clone!$/;"	p	class:CharString
CharString::clone	src/Data/CharString.cpp	/^CharString CharString::clone() {$/;"	f	class:CharString
CharString::clone	src/Data/CharString.h	/^        CharString clone(); \/\/ creates a clone!$/;"	p	class:CharString
CharString::concata	include/Eternia/Data/CharString.h	/^        void concata(CharString str); \/\/Combine CharStrings after the current charString.$/;"	p	class:CharString
CharString::concata	include/Eternia/Data/CharString.h	/^        void concata(char* str, int len);$/;"	p	class:CharString
CharString::concata	src/Data/CharString.cpp	/^void CharString::concata(CharString str) {$/;"	f	class:CharString
CharString::concata	src/Data/CharString.cpp	/^void CharString::concata(char* str, int lenx) {$/;"	f	class:CharString
CharString::concata	src/Data/CharString.h	/^        void concata(CharString str); \/\/Combine CharStrings after the current charString.$/;"	p	class:CharString
CharString::concata	src/Data/CharString.h	/^        void concata(char* str, int len);$/;"	p	class:CharString
CharString::concata_	include/Eternia/Data/CharString.h	/^        void concata_(const char* str, const int lenx);$/;"	p	class:CharString
CharString::concata_	src/Data/CharString.cpp	/^void CharString::concata_(const char* str, const int lenx) {$/;"	f	class:CharString
CharString::concata_	src/Data/CharString.h	/^        void concata_(const char* str, const int lenx);$/;"	p	class:CharString
CharString::concatb	include/Eternia/Data/CharString.h	/^        void concatb(CharString str);  \/\/Combine CharStrings before the current charString.$/;"	p	class:CharString
CharString::concatb	include/Eternia/Data/CharString.h	/^        void concatb(char* str, int len);$/;"	p	class:CharString
CharString::concatb	src/Data/CharString.cpp	/^void CharString::concatb(CharString str) {$/;"	f	class:CharString
CharString::concatb	src/Data/CharString.cpp	/^void CharString::concatb(char* str, int lenx) {$/;"	f	class:CharString
CharString::concatb	src/Data/CharString.h	/^        void concatb(CharString str);  \/\/Combine CharStrings before the current charString.$/;"	p	class:CharString
CharString::concatb	src/Data/CharString.h	/^        void concatb(char* str, int len);$/;"	p	class:CharString
CharString::contains	include/Eternia/Data/CharString.h	/^        bool contains(char* c); \/\/ does this string contain the single character 'c'?$/;"	p	class:CharString
CharString::contains	src/Data/CharString.cpp	/^bool CharString::contains(char* c) {$/;"	f	class:CharString
CharString::contains	src/Data/CharString.h	/^        bool contains(char* c); \/\/ does this string contain the single character 'c'?$/;"	p	class:CharString
CharString::endsWith	include/Eternia/Data/CharString.h	/^        bool endsWith(CharString ender);$/;"	p	class:CharString
CharString::endsWith	src/Data/CharString.cpp	/^bool CharString::endsWith(CharString ender) {$/;"	f	class:CharString
CharString::endsWith	src/Data/CharString.h	/^        bool endsWith(CharString ender);$/;"	p	class:CharString
CharString::get	include/Eternia/Data/CharString.h	/^        char* get(); \/\/ returns pointer to char variable$/;"	p	class:CharString
CharString::get	src/Data/CharString.cpp	/^char* CharString::get() {$/;"	f	class:CharString
CharString::get	src/Data/CharString.h	/^        char* get(); \/\/ returns pointer to char variable$/;"	p	class:CharString
CharString::getFloat	include/Eternia/Data/CharString.h	/^        float getFloat(); \/\/ automatically converts char variable into an float$/;"	p	class:CharString
CharString::getFloat	src/Data/CharString.cpp	/^float CharString::getFloat() {$/;"	f	class:CharString
CharString::getFloat	src/Data/CharString.h	/^        float getFloat(); \/\/ automatically converts char variable into an float$/;"	p	class:CharString
CharString::getInt	include/Eternia/Data/CharString.h	/^        int getInt(); \/\/ automatically converts char variable into an integer$/;"	p	class:CharString
CharString::getInt	src/Data/CharString.cpp	/^int CharString::getInt() {$/;"	f	class:CharString
CharString::getInt	src/Data/CharString.h	/^        int getInt(); \/\/ automatically converts char variable into an integer$/;"	p	class:CharString
CharString::getScientific	include/Eternia/Data/CharString.h	/^        float getScientific(float val);$/;"	p	class:CharString
CharString::getScientific	src/Data/CharString.cpp	/^float CharString::getScientific(float val){$/;"	f	class:CharString
CharString::getScientific	src/Data/CharString.h	/^        float getScientific(float val);$/;"	p	class:CharString
CharString::getSize	include/Eternia/Data/CharString.h	/^        int getSize(); \/\/ returns the size of the CharString$/;"	p	class:CharString
CharString::getSize	src/Data/CharString.cpp	/^int CharString::getSize() {$/;"	f	class:CharString
CharString::getSize	src/Data/CharString.h	/^        int getSize(); \/\/ returns the size of the CharString$/;"	p	class:CharString
CharString::isEmpty	include/Eternia/Data/CharString.h	/^        bool isEmpty();$/;"	p	class:CharString
CharString::isEmpty	src/Data/CharString.cpp	/^bool CharString::isEmpty() {$/;"	f	class:CharString
CharString::isEmpty	src/Data/CharString.h	/^        bool isEmpty();$/;"	p	class:CharString
CharString::isValidCharString	include/Eternia/Data/CharString.h	/^        bool isValidCharString(); \/\/ checks if empty$/;"	p	class:CharString
CharString::isValidCharString	src/Data/CharString.cpp	/^bool CharString::isValidCharString() {$/;"	f	class:CharString
CharString::isValidCharString	src/Data/CharString.h	/^        bool isValidCharString(); \/\/ checks if empty$/;"	p	class:CharString
CharString::isValidNumber	include/Eternia/Data/CharString.h	/^        bool isValidNumber(); \/\/ checks for "0-9, -, ."$/;"	p	class:CharString
CharString::isValidNumber	src/Data/CharString.cpp	/^bool CharString::isValidNumber(){$/;"	f	class:CharString
CharString::isValidNumber	src/Data/CharString.h	/^        bool isValidNumber(); \/\/ checks for "0-9, -, ."$/;"	p	class:CharString
CharString::isValidScientific	include/Eternia/Data/CharString.h	/^        bool isValidScientific(); \/\/ checks for a valid scientific number (or infinity \/ NaN)$/;"	p	class:CharString
CharString::isValidScientific	src/Data/CharString.cpp	/^bool CharString::isValidScientific(){$/;"	f	class:CharString
CharString::isValidScientific	src/Data/CharString.h	/^        bool isValidScientific(); \/\/ checks for a valid scientific number (or infinity \/ NaN)$/;"	p	class:CharString
CharString::len	include/Eternia/Data/CharString.h	/^        int len;$/;"	m	class:CharString
CharString::len	src/Data/CharString.h	/^        int len;$/;"	m	class:CharString
CharString::operator =	include/Eternia/Data/CharString.h	/^        void operator =(char* string);$/;"	p	class:CharString
CharString::operator =	src/Data/CharString.cpp	/^void CharString::operator =(char* stringg) {$/;"	f	class:CharString
CharString::operator =	src/Data/CharString.h	/^        void operator =(char* string);$/;"	p	class:CharString
CharString::operator ==	include/Eternia/Data/CharString.h	/^        bool operator ==(CharString other); \/\/ operator for 'compare'$/;"	p	class:CharString
CharString::operator ==	src/Data/CharString.cpp	/^bool CharString::operator==(CharString ins) {$/;"	f	class:CharString
CharString::operator ==	src/Data/CharString.h	/^        bool operator ==(CharString other); \/\/ operator for 'compare'$/;"	p	class:CharString
CharString::removeChar	include/Eternia/Data/CharString.h	/^        void removeChar(int index); \/\/ remove character at index.$/;"	p	class:CharString
CharString::removeChar	src/Data/CharString.cpp	/^void CharString::removeChar(int index){$/;"	f	class:CharString
CharString::removeChar	src/Data/CharString.h	/^        void removeChar(int index); \/\/ remove character at index.$/;"	p	class:CharString
CharString::replace	include/Eternia/Data/CharString.h	/^        void replace(char* toFind,char* replaceWith);$/;"	p	class:CharString
CharString::replace	src/Data/CharString.cpp	/^void CharString::replace(char* a, char* b) {$/;"	f	class:CharString
CharString::replace	src/Data/CharString.h	/^        void replace(char* toFind,char* replaceWith);$/;"	p	class:CharString
CharString::set	include/Eternia/Data/CharString.h	/^        void set(CharString stringg);$/;"	p	class:CharString
CharString::set	include/Eternia/Data/CharString.h	/^        void set(char* stringg); \/\/ sets pointer for CharString, auto-finds length.$/;"	p	class:CharString
CharString::set	include/Eternia/Data/CharString.h	/^        void set(char* stringg, int length); \/\/ sets both the size and pointer for charString$/;"	p	class:CharString
CharString::set	src/Data/CharString.cpp	/^void CharString::set(CharString stringg){$/;"	f	class:CharString
CharString::set	src/Data/CharString.cpp	/^void CharString::set(char* stringg) {$/;"	f	class:CharString
CharString::set	src/Data/CharString.cpp	/^void CharString::set(char* stringg, int length) {$/;"	f	class:CharString
CharString::set	src/Data/CharString.h	/^        void set(CharString stringg);$/;"	p	class:CharString
CharString::set	src/Data/CharString.h	/^        void set(char* stringg); \/\/ sets pointer for CharString, auto-finds length.$/;"	p	class:CharString
CharString::set	src/Data/CharString.h	/^        void set(char* stringg, int length); \/\/ sets both the size and pointer for charString$/;"	p	class:CharString
CharString::setPtr	include/Eternia/Data/CharString.h	/^        void setPtr(char* data, int length); \/\/ sets a raw pointer, no changes or copying$/;"	p	class:CharString
CharString::setPtr	src/Data/CharString.cpp	/^void CharString::setPtr(char* data, int length) { \/\/ sets a raw pointer, no changes or copying.$/;"	f	class:CharString
CharString::setPtr	src/Data/CharString.h	/^        void setPtr(char* data, int length); \/\/ sets a raw pointer, no changes or copying$/;"	p	class:CharString
CharString::setSize	include/Eternia/Data/CharString.h	/^        void setSize(int size); \/\/ sets the size of the CharString$/;"	p	class:CharString
CharString::setSize	src/Data/CharString.cpp	/^void CharString::setSize(int i) {$/;"	f	class:CharString
CharString::setSize	src/Data/CharString.h	/^        void setSize(int size); \/\/ sets the size of the CharString$/;"	p	class:CharString
CharString::set_	include/Eternia/Data/CharString.h	/^        void set_(const char* stringg, const int length);$/;"	p	class:CharString
CharString::set_	src/Data/CharString.cpp	/^void CharString::set_(const char* stringg, const int length) {$/;"	f	class:CharString
CharString::set_	src/Data/CharString.h	/^        void set_(const char* stringg, const int length);$/;"	p	class:CharString
CharString::shiftLeft	include/Eternia/Data/CharString.h	/^        char* shiftLeft(const int len);$/;"	p	class:CharString
CharString::shiftLeft	src/Data/CharString.cpp	/^char* CharString::shiftLeft(const int x) {$/;"	f	class:CharString
CharString::shiftLeft	src/Data/CharString.h	/^        char* shiftLeft(const int len);$/;"	p	class:CharString
CharString::split	include/Eternia/Data/CharString.h	/^        LinkedList<CharString>* split(char splitter,char stopper);$/;"	p	class:CharString
CharString::split	src/Data/CharString.cpp	/^LinkedList<CharString>* CharString::split(char splitter,char stopper) {$/;"	f	class:CharString
CharString::split	src/Data/CharString.h	/^        LinkedList<CharString>* split(char splitter,char stopper);$/;"	p	class:CharString
CharString::startsWith	include/Eternia/Data/CharString.h	/^        bool startsWith(CharString starter);$/;"	p	class:CharString
CharString::startsWith	src/Data/CharString.cpp	/^bool CharString::startsWith(CharString starter) {$/;"	f	class:CharString
CharString::startsWith	src/Data/CharString.h	/^        bool startsWith(CharString starter);$/;"	p	class:CharString
CharString::stringx	include/Eternia/Data/CharString.h	/^        char* stringx;$/;"	m	class:CharString
CharString::stringx	src/Data/CharString.h	/^        char* stringx;$/;"	m	class:CharString
CharString::substr	include/Eternia/Data/CharString.h	/^        CharString substr(int index, int len); \/\/ grab a string of size LEN beginning at index.$/;"	p	class:CharString
CharString::substr	src/Data/CharString.cpp	/^CharString CharString::substr(int index, int lenx){$/;"	f	class:CharString
CharString::substr	src/Data/CharString.h	/^        CharString substr(int index, int len); \/\/ grab a string of size LEN beginning at index.$/;"	p	class:CharString
CharString::~CharString	include/Eternia/Data/CharString.h	/^        virtual ~CharString();$/;"	p	class:CharString
CharString::~CharString	src/Data/CharString.cpp	/^CharString::~CharString(){$/;"	f	class:CharString
CharString::~CharString	src/Data/CharString.h	/^        virtual ~CharString();$/;"	p	class:CharString
ChatChannel	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        ChatChannel(char* name, vertex channelcolor, char* tag, vertex tagcolor, int chatspeed);$/;"	p	class:ChatChannel
ChatChannel	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^class ChatChannel {$/;"	c
ChatChannel	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        ChatChannel(char* name, vertex channelcolor, char* tag, vertex tagcolor, int chatspeed);$/;"	p	class:ChatChannel
ChatChannel	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^class ChatChannel {$/;"	c
ChatChannel::ChatChannel	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        ChatChannel(char* name, vertex channelcolor, char* tag, vertex tagcolor, int chatspeed);$/;"	p	class:ChatChannel
ChatChannel::ChatChannel	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        ChatChannel(char* name, vertex channelcolor, char* tag, vertex tagcolor, int chatspeed);$/;"	p	class:ChatChannel
ChatChannel::channelcolor	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        vertex channelcolor;$/;"	m	class:ChatChannel
ChatChannel::channelcolor	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        vertex channelcolor;$/;"	m	class:ChatChannel
ChatChannel::chatspeed	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        int chatspeed; \/\/ how often can somebody chat in this channel? (milliseconds)$/;"	m	class:ChatChannel
ChatChannel::chatspeed	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        int chatspeed; \/\/ how often can somebody chat in this channel? (milliseconds)$/;"	m	class:ChatChannel
ChatChannel::name	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        char* name;$/;"	m	class:ChatChannel
ChatChannel::name	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        char* name;$/;"	m	class:ChatChannel
ChatChannel::openChannels	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        static LinkedList<ChatChannel> openChannels;$/;"	m	class:ChatChannel
ChatChannel::openChannels	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        static LinkedList<ChatChannel> openChannels;$/;"	m	class:ChatChannel
ChatChannel::sendAudioBuffer	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        void sendAudioBuffer(ChatClient* client, CharString buffer, int bitrate); \/\/ send a buffered audio value$/;"	p	class:ChatChannel
ChatChannel::sendAudioBuffer	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        void sendAudioBuffer(ChatClient* client, CharString buffer, int bitrate); \/\/ send a buffered audio value$/;"	p	class:ChatChannel
ChatChannel::sendMessage	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        void sendMessage(ChatClient* client, CharString message); \/\/ send a chat message on this channel$/;"	p	class:ChatChannel
ChatChannel::sendMessage	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        void sendMessage(ChatClient* client, CharString message); \/\/ send a chat message on this channel$/;"	p	class:ChatChannel
ChatChannel::tag	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        char* tag;$/;"	m	class:ChatChannel
ChatChannel::tag	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        char* tag;$/;"	m	class:ChatChannel
ChatChannel::tagcolor	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        vertex tagcolor;$/;"	m	class:ChatChannel
ChatChannel::tagcolor	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        vertex tagcolor;$/;"	m	class:ChatChannel
ChatClient	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        ChatClient();$/;"	p	class:ChatClient
ChatClient	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^class ChatClient {$/;"	c
ChatClient	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        ChatClient();$/;"	p	class:ChatClient
ChatClient	src/WebFramework/Backend/ChatManager/ChatClient.h	/^class ChatClient {$/;"	c
ChatClient::ChatClient	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        ChatClient();$/;"	p	class:ChatClient
ChatClient::ChatClient	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        ChatClient();$/;"	p	class:ChatClient
ChatClient::ban	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        void ban(ChatChannel* channel); \/\/ ban from specific channel$/;"	p	class:ChatClient
ChatClient::ban	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        void ban(ChatChannel* channel); \/\/ ban from specific channel$/;"	p	class:ChatClient
ChatClient::currentChannel	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        ChatChannel *currentChannel;$/;"	m	class:ChatClient
ChatClient::currentChannel	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        ChatChannel *currentChannel;$/;"	m	class:ChatClient
ChatClient::mute	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        void mute(ChatChannel* channel, long ms); \/\/ mute on channel for set time in milliseconds$/;"	p	class:ChatClient
ChatClient::mute	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        void mute(ChatChannel* channel, long ms); \/\/ mute on channel for set time in milliseconds$/;"	p	class:ChatClient
ChatClient::name	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        CharString tag, name;$/;"	m	class:ChatClient
ChatClient::name	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        CharString tag, name;$/;"	m	class:ChatClient
ChatClient::recvMessage	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        void recvMessage(ChatClient* client, CharString text);$/;"	p	class:ChatClient
ChatClient::recvMessage	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        void recvMessage(ChatClient* client, CharString text);$/;"	p	class:ChatClient
ChatClient::sendMessage	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        void sendMessage(CharString text);$/;"	p	class:ChatClient
ChatClient::sendMessage	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        void sendMessage(CharString text);$/;"	p	class:ChatClient
ChatClient::tag	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        CharString tag, name;$/;"	m	class:ChatClient
ChatClient::tag	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        CharString tag, name;$/;"	m	class:ChatClient
ChatClient::tempBan	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        void tempBan(ChatChannel* channel, long ms); \/\/ temp ban from specific channel$/;"	p	class:ChatClient
ChatClient::tempBan	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        void tempBan(ChatChannel* channel, long ms); \/\/ temp ban from specific channel$/;"	p	class:ChatClient
ChatFilter	include/Eternia/WebFramework/Backend/ChatManager/ChatFilter.h	/^    ChatFilter();$/;"	p	class:ChatFilter
ChatFilter	include/Eternia/WebFramework/Backend/ChatManager/ChatFilter.h	/^class ChatFilter : public SpecificSerializer {$/;"	c
ChatFilter	src/WebFramework/Backend/ChatManager/ChatFilter.h	/^    ChatFilter();$/;"	p	class:ChatFilter
ChatFilter	src/WebFramework/Backend/ChatManager/ChatFilter.h	/^class ChatFilter : public SpecificSerializer {$/;"	c
ChatFilter::ChatFilter	include/Eternia/WebFramework/Backend/ChatManager/ChatFilter.h	/^    ChatFilter();$/;"	p	class:ChatFilter
ChatFilter::ChatFilter	src/WebFramework/Backend/ChatManager/ChatFilter.h	/^    ChatFilter();$/;"	p	class:ChatFilter
ChatManager	include/Eternia/WebFramework/Backend/ChatManager/ChatManager.h	/^    ChatManager();$/;"	p	class:ChatManager
ChatManager	include/Eternia/WebFramework/Backend/ChatManager/ChatManager.h	/^class ChatManager {$/;"	c
ChatManager	src/WebFramework/Backend/ChatManager/ChatManager.h	/^    ChatManager();$/;"	p	class:ChatManager
ChatManager	src/WebFramework/Backend/ChatManager/ChatManager.h	/^class ChatManager {$/;"	c
ChatManager::ChatManager	include/Eternia/WebFramework/Backend/ChatManager/ChatManager.h	/^    ChatManager();$/;"	p	class:ChatManager
ChatManager::ChatManager	src/WebFramework/Backend/ChatManager/ChatManager.h	/^    ChatManager();$/;"	p	class:ChatManager
Child	include/Eternia/Data/FileSystem.h	/^        FileStructureNode *Child,*Parent;$/;"	m	class:FileStructureNode
Child	include/Eternia/Data/TreeList.h	/^        TreeNode *Parent, *Child;$/;"	m	class:TreeNode
Child	src/Data/FileSystem.h	/^        FileStructureNode *Child,*Parent;$/;"	m	class:FileStructureNode
Child	src/Data/TreeList.h	/^        TreeNode *Parent, *Child;$/;"	m	class:TreeNode
Chlorine	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Chlorine = new Atom("Chlorine", "Cl", 17, 3, 17, 18,16, 0.003214,100, 0.0000089, 171.6,239.11, 0.479, 5, COLOR_Yellow,ELEM_NonMetal);$/;"	v
Chlorine	src/Engineering/Chemistry/elementals.h	/^const Atom Chlorine = new Atom("Chlorine", "Cl", 17, 3, 17, 18,16, 0.003214,100, 0.0000089, 171.6,239.11, 0.479, 5, COLOR_Yellow,ELEM_NonMetal);$/;"	v
Chromium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Chromium = new Atom("Chromium", "Cr", 6, 4, 24, 28,23, 7.15,0.00000013, 0.094, 2180,2944, 0.449, 6, COLOR_Silver,ELEM_Transition);$/;"	v
Chromium	src/Engineering/Chemistry/elementals.h	/^const Atom Chromium = new Atom("Chromium", "Cr", 6, 4, 24, 28,23, 7.15,0.00000013, 0.094, 2180,2944, 0.449, 6, COLOR_Silver,ELEM_Transition);$/;"	v
Ci	include/Eternia/constants.h	/^        const double Ci = Curie;$/;"	m	namespace:physical::unit
Ci	src/constants.h	/^        const double Ci = Curie;$/;"	m	namespace:physical::unit
Circuit	include/Eternia/Engineering/Electrical/Circuit.h	/^        Circuit(double emulationRate); \/\/ Ratio of Emulated\/Real time.$/;"	p	class:Circuit
Circuit	include/Eternia/Engineering/Electrical/Circuit.h	/^class Circuit {$/;"	c
Circuit	src/Engineering/Electrical/Circuit.h	/^        Circuit(double emulationRate); \/\/ Ratio of Emulated\/Real time.$/;"	p	class:Circuit
Circuit	src/Engineering/Electrical/Circuit.h	/^class Circuit {$/;"	c
Circuit::Circuit	include/Eternia/Engineering/Electrical/Circuit.h	/^        Circuit(double emulationRate); \/\/ Ratio of Emulated\/Real time.$/;"	p	class:Circuit
Circuit::Circuit	src/Engineering/Electrical/Circuit.h	/^        Circuit(double emulationRate); \/\/ Ratio of Emulated\/Real time.$/;"	p	class:Circuit
Circuit::addComponent	include/Eternia/Engineering/Electrical/Circuit.h	/^        void addComponent(Component* component); \/\/ add a component to the circuit$/;"	p	class:Circuit
Circuit::addComponent	src/Engineering/Electrical/Circuit.h	/^        void addComponent(Component* component); \/\/ add a component to the circuit$/;"	p	class:Circuit
Circuit::addWire	include/Eternia/Engineering/Electrical/Circuit.h	/^        void addWire(Wire* wire); \/\/ add a wire to the circuit$/;"	p	class:Circuit
Circuit::addWire	src/Engineering/Electrical/Circuit.h	/^        void addWire(Wire* wire); \/\/ add a wire to the circuit$/;"	p	class:Circuit
Circuit::componentList	include/Eternia/Engineering/Electrical/Circuit.h	/^        LinkedList<Component>* componentList;$/;"	m	class:Circuit
Circuit::componentList	src/Engineering/Electrical/Circuit.h	/^        LinkedList<Component>* componentList;$/;"	m	class:Circuit
Circuit::tick	include/Eternia/Engineering/Electrical/Circuit.h	/^        void tick(SecondTick* tickTime); \/\/ operate time for entire circuit, emulate current, voltage, temperature$/;"	p	class:Circuit
Circuit::tick	src/Engineering/Electrical/Circuit.h	/^        void tick(SecondTick* tickTime); \/\/ operate time for entire circuit, emulate current, voltage, temperature$/;"	p	class:Circuit
Circuit::wireList	include/Eternia/Engineering/Electrical/Circuit.h	/^        LinkedList<Wire>* wireList;$/;"	m	class:Circuit
Circuit::wireList	src/Engineering/Electrical/Circuit.h	/^        LinkedList<Wire>* wireList;$/;"	m	class:Circuit
Circuit::~Circuit	include/Eternia/Engineering/Electrical/Circuit.h	/^        virtual ~Circuit();$/;"	p	class:Circuit
Circuit::~Circuit	src/Engineering/Electrical/Circuit.h	/^        virtual ~Circuit();$/;"	p	class:Circuit
Circuit_h_	include/Eternia/Engineering/Electrical/Circuit.h	/^#define Circuit_h_$/;"	d
Circuit_h_	src/Engineering/Electrical/Circuit.h	/^#define Circuit_h_$/;"	d
CircularMotion	include/Eternia/Engineering/Physics/Kinematics/CircularMotion.h	/^        CircularMotion();$/;"	p	class:CircularMotion
CircularMotion	include/Eternia/Engineering/Physics/Kinematics/CircularMotion.h	/^class CircularMotion {$/;"	c
CircularMotion	src/Engineering/Physics/Kinematics/CircularMotion.cpp	/^CircularMotion::CircularMotion() {$/;"	f	class:CircularMotion
CircularMotion	src/Engineering/Physics/Kinematics/CircularMotion.h	/^        CircularMotion();$/;"	p	class:CircularMotion
CircularMotion	src/Engineering/Physics/Kinematics/CircularMotion.h	/^class CircularMotion {$/;"	c
CircularMotion::CircularMotion	include/Eternia/Engineering/Physics/Kinematics/CircularMotion.h	/^        CircularMotion();$/;"	p	class:CircularMotion
CircularMotion::CircularMotion	src/Engineering/Physics/Kinematics/CircularMotion.cpp	/^CircularMotion::CircularMotion() {$/;"	f	class:CircularMotion
CircularMotion::CircularMotion	src/Engineering/Physics/Kinematics/CircularMotion.h	/^        CircularMotion();$/;"	p	class:CircularMotion
CircularMotion::~CircularMotion	include/Eternia/Engineering/Physics/Kinematics/CircularMotion.h	/^        virtual ~CircularMotion();$/;"	p	class:CircularMotion
CircularMotion::~CircularMotion	src/Engineering/Physics/Kinematics/CircularMotion.cpp	/^CircularMotion::~CircularMotion() {$/;"	f	class:CircularMotion
CircularMotion::~CircularMotion	src/Engineering/Physics/Kinematics/CircularMotion.h	/^        virtual ~CircularMotion();$/;"	p	class:CircularMotion
Citizen	include/Eternia/Gamelogic/Social/Citizen.h	/^        Citizen();$/;"	p	class:Citizen
Citizen	include/Eternia/Gamelogic/Social/Citizen.h	/^class Citizen {$/;"	c
Citizen	src/Gamelogic/Social/Citizen.h	/^        Citizen();$/;"	p	class:Citizen
Citizen	src/Gamelogic/Social/Citizen.h	/^class Citizen {$/;"	c
Citizen::Citizen	include/Eternia/Gamelogic/Social/Citizen.h	/^        Citizen();$/;"	p	class:Citizen
Citizen::Citizen	src/Gamelogic/Social/Citizen.h	/^        Citizen();$/;"	p	class:Citizen
Citizen::IncomeTotal	include/Eternia/Gamelogic/Social/Citizen.h	/^        double IncomeTotal; \/\/ Used for income taxes! :D$/;"	m	class:Citizen
Citizen::IncomeTotal	src/Gamelogic/Social/Citizen.h	/^        double IncomeTotal; \/\/ Used for income taxes! :D$/;"	m	class:Citizen
Citizen_h	include/Eternia/Gamelogic/Social/Citizen.h	/^#define Citizen_h$/;"	d
Citizen_h	src/Gamelogic/Social/Citizen.h	/^#define Citizen_h$/;"	d
Client	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^enum P2PNodeType {Server,Client};$/;"	e	enum:P2PNodeType
Client	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^enum P2PNodeType {Server,Client};$/;"	e	enum:P2PNodeType
ClientHandler_	src/WebFramework/Network/SocketServer.cpp	/^void ClientHandler_(SockClient* tclient) {$/;"	f
ClientSocket	include/Eternia/WebFramework/Network/SockClient.h	/^        SOCKET ClientSocket;$/;"	m	class:SockClient
ClientSocket	src/WebFramework/Network/SockClient.h	/^        SOCKET ClientSocket;$/;"	m	class:SockClient
Clone	include/Eternia/Engineering/Chemistry/Ore.h	/^        Ore* Clone(); \/\/ clone this ore for use with implementations$/;"	p	class:Ore
Clone	src/Engineering/Chemistry/Ore.h	/^        Ore* Clone(); \/\/ clone this ore for use with implementations$/;"	p	class:Ore
Close	include/Eternia/WebFramework/Network/SocketServer.h	/^    void Close();$/;"	p	class:SocketServer
Close	src/WebFramework/Network/SocketServer.cpp	/^void SocketServer::Close() {$/;"	f	class:SocketServer
Close	src/WebFramework/Network/SocketServer.h	/^    void Close();$/;"	p	class:SocketServer
Cobalt	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Cobalt = new Atom("Cobalt", "Co", 9, 4, 27, 32,26, 8.86,0.00000006, 0.1, 1768,3200, 0.421, 4, COLOR_Gray,ELEM_Transition);$/;"	v
Cobalt	src/Engineering/Chemistry/elementals.h	/^const Atom Cobalt = new Atom("Cobalt", "Co", 9, 4, 27, 32,26, 8.86,0.00000006, 0.1, 1768,3200, 0.421, 4, COLOR_Gray,ELEM_Transition);$/;"	v
CodeParser	include/Eternia/Parsing/CodeParser.h	/^class CodeParser {$/;"	c
CodeParser	src/Parsing/CodeParser.h	/^class CodeParser {$/;"	c
Collision1D	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^        Collision1D();$/;"	p	class:Collision1D
Collision1D	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^class Collision1D {$/;"	c
Collision1D	src/Engineering/Physics/Kinematics/Collision1D.cpp	/^Collision1D::Collision1D() {$/;"	f	class:Collision1D
Collision1D	src/Engineering/Physics/Kinematics/Collision1D.h	/^        Collision1D();$/;"	p	class:Collision1D
Collision1D	src/Engineering/Physics/Kinematics/Collision1D.h	/^class Collision1D {$/;"	c
Collision1D::Collision1D	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^        Collision1D();$/;"	p	class:Collision1D
Collision1D::Collision1D	src/Engineering/Physics/Kinematics/Collision1D.cpp	/^Collision1D::Collision1D() {$/;"	f	class:Collision1D
Collision1D::Collision1D	src/Engineering/Physics/Kinematics/Collision1D.h	/^        Collision1D();$/;"	p	class:Collision1D
Collision1D::a1	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^        VertexObject a1, b1; \/\/ two objects to collide.$/;"	m	class:Collision1D
Collision1D::a1	src/Engineering/Physics/Kinematics/Collision1D.h	/^        VertexObject a1, b1; \/\/ two objects to collide.$/;"	m	class:Collision1D
Collision1D::b1	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^        VertexObject a1, b1; \/\/ two objects to collide.$/;"	m	class:Collision1D
Collision1D::b1	src/Engineering/Physics/Kinematics/Collision1D.h	/^        VertexObject a1, b1; \/\/ two objects to collide.$/;"	m	class:Collision1D
Collision1D::getPurelyElasticVelo	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^        double* getPurelyElasticVelo(); \/\/ gets the resultant velocities.$/;"	p	class:Collision1D
Collision1D::getPurelyElasticVelo	src/Engineering/Physics/Kinematics/Collision1D.h	/^        double* getPurelyElasticVelo(); \/\/ gets the resultant velocities.$/;"	p	class:Collision1D
Collision1D::getPurelyInelasticVelo	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^        double getPurelyInelasticVelo(); \/\/ gets velocity of inelastic collision.$/;"	p	class:Collision1D
Collision1D::getPurelyInelasticVelo	src/Engineering/Physics/Kinematics/Collision1D.cpp	/^double Collision1D::getPurelyInelasticVelo() {$/;"	f	class:Collision1D
Collision1D::getPurelyInelasticVelo	src/Engineering/Physics/Kinematics/Collision1D.h	/^        double getPurelyInelasticVelo(); \/\/ gets velocity of inelastic collision.$/;"	p	class:Collision1D
Collision1D::getVelo	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^        double* getVelo(); \/\/ assumes that there is no pureness, get velo.$/;"	p	class:Collision1D
Collision1D::getVelo	src/Engineering/Physics/Kinematics/Collision1D.cpp	/^double* Collision1D::getVelo() {$/;"	f	class:Collision1D
Collision1D::getVelo	src/Engineering/Physics/Kinematics/Collision1D.h	/^        double* getVelo(); \/\/ assumes that there is no pureness, get velo.$/;"	p	class:Collision1D
Colors_h_1	include/Eternia/Design/Colors.h	/^#define Colors_h_1$/;"	d
Colors_h_1	src/Design/Colors.h	/^#define Colors_h_1$/;"	d
Company	include/Eternia/Gamelogic/Social/Company/Company.h	/^        Company(CharString name, COMPANYTYPE type);$/;"	p	class:Company
Company	include/Eternia/Gamelogic/Social/Company/Company.h	/^class Company {$/;"	c
Company	src/Gamelogic/Social/Company/Company.h	/^        Company(CharString name, COMPANYTYPE type);$/;"	p	class:Company
Company	src/Gamelogic/Social/Company/Company.h	/^class Company {$/;"	c
Company::Company	include/Eternia/Gamelogic/Social/Company/Company.h	/^        Company(CharString name, COMPANYTYPE type);$/;"	p	class:Company
Company::Company	src/Gamelogic/Social/Company/Company.h	/^        Company(CharString name, COMPANYTYPE type);$/;"	p	class:Company
Company::CompanyType	include/Eternia/Gamelogic/Social/Company/Company.h	/^        COMPANYTYPE CompanyType; \/\/ type of company (ie: mining or broker?)$/;"	m	class:Company
Company::CompanyType	src/Gamelogic/Social/Company/Company.h	/^        COMPANYTYPE CompanyType; \/\/ type of company (ie: mining or broker?)$/;"	m	class:Company
Company::IncomeTotal	include/Eternia/Gamelogic/Social/Company/Company.h	/^        long IncomeTotal; \/\/ used for government tax$/;"	m	class:Company
Company::IncomeTotal	src/Gamelogic/Social/Company/Company.h	/^        long IncomeTotal; \/\/ used for government tax$/;"	m	class:Company
Company::companyStock	include/Eternia/Gamelogic/Social/Company/Company.h	/^        BaseStock companyStock;$/;"	m	class:Company
Company::companyStock	src/Gamelogic/Social/Company/Company.h	/^        BaseStock companyStock;$/;"	m	class:Company
Company::government	include/Eternia/Gamelogic/Social/Company/Company.h	/^        Government government; \/\/ what side is this company on?$/;"	m	class:Company
Company::government	src/Gamelogic/Social/Company/Company.h	/^        Government government; \/\/ what side is this company on?$/;"	m	class:Company
CompanyConst	include/Eternia/Gamelogic/Social/Company/CompanyConst.h	/^#define CompanyConst$/;"	d
CompanyConst	src/Gamelogic/Social/Company/CompanyConst.h	/^#define CompanyConst$/;"	d
CompanyType	include/Eternia/Gamelogic/Social/Company/Company.h	/^        COMPANYTYPE CompanyType; \/\/ type of company (ie: mining or broker?)$/;"	m	class:Company
CompanyType	src/Gamelogic/Social/Company/Company.h	/^        COMPANYTYPE CompanyType; \/\/ type of company (ie: mining or broker?)$/;"	m	class:Company
Company_h	include/Eternia/Gamelogic/Social/Company/Company.h	/^#define Company_h$/;"	d
Company_h	src/Gamelogic/Social/Company/Company.h	/^#define Company_h$/;"	d
Compare	include/Eternia/Data/CharString.h	/^        bool Compare(CharString b); \/\/ compare exactly with another CharString$/;"	p	class:CharString
Compare	include/Eternia/Data/CharString.h	/^        bool Compare(CharString b,bool useCase); \/\/ compare exactly or without case with another CharString$/;"	p	class:CharString
Compare	include/Eternia/Data/CharString.h	/^        bool Compare(char* b, int c); \/\/ compare exactly with another char$/;"	p	class:CharString
Compare	include/Eternia/Data/CharString.h	/^        bool Compare(const char* b, int c); \/\/ compare exactly with another char$/;"	p	class:CharString
Compare	src/Data/CharString.cpp	/^bool CharString::Compare(CharString b) {$/;"	f	class:CharString
Compare	src/Data/CharString.cpp	/^bool CharString::Compare(CharString b, bool useCase) {$/;"	f	class:CharString
Compare	src/Data/CharString.cpp	/^bool CharString::Compare(char* b,int lenx) {$/;"	f	class:CharString
Compare	src/Data/CharString.cpp	/^bool CharString::Compare(const char* b,int lenx) {$/;"	f	class:CharString
Compare	src/Data/CharString.h	/^        bool Compare(CharString b); \/\/ compare exactly with another CharString$/;"	p	class:CharString
Compare	src/Data/CharString.h	/^        bool Compare(CharString b,bool useCase); \/\/ compare exactly or without case with another CharString$/;"	p	class:CharString
Compare	src/Data/CharString.h	/^        bool Compare(char* b, int c); \/\/ compare exactly with another char$/;"	p	class:CharString
Compare	src/Data/CharString.h	/^        bool Compare(const char* b, int c); \/\/ compare exactly with another char$/;"	p	class:CharString
CompareNoCase	include/Eternia/Data/CharString.h	/^        bool CompareNoCase(char* b, int c); \/\/ compare with a char* of length c if it contains the same letters with same case.$/;"	p	class:CharString
CompareNoCase	src/Data/CharString.cpp	/^bool CharString::CompareNoCase(char* b,int lenx) {$/;"	f	class:CharString
CompareNoCase	src/Data/CharString.h	/^        bool CompareNoCase(char* b, int c); \/\/ compare with a char* of length c if it contains the same letters with same case.$/;"	p	class:CharString
Complex	include/Eternia/Math/Complex.hpp	/^    Complex(){$/;"	f	class:Complex
Complex	include/Eternia/Math/Complex.hpp	/^    Complex(float real, float imaginary){$/;"	f	class:Complex
Complex	include/Eternia/Math/Complex.hpp	/^class Complex{$/;"	c
Complex	src/Math/Complex.hpp	/^    Complex(){$/;"	f	class:Complex
Complex	src/Math/Complex.hpp	/^    Complex(float real, float imaginary){$/;"	f	class:Complex
Complex	src/Math/Complex.hpp	/^class Complex{$/;"	c
Complex::Complex	include/Eternia/Math/Complex.hpp	/^    Complex(){$/;"	f	class:Complex
Complex::Complex	include/Eternia/Math/Complex.hpp	/^    Complex(float real, float imaginary){$/;"	f	class:Complex
Complex::Complex	src/Math/Complex.hpp	/^    Complex(){$/;"	f	class:Complex
Complex::Complex	src/Math/Complex.hpp	/^    Complex(float real, float imaginary){$/;"	f	class:Complex
Complex::OPEQ_Imag	include/Eternia/Math/Complex.hpp	/^    OPEQ_Imag(&=, float);$/;"	m	class:Complex
Complex::OPEQ_Imag	include/Eternia/Math/Complex.hpp	/^    OPEQ_Imag(&=, int);$/;"	m	class:Complex
Complex::OPEQ_Imag	include/Eternia/Math/Complex.hpp	/^    OPEQ_Imag(&=, long);$/;"	m	class:Complex
Complex::OPEQ_Imag	src/Math/Complex.hpp	/^    OPEQ_Imag(&=, float);$/;"	m	class:Complex
Complex::OPEQ_Imag	src/Math/Complex.hpp	/^    OPEQ_Imag(&=, int);$/;"	m	class:Complex
Complex::OPEQ_Imag	src/Math/Complex.hpp	/^    OPEQ_Imag(&=, long);$/;"	m	class:Complex
Complex::OPEQ_Real	include/Eternia/Math/Complex.hpp	/^    OPEQ_Real(=, float);$/;"	m	class:Complex
Complex::OPEQ_Real	include/Eternia/Math/Complex.hpp	/^    OPEQ_Real(=, int);$/;"	m	class:Complex
Complex::OPEQ_Real	include/Eternia/Math/Complex.hpp	/^    OPEQ_Real(=, long);$/;"	m	class:Complex
Complex::OPEQ_Real	src/Math/Complex.hpp	/^    OPEQ_Real(=, float);$/;"	m	class:Complex
Complex::OPEQ_Real	src/Math/Complex.hpp	/^    OPEQ_Real(=, int);$/;"	m	class:Complex
Complex::OPEQ_Real	src/Math/Complex.hpp	/^    OPEQ_Real(=, long);$/;"	m	class:Complex
Complex::OPI_MATH	include/Eternia/Math/Complex.hpp	/^    OPI_MATH(*=, float);$/;"	m	class:Complex
Complex::OPI_MATH	include/Eternia/Math/Complex.hpp	/^    OPI_MATH(*=, int); \/\/ imaginary multiply by scalar$/;"	m	class:Complex
Complex::OPI_MATH	include/Eternia/Math/Complex.hpp	/^    OPI_MATH(*=, long);$/;"	m	class:Complex
Complex::OPI_MATH	src/Math/Complex.hpp	/^    OPI_MATH(*=, float);$/;"	m	class:Complex
Complex::OPI_MATH	src/Math/Complex.hpp	/^    OPI_MATH(*=, int); \/\/ imaginary multiply by scalar$/;"	m	class:Complex
Complex::OPI_MATH	src/Math/Complex.hpp	/^    OPI_MATH(*=, long);$/;"	m	class:Complex
Complex::OP_MATH	include/Eternia/Math/Complex.hpp	/^    OP_MATH(*, float, true);$/;"	m	class:Complex
Complex::OP_MATH	include/Eternia/Math/Complex.hpp	/^    OP_MATH(*, int, true); \/\/ multiply by real just scales$/;"	m	class:Complex
Complex::OP_MATH	include/Eternia/Math/Complex.hpp	/^    OP_MATH(*, long, true);$/;"	m	class:Complex
Complex::OP_MATH	src/Math/Complex.hpp	/^    OP_MATH(*, float, true);$/;"	m	class:Complex
Complex::OP_MATH	src/Math/Complex.hpp	/^    OP_MATH(*, int, true); \/\/ multiply by real just scales$/;"	m	class:Complex
Complex::OP_MATH	src/Math/Complex.hpp	/^    OP_MATH(*, long, true);$/;"	m	class:Complex
Complex::fromPolar	include/Eternia/Math/Complex.hpp	/^    static Complex fromPolar(float r, float theta){$/;"	f	class:Complex
Complex::fromPolar	src/Math/Complex.hpp	/^    static Complex fromPolar(float r, float theta){$/;"	f	class:Complex
Complex::getMagnitude	include/Eternia/Math/Complex.hpp	/^    float getMagnitude(){$/;"	f	class:Complex
Complex::getMagnitude	src/Math/Complex.hpp	/^    float getMagnitude(){$/;"	f	class:Complex
Complex::imaginary	include/Eternia/Math/Complex.hpp	/^    float real, imaginary;$/;"	m	class:Complex
Complex::imaginary	src/Math/Complex.hpp	/^    float real, imaginary;$/;"	m	class:Complex
Complex::operator *	include/Eternia/Math/Complex.hpp	/^    Complex operator *(Complex val){$/;"	f	class:Complex
Complex::operator *	src/Math/Complex.hpp	/^    Complex operator *(Complex val){$/;"	f	class:Complex
Complex::operator +	include/Eternia/Math/Complex.hpp	/^    Complex operator +(Complex val){$/;"	f	class:Complex
Complex::operator +	src/Math/Complex.hpp	/^    Complex operator +(Complex val){$/;"	f	class:Complex
Complex::operator -	include/Eternia/Math/Complex.hpp	/^    Complex operator -(Complex val){$/;"	f	class:Complex
Complex::operator -	src/Math/Complex.hpp	/^    Complex operator -(Complex val){$/;"	f	class:Complex
Complex::operator /	include/Eternia/Math/Complex.hpp	/^    Complex operator \/(Complex val){$/;"	f	class:Complex
Complex::operator /	src/Math/Complex.hpp	/^    Complex operator \/(Complex val){$/;"	f	class:Complex
Complex::operator =	include/Eternia/Math/Complex.hpp	/^    Complex operator =(Complex val){$/;"	f	class:Complex
Complex::operator =	src/Math/Complex.hpp	/^    Complex operator =(Complex val){$/;"	f	class:Complex
Complex::real	include/Eternia/Math/Complex.hpp	/^    float real, imaginary;$/;"	m	class:Complex
Complex::real	src/Math/Complex.hpp	/^    float real, imaginary;$/;"	m	class:Complex
Complex::~Complex	include/Eternia/Math/Complex.hpp	/^    ~Complex(){}$/;"	f	class:Complex
Complex::~Complex	src/Math/Complex.hpp	/^    ~Complex(){}$/;"	f	class:Complex
Component	include/Eternia/Engineering/Electrical/Components/Component.h	/^class Component {$/;"	c
Component	src/Engineering/Electrical/Components/Component.h	/^class Component {$/;"	c
Component::getPinA	include/Eternia/Engineering/Electrical/Components/Component.h	/^        PowerValue* getPinA(); \/\/ Returns the pin A$/;"	p	class:Component
Component::getPinA	src/Engineering/Electrical/Components/Component.h	/^        PowerValue* getPinA(); \/\/ Returns the pin A$/;"	p	class:Component
Component::getPinB	include/Eternia/Engineering/Electrical/Components/Component.h	/^        PowerValue* getPinB(); \/\/ Returns the pin B$/;"	p	class:Component
Component::getPinB	src/Engineering/Electrical/Components/Component.h	/^        PowerValue* getPinB(); \/\/ Returns the pin B$/;"	p	class:Component
Component::pinA	include/Eternia/Engineering/Electrical/Components/Component.h	/^        PowerValue* pinA; \/\/ normally the Input$/;"	m	class:Component
Component::pinA	src/Engineering/Electrical/Components/Component.h	/^        PowerValue* pinA; \/\/ normally the Input$/;"	m	class:Component
Component::pinB	include/Eternia/Engineering/Electrical/Components/Component.h	/^        PowerValue* pinB; \/\/ normally the Output$/;"	m	class:Component
Component::pinB	src/Engineering/Electrical/Components/Component.h	/^        PowerValue* pinB; \/\/ normally the Output$/;"	m	class:Component
Component::rating	include/Eternia/Engineering/Electrical/Components/Component.h	/^        ComponentRating* rating; \/\/ used for basic components, ICs may have multiple ratings due to the pins.$/;"	m	class:Component
Component::rating	src/Engineering/Electrical/Components/Component.h	/^        ComponentRating* rating; \/\/ used for basic components, ICs may have multiple ratings due to the pins.$/;"	m	class:Component
Component::tick	include/Eternia/Engineering/Electrical/Components/Component.h	/^        void tick(SecondTick* tickTime); \/\/ operate the component$/;"	p	class:Component
Component::tick	src/Engineering/Electrical/Components/Component.h	/^        void tick(SecondTick* tickTime); \/\/ operate the component$/;"	p	class:Component
ComponentRating	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        ComponentRating(Atom* material, PowerValue* MaxPower, double MaxTemp, double Impedance); \/\/ assign base variables$/;"	p	class:ComponentRating
ComponentRating	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^class ComponentRating {$/;"	c
ComponentRating	src/Engineering/Electrical/Components/ComponentRating.cpp	/^ComponentRating::ComponentRating(Atom* material, PowerValue* MaxPower, double MaxTemp, double Impedance) {$/;"	f	class:ComponentRating
ComponentRating	src/Engineering/Electrical/Components/ComponentRating.h	/^        ComponentRating(Atom* material, PowerValue* MaxPower, double MaxTemp, double Impedance); \/\/ assign base variables$/;"	p	class:ComponentRating
ComponentRating	src/Engineering/Electrical/Components/ComponentRating.h	/^class ComponentRating {$/;"	c
ComponentRating::ComponentRating	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        ComponentRating(Atom* material, PowerValue* MaxPower, double MaxTemp, double Impedance); \/\/ assign base variables$/;"	p	class:ComponentRating
ComponentRating::ComponentRating	src/Engineering/Electrical/Components/ComponentRating.cpp	/^ComponentRating::ComponentRating(Atom* material, PowerValue* MaxPower, double MaxTemp, double Impedance) {$/;"	f	class:ComponentRating
ComponentRating::ComponentRating	src/Engineering/Electrical/Components/ComponentRating.h	/^        ComponentRating(Atom* material, PowerValue* MaxPower, double MaxTemp, double Impedance); \/\/ assign base variables$/;"	p	class:ComponentRating
ComponentRating::ambientTemperature	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        double ambientTemperature; \/\/ sorrounding temperature (can be used to wick heat)$/;"	m	class:ComponentRating
ComponentRating::ambientTemperature	src/Engineering/Electrical/Components/ComponentRating.h	/^        double ambientTemperature; \/\/ sorrounding temperature (can be used to wick heat)$/;"	m	class:ComponentRating
ComponentRating::conductorMaterial	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        Atom* conductorMaterial; \/\/ material that this is made of$/;"	m	class:ComponentRating
ComponentRating::conductorMaterial	src/Engineering/Electrical/Components/ComponentRating.h	/^        Atom* conductorMaterial; \/\/ material that this is made of$/;"	m	class:ComponentRating
ComponentRating::currentPower	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        PowerValue* currentPower;$/;"	m	class:ComponentRating
ComponentRating::currentPower	src/Engineering/Electrical/Components/ComponentRating.h	/^        PowerValue* currentPower;$/;"	m	class:ComponentRating
ComponentRating::currentTemp	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        double currentTemp;$/;"	m	class:ComponentRating
ComponentRating::currentTemp	src/Engineering/Electrical/Components/ComponentRating.h	/^        double currentTemp;$/;"	m	class:ComponentRating
ComponentRating::dead	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        bool dead; \/\/ is this component dead?$/;"	m	class:ComponentRating
ComponentRating::dead	src/Engineering/Electrical/Components/ComponentRating.h	/^        bool dead; \/\/ is this component dead?$/;"	m	class:ComponentRating
ComponentRating::deathCause	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        CR_DEATHCAUSE deathCause; \/\/ reason for death$/;"	m	class:ComponentRating
ComponentRating::deathCause	src/Engineering/Electrical/Components/ComponentRating.h	/^        CR_DEATHCAUSE deathCause; \/\/ reason for death$/;"	m	class:ComponentRating
ComponentRating::getDeathCause	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        CR_DEATHCAUSE getDeathCause(); \/\/ return why it died$/;"	p	class:ComponentRating
ComponentRating::getDeathCause	src/Engineering/Electrical/Components/ComponentRating.cpp	/^CR_DEATHCAUSE ComponentRating::getDeathCause() {$/;"	f	class:ComponentRating
ComponentRating::getDeathCause	src/Engineering/Electrical/Components/ComponentRating.h	/^        CR_DEATHCAUSE getDeathCause(); \/\/ return why it died$/;"	p	class:ComponentRating
ComponentRating::getImpedance	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        double getImpedance(); \/\/ get component resistance$/;"	p	class:ComponentRating
ComponentRating::getImpedance	src/Engineering/Electrical/Components/ComponentRating.cpp	/^double ComponentRating::getImpedance() {$/;"	f	class:ComponentRating
ComponentRating::getImpedance	src/Engineering/Electrical/Components/ComponentRating.h	/^        double getImpedance(); \/\/ get component resistance$/;"	p	class:ComponentRating
ComponentRating::impedance	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        double impedance; \/\/ resistance creates temperature when current flows through it$/;"	m	class:ComponentRating
ComponentRating::impedance	src/Engineering/Electrical/Components/ComponentRating.h	/^        double impedance; \/\/ resistance creates temperature when current flows through it$/;"	m	class:ComponentRating
ComponentRating::isDead	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        bool isDead(); \/\/ return dead$/;"	p	class:ComponentRating
ComponentRating::isDead	src/Engineering/Electrical/Components/ComponentRating.cpp	/^bool ComponentRating::isDead() {$/;"	f	class:ComponentRating
ComponentRating::isDead	src/Engineering/Electrical/Components/ComponentRating.h	/^        bool isDead(); \/\/ return dead$/;"	p	class:ComponentRating
ComponentRating::maxPower	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        PowerValue* maxPower(); \/\/ get maximum Power$/;"	p	class:ComponentRating
ComponentRating::maxPower	src/Engineering/Electrical/Components/ComponentRating.cpp	/^PowerValue* ComponentRating::maxPower() {$/;"	f	class:ComponentRating
ComponentRating::maxPower	src/Engineering/Electrical/Components/ComponentRating.h	/^        PowerValue* maxPower(); \/\/ get maximum Power$/;"	p	class:ComponentRating
ComponentRating::powerMax	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        PowerValue* powerMax; \/\/ defines max power of a component.$/;"	m	class:ComponentRating
ComponentRating::powerMax	src/Engineering/Electrical/Components/ComponentRating.h	/^        PowerValue* powerMax; \/\/ defines max power of a component.$/;"	m	class:ComponentRating
ComponentRating::powerTime	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        double powerTime; \/\/ time in which power is applied$/;"	m	class:ComponentRating
ComponentRating::powerTime	src/Engineering/Electrical/Components/ComponentRating.h	/^        double powerTime; \/\/ time in which power is applied$/;"	m	class:ComponentRating
ComponentRating::setAmbientTemperature	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        void setAmbientTemperature(double temp); \/\/ ambient temp may change$/;"	p	class:ComponentRating
ComponentRating::setAmbientTemperature	src/Engineering/Electrical/Components/ComponentRating.cpp	/^void ComponentRating::setAmbientTemperature(double temp) {$/;"	f	class:ComponentRating
ComponentRating::setAmbientTemperature	src/Engineering/Electrical/Components/ComponentRating.h	/^        void setAmbientTemperature(double temp); \/\/ ambient temp may change$/;"	p	class:ComponentRating
ComponentRating::setPower	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        void setPower(PowerValue* power); \/\/ for initial power setting$/;"	p	class:ComponentRating
ComponentRating::setPower	src/Engineering/Electrical/Components/ComponentRating.cpp	/^void ComponentRating::setPower(PowerValue* power) {$/;"	f	class:ComponentRating
ComponentRating::setPower	src/Engineering/Electrical/Components/ComponentRating.h	/^        void setPower(PowerValue* power); \/\/ for initial power setting$/;"	p	class:ComponentRating
ComponentRating::temperatureMax	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        double temperatureMax; \/\/ defines max temperature of a component in Celsius.$/;"	m	class:ComponentRating
ComponentRating::temperatureMax	src/Engineering/Electrical/Components/ComponentRating.h	/^        double temperatureMax; \/\/ defines max temperature of a component in Celsius.$/;"	m	class:ComponentRating
ComponentRating::tick	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        void tick(SecondTick* tickTime); \/\/ calculate temperature, or death due to overpower$/;"	p	class:ComponentRating
ComponentRating::tick	src/Engineering/Electrical/Components/ComponentRating.cpp	/^void ComponentRating::tick(SecondTick* tickTime) {$/;"	f	class:ComponentRating
ComponentRating::tick	src/Engineering/Electrical/Components/ComponentRating.h	/^        void tick(SecondTick* tickTime); \/\/ calculate temperature, or death due to overpower$/;"	p	class:ComponentRating
ComponentRating::~ComponentRating	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        virtual ~ComponentRating();$/;"	p	class:ComponentRating
ComponentRating::~ComponentRating	src/Engineering/Electrical/Components/ComponentRating.cpp	/^ComponentRating::~ComponentRating() {$/;"	f	class:ComponentRating
ComponentRating::~ComponentRating	src/Engineering/Electrical/Components/ComponentRating.h	/^        virtual ~ComponentRating();$/;"	p	class:ComponentRating
Composite	include/Eternia/Engineering/Chemistry/Composite.h	/^        Composite();$/;"	p	class:Composite
Composite	include/Eternia/Engineering/Chemistry/Composite.h	/^class Composite {$/;"	c
Composite	src/Engineering/Chemistry/Composite.cpp	/^Composite::Composite() {$/;"	f	class:Composite
Composite	src/Engineering/Chemistry/Composite.h	/^        Composite();$/;"	p	class:Composite
Composite	src/Engineering/Chemistry/Composite.h	/^class Composite {$/;"	c
Composite::Composite	include/Eternia/Engineering/Chemistry/Composite.h	/^        Composite();$/;"	p	class:Composite
Composite::Composite	src/Engineering/Chemistry/Composite.cpp	/^Composite::Composite() {$/;"	f	class:Composite
Composite::Composite	src/Engineering/Chemistry/Composite.h	/^        Composite();$/;"	p	class:Composite
Composite::Type	include/Eternia/Engineering/Chemistry/Composite.h	/^        STATE Type;$/;"	m	class:Composite
Composite::Type	src/Engineering/Chemistry/Composite.h	/^        STATE Type;$/;"	m	class:Composite
Composite::density	include/Eternia/Engineering/Chemistry/Composite.h	/^        double density; \/\/ used for stuff like atmospheres, ect.$/;"	m	class:Composite
Composite::density	src/Engineering/Chemistry/Composite.h	/^        double density; \/\/ used for stuff like atmospheres, ect.$/;"	m	class:Composite
Composite::totalMass	include/Eternia/Engineering/Chemistry/Composite.h	/^        double totalMass; \/\/ total composite mass$/;"	m	class:Composite
Composite::totalMass	src/Engineering/Chemistry/Composite.h	/^        double totalMass; \/\/ total composite mass$/;"	m	class:Composite
Composite::~Composite	include/Eternia/Engineering/Chemistry/Composite.h	/^        virtual ~Composite();$/;"	p	class:Composite
Composite::~Composite	src/Engineering/Chemistry/Composite.cpp	/^Composite::~Composite() {$/;"	f	class:Composite
Composite::~Composite	src/Engineering/Chemistry/Composite.h	/^        virtual ~Composite();$/;"	p	class:Composite
CompressedJSON	include/Eternia/WebFramework/Encoding/CompressedJSON.h	/^        CompressedJSON(CharString data);$/;"	p	class:CompressedJSON
CompressedJSON	include/Eternia/WebFramework/Encoding/CompressedJSON.h	/^class CompressedJSON {$/;"	c
CompressedJSON	src/WebFramework/Encoding/CompressedJSON.h	/^        CompressedJSON(CharString data);$/;"	p	class:CompressedJSON
CompressedJSON	src/WebFramework/Encoding/CompressedJSON.h	/^class CompressedJSON {$/;"	c
CompressedJSON::CompressedJSON	include/Eternia/WebFramework/Encoding/CompressedJSON.h	/^        CompressedJSON(CharString data);$/;"	p	class:CompressedJSON
CompressedJSON::CompressedJSON	src/WebFramework/Encoding/CompressedJSON.h	/^        CompressedJSON(CharString data);$/;"	p	class:CompressedJSON
CompressedJSON::data	include/Eternia/WebFramework/Encoding/CompressedJSON.h	/^        CharString data;$/;"	m	class:CompressedJSON
CompressedJSON::data	src/WebFramework/Encoding/CompressedJSON.h	/^        CharString data;$/;"	m	class:CompressedJSON
CompressedJSON::decode	include/Eternia/WebFramework/Encoding/CompressedJSON.h	/^        CharString static decode(CharString data);$/;"	p	class:CompressedJSON
CompressedJSON::decode	src/WebFramework/Encoding/CompressedJSON.h	/^        CharString static decode(CharString data);$/;"	p	class:CompressedJSON
CompressedJSON::encode	include/Eternia/WebFramework/Encoding/CompressedJSON.h	/^        CharString static encode(CharString data);$/;"	p	class:CompressedJSON
CompressedJSON::encode	src/WebFramework/Encoding/CompressedJSON.h	/^        CharString static encode(CharString data);$/;"	p	class:CompressedJSON
ConcurrentLinkedList	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    ConcurrentLinkedList(){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList	include/Eternia/Data/ConcurrentLinkedList.hpp	/^class ConcurrentLinkedList{$/;"	c
ConcurrentLinkedList	src/Data/ConcurrentLinkedList.hpp	/^    ConcurrentLinkedList(){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList	src/Data/ConcurrentLinkedList.hpp	/^class ConcurrentLinkedList{$/;"	c
ConcurrentLinkedList::ConcurrentLinkedList	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    ConcurrentLinkedList(){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList::ConcurrentLinkedList	src/Data/ConcurrentLinkedList.hpp	/^    ConcurrentLinkedList(){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList::_size	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    int _size;$/;"	m	class:ConcurrentLinkedList
ConcurrentLinkedList::_size	src/Data/ConcurrentLinkedList.hpp	/^    int _size;$/;"	m	class:ConcurrentLinkedList
ConcurrentLinkedList::add	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    void add(T*){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList::add	src/Data/ConcurrentLinkedList.hpp	/^    void add(T*){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList::clear	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    void clear(){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList::clear	src/Data/ConcurrentLinkedList.hpp	/^    void clear(){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList::currentNode	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    LinkedNode<T> *head, *currentNode;$/;"	m	class:ConcurrentLinkedList
ConcurrentLinkedList::currentNode	src/Data/ConcurrentLinkedList.hpp	/^    LinkedNode<T> *head, *currentNode;$/;"	m	class:ConcurrentLinkedList
ConcurrentLinkedList::get	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    T* get(int i){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList::get	src/Data/ConcurrentLinkedList.hpp	/^    T* get(int i){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList::head	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    LinkedNode<T> *head, *currentNode;$/;"	m	class:ConcurrentLinkedList
ConcurrentLinkedList::head	src/Data/ConcurrentLinkedList.hpp	/^    LinkedNode<T> *head, *currentNode;$/;"	m	class:ConcurrentLinkedList
ConcurrentLinkedList::inuse	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    bool inuse;$/;"	m	class:ConcurrentLinkedList
ConcurrentLinkedList::inuse	src/Data/ConcurrentLinkedList.hpp	/^    bool inuse;$/;"	m	class:ConcurrentLinkedList
ConcurrentLinkedList::remove	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    void remove(T*){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList::remove	src/Data/ConcurrentLinkedList.hpp	/^    void remove(T*){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList::size	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    int size(){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList::size	src/Data/ConcurrentLinkedList.hpp	/^    int size(){$/;"	f	class:ConcurrentLinkedList
ConcurrentLinkedList_H_	include/Eternia/Data/ConcurrentLinkedList.hpp	/^#define ConcurrentLinkedList_H_$/;"	d
ConcurrentLinkedList_H_	src/Data/ConcurrentLinkedList.hpp	/^#define ConcurrentLinkedList_H_$/;"	d
Continue	include/Eternia/Emulation/MPU/msp430.h	/^        void Continue(); \/\/ continue processor$/;"	p	class:MSP430
Continue	src/Emulation/MPU/msp430.cpp	/^void MSP430::Continue() {$/;"	f	class:MSP430
Continue	src/Emulation/MPU/msp430.h	/^        void Continue(); \/\/ continue processor$/;"	p	class:MSP430
ConvertFromInt	include/Eternia/Data/CharString.h	/^        static CharString ConvertFromInt(int l);$/;"	p	class:CharString
ConvertFromInt	src/Data/CharString.cpp	/^CharString CharString::ConvertFromInt(int integer) {$/;"	f	class:CharString
ConvertFromInt	src/Data/CharString.h	/^        static CharString ConvertFromInt(int l);$/;"	p	class:CharString
ConvertFromLong	include/Eternia/Data/CharString.h	/^        static CharString ConvertFromLong(long l);$/;"	p	class:CharString
ConvertFromLong	src/Data/CharString.cpp	/^CharString CharString::ConvertFromLong(long integer) {$/;"	f	class:CharString
ConvertFromLong	src/Data/CharString.h	/^        static CharString ConvertFromLong(long l);$/;"	p	class:CharString
Copernicium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Copernicium = new Atom("Copernicium", "Cn", 12, 7, 112,  ,111, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Transition);$/;"	v
Copernicium	src/Engineering/Chemistry/elementals.h	/^const Atom Copernicium = new Atom("Copernicium", "Cn", 12, 7, 112,  ,111, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Transition);$/;"	v
Copper	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Copper = new Atom("Copper", "Cu", 11, 4, 29, 35,28, 8.96,0.000000017, 0.4, 1357.77,2835, 0.385, 2, COLOR_Copper,ELEM_Transition);$/;"	v
Copper	src/Engineering/Chemistry/elementals.h	/^const Atom Copper = new Atom("Copper", "Cu", 11, 4, 29, 35,28, 8.96,0.000000017, 0.4, 1357.77,2835, 0.385, 2, COLOR_Copper,ELEM_Transition);$/;"	v
Coulomb	include/Eternia/constants.h	/^        const double Coulomb = Ampere*second;$/;"	m	namespace:physical::unit
Coulomb	src/constants.h	/^        const double Coulomb = Ampere*second;$/;"	m	namespace:physical::unit
Coulombs	include/Eternia/constants.h	/^        const double Coulombs = Coulomb;$/;"	m	namespace:physical::unit
Coulombs	src/constants.h	/^        const double Coulombs = Coulomb;$/;"	m	namespace:physical::unit
Counter	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        int frequency, Counter;$/;"	m	class:CLKModule
Counter	src/Engineering/Electrical/Signal/CLKProvider.h	/^        int frequency, Counter;$/;"	m	class:CLKModule
CraftingStats	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        CraftingStats(); \/\/ Predefine stats$/;"	p	class:CraftingStats
CraftingStats	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^class CraftingStats : public SpecificSerializer {$/;"	c
CraftingStats	src/Gamelogic/Crafting/CraftingStats.cpp	/^CraftingStats::CraftingStats() {$/;"	f	class:CraftingStats
CraftingStats	src/Gamelogic/Crafting/CraftingStats.h	/^        CraftingStats(); \/\/ Predefine stats$/;"	p	class:CraftingStats
CraftingStats	src/Gamelogic/Crafting/CraftingStats.h	/^class CraftingStats : public SpecificSerializer {$/;"	c
CraftingStats::CraftingStats	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        CraftingStats(); \/\/ Predefine stats$/;"	p	class:CraftingStats
CraftingStats::CraftingStats	src/Gamelogic/Crafting/CraftingStats.cpp	/^CraftingStats::CraftingStats() {$/;"	f	class:CraftingStats
CraftingStats::CraftingStats	src/Gamelogic/Crafting/CraftingStats.h	/^        CraftingStats(); \/\/ Predefine stats$/;"	p	class:CraftingStats
CraftingStats::algebra	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> algebra; \/\/ did some equations$/;"	m	class:CraftingStats
CraftingStats::algebra	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> algebra; \/\/ did some equations$/;"	m	class:CraftingStats
CraftingStats::armor	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> armor; \/\/ basic armor skill$/;"	m	class:CraftingStats
CraftingStats::armor	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> armor; \/\/ basic armor skill$/;"	m	class:CraftingStats
CraftingStats::astronomy	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> astronomy; \/\/ Cosmology: Study of the universe$/;"	m	class:CraftingStats
CraftingStats::astronomy	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> astronomy; \/\/ Cosmology: Study of the universe$/;"	m	class:CraftingStats
CraftingStats::ballistic	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> ballistic; \/\/ ballistic weapons$/;"	m	class:CraftingStats
CraftingStats::ballistic	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> ballistic; \/\/ ballistic weapons$/;"	m	class:CraftingStats
CraftingStats::buildings	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> buildings; \/\/ base skill$/;"	m	class:CraftingStats
CraftingStats::buildings	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> buildings; \/\/ base skill$/;"	m	class:CraftingStats
CraftingStats::calculus	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> calculus; \/\/ applied some integrals (includes diff-eq)$/;"	m	class:CraftingStats
CraftingStats::calculus	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> calculus; \/\/ applied some integrals (includes diff-eq)$/;"	m	class:CraftingStats
CraftingStats::computer_science	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> computer_science; \/\/ Ability to program and to logically adapt new virtualization designs (EterniaGame is a super-computer)$/;"	m	class:CraftingStats
CraftingStats::computer_science	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> computer_science; \/\/ Ability to program and to logically adapt new virtualization designs (EterniaGame is a super-computer)$/;"	m	class:CraftingStats
CraftingStats::crew_deck	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> crew_deck; \/\/ improves how many men ship can hold and$/;"	m	class:CraftingStats
CraftingStats::crew_deck	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> crew_deck; \/\/ improves how many men ship can hold and$/;"	m	class:CraftingStats
CraftingStats::design	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> design; \/\/ creation of 3D art; images and textures inside the world (Payments for originality)$/;"	m	class:CraftingStats
CraftingStats::design	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> design; \/\/ creation of 3D art; images and textures inside the world (Payments for originality)$/;"	m	class:CraftingStats
CraftingStats::electrical	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> electrical; \/\/ Ability to create new circuits and logic behind every wire (Highly useful learning tool)$/;"	m	class:CraftingStats
CraftingStats::electrical	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> electrical; \/\/ Ability to create new circuits and logic behind every wire (Highly useful learning tool)$/;"	m	class:CraftingStats
CraftingStats::emplacements	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> emplacements; \/\/ base defense$/;"	m	class:CraftingStats
CraftingStats::emplacements	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> emplacements; \/\/ base defense$/;"	m	class:CraftingStats
CraftingStats::engine	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> engine; \/\/ skill in making better, faster engines.$/;"	m	class:CraftingStats
CraftingStats::engine	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> engine; \/\/ skill in making better, faster engines.$/;"	m	class:CraftingStats
CraftingStats::factory	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> factory; \/\/ skill in making more efficient factories. (minigame?)$/;"	m	class:CraftingStats
CraftingStats::factory	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> factory; \/\/ skill in making more efficient factories. (minigame?)$/;"	m	class:CraftingStats
CraftingStats::gear	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> gear; \/\/ base infantry gear skill$/;"	m	class:CraftingStats
CraftingStats::gear	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> gear; \/\/ base infantry gear skill$/;"	m	class:CraftingStats
CraftingStats::geometry	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> geometry; \/\/ Can be gained by placing triangles or squares$/;"	m	class:CraftingStats
CraftingStats::geometry	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> geometry; \/\/ Can be gained by placing triangles or squares$/;"	m	class:CraftingStats
CraftingStats::hardpoints	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> hardpoints; \/\/ skill in making bigger hardpoints.$/;"	m	class:CraftingStats
CraftingStats::hardpoints	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> hardpoints; \/\/ skill in making bigger hardpoints.$/;"	m	class:CraftingStats
CraftingStats::hover	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> hover; \/\/ hovering vehicles$/;"	m	class:CraftingStats
CraftingStats::hover	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> hover; \/\/ hovering vehicles$/;"	m	class:CraftingStats
CraftingStats::hyperdrive	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> hyperdrive; \/\/ skill in making better hyperdrives.$/;"	m	class:CraftingStats
CraftingStats::hyperdrive	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> hyperdrive; \/\/ skill in making better hyperdrives.$/;"	m	class:CraftingStats
CraftingStats::inorganic_chemistry	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> inorganic_chemistry; \/\/ polymers \/ Acids \/ Advanced chemistry$/;"	m	class:CraftingStats
CraftingStats::inorganic_chemistry	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> inorganic_chemistry; \/\/ polymers \/ Acids \/ Advanced chemistry$/;"	m	class:CraftingStats
CraftingStats::laser	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> laser; \/\/ Laser technology weapons$/;"	m	class:CraftingStats
CraftingStats::laser	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> laser; \/\/ Laser technology weapons$/;"	m	class:CraftingStats
CraftingStats::math	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> math; \/\/ general math$/;"	m	class:CraftingStats
CraftingStats::math	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> math; \/\/ general math$/;"	m	class:CraftingStats
CraftingStats::mechanics	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> mechanics; \/\/ Ability to design and produce working vehicles or machines.$/;"	m	class:CraftingStats
CraftingStats::mechanics	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> mechanics; \/\/ Ability to design and produce working vehicles or machines.$/;"	m	class:CraftingStats
CraftingStats::medical	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> medical; \/\/ medical areas all around the ship.$/;"	m	class:CraftingStats
CraftingStats::medical	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> medical; \/\/ medical areas all around the ship.$/;"	m	class:CraftingStats
CraftingStats::modular	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> modular; \/\/ better modular structures \/ ships \/ turrets$/;"	m	class:CraftingStats
CraftingStats::modular	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> modular; \/\/ better modular structures \/ ships \/ turrets$/;"	m	class:CraftingStats
CraftingStats::music	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> music; \/\/ creation of music (+tools)$/;"	m	class:CraftingStats
CraftingStats::music	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> music; \/\/ creation of music (+tools)$/;"	m	class:CraftingStats
CraftingStats::number_theory	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> number_theory; \/\/ found some new sequences$/;"	m	class:CraftingStats
CraftingStats::number_theory	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> number_theory; \/\/ found some new sequences$/;"	m	class:CraftingStats
CraftingStats::organic_chemistry	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> organic_chemistry; \/\/ Carbon-based or Silicon-based chemistry$/;"	m	class:CraftingStats
CraftingStats::organic_chemistry	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> organic_chemistry; \/\/ Carbon-based or Silicon-based chemistry$/;"	m	class:CraftingStats
CraftingStats::particle_physics	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> particle_physics; \/\/ advanced mechanics of physics$/;"	m	class:CraftingStats
CraftingStats::particle_physics	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> particle_physics; \/\/ advanced mechanics of physics$/;"	m	class:CraftingStats
CraftingStats::physics	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> physics; \/\/ General Physics knowledge$/;"	m	class:CraftingStats
CraftingStats::physics	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> physics; \/\/ General Physics knowledge$/;"	m	class:CraftingStats
CraftingStats::pistols	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> pistols; \/\/ infantry weapons, basic mount (Laser or ballistic)$/;"	m	class:CraftingStats
CraftingStats::pistols	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> pistols; \/\/ infantry weapons, basic mount (Laser or ballistic)$/;"	m	class:CraftingStats
CraftingStats::power	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> power; \/\/ Class mix of electrical; chemistry and physics to create advanced power designs$/;"	m	class:CraftingStats
CraftingStats::power	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> power; \/\/ Class mix of electrical; chemistry and physics to create advanced power designs$/;"	m	class:CraftingStats
CraftingStats::power_suit	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> power_suit; \/\/ skill in making better suits.$/;"	m	class:CraftingStats
CraftingStats::power_suit	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> power_suit; \/\/ skill in making better suits.$/;"	m	class:CraftingStats
CraftingStats::puzzle_solver	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> puzzle_solver; \/\/ solved many puzzles!$/;"	m	class:CraftingStats
CraftingStats::puzzle_solver	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> puzzle_solver; \/\/ solved many puzzles!$/;"	m	class:CraftingStats
CraftingStats::rifles	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> rifles; \/\/ infantry weapons, basic mount (Laser or ballistic)$/;"	m	class:CraftingStats
CraftingStats::rifles	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> rifles; \/\/ infantry weapons, basic mount (Laser or ballistic)$/;"	m	class:CraftingStats
CraftingStats::science	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> science; \/\/ increased interest in complex systems, makes skill-ups go faster$/;"	m	class:CraftingStats
CraftingStats::science	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> science; \/\/ increased interest in complex systems, makes skill-ups go faster$/;"	m	class:CraftingStats
CraftingStats::shields	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> shields; \/\/ basic shields skill$/;"	m	class:CraftingStats
CraftingStats::shields	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> shields; \/\/ basic shields skill$/;"	m	class:CraftingStats
CraftingStats::swords	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> swords; \/\/ overall sword making skill.$/;"	m	class:CraftingStats
CraftingStats::swords	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> swords; \/\/ overall sword making skill.$/;"	m	class:CraftingStats
CraftingStats::tracks	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> tracks; \/\/ better tracks for vehicles$/;"	m	class:CraftingStats
CraftingStats::tracks	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> tracks; \/\/ better tracks for vehicles$/;"	m	class:CraftingStats
CraftingStats::turrets	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> turrets; \/\/ skill in making better turrets.$/;"	m	class:CraftingStats
CraftingStats::turrets	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> turrets; \/\/ skill in making better turrets.$/;"	m	class:CraftingStats
CryptoDefiner	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        CryptoDefiner(PTypes t) {$/;"	f	class:CryptoDefiner
CryptoDefiner	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^class CryptoDefiner {$/;"	c
CryptoDefiner	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        CryptoDefiner(PTypes t) {$/;"	f	class:CryptoDefiner
CryptoDefiner	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^class CryptoDefiner {$/;"	c
CryptoDefiner::CryptoDefiner	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        CryptoDefiner(PTypes t) {$/;"	f	class:CryptoDefiner
CryptoDefiner::CryptoDefiner	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        CryptoDefiner(PTypes t) {$/;"	f	class:CryptoDefiner
CryptoDefiner::cont	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        aes256_context cont;$/;"	m	class:CryptoDefiner
CryptoDefiner::cont	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        aes256_context cont;$/;"	m	class:CryptoDefiner
CryptoDefiner::falseValue	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T falseValue; \/\/ false value that can be changed, but will do nothing$/;"	m	class:CryptoDefiner
CryptoDefiner::falseValue	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T falseValue; \/\/ false value that can be changed, but will do nothing$/;"	m	class:CryptoDefiner
CryptoDefiner::get	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T get() {$/;"	f	class:CryptoDefiner
CryptoDefiner::get	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T get() {$/;"	f	class:CryptoDefiner
CryptoDefiner::key	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        char* key; \/\/ randomly generated key$/;"	m	class:CryptoDefiner
CryptoDefiner::key	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        char* key; \/\/ randomly generated key$/;"	m	class:CryptoDefiner
CryptoDefiner::memRegion	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        unsigned char memRegion[128]; \/\/ encrypted region of memory$/;"	m	class:CryptoDefiner
CryptoDefiner::memRegion	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        unsigned char memRegion[128]; \/\/ encrypted region of memory$/;"	m	class:CryptoDefiner
CryptoDefiner::operator !	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator !() {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator !	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator !() {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator !=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator !=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator !=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator !=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator !=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator !=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator !=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator !=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator &	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator &	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator &	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator &	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator &=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator &=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator &=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator &=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator *	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator *	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator *	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator *	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator *=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator *=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator *=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator *=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator +	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator +	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator +	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator +	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ++	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ++() {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ++	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ++() {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator +=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator +=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator +=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator +=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator -	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator -	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator -	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator -	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator -=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator -=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator -=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator -=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator /	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator /	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator /	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator /	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator /=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator /=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator /=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator /=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator <	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator <	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator <	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator <	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator <=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator <=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator <=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator <=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator =	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator =(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator =	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator =(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator =	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator =(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator =	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator =(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ==	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator ==(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ==	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator ==(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ==	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator ==(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ==	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator ==(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator >	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator >	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator >	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator >	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator >=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator >=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator >=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator >=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ^	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ^	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ^	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ^	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ^=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ^=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ^=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ^=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator |	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator |	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator |	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator |	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator |=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator |=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator |=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator |=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |=(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ~	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ~() {$/;"	f	class:CryptoDefiner
CryptoDefiner::operator ~	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ~() {$/;"	f	class:CryptoDefiner
CryptoDefiner::set	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T set(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::set	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T set(T val) {$/;"	f	class:CryptoDefiner
CryptoDefiner::tpe	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        PTypes tpe;$/;"	m	class:CryptoDefiner
CryptoDefiner::tpe	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        PTypes tpe;$/;"	m	class:CryptoDefiner
Curie	include/Eternia/constants.h	/^        const double Curie = 3.7e+10*Becquerels;$/;"	m	namespace:physical::unit
Curie	src/constants.h	/^        const double Curie = 3.7e+10*Becquerels;$/;"	m	namespace:physical::unit
Curies	include/Eternia/constants.h	/^        const double Curies = Curie;$/;"	m	namespace:physical::unit
Curies	src/constants.h	/^        const double Curies = Curie;$/;"	m	namespace:physical::unit
Curium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Curium = new Atom("Curium", "Cm", 0, 7, 96, 151,95, 13.51,UNKNOWN, UNKNOWN, 1613,3383, UNKNOWN, 4, COLOR_Silver,ELEM_Actinide);$/;"	v
Curium	src/Engineering/Chemistry/elementals.h	/^const Atom Curium = new Atom("Curium", "Cm", 0, 7, 96, 151,95, 13.51,UNKNOWN, UNKNOWN, 1613,3383, UNKNOWN, 4, COLOR_Silver,ELEM_Actinide);$/;"	v
Current	include/Eternia/Data/FileSystem.h	/^        FileStructureNode *Root, *Current;$/;"	m	class:FileSystem
Current	src/Data/FileSystem.h	/^        FileStructureNode *Root, *Current;$/;"	m	class:FileSystem
CyclicList	include/Eternia/Data/CyclicList.hpp	/^    CyclicList(int num){$/;"	f	class:CyclicList
CyclicList	include/Eternia/Data/CyclicList.hpp	/^class CyclicList{$/;"	c
CyclicList	src/Data/CyclicList.hpp	/^    CyclicList(int num){$/;"	f	class:CyclicList
CyclicList	src/Data/CyclicList.hpp	/^class CyclicList{$/;"	c
CyclicList::CyclicList	include/Eternia/Data/CyclicList.hpp	/^    CyclicList(int num){$/;"	f	class:CyclicList
CyclicList::CyclicList	src/Data/CyclicList.hpp	/^    CyclicList(int num){$/;"	f	class:CyclicList
CyclicList::add	include/Eternia/Data/CyclicList.hpp	/^    void add(T item){$/;"	f	class:CyclicList
CyclicList::add	src/Data/CyclicList.hpp	/^    void add(T item){$/;"	f	class:CyclicList
CyclicList::getAverage	include/Eternia/Data/CyclicList.hpp	/^    T getAverage(){$/;"	f	class:CyclicList
CyclicList::getAverage	src/Data/CyclicList.hpp	/^    T getAverage(){$/;"	f	class:CyclicList
CyclicList::list	include/Eternia/Data/CyclicList.hpp	/^    T* list; \/\/ list$/;"	m	class:CyclicList
CyclicList::list	src/Data/CyclicList.hpp	/^    T* list; \/\/ list$/;"	m	class:CyclicList
CyclicList::location	include/Eternia/Data/CyclicList.hpp	/^    int location, num;$/;"	m	class:CyclicList
CyclicList::location	src/Data/CyclicList.hpp	/^    int location, num;$/;"	m	class:CyclicList
CyclicList::num	include/Eternia/Data/CyclicList.hpp	/^    int location, num;$/;"	m	class:CyclicList
CyclicList::num	src/Data/CyclicList.hpp	/^    int location, num;$/;"	m	class:CyclicList
CyclicList::~CyclicList	include/Eternia/Data/CyclicList.hpp	/^    ~CyclicList(){}$/;"	f	class:CyclicList
CyclicList::~CyclicList	src/Data/CyclicList.hpp	/^    ~CyclicList(){}$/;"	f	class:CyclicList
D	include/Eternia/constants.h	/^        const double D = 18.35;$/;"	m	namespace:electromagnetic::sound
D	src/constants.h	/^        const double D = 18.35;$/;"	m	namespace:electromagnetic::sound
DAMAGERESULT	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum DAMAGERESULT {DR_MISS, DR_HIT, DR_KILL};$/;"	g
DAMAGERESULT	src/Gamelogic/Avatar/Avatar.h	/^enum DAMAGERESULT {DR_MISS, DR_HIT, DR_KILL};$/;"	g
DATA_TEST_H_00	src/Data/test/testDataStructures.h	/^#define DATA_TEST_H_00$/;"	d
DATE	version.h	/^#define DATE /;"	d
DA_AIRBOURNE	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	e	enum:DISEASE_ATTRIBUTES
DA_AIRBOURNE	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	e	enum:DISEASE_ATTRIBUTES
DA_Armor	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^    DA_Armor, DA_Shield, $/;"	e	enum:DynamicAttr
DA_Armor	src/Gamelogic/Inventory/DynamicAttribute.h	/^    DA_Armor, DA_Shield, $/;"	e	enum:DynamicAttr
DA_Attack	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^enum DynamicAttr {DA_Attack, $/;"	e	enum:DynamicAttr
DA_Attack	src/Gamelogic/Inventory/DynamicAttribute.h	/^enum DynamicAttr {DA_Attack, $/;"	e	enum:DynamicAttr
DA_COMMUNICABLE	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	e	enum:DISEASE_ATTRIBUTES
DA_COMMUNICABLE	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	e	enum:DISEASE_ATTRIBUTES
DA_CONTAGIOUS	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	e	enum:DISEASE_ATTRIBUTES
DA_CONTAGIOUS	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	e	enum:DISEASE_ATTRIBUTES
DA_CURABLE	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	e	enum:DISEASE_ATTRIBUTES
DA_CURABLE	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	e	enum:DISEASE_ATTRIBUTES
DA_FOODBOURNE	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	e	enum:DISEASE_ATTRIBUTES
DA_FOODBOURNE	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	e	enum:DISEASE_ATTRIBUTES
DA_Gunnery	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^    DA_Gunnery, DA_NanoRobots};$/;"	e	enum:DynamicAttr
DA_Gunnery	src/Gamelogic/Inventory/DynamicAttribute.h	/^    DA_Gunnery, DA_NanoRobots};$/;"	e	enum:DynamicAttr
DA_INFECTIOUS	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	e	enum:DISEASE_ATTRIBUTES
DA_INFECTIOUS	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	e	enum:DISEASE_ATTRIBUTES
DA_NanoRobots	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^    DA_Gunnery, DA_NanoRobots};$/;"	e	enum:DynamicAttr
DA_NanoRobots	src/Gamelogic/Inventory/DynamicAttribute.h	/^    DA_Gunnery, DA_NanoRobots};$/;"	e	enum:DynamicAttr
DA_Shield	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^    DA_Armor, DA_Shield, $/;"	e	enum:DynamicAttr
DA_Shield	src/Gamelogic/Inventory/DynamicAttribute.h	/^    DA_Armor, DA_Shield, $/;"	e	enum:DynamicAttr
DB_CHAR	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^enum ADBF_TYPE { DB_CHAR, DB_INT, DB_LONG,$/;"	e	enum:ADBF_TYPE
DB_CHAR	src/Data/AbstractDatabase/AbstractDB.h	/^enum ADBF_TYPE { DB_CHAR, DB_INT, DB_LONG,$/;"	e	enum:ADBF_TYPE
DB_CHAR_SIZE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^#define DB_CHAR_SIZE /;"	d
DB_CHAR_SIZE	src/Data/AbstractDatabase/AbstractDB.h	/^#define DB_CHAR_SIZE /;"	d
DB_DATE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^                 DB_STRING, DB_DATE,$/;"	e	enum:ADBF_TYPE
DB_DATE	src/Data/AbstractDatabase/AbstractDB.h	/^                 DB_STRING, DB_DATE,$/;"	e	enum:ADBF_TYPE
DB_DATE_SIZE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^#define DB_DATE_SIZE /;"	d
DB_DATE_SIZE	src/Data/AbstractDatabase/AbstractDB.h	/^#define DB_DATE_SIZE /;"	d
DB_DOUBLE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^                 DB_REAL, DB_FLOAT, DB_DOUBLE, DB_QUAD$/;"	e	enum:ADBF_TYPE
DB_DOUBLE	src/Data/AbstractDatabase/AbstractDB.h	/^                 DB_REAL, DB_FLOAT, DB_DOUBLE, DB_QUAD$/;"	e	enum:ADBF_TYPE
DB_DOUBLE_SIZE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^#define DB_DOUBLE_SIZE /;"	d
DB_DOUBLE_SIZE	src/Data/AbstractDatabase/AbstractDB.h	/^#define DB_DOUBLE_SIZE /;"	d
DB_FLOAT	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^                 DB_REAL, DB_FLOAT, DB_DOUBLE, DB_QUAD$/;"	e	enum:ADBF_TYPE
DB_FLOAT	src/Data/AbstractDatabase/AbstractDB.h	/^                 DB_REAL, DB_FLOAT, DB_DOUBLE, DB_QUAD$/;"	e	enum:ADBF_TYPE
DB_FLOAT_SIZE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^#define DB_FLOAT_SIZE /;"	d
DB_FLOAT_SIZE	src/Data/AbstractDatabase/AbstractDB.h	/^#define DB_FLOAT_SIZE /;"	d
DB_INT	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^enum ADBF_TYPE { DB_CHAR, DB_INT, DB_LONG,$/;"	e	enum:ADBF_TYPE
DB_INT	src/Data/AbstractDatabase/AbstractDB.h	/^enum ADBF_TYPE { DB_CHAR, DB_INT, DB_LONG,$/;"	e	enum:ADBF_TYPE
DB_INT_SIZE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^#define DB_INT_SIZE /;"	d
DB_INT_SIZE	src/Data/AbstractDatabase/AbstractDB.h	/^#define DB_INT_SIZE /;"	d
DB_LONG	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^enum ADBF_TYPE { DB_CHAR, DB_INT, DB_LONG,$/;"	e	enum:ADBF_TYPE
DB_LONG	src/Data/AbstractDatabase/AbstractDB.h	/^enum ADBF_TYPE { DB_CHAR, DB_INT, DB_LONG,$/;"	e	enum:ADBF_TYPE
DB_LONG_SIZE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^#define DB_LONG_SIZE /;"	d
DB_LONG_SIZE	src/Data/AbstractDatabase/AbstractDB.h	/^#define DB_LONG_SIZE /;"	d
DB_QUAD	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^                 DB_REAL, DB_FLOAT, DB_DOUBLE, DB_QUAD$/;"	e	enum:ADBF_TYPE
DB_QUAD	src/Data/AbstractDatabase/AbstractDB.h	/^                 DB_REAL, DB_FLOAT, DB_DOUBLE, DB_QUAD$/;"	e	enum:ADBF_TYPE
DB_QUAD_SIZE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^#define DB_QUAD_SIZE /;"	d
DB_QUAD_SIZE	src/Data/AbstractDatabase/AbstractDB.h	/^#define DB_QUAD_SIZE /;"	d
DB_REAL	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^                 DB_REAL, DB_FLOAT, DB_DOUBLE, DB_QUAD$/;"	e	enum:ADBF_TYPE
DB_REAL	src/Data/AbstractDatabase/AbstractDB.h	/^                 DB_REAL, DB_FLOAT, DB_DOUBLE, DB_QUAD$/;"	e	enum:ADBF_TYPE
DB_REAL_SIZE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^#define DB_REAL_SIZE /;"	d
DB_REAL_SIZE	src/Data/AbstractDatabase/AbstractDB.h	/^#define DB_REAL_SIZE /;"	d
DB_STRING	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^                 DB_STRING, DB_DATE,$/;"	e	enum:ADBF_TYPE
DB_STRING	src/Data/AbstractDatabase/AbstractDB.h	/^                 DB_STRING, DB_DATE,$/;"	e	enum:ADBF_TYPE
DB_STRING_SIZE	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^#define DB_STRING_SIZE /;"	d
DB_STRING_SIZE	src/Data/AbstractDatabase/AbstractDB.h	/^#define DB_STRING_SIZE /;"	d
DCO0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DCO0 /;"	d
DCO0	src/Emulation/MPU/msp430g2553.h	/^#define DCO0 /;"	d
DCO1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DCO1 /;"	d
DCO1	src/Emulation/MPU/msp430g2553.h	/^#define DCO1 /;"	d
DCO2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DCO2 /;"	d
DCO2	src/Emulation/MPU/msp430g2553.h	/^#define DCO2 /;"	d
DCOCTL	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define DCOCTL /;"	d
DCOCTL	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(DCOCTL);                             \/* DCO Clock Frequency Control *\/$/;"	v
DCOCTL	src/Emulation/MPU/msp430_declare_consts.h	/^#define DCOCTL /;"	d
DCOCTL	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(DCOCTL);                             \/* DCO Clock Frequency Control *\/$/;"	v
DE	include/Eternia/constants.h	/^        const double DE = 19.45;$/;"	m	namespace:electromagnetic::sound
DE	src/constants.h	/^        const double DE = 19.45;$/;"	m	namespace:electromagnetic::sound
DEBUG	main.cpp	/^#define DEBUG$/;"	d	file:
DEC	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
DIODETYPE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	g
DIODETYPE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	g
DISEASE_ATTRIBUTES	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	g
DISEASE_ATTRIBUTES	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_ATTRIBUTES {DA_CONTAGIOUS, DA_INFECTIOUS, DA_FOODBOURNE, DA_COMMUNICABLE, DA_AIRBOURNE, DA_CURABLE};$/;"	g
DISEASE_SYMPTOMS	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_SYMPTOMS {DS_HEARTATTACK, DS_LUNGFAILURE, DS_KIDNEYFAILURE, DS_NEUROFAILURE, DS_CONVULSIONS,$/;"	g
DISEASE_SYMPTOMS	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_SYMPTOMS {DS_HEARTATTACK, DS_LUNGFAILURE, DS_KIDNEYFAILURE, DS_NEUROFAILURE, DS_CONVULSIONS,$/;"	g
DISEASE_TYPE	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	g
DISEASE_TYPE	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	g
DIVA0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVA0 /;"	d
DIVA0	src/Emulation/MPU/msp430g2553.h	/^#define DIVA0 /;"	d
DIVA1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVA1 /;"	d
DIVA1	src/Emulation/MPU/msp430g2553.h	/^#define DIVA1 /;"	d
DIVA_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVA_0 /;"	d
DIVA_0	src/Emulation/MPU/msp430g2553.h	/^#define DIVA_0 /;"	d
DIVA_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVA_1 /;"	d
DIVA_1	src/Emulation/MPU/msp430g2553.h	/^#define DIVA_1 /;"	d
DIVA_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVA_2 /;"	d
DIVA_2	src/Emulation/MPU/msp430g2553.h	/^#define DIVA_2 /;"	d
DIVA_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVA_3 /;"	d
DIVA_3	src/Emulation/MPU/msp430g2553.h	/^#define DIVA_3 /;"	d
DIVM0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVM0 /;"	d
DIVM0	src/Emulation/MPU/msp430g2553.h	/^#define DIVM0 /;"	d
DIVM1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVM1 /;"	d
DIVM1	src/Emulation/MPU/msp430g2553.h	/^#define DIVM1 /;"	d
DIVM_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVM_0 /;"	d
DIVM_0	src/Emulation/MPU/msp430g2553.h	/^#define DIVM_0 /;"	d
DIVM_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVM_1 /;"	d
DIVM_1	src/Emulation/MPU/msp430g2553.h	/^#define DIVM_1 /;"	d
DIVM_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVM_2 /;"	d
DIVM_2	src/Emulation/MPU/msp430g2553.h	/^#define DIVM_2 /;"	d
DIVM_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVM_3 /;"	d
DIVM_3	src/Emulation/MPU/msp430g2553.h	/^#define DIVM_3 /;"	d
DIVS0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVS0 /;"	d
DIVS0	src/Emulation/MPU/msp430g2553.h	/^#define DIVS0 /;"	d
DIVS1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVS1 /;"	d
DIVS1	src/Emulation/MPU/msp430g2553.h	/^#define DIVS1 /;"	d
DIVS_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVS_0 /;"	d
DIVS_0	src/Emulation/MPU/msp430g2553.h	/^#define DIVS_0 /;"	d
DIVS_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVS_1 /;"	d
DIVS_1	src/Emulation/MPU/msp430g2553.h	/^#define DIVS_1 /;"	d
DIVS_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVS_2 /;"	d
DIVS_2	src/Emulation/MPU/msp430g2553.h	/^#define DIVS_2 /;"	d
DIVS_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define DIVS_3 /;"	d
DIVS_3	src/Emulation/MPU/msp430g2553.h	/^#define DIVS_3 /;"	d
DR_HIT	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum DAMAGERESULT {DR_MISS, DR_HIT, DR_KILL};$/;"	e	enum:DAMAGERESULT
DR_HIT	src/Gamelogic/Avatar/Avatar.h	/^enum DAMAGERESULT {DR_MISS, DR_HIT, DR_KILL};$/;"	e	enum:DAMAGERESULT
DR_KILL	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum DAMAGERESULT {DR_MISS, DR_HIT, DR_KILL};$/;"	e	enum:DAMAGERESULT
DR_KILL	src/Gamelogic/Avatar/Avatar.h	/^enum DAMAGERESULT {DR_MISS, DR_HIT, DR_KILL};$/;"	e	enum:DAMAGERESULT
DR_MISS	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum DAMAGERESULT {DR_MISS, DR_HIT, DR_KILL};$/;"	e	enum:DAMAGERESULT
DR_MISS	src/Gamelogic/Avatar/Avatar.h	/^enum DAMAGERESULT {DR_MISS, DR_HIT, DR_KILL};$/;"	e	enum:DAMAGERESULT
DS_AKATHISIA	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_ALEXIA, DS_ATAXIA, DS_HYPERVENTILATION, DS_HYPOVENTILATION, DS_FATIGUE, DS_AKATHISIA,$/;"	e	enum:DISEASE_SYMPTOMS
DS_AKATHISIA	src/Gamelogic/Avatar/Disease.h	/^                       DS_ALEXIA, DS_ATAXIA, DS_HYPERVENTILATION, DS_HYPOVENTILATION, DS_FATIGUE, DS_AKATHISIA,$/;"	e	enum:DISEASE_SYMPTOMS
DS_ALEXIA	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_ALEXIA, DS_ATAXIA, DS_HYPERVENTILATION, DS_HYPOVENTILATION, DS_FATIGUE, DS_AKATHISIA,$/;"	e	enum:DISEASE_SYMPTOMS
DS_ALEXIA	src/Gamelogic/Avatar/Disease.h	/^                       DS_ALEXIA, DS_ATAXIA, DS_HYPERVENTILATION, DS_HYPOVENTILATION, DS_FATIGUE, DS_AKATHISIA,$/;"	e	enum:DISEASE_SYMPTOMS
DS_ANOSOGNOSIA	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_ANOSOGNOSIA, DS_VERTIGO, DS_BLEEDING, DS_PAIN, DS_BLURREDVISION$/;"	e	enum:DISEASE_SYMPTOMS
DS_ANOSOGNOSIA	src/Gamelogic/Avatar/Disease.h	/^                       DS_ANOSOGNOSIA, DS_VERTIGO, DS_BLEEDING, DS_PAIN, DS_BLURREDVISION$/;"	e	enum:DISEASE_SYMPTOMS
DS_ANXIETY	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_ANXIETY	src/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_ATAXIA	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_ALEXIA, DS_ATAXIA, DS_HYPERVENTILATION, DS_HYPOVENTILATION, DS_FATIGUE, DS_AKATHISIA,$/;"	e	enum:DISEASE_SYMPTOMS
DS_ATAXIA	src/Gamelogic/Avatar/Disease.h	/^                       DS_ALEXIA, DS_ATAXIA, DS_HYPERVENTILATION, DS_HYPOVENTILATION, DS_FATIGUE, DS_AKATHISIA,$/;"	e	enum:DISEASE_SYMPTOMS
DS_BLEEDING	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_ANOSOGNOSIA, DS_VERTIGO, DS_BLEEDING, DS_PAIN, DS_BLURREDVISION$/;"	e	enum:DISEASE_SYMPTOMS
DS_BLEEDING	src/Gamelogic/Avatar/Disease.h	/^                       DS_ANOSOGNOSIA, DS_VERTIGO, DS_BLEEDING, DS_PAIN, DS_BLURREDVISION$/;"	e	enum:DISEASE_SYMPTOMS
DS_BLINDING	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_BLINDING	src/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_BLURREDVISION	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_ANOSOGNOSIA, DS_VERTIGO, DS_BLEEDING, DS_PAIN, DS_BLURREDVISION$/;"	e	enum:DISEASE_SYMPTOMS
DS_BLURREDVISION	src/Gamelogic/Avatar/Disease.h	/^                       DS_ANOSOGNOSIA, DS_VERTIGO, DS_BLEEDING, DS_PAIN, DS_BLURREDVISION$/;"	e	enum:DISEASE_SYMPTOMS
DS_CONFUSION	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_CONFUSION	src/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_CONVULSIONS	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_SYMPTOMS {DS_HEARTATTACK, DS_LUNGFAILURE, DS_KIDNEYFAILURE, DS_NEUROFAILURE, DS_CONVULSIONS,$/;"	e	enum:DISEASE_SYMPTOMS
DS_CONVULSIONS	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_SYMPTOMS {DS_HEARTATTACK, DS_LUNGFAILURE, DS_KIDNEYFAILURE, DS_NEUROFAILURE, DS_CONVULSIONS,$/;"	e	enum:DISEASE_SYMPTOMS
DS_COUGH	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_COUGH	src/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_FATIGUE	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_ALEXIA, DS_ATAXIA, DS_HYPERVENTILATION, DS_HYPOVENTILATION, DS_FATIGUE, DS_AKATHISIA,$/;"	e	enum:DISEASE_SYMPTOMS
DS_FATIGUE	src/Gamelogic/Avatar/Disease.h	/^                       DS_ALEXIA, DS_ATAXIA, DS_HYPERVENTILATION, DS_HYPOVENTILATION, DS_FATIGUE, DS_AKATHISIA,$/;"	e	enum:DISEASE_SYMPTOMS
DS_HALLUCINATION	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_HALLUCINATION	src/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_HEARTATTACK	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_SYMPTOMS {DS_HEARTATTACK, DS_LUNGFAILURE, DS_KIDNEYFAILURE, DS_NEUROFAILURE, DS_CONVULSIONS,$/;"	e	enum:DISEASE_SYMPTOMS
DS_HEARTATTACK	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_SYMPTOMS {DS_HEARTATTACK, DS_LUNGFAILURE, DS_KIDNEYFAILURE, DS_NEUROFAILURE, DS_CONVULSIONS,$/;"	e	enum:DISEASE_SYMPTOMS
DS_HYPERVENTILATION	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_ALEXIA, DS_ATAXIA, DS_HYPERVENTILATION, DS_HYPOVENTILATION, DS_FATIGUE, DS_AKATHISIA,$/;"	e	enum:DISEASE_SYMPTOMS
DS_HYPERVENTILATION	src/Gamelogic/Avatar/Disease.h	/^                       DS_ALEXIA, DS_ATAXIA, DS_HYPERVENTILATION, DS_HYPOVENTILATION, DS_FATIGUE, DS_AKATHISIA,$/;"	e	enum:DISEASE_SYMPTOMS
DS_HYPOVENTILATION	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_ALEXIA, DS_ATAXIA, DS_HYPERVENTILATION, DS_HYPOVENTILATION, DS_FATIGUE, DS_AKATHISIA,$/;"	e	enum:DISEASE_SYMPTOMS
DS_HYPOVENTILATION	src/Gamelogic/Avatar/Disease.h	/^                       DS_ALEXIA, DS_ATAXIA, DS_HYPERVENTILATION, DS_HYPOVENTILATION, DS_FATIGUE, DS_AKATHISIA,$/;"	e	enum:DISEASE_SYMPTOMS
DS_KIDNEYFAILURE	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_SYMPTOMS {DS_HEARTATTACK, DS_LUNGFAILURE, DS_KIDNEYFAILURE, DS_NEUROFAILURE, DS_CONVULSIONS,$/;"	e	enum:DISEASE_SYMPTOMS
DS_KIDNEYFAILURE	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_SYMPTOMS {DS_HEARTATTACK, DS_LUNGFAILURE, DS_KIDNEYFAILURE, DS_NEUROFAILURE, DS_CONVULSIONS,$/;"	e	enum:DISEASE_SYMPTOMS
DS_LUNGFAILURE	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_SYMPTOMS {DS_HEARTATTACK, DS_LUNGFAILURE, DS_KIDNEYFAILURE, DS_NEUROFAILURE, DS_CONVULSIONS,$/;"	e	enum:DISEASE_SYMPTOMS
DS_LUNGFAILURE	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_SYMPTOMS {DS_HEARTATTACK, DS_LUNGFAILURE, DS_KIDNEYFAILURE, DS_NEUROFAILURE, DS_CONVULSIONS,$/;"	e	enum:DISEASE_SYMPTOMS
DS_MANIA	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_MANIA	src/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_NEUROFAILURE	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_SYMPTOMS {DS_HEARTATTACK, DS_LUNGFAILURE, DS_KIDNEYFAILURE, DS_NEUROFAILURE, DS_CONVULSIONS,$/;"	e	enum:DISEASE_SYMPTOMS
DS_NEUROFAILURE	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_SYMPTOMS {DS_HEARTATTACK, DS_LUNGFAILURE, DS_KIDNEYFAILURE, DS_NEUROFAILURE, DS_CONVULSIONS,$/;"	e	enum:DISEASE_SYMPTOMS
DS_PAIN	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_ANOSOGNOSIA, DS_VERTIGO, DS_BLEEDING, DS_PAIN, DS_BLURREDVISION$/;"	e	enum:DISEASE_SYMPTOMS
DS_PAIN	src/Gamelogic/Avatar/Disease.h	/^                       DS_ANOSOGNOSIA, DS_VERTIGO, DS_BLEEDING, DS_PAIN, DS_BLURREDVISION$/;"	e	enum:DISEASE_SYMPTOMS
DS_VERTIGO	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_ANOSOGNOSIA, DS_VERTIGO, DS_BLEEDING, DS_PAIN, DS_BLURREDVISION$/;"	e	enum:DISEASE_SYMPTOMS
DS_VERTIGO	src/Gamelogic/Avatar/Disease.h	/^                       DS_ANOSOGNOSIA, DS_VERTIGO, DS_BLEEDING, DS_PAIN, DS_BLURREDVISION$/;"	e	enum:DISEASE_SYMPTOMS
DS_VOMITING	include/Eternia/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DS_VOMITING	src/Gamelogic/Avatar/Disease.h	/^                       DS_VOMITING, DS_BLINDING, DS_MANIA, DS_CONFUSION, DS_HALLUCINATION, DS_COUGH, DS_ANXIETY,$/;"	e	enum:DISEASE_SYMPTOMS
DT_CANCER	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_CANCER	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_DRUG	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_DRUG	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_FUNGII	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_FUNGII	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_PARASITE	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_PARASITE	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_RADIATION	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_RADIATION	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_TOXIN	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_TOXIN	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_VIRUS	include/Eternia/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DT_VIRUS	src/Gamelogic/Avatar/Disease.h	/^enum DISEASE_TYPE {DT_PARASITE, DT_FUNGII, DT_VIRUS, DT_CANCER, DT_TOXIN, DT_RADIATION, DT_DRUG};$/;"	e	enum:DISEASE_TYPE
DType	include/Eternia/Data/FileSystem.h	/^enum DType {Directory,File};$/;"	g
DType	src/Data/FileSystem.h	/^enum DType {Directory,File};$/;"	g
DYNAMIC_Attribute_H_	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^#define DYNAMIC_Attribute_H_$/;"	d
DYNAMIC_Attribute_H_	src/Gamelogic/Inventory/DynamicAttribute.h	/^#define DYNAMIC_Attribute_H_$/;"	d
DYNAMIC_Equip_H_	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^#define DYNAMIC_Equip_H_$/;"	d
DYNAMIC_Equip_H_	src/Gamelogic/Inventory/DynamicEquip.h	/^#define DYNAMIC_Equip_H_$/;"	d
D_BOOL	include/Eternia/Algorithm/Cryptography/CryptoDefines.h	/^#define D_BOOL(/;"	d
D_BOOL	src/Algorithm/Cryptography/CryptoDefines.h	/^#define D_BOOL(/;"	d
D_CHAR	include/Eternia/Algorithm/Cryptography/CryptoDefines.h	/^#define D_CHAR(/;"	d
D_CHAR	src/Algorithm/Cryptography/CryptoDefines.h	/^#define D_CHAR(/;"	d
D_FLOAT	include/Eternia/Algorithm/Cryptography/CryptoDefines.h	/^#define D_FLOAT(/;"	d
D_FLOAT	src/Algorithm/Cryptography/CryptoDefines.h	/^#define D_FLOAT(/;"	d
D_INT	include/Eternia/Algorithm/Cryptography/CryptoDefines.h	/^#define D_INT(/;"	d
D_INT	src/Algorithm/Cryptography/CryptoDefines.h	/^#define D_INT(/;"	d
D_LONG	include/Eternia/Algorithm/Cryptography/CryptoDefines.h	/^#define D_LONG(/;"	d
D_LONG	src/Algorithm/Cryptography/CryptoDefines.h	/^#define D_LONG(/;"	d
Dalton	include/Eternia/constants.h	/^        const double Dalton = atomic_mass_unit;$/;"	m	namespace:physical::constant
Dalton	src/constants.h	/^        const double Dalton = atomic_mass_unit;$/;"	m	namespace:physical::constant
Daltons	include/Eternia/constants.h	/^        const double Daltons = Dalton;$/;"	m	namespace:physical::constant
Daltons	src/constants.h	/^        const double Daltons = Dalton;$/;"	m	namespace:physical::constant
Darmstadtium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Darmstadtium = new Atom("Darmstadtium", "Ds", 10, 7, 110, 161,109, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Transition);$/;"	v
Darmstadtium	src/Engineering/Chemistry/elementals.h	/^const Atom Darmstadtium = new Atom("Darmstadtium", "Ds", 10, 7, 110, 161,109, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Transition);$/;"	v
Depth	include/Eternia/Data/TreeList.h	/^        int Depth(); \/\/ how far in is this node?$/;"	p	class:TreeNode
Depth	src/Data/TreeList.h	/^        int Depth(); \/\/ how far in is this node?$/;"	p	class:TreeNode
Die	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void Die(); \/\/ this avatar dies (Test for clones if Player or NPC)$/;"	p	class:Avatar
Die	src/Gamelogic/Avatar/Avatar.h	/^        void Die(); \/\/ this avatar dies (Test for clones if Player or NPC)$/;"	p	class:Avatar
DijkstraDistances	include/Eternia/Algorithm/Pathing/DijkstraPath.hpp	/^LinkedListT* DijkstraDistances(Graph* graph, Vertex* source) {$/;"	f
DijkstraDistances	src/Algorithm/Pathing/DijkstraPath.hpp	/^LinkedListT* DijkstraDistances(Graph* graph, Vertex* source) {$/;"	f
DijkstraSPATH_H_	include/Eternia/Algorithm/Pathing/DijkstraPath.hpp	/^#define DijkstraSPATH_H_$/;"	d
DijkstraSPATH_H_	src/Algorithm/Pathing/DijkstraPath.hpp	/^#define DijkstraSPATH_H_$/;"	d
Diode	include/Eternia/Engineering/Electrical/Components/Diode.h	/^        Diode(DIODETYPE Type); \/\/ define diode type for output$/;"	p	class:Diode
Diode	include/Eternia/Engineering/Electrical/Components/Diode.h	/^class Diode : private component {$/;"	c
Diode	src/Engineering/Electrical/Components/Diode.h	/^        Diode(DIODETYPE Type); \/\/ define diode type for output$/;"	p	class:Diode
Diode	src/Engineering/Electrical/Components/Diode.h	/^class Diode : private component {$/;"	c
Diode::Diode	include/Eternia/Engineering/Electrical/Components/Diode.h	/^        Diode(DIODETYPE Type); \/\/ define diode type for output$/;"	p	class:Diode
Diode::Diode	src/Engineering/Electrical/Components/Diode.h	/^        Diode(DIODETYPE Type); \/\/ define diode type for output$/;"	p	class:Diode
Diode::type	include/Eternia/Engineering/Electrical/Components/Diode.h	/^        DIODETYPE type;$/;"	m	class:Diode
Diode::type	src/Engineering/Electrical/Components/Diode.h	/^        DIODETYPE type;$/;"	m	class:Diode
Diode::~Diode	include/Eternia/Engineering/Electrical/Components/Diode.h	/^        virtual ~Diode();$/;"	p	class:Diode
Diode::~Diode	src/Engineering/Electrical/Components/Diode.h	/^        virtual ~Diode();$/;"	p	class:Diode
Diode_h_	include/Eternia/Engineering/Electrical/Components/Diode.h	/^#define Diode_h_$/;"	d
Diode_h_	src/Engineering/Electrical/Components/Diode.h	/^#define Diode_h_$/;"	d
Directory	include/Eternia/Data/FileSystem.h	/^enum DType {Directory,File};$/;"	e	enum:DType
Directory	src/Data/FileSystem.h	/^enum DType {Directory,File};$/;"	e	enum:DType
Disease	include/Eternia/Gamelogic/Avatar/Disease.h	/^        Disease();$/;"	p	class:Disease
Disease	include/Eternia/Gamelogic/Avatar/Disease.h	/^class Disease {$/;"	c
Disease	src/Gamelogic/Avatar/Disease.cpp	/^Disease::Disease() {$/;"	f	class:Disease
Disease	src/Gamelogic/Avatar/Disease.h	/^        Disease();$/;"	p	class:Disease
Disease	src/Gamelogic/Avatar/Disease.h	/^class Disease {$/;"	c
Disease::Disease	include/Eternia/Gamelogic/Avatar/Disease.h	/^        Disease();$/;"	p	class:Disease
Disease::Disease	src/Gamelogic/Avatar/Disease.cpp	/^Disease::Disease() {$/;"	f	class:Disease
Disease::Disease	src/Gamelogic/Avatar/Disease.h	/^        Disease();$/;"	p	class:Disease
Disease::attributes	include/Eternia/Gamelogic/Avatar/Disease.h	/^        LinkedList<DISEASE_ATTRIBUTES> attributes; \/\/ list of attributes of the disease$/;"	m	class:Disease
Disease::attributes	src/Gamelogic/Avatar/Disease.h	/^        LinkedList<DISEASE_ATTRIBUTES> attributes; \/\/ list of attributes of the disease$/;"	m	class:Disease
Disease::cells	include/Eternia/Gamelogic/Avatar/Disease.h	/^        PType<double> cells; \/\/ if living contagion$/;"	m	class:Disease
Disease::cells	src/Gamelogic/Avatar/Disease.h	/^        PType<double> cells; \/\/ if living contagion$/;"	m	class:Disease
Disease::strain	include/Eternia/Gamelogic/Avatar/Disease.h	/^        PType<double> strain; \/\/ Strain ID, applied when researches find a strain$/;"	m	class:Disease
Disease::strain	src/Gamelogic/Avatar/Disease.h	/^        PType<double> strain; \/\/ Strain ID, applied when researches find a strain$/;"	m	class:Disease
Disease::symptoms	include/Eternia/Gamelogic/Avatar/Disease.h	/^        LinkedList<DISEASE_SYMPTOMS> symptoms; \/\/ symptoms of the disease$/;"	m	class:Disease
Disease::symptoms	src/Gamelogic/Avatar/Disease.h	/^        LinkedList<DISEASE_SYMPTOMS> symptoms; \/\/ symptoms of the disease$/;"	m	class:Disease
Disease::tick	include/Eternia/Gamelogic/Avatar/Disease.h	/^        void tick(double tps);$/;"	p	class:Disease
Disease::tick	src/Gamelogic/Avatar/Disease.cpp	/^void Disease::tick(double tps) {$/;"	f	class:Disease
Disease::tick	src/Gamelogic/Avatar/Disease.h	/^        void tick(double tps);$/;"	p	class:Disease
Disease::type	include/Eternia/Gamelogic/Avatar/Disease.h	/^        PType<DISEASE_TYPE> type; \/\/ type id for disease (parasite, virus, ect)$/;"	m	class:Disease
Disease::type	src/Gamelogic/Avatar/Disease.h	/^        PType<DISEASE_TYPE> type; \/\/ type id for disease (parasite, virus, ect)$/;"	m	class:Disease
Disease_h_	include/Eternia/Gamelogic/Avatar/Disease.h	/^#define Disease_h_$/;"	d
Disease_h_	src/Gamelogic/Avatar/Disease.h	/^#define Disease_h_$/;"	d
DoubleLIST_H_	include/Eternia/Data/DoubleList.h	/^#define DoubleLIST_H_$/;"	d
DoubleLIST_H_	src/Data/DoubleList.h	/^#define DoubleLIST_H_$/;"	d
DoubleList	include/Eternia/Data/DoubleList.h	/^        DoubleList();$/;"	p	class:DoubleList
DoubleList	include/Eternia/Data/DoubleList.h	/^class DoubleList {$/;"	c
DoubleList	src/Data/DoubleList.cpp	/^DoubleList::DoubleList() {$/;"	f	class:DoubleList
DoubleList	src/Data/DoubleList.h	/^        DoubleList();$/;"	p	class:DoubleList
DoubleList	src/Data/DoubleList.h	/^class DoubleList {$/;"	c
DoubleList::CNext	include/Eternia/Data/DoubleList.h	/^        DoubleNode *CNext;$/;"	m	class:DoubleList
DoubleList::CNext	src/Data/DoubleList.h	/^        DoubleNode *CNext;$/;"	m	class:DoubleList
DoubleList::DoubleList	include/Eternia/Data/DoubleList.h	/^        DoubleList();$/;"	p	class:DoubleList
DoubleList::DoubleList	src/Data/DoubleList.cpp	/^DoubleList::DoubleList() {$/;"	f	class:DoubleList
DoubleList::DoubleList	src/Data/DoubleList.h	/^        DoubleList();$/;"	p	class:DoubleList
DoubleList::Head	include/Eternia/Data/DoubleList.h	/^        DoubleNode *Head;$/;"	m	class:DoubleList
DoubleList::Head	src/Data/DoubleList.h	/^        DoubleNode *Head;$/;"	m	class:DoubleList
DoubleList::Tail	include/Eternia/Data/DoubleList.h	/^        DoubleNode *Tail;$/;"	m	class:DoubleList
DoubleList::Tail	src/Data/DoubleList.h	/^        DoubleNode *Tail;$/;"	m	class:DoubleList
DoubleList::_Size	include/Eternia/Data/DoubleList.h	/^        double _Size;$/;"	m	class:DoubleList
DoubleList::_Size	src/Data/DoubleList.h	/^        double _Size;$/;"	m	class:DoubleList
DoubleList::addBack	include/Eternia/Data/DoubleList.h	/^        void addBack(double a);$/;"	p	class:DoubleList
DoubleList::addBack	src/Data/DoubleList.cpp	/^void DoubleList::addBack(double input) {$/;"	f	class:DoubleList
DoubleList::addBack	src/Data/DoubleList.h	/^        void addBack(double a);$/;"	p	class:DoubleList
DoubleList::addFront	include/Eternia/Data/DoubleList.h	/^        void addFront(double a);$/;"	p	class:DoubleList
DoubleList::addFront	src/Data/DoubleList.cpp	/^void DoubleList::addFront(double input) {$/;"	f	class:DoubleList
DoubleList::addFront	src/Data/DoubleList.h	/^        void addFront(double a);$/;"	p	class:DoubleList
DoubleList::categorizer	include/Eternia/Data/DoubleList.h	/^        double* categorizer;$/;"	m	class:DoubleList
DoubleList::categorizer	src/Data/DoubleList.h	/^        double* categorizer;$/;"	m	class:DoubleList
DoubleList::clear	include/Eternia/Data/DoubleList.h	/^        void clear();$/;"	p	class:DoubleList
DoubleList::clear	src/Data/DoubleList.cpp	/^void DoubleList::clear() {$/;"	f	class:DoubleList
DoubleList::clear	src/Data/DoubleList.h	/^        void clear();$/;"	p	class:DoubleList
DoubleList::empty	include/Eternia/Data/DoubleList.h	/^        bool empty();$/;"	p	class:DoubleList
DoubleList::empty	src/Data/DoubleList.cpp	/^bool DoubleList::empty() {$/;"	f	class:DoubleList
DoubleList::empty	src/Data/DoubleList.h	/^        bool empty();$/;"	p	class:DoubleList
DoubleList::erase	include/Eternia/Data/DoubleList.h	/^        double erase(int index);$/;"	p	class:DoubleList
DoubleList::erase	src/Data/DoubleList.cpp	/^double DoubleList::erase(int index) {$/;"	f	class:DoubleList
DoubleList::erase	src/Data/DoubleList.h	/^        double erase(int index);$/;"	p	class:DoubleList
DoubleList::front	include/Eternia/Data/DoubleList.h	/^        double front();$/;"	p	class:DoubleList
DoubleList::front	src/Data/DoubleList.cpp	/^double DoubleList::front() {$/;"	f	class:DoubleList
DoubleList::front	src/Data/DoubleList.h	/^        double front();$/;"	p	class:DoubleList
DoubleList::get	include/Eternia/Data/DoubleList.h	/^        double get(int index);$/;"	p	class:DoubleList
DoubleList::get	src/Data/DoubleList.cpp	/^double DoubleList::get(int index) {$/;"	f	class:DoubleList
DoubleList::get	src/Data/DoubleList.h	/^        double get(int index);$/;"	p	class:DoubleList
DoubleList::getNext	include/Eternia/Data/DoubleList.h	/^        double getNext();$/;"	p	class:DoubleList
DoubleList::getNext	src/Data/DoubleList.cpp	/^double DoubleList::getNext() {$/;"	f	class:DoubleList
DoubleList::getNext	src/Data/DoubleList.h	/^        double getNext();$/;"	p	class:DoubleList
DoubleList::isCategorized	include/Eternia/Data/DoubleList.h	/^        bool isCategorized;\/\/ is the list categorized doubleo a fast fixed list?$/;"	m	class:DoubleList
DoubleList::isCategorized	src/Data/DoubleList.h	/^        bool isCategorized;\/\/ is the list categorized doubleo a fast fixed list?$/;"	m	class:DoubleList
DoubleList::pop	include/Eternia/Data/DoubleList.h	/^        double pop(); \/\/ erase front$/;"	p	class:DoubleList
DoubleList::pop	src/Data/DoubleList.cpp	/^double DoubleList::pop() {$/;"	f	class:DoubleList
DoubleList::pop	src/Data/DoubleList.h	/^        double pop(); \/\/ erase front$/;"	p	class:DoubleList
DoubleList::resetNext	include/Eternia/Data/DoubleList.h	/^        void resetNext();$/;"	p	class:DoubleList
DoubleList::resetNext	src/Data/DoubleList.cpp	/^void DoubleList::resetNext() {$/;"	f	class:DoubleList
DoubleList::resetNext	src/Data/DoubleList.h	/^        void resetNext();$/;"	p	class:DoubleList
DoubleList::set	include/Eternia/Data/DoubleList.h	/^        void set(int index, double item);$/;"	p	class:DoubleList
DoubleList::set	src/Data/DoubleList.cpp	/^void DoubleList::set(int index, double item) {$/;"	f	class:DoubleList
DoubleList::set	src/Data/DoubleList.h	/^        void set(int index, double item);$/;"	p	class:DoubleList
DoubleList::size	include/Eternia/Data/DoubleList.h	/^        int size();$/;"	p	class:DoubleList
DoubleList::size	src/Data/DoubleList.cpp	/^int DoubleList::size() {$/;"	f	class:DoubleList
DoubleList::size	src/Data/DoubleList.h	/^        int size();$/;"	p	class:DoubleList
DoubleList::~DoubleList	include/Eternia/Data/DoubleList.h	/^        virtual ~DoubleList();$/;"	p	class:DoubleList
DoubleList::~DoubleList	src/Data/DoubleList.cpp	/^DoubleList::~DoubleList() {$/;"	f	class:DoubleList
DoubleList::~DoubleList	src/Data/DoubleList.h	/^        virtual ~DoubleList();$/;"	p	class:DoubleList
DoubleNode	include/Eternia/Data/DoubleList.h	/^class DoubleNode {$/;"	c
DoubleNode	src/Data/DoubleList.h	/^class DoubleNode {$/;"	c
DoubleNode::data	include/Eternia/Data/DoubleList.h	/^        double data;$/;"	m	class:DoubleNode
DoubleNode::data	src/Data/DoubleList.h	/^        double data;$/;"	m	class:DoubleNode
DoubleNode::next	include/Eternia/Data/DoubleList.h	/^        DoubleNode *prev, *next;$/;"	m	class:DoubleNode
DoubleNode::next	src/Data/DoubleList.h	/^        DoubleNode *prev, *next;$/;"	m	class:DoubleNode
DoubleNode::prev	include/Eternia/Data/DoubleList.h	/^        DoubleNode *prev, *next;$/;"	m	class:DoubleNode
DoubleNode::prev	src/Data/DoubleList.h	/^        DoubleNode *prev, *next;$/;"	m	class:DoubleNode
DownQuark	include/Eternia/Engineering/Chemistry/Hadron/Quarks/DownQuark.h	/^class DownQuark {$/;"	c
DownQuark	src/Engineering/Chemistry/Hadron/Quarks/DownQuark.h	/^class DownQuark {$/;"	c
DownQuark_h_	include/Eternia/Engineering/Chemistry/Hadron/Quarks/DownQuark.h	/^#define DownQuark_h_$/;"	d
DownQuark_h_	src/Engineering/Chemistry/Hadron/Quarks/DownQuark.h	/^#define DownQuark_h_$/;"	d
Down_AntiQuark	include/Eternia/Engineering/Chemistry/Hadron/Quarks/Down_AntiQuark.h	/^class Down_AntiQuark {$/;"	c
Down_AntiQuark	src/Engineering/Chemistry/Hadron/Quarks/Down_AntiQuark.h	/^class Down_AntiQuark {$/;"	c
Down_AntiQuark_h_	include/Eternia/Engineering/Chemistry/Hadron/Quarks/Down_AntiQuark.h	/^#define Down_AntiQuark_h_$/;"	d
Down_AntiQuark_h_	src/Engineering/Chemistry/Hadron/Quarks/Down_AntiQuark.h	/^#define Down_AntiQuark_h_$/;"	d
DriverCore	include/Eternia/Driver/DriverCore.h	/^#define DriverCore$/;"	d
DriverCore	src/Driver/DriverCore.h	/^#define DriverCore$/;"	d
Dubnium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Dubnium = new Atom("Dubnium", "Db", 5, 7, 105, 157,104, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, 5, COLOR_SlateGray,ELEM_Transition);$/;"	v
Dubnium	src/Engineering/Chemistry/elementals.h	/^const Atom Dubnium = new Atom("Dubnium", "Db", 5, 7, 105, 157,104, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, 5, COLOR_SlateGray,ELEM_Transition);$/;"	v
DynamicAttr	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^enum DynamicAttr {DA_Attack, $/;"	g
DynamicAttr	src/Gamelogic/Inventory/DynamicAttribute.h	/^enum DynamicAttr {DA_Attack, $/;"	g
DynamicAttribute	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^        DynamicAttribute();$/;"	p	class:DynamicAttribute
DynamicAttribute	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^class DynamicAttribute {$/;"	c
DynamicAttribute	src/Gamelogic/Inventory/DynamicAttribute.h	/^        DynamicAttribute();$/;"	p	class:DynamicAttribute
DynamicAttribute	src/Gamelogic/Inventory/DynamicAttribute.h	/^class DynamicAttribute {$/;"	c
DynamicAttribute::DynamicAttribute	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^        DynamicAttribute();$/;"	p	class:DynamicAttribute
DynamicAttribute::DynamicAttribute	src/Gamelogic/Inventory/DynamicAttribute.h	/^        DynamicAttribute();$/;"	p	class:DynamicAttribute
DynamicAttribute::attrtype	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^        DynamicAttr attrtype;$/;"	m	class:DynamicAttribute
DynamicAttribute::attrtype	src/Gamelogic/Inventory/DynamicAttribute.h	/^        DynamicAttr attrtype;$/;"	m	class:DynamicAttribute
DynamicAttribute::value	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^        double value;$/;"	m	class:DynamicAttribute
DynamicAttribute::value	src/Gamelogic/Inventory/DynamicAttribute.h	/^        double value;$/;"	m	class:DynamicAttribute
DynamicEquip	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        DynamicEquip();$/;"	p	class:DynamicEquip
DynamicEquip	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^class DynamicEquip : public ItemBase {$/;"	c
DynamicEquip	src/Gamelogic/Inventory/DynamicEquip.h	/^        DynamicEquip();$/;"	p	class:DynamicEquip
DynamicEquip	src/Gamelogic/Inventory/DynamicEquip.h	/^class DynamicEquip : public ItemBase {$/;"	c
DynamicEquip::DynamicEquip	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        DynamicEquip();$/;"	p	class:DynamicEquip
DynamicEquip::DynamicEquip	src/Gamelogic/Inventory/DynamicEquip.h	/^        DynamicEquip();$/;"	p	class:DynamicEquip
DynamicEquip::crafter	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        CharString crafter; \/\/ crafter name for equipment$/;"	m	class:DynamicEquip
DynamicEquip::crafter	src/Gamelogic/Inventory/DynamicEquip.h	/^        CharString crafter; \/\/ crafter name for equipment$/;"	m	class:DynamicEquip
DynamicEquip::damage	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        double damage; \/\/ unique damage$/;"	m	class:DynamicEquip
DynamicEquip::damage	src/Gamelogic/Inventory/DynamicEquip.h	/^        double damage; \/\/ unique damage$/;"	m	class:DynamicEquip
DynamicEquip::defense	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        double defense; \/\/ unique defense$/;"	m	class:DynamicEquip
DynamicEquip::defense	src/Gamelogic/Inventory/DynamicEquip.h	/^        double defense; \/\/ unique defense$/;"	m	class:DynamicEquip
DynamicEquip::dodge	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        double dodge; \/\/ some gear gives better dodge ability$/;"	m	class:DynamicEquip
DynamicEquip::dodge	src/Gamelogic/Inventory/DynamicEquip.h	/^        double dodge; \/\/ some gear gives better dodge ability$/;"	m	class:DynamicEquip
DynamicEquip::dynamicAttr	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        LinkedList<DynamicAttribute> dynamicAttr;$/;"	m	class:DynamicEquip
DynamicEquip::dynamicAttr	src/Gamelogic/Inventory/DynamicEquip.h	/^        LinkedList<DynamicAttribute> dynamicAttr;$/;"	m	class:DynamicEquip
DynamicEquip::sPrice	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        double sPrice; \/\/ unique item price (Added to base price, used for final NPC price)$/;"	m	class:DynamicEquip
DynamicEquip::sPrice	src/Gamelogic/Inventory/DynamicEquip.h	/^        double sPrice; \/\/ unique item price (Added to base price, used for final NPC price)$/;"	m	class:DynamicEquip
DynamicEquip::shield	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        double shield; \/\/ unique shield increases$/;"	m	class:DynamicEquip
DynamicEquip::shield	src/Gamelogic/Inventory/DynamicEquip.h	/^        double shield; \/\/ unique shield increases$/;"	m	class:DynamicEquip
Dysprosium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Dysprosium = new Atom("Dysprosium", "Dy", 0, 6, 66, 98,65, 8.55,0.00000091, 0.011, 1680,2840, 0.17, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Dysprosium	src/Engineering/Chemistry/elementals.h	/^const Atom Dysprosium = new Atom("Dysprosium", "Dy", 0, 6, 66, 98,65, 8.55,0.00000091, 0.011, 1680,2840, 0.17, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
E	include/Eternia/Math/Functions/Basic.h	/^    const double E = 2.71828182845904523536028747135266249775724709369995;$/;"	m	namespace:Math
E	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^enum P2PTYPE {data,cpu,L,E};$/;"	e	enum:P2PTYPE
E	include/Eternia/constants.h	/^        const double E = 20.60;$/;"	m	namespace:electromagnetic::sound
E	src/Math/Functions/Basic.h	/^    const double E = 2.71828182845904523536028747135266249775724709369995;$/;"	m	namespace:Math
E	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^enum P2PTYPE {data,cpu,L,E};$/;"	e	enum:P2PTYPE
E	src/constants.h	/^        const double E = 20.60;$/;"	m	namespace:electromagnetic::sound
EComplex	include/Eternia/Math/Equation.h	/^enum EqType {EVar, ENumber, EOperator, EComplex};$/;"	e	enum:EqType
EComplex	src/Math/Equation.h	/^enum EqType {EVar, ENumber, EOperator, EComplex};$/;"	e	enum:EqType
EFFICIENCYTIMER_H_	include/Eternia/Programming/EfficiencyTimer.h	/^#define EFFICIENCYTIMER_H_$/;"	d
EFFICIENCYTIMER_H_	src/Programming/EfficiencyTimer.h	/^#define EFFICIENCYTIMER_H_$/;"	d
EHz	include/Eternia/constants.h	/^        const double EHz = exaHertz;$/;"	m	namespace:physical::unit
EHz	src/constants.h	/^        const double EHz = exaHertz;$/;"	m	namespace:physical::unit
ELEMENT_TYPE	include/Eternia/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	g
ELEMENT_TYPE	src/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	g
ELEM_Actinide	include/Eternia/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Actinide	src/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Alkali	include/Eternia/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Alkali	src/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Alkaline	include/Eternia/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Alkaline	src/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_H_	include/Eternia/Engineering/Chemistry/elementals.h	/^#define ELEM_H_$/;"	d
ELEM_H_	src/Engineering/Chemistry/elementals.h	/^#define ELEM_H_$/;"	d
ELEM_Halogen	include/Eternia/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Halogen	src/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Lanthanide	include/Eternia/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Lanthanide	src/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Metalloid	include/Eternia/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Metalloid	src/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Noble	include/Eternia/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Noble	src/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_NonMetal	include/Eternia/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_NonMetal	src/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Poor	include/Eternia/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Poor	src/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Transition	include/Eternia/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
ELEM_Transition	src/Engineering/Chemistry/Atom.h	/^enum ELEMENT_TYPE {ELEM_Alkali, ELEM_Alkaline, ELEM_Halogen, ELEM_Lanthanide, ELEM_Metalloid, ELEM_NonMetal, ELEM_Noble, ELEM_Poor, ELEM_Actinide, ELEM_Transition};$/;"	e	enum:ELEMENT_TYPE
EMEX	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define EMEX /;"	d
EMEX	src/Emulation/MPU/msp430g2553.h	/^#define EMEX /;"	d
EMIT_PRAGMA	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define EMIT_PRAGMA(/;"	d
EMIT_PRAGMA	src/Emulation/MPU/msp430g2553.h	/^#define EMIT_PRAGMA(/;"	d
ENC	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ENC /;"	d
ENC	src/Emulation/MPU/msp430g2553.h	/^#define ENC /;"	d
ENVIRONMENT32	include/Eternia/Data/SpecialTypes.hpp	/^#define ENVIRONMENT32$/;"	d
ENVIRONMENT32	src/Data/SpecialTypes.hpp	/^#define ENVIRONMENT32$/;"	d
ENVIRONMENT64	include/Eternia/Data/SpecialTypes.hpp	/^#define ENVIRONMENT64$/;"	d
ENVIRONMENT64	src/Data/SpecialTypes.hpp	/^#define ENVIRONMENT64$/;"	d
ENVTREE_H_	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^#define ENVTREE_H_$/;"	d
ENVTREE_H_	src/Gamelogic/Environment/Object/Tree.h	/^#define ENVTREE_H_$/;"	d
ENumber	include/Eternia/Math/Equation.h	/^enum EqType {EVar, ENumber, EOperator, EComplex};$/;"	e	enum:EqType
ENumber	src/Math/Equation.h	/^enum EqType {EVar, ENumber, EOperator, EComplex};$/;"	e	enum:EqType
EOperator	include/Eternia/Math/Equation.h	/^enum EqType {EVar, ENumber, EOperator, EComplex};$/;"	e	enum:EqType
EOperator	src/Math/Equation.h	/^enum EqType {EVar, ENumber, EOperator, EComplex};$/;"	e	enum:EqType
EQUATION_H_	include/Eternia/Math/Equation.h	/^#define EQUATION_H_$/;"	d
EQUATION_H_	src/Math/Equation.h	/^#define EQUATION_H_$/;"	d
ERASE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ERASE /;"	d
ERASE	src/Emulation/MPU/msp430g2553.h	/^#define ERASE /;"	d
EVAL_H_	include/Eternia/Math/Eval.h	/^#define EVAL_H_$/;"	d
EVAL_H_	src/Math/Eval.h	/^#define EVAL_H_$/;"	d
EVENTHANDLER_H_	include/Eternia/Data/Events/EventHandler.h	/^#define EVENTHANDLER_H_$/;"	d
EVENTHANDLER_H_	src/Data/Events/EventHandler.h	/^#define EVENTHANDLER_H_$/;"	d
EVENTHANDLE_H_	include/Eternia/Data/Events/EventHandle.h	/^#define EVENTHANDLE_H_$/;"	d
EVENTHANDLE_H_	src/Data/Events/EventHandle.h	/^#define EVENTHANDLE_H_$/;"	d
EVENT_H_	include/Eternia/Data/Events/Event.h	/^#define EVENT_H_$/;"	d
EVENT_H_	src/Data/Events/Event.h	/^#define EVENT_H_$/;"	d
EVar	include/Eternia/Math/Equation.h	/^enum EqType {EVar, ENumber, EOperator, EComplex};$/;"	e	enum:EqType
EVar	src/Math/Equation.h	/^enum EqType {EVar, ENumber, EOperator, EComplex};$/;"	e	enum:EqType
E_M_P	include/Eternia/constants.h	/^        const double E_M_P = 9.5788309e7*C\/kg*(rad\/(s*T));$/;"	m	namespace:physical::constant
E_M_P	src/constants.h	/^        const double E_M_P = 9.5788309e7*C\/kg*(rad\/(s*T));$/;"	m	namespace:physical::constant
E_M_e	include/Eternia/constants.h	/^        const double E_M_e = 1.75881962e11*C\/kg*(rad\/(s*T));$/;"	m	namespace:physical::constant
E_M_e	src/constants.h	/^        const double E_M_e = 1.75881962e11*C\/kg*(rad\/(s*T));$/;"	m	namespace:physical::constant
EfficiencyTimer	include/Eternia/Programming/EfficiencyTimer.h	/^        EfficiencyTimer();$/;"	p	class:EfficiencyTimer
EfficiencyTimer	include/Eternia/Programming/EfficiencyTimer.h	/^class EfficiencyTimer {$/;"	c
EfficiencyTimer	src/Programming/EfficiencyTimer.cpp	/^EfficiencyTimer::EfficiencyTimer() {$/;"	f	class:EfficiencyTimer
EfficiencyTimer	src/Programming/EfficiencyTimer.h	/^        EfficiencyTimer();$/;"	p	class:EfficiencyTimer
EfficiencyTimer	src/Programming/EfficiencyTimer.h	/^class EfficiencyTimer {$/;"	c
EfficiencyTimer::BaseTime	include/Eternia/Programming/EfficiencyTimer.h	/^        double BaseTime;$/;"	m	class:EfficiencyTimer
EfficiencyTimer::BaseTime	src/Programming/EfficiencyTimer.h	/^        double BaseTime;$/;"	m	class:EfficiencyTimer
EfficiencyTimer::EfficiencyTimer	include/Eternia/Programming/EfficiencyTimer.h	/^        EfficiencyTimer();$/;"	p	class:EfficiencyTimer
EfficiencyTimer::EfficiencyTimer	src/Programming/EfficiencyTimer.cpp	/^EfficiencyTimer::EfficiencyTimer() {$/;"	f	class:EfficiencyTimer
EfficiencyTimer::EfficiencyTimer	src/Programming/EfficiencyTimer.h	/^        EfficiencyTimer();$/;"	p	class:EfficiencyTimer
EfficiencyTimer::Start	include/Eternia/Programming/EfficiencyTimer.h	/^        void Start();$/;"	p	class:EfficiencyTimer
EfficiencyTimer::Start	src/Programming/EfficiencyTimer.cpp	/^void EfficiencyTimer::Start() {$/;"	f	class:EfficiencyTimer
EfficiencyTimer::Start	src/Programming/EfficiencyTimer.h	/^        void Start();$/;"	p	class:EfficiencyTimer
EfficiencyTimer::StopAndReport	include/Eternia/Programming/EfficiencyTimer.h	/^        void StopAndReport(double DataDone);$/;"	p	class:EfficiencyTimer
EfficiencyTimer::StopAndReport	src/Programming/EfficiencyTimer.cpp	/^void EfficiencyTimer::StopAndReport(double workDone) {$/;"	f	class:EfficiencyTimer
EfficiencyTimer::StopAndReport	src/Programming/EfficiencyTimer.h	/^        void StopAndReport(double DataDone);$/;"	p	class:EfficiencyTimer
Einsteinium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Einsteinium = new Atom("Einsteinium", "Es", 0, 7, 99, 153,98, 13.5,UNKNOWN, UNKNOWN, 1133,UNKNOWN, UNKNOWN, 4, COLOR_SlateGray,ELEM_Actinide);$/;"	v
Einsteinium	src/Engineering/Chemistry/elementals.h	/^const Atom Einsteinium = new Atom("Einsteinium", "Es", 0, 7, 99, 153,98, 13.5,UNKNOWN, UNKNOWN, 1133,UNKNOWN, UNKNOWN, 4, COLOR_SlateGray,ELEM_Actinide);$/;"	v
Empty	include/Eternia/Data/TreeList.h	/^        bool Empty(); \/\/ is Empty?$/;"	p	class:TreeList
Empty	src/Data/TreeList.h	/^        bool Empty(); \/\/ is Empty?$/;"	p	class:TreeList
EnergyValue	include/Eternia/Engineering/Physics/Work.h	/^        EnergyValue(KEnergyType type, double value);$/;"	p	class:EnergyValue
EnergyValue	include/Eternia/Engineering/Physics/Work.h	/^class EnergyValue {$/;"	c
EnergyValue	src/Engineering/Physics/Work.h	/^        EnergyValue(KEnergyType type, double value);$/;"	p	class:EnergyValue
EnergyValue	src/Engineering/Physics/Work.h	/^class EnergyValue {$/;"	c
EnergyValue::EnergyValue	include/Eternia/Engineering/Physics/Work.h	/^        EnergyValue(KEnergyType type, double value);$/;"	p	class:EnergyValue
EnergyValue::EnergyValue	src/Engineering/Physics/Work.h	/^        EnergyValue(KEnergyType type, double value);$/;"	p	class:EnergyValue
EnergyValue::Gravity	include/Eternia/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
EnergyValue::Gravity	src/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
EnergyValue::RotVelo	include/Eternia/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
EnergyValue::RotVelo	src/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
EnergyValue::computeEnergy	include/Eternia/Engineering/Physics/Work.h	/^        double computeEnergy(); \/\/ solve for the total energy$/;"	p	class:EnergyValue
EnergyValue::computeEnergy	src/Engineering/Physics/Work.h	/^        double computeEnergy(); \/\/ solve for the total energy$/;"	p	class:EnergyValue
EnergyValue::energyType	include/Eternia/Engineering/Physics/Work.h	/^        KEnergyType energyType; \/\/ PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy$/;"	m	class:EnergyValue
EnergyValue::energyType	src/Engineering/Physics/Work.h	/^        KEnergyType energyType; \/\/ PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy$/;"	m	class:EnergyValue
EnergyValue::heightx	include/Eternia/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
EnergyValue::heightx	src/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
EnergyValue::springK	include/Eternia/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
EnergyValue::springK	src/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
EnergyValue::unsolvedVars	include/Eternia/Engineering/Physics/Work.h	/^        bool unsolvedVars(); \/\/ does this have unsolved variables?$/;"	p	class:EnergyValue
EnergyValue::unsolvedVars	src/Engineering/Physics/Work.h	/^        bool unsolvedVars(); \/\/ does this have unsolved variables?$/;"	p	class:EnergyValue
EnergyValue::velocity	include/Eternia/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
EnergyValue::velocity	src/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
English	include/Eternia/constants.h	/^        namespace English = British;$/;"	x
English	src/constants.h	/^        namespace English = British;$/;"	x
Environment_H_	include/Eternia/Gamelogic/Environment/environment.h	/^#define Environment_H_$/;"	d
Environment_H_	src/Gamelogic/Environment/environment.h	/^#define Environment_H_$/;"	d
EqType	include/Eternia/Math/Equation.h	/^enum EqType {EVar, ENumber, EOperator, EComplex};$/;"	g
EqType	src/Math/Equation.h	/^enum EqType {EVar, ENumber, EOperator, EComplex};$/;"	g
Equation	include/Eternia/Math/Equation.h	/^        Equation();$/;"	p	class:Equation
Equation	include/Eternia/Math/Equation.h	/^        Equation(CharString* equation);$/;"	p	class:Equation
Equation	include/Eternia/Math/Equation.h	/^class Equation {$/;"	c
Equation	include/Eternia/Math/Equation.h	/^class Equation;$/;"	x
Equation	src/Math/Equation.cpp	/^Equation::Equation() {}$/;"	f	class:Equation
Equation	src/Math/Equation.cpp	/^Equation::Equation(CharString* equation) {$/;"	f	class:Equation
Equation	src/Math/Equation.h	/^        Equation();$/;"	p	class:Equation
Equation	src/Math/Equation.h	/^        Equation(CharString* equation);$/;"	p	class:Equation
Equation	src/Math/Equation.h	/^class Equation {$/;"	c
Equation	src/Math/Equation.h	/^class Equation;$/;"	x
Equation::Equation	include/Eternia/Math/Equation.h	/^        Equation();$/;"	p	class:Equation
Equation::Equation	include/Eternia/Math/Equation.h	/^        Equation(CharString* equation);$/;"	p	class:Equation
Equation::Equation	src/Math/Equation.cpp	/^Equation::Equation() {}$/;"	f	class:Equation
Equation::Equation	src/Math/Equation.cpp	/^Equation::Equation(CharString* equation) {$/;"	f	class:Equation
Equation::Equation	src/Math/Equation.h	/^        Equation();$/;"	p	class:Equation
Equation::Equation	src/Math/Equation.h	/^        Equation(CharString* equation);$/;"	p	class:Equation
Equation::baseNodes	include/Eternia/Math/Equation.h	/^        LinkedList<EquationNode>* baseNodes; \/\/ nodes on the "Bottom Step".$/;"	m	class:Equation
Equation::baseNodes	src/Math/Equation.h	/^        LinkedList<EquationNode>* baseNodes; \/\/ nodes on the "Bottom Step".$/;"	m	class:Equation
Equation::derive	include/Eternia/Math/Equation.h	/^        Equation* derive(char* wrt); \/\/ derive this equation.$/;"	p	class:Equation
Equation::derive	src/Math/Equation.h	/^        Equation* derive(char* wrt); \/\/ derive this equation.$/;"	p	class:Equation
Equation::derive	src/Math/Equation_CALC.cpp	/^Equation* Equation::derive(char* wrt) {$/;"	f	class:Equation
Equation::eq	include/Eternia/Math/Equation.h	/^        CharString* eq;$/;"	m	class:Equation
Equation::eq	src/Math/Equation.h	/^        CharString* eq;$/;"	m	class:Equation
Equation::evaluate	include/Eternia/Math/Equation.h	/^        double evaluate(double a, double b); \/\/ evaluate equation with a TO b. only works with one variable.$/;"	p	class:Equation
Equation::evaluate	src/Math/Equation.h	/^        double evaluate(double a, double b); \/\/ evaluate equation with a TO b. only works with one variable.$/;"	p	class:Equation
Equation::evaluate	src/Math/Equation_CALC.cpp	/^double Equation::evaluate(double a, double b) {$/;"	f	class:Equation
Equation::integrate	include/Eternia/Math/Equation.h	/^        Equation* integrate(char* wrt); \/\/ integrate this equation.$/;"	p	class:Equation
Equation::integrate	src/Math/Equation.h	/^        Equation* integrate(char* wrt); \/\/ integrate this equation.$/;"	p	class:Equation
Equation::integrate	src/Math/Equation_CALC.cpp	/^Equation* Equation::integrate(char* wrt) {$/;"	f	class:Equation
Equation::set	include/Eternia/Math/Equation.h	/^        void set(CharString* equation);$/;"	p	class:Equation
Equation::set	src/Math/Equation.cpp	/^void Equation::set(CharString* eq) {$/;"	f	class:Equation
Equation::set	src/Math/Equation.h	/^        void set(CharString* equation);$/;"	p	class:Equation
Equation::setVariableValue	include/Eternia/Math/Equation.h	/^        void setVariableValue(CharString* variable, CharString* value); \/\/ replaces variable with variable value.$/;"	p	class:Equation
Equation::setVariableValue	src/Math/Equation.h	/^        void setVariableValue(CharString* variable, CharString* value); \/\/ replaces variable with variable value.$/;"	p	class:Equation
Equation::solve	include/Eternia/Math/Equation.h	/^        double solve(CharString* variable); \/\/ calls solveForVariable() and determines if it can be solved directly for an answer.$/;"	p	class:Equation
Equation::solve	src/Math/Equation.h	/^        double solve(CharString* variable); \/\/ calls solveForVariable() and determines if it can be solved directly for an answer.$/;"	p	class:Equation
Equation::solveForVariable	include/Eternia/Math/Equation.h	/^        Equation* solveForVariable(CharString* variable); \/\/ algeraeically solve the equation for variable.$/;"	p	class:Equation
Equation::solveForVariable	src/Math/Equation.h	/^        Equation* solveForVariable(CharString* variable); \/\/ algeraeically solve the equation for variable.$/;"	p	class:Equation
EquationNode	include/Eternia/Math/Equation.h	/^class EquationNode {$/;"	c
EquationNode	src/Math/Equation.h	/^class EquationNode {$/;"	c
EquationNode::data	include/Eternia/Math/Equation.h	/^        double data;$/;"	m	class:EquationNode
EquationNode::data	src/Math/Equation.h	/^        double data;$/;"	m	class:EquationNode
EquationNode::dataeq	include/Eternia/Math/Equation.h	/^        Equation* dataeq; \/\/ subnode$/;"	m	class:EquationNode
EquationNode::dataeq	src/Math/Equation.h	/^        Equation* dataeq; \/\/ subnode$/;"	m	class:EquationNode
EquationNode::mode	include/Eternia/Math/Equation.h	/^        EqType mode;$/;"	m	class:EquationNode
EquationNode::mode	src/Math/Equation.h	/^        EqType mode;$/;"	m	class:EquationNode
Erbium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Erbium = new Atom("Erbium", "Er", 0, 6, 68, 100,67, 9.066,0.00000086, 0.015, 1802,3141, 0.168, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Erbium	src/Engineering/Chemistry/elementals.h	/^const Atom Erbium = new Atom("Erbium", "Er", 0, 6, 68, 100,67, 9.066,0.00000086, 0.015, 1802,3141, 0.168, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
ErrorString	include/Eternia/Data/FileSystem.h	/^        char* ErrorString;$/;"	m	class:FileSystem
ErrorString	src/Data/FileSystem.h	/^        char* ErrorString;$/;"	m	class:FileSystem
Europium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Europium = new Atom("Europium", "Eu", 0, 6, 63, 93,62, 5.243,0.0000009, 0.014, 1099,1802, 0.182, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Europium	src/Engineering/Chemistry/elementals.h	/^const Atom Europium = new Atom("Europium", "Eu", 0, 6, 63, 93,62, 5.243,0.0000009, 0.014, 1099,1802, 0.182, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Eval	include/Eternia/Math/Eval.h	/^CharString Eval(CharString Line);$/;"	p
Eval	src/Math/Eval.cpp	/^CharString Eval(CharString Line) {$/;"	f
Eval	src/Math/Eval.h	/^CharString Eval(CharString Line);$/;"	p
Event	include/Eternia/Data/Events/Event.h	/^    Event(CharString eventname);$/;"	p	class:Event
Event	include/Eternia/Data/Events/Event.h	/^class Event{$/;"	c
Event	src/Data/Events/Event.h	/^    Event(CharString eventname);$/;"	p	class:Event
Event	src/Data/Events/Event.h	/^class Event{$/;"	c
Event::Event	include/Eternia/Data/Events/Event.h	/^    Event(CharString eventname);$/;"	p	class:Event
Event::Event	src/Data/Events/Event.h	/^    Event(CharString eventname);$/;"	p	class:Event
Event::cancelled	include/Eternia/Data/Events/Event.h	/^    bool cancelled;$/;"	m	class:Event
Event::cancelled	src/Data/Events/Event.h	/^    bool cancelled;$/;"	m	class:Event
Event::getProperty	include/Eternia/Data/Events/Event.h	/^    T getProperty(CharString name);$/;"	p	class:Event
Event::getProperty	src/Data/Events/Event.h	/^    T getProperty(CharString name);$/;"	p	class:Event
Event::getPropertyNames	include/Eternia/Data/Events/Event.h	/^    LinkedList<CharString> getPropertyNames();$/;"	p	class:Event
Event::getPropertyNames	src/Data/Events/Event.h	/^    LinkedList<CharString> getPropertyNames();$/;"	p	class:Event
Event::isCancelled	include/Eternia/Data/Events/Event.h	/^    bool isCancelled(); \/\/ determine if an event has been cancelled.$/;"	p	class:Event
Event::isCancelled	src/Data/Events/Event.h	/^    bool isCancelled(); \/\/ determine if an event has been cancelled.$/;"	p	class:Event
Event::name	include/Eternia/Data/Events/Event.h	/^    CharString name;$/;"	m	class:Event
Event::name	src/Data/Events/Event.h	/^    CharString name;$/;"	m	class:Event
Event::properties	include/Eternia/Data/Events/Event.h	/^    HashMap<CharString> properties; \/\/ property map$/;"	m	class:Event
Event::properties	src/Data/Events/Event.h	/^    HashMap<CharString> properties; \/\/ property map$/;"	m	class:Event
Event::setCancelled	include/Eternia/Data/Events/Event.h	/^    void setCancelled(bool value);$/;"	p	class:Event
Event::setCancelled	src/Data/Events/Event.h	/^    void setCancelled(bool value);$/;"	p	class:Event
Event::setProperty	include/Eternia/Data/Events/Event.h	/^    void setProperty(CharString name, T data);$/;"	p	class:Event
Event::setProperty	src/Data/Events/Event.h	/^    void setProperty(CharString name, T data);$/;"	p	class:Event
EventHandle	include/Eternia/Data/Events/EventHandle.h	/^        EventHandle(void (*func)()); \/\/ event to handle$/;"	p	class:EventHandle
EventHandle	include/Eternia/Data/Events/EventHandle.h	/^        EventHandle(void (*func)(void* arg)); \/\/ event to handle$/;"	p	class:EventHandle
EventHandle	include/Eternia/Data/Events/EventHandle.h	/^        EventHandle(void (*func)(void* arg, void* arg2)); \/\/ event to handle$/;"	p	class:EventHandle
EventHandle	include/Eternia/Data/Events/EventHandle.h	/^class EventHandle {$/;"	c
EventHandle	src/Data/Events/EventHandle.cpp	/^EventHandle::EventHandle(void (*func)()) {$/;"	f	class:EventHandle
EventHandle	src/Data/Events/EventHandle.cpp	/^EventHandle::EventHandle(void (*func)(void* arg)) {$/;"	f	class:EventHandle
EventHandle	src/Data/Events/EventHandle.cpp	/^EventHandle::EventHandle(void (*func)(void* arg, void* arg1)) {$/;"	f	class:EventHandle
EventHandle	src/Data/Events/EventHandle.h	/^        EventHandle(void (*func)()); \/\/ event to handle$/;"	p	class:EventHandle
EventHandle	src/Data/Events/EventHandle.h	/^        EventHandle(void (*func)(void* arg)); \/\/ event to handle$/;"	p	class:EventHandle
EventHandle	src/Data/Events/EventHandle.h	/^        EventHandle(void (*func)(void* arg, void* arg2)); \/\/ event to handle$/;"	p	class:EventHandle
EventHandle	src/Data/Events/EventHandle.h	/^class EventHandle {$/;"	c
EventHandle::EventHandle	include/Eternia/Data/Events/EventHandle.h	/^        EventHandle(void (*func)()); \/\/ event to handle$/;"	p	class:EventHandle
EventHandle::EventHandle	include/Eternia/Data/Events/EventHandle.h	/^        EventHandle(void (*func)(void* arg)); \/\/ event to handle$/;"	p	class:EventHandle
EventHandle::EventHandle	include/Eternia/Data/Events/EventHandle.h	/^        EventHandle(void (*func)(void* arg, void* arg2)); \/\/ event to handle$/;"	p	class:EventHandle
EventHandle::EventHandle	src/Data/Events/EventHandle.cpp	/^EventHandle::EventHandle(void (*func)()) {$/;"	f	class:EventHandle
EventHandle::EventHandle	src/Data/Events/EventHandle.cpp	/^EventHandle::EventHandle(void (*func)(void* arg)) {$/;"	f	class:EventHandle
EventHandle::EventHandle	src/Data/Events/EventHandle.cpp	/^EventHandle::EventHandle(void (*func)(void* arg, void* arg1)) {$/;"	f	class:EventHandle
EventHandle::EventHandle	src/Data/Events/EventHandle.h	/^        EventHandle(void (*func)()); \/\/ event to handle$/;"	p	class:EventHandle
EventHandle::EventHandle	src/Data/Events/EventHandle.h	/^        EventHandle(void (*func)(void* arg)); \/\/ event to handle$/;"	p	class:EventHandle
EventHandle::EventHandle	src/Data/Events/EventHandle.h	/^        EventHandle(void (*func)(void* arg, void* arg2)); \/\/ event to handle$/;"	p	class:EventHandle
EventHandle::arg1	include/Eternia/Data/Events/EventHandle.h	/^        void *arg1, *arg2;$/;"	m	class:EventHandle
EventHandle::arg1	src/Data/Events/EventHandle.h	/^        void *arg1, *arg2;$/;"	m	class:EventHandle
EventHandle::arg2	include/Eternia/Data/Events/EventHandle.h	/^        void *arg1, *arg2;$/;"	m	class:EventHandle
EventHandle::arg2	src/Data/Events/EventHandle.h	/^        void *arg1, *arg2;$/;"	m	class:EventHandle
EventHandle::handle	include/Eternia/Data/Events/EventHandle.h	/^        bool handle(); \/\/ handle this event$/;"	p	class:EventHandle
EventHandle::handle	src/Data/Events/EventHandle.cpp	/^bool EventHandle::handle() {$/;"	f	class:EventHandle
EventHandle::handle	src/Data/Events/EventHandle.h	/^        bool handle(); \/\/ handle this event$/;"	p	class:EventHandle
EventHandle::init	include/Eternia/Data/Events/EventHandle.h	/^        void init();$/;"	p	class:EventHandle
EventHandle::init	src/Data/Events/EventHandle.cpp	/^void EventHandle::init() {$/;"	f	class:EventHandle
EventHandle::init	src/Data/Events/EventHandle.h	/^        void init();$/;"	p	class:EventHandle
EventHandle::method	include/Eternia/Data/Events/EventHandle.h	/^        void (*method)(); \/\/ variable method$/;"	m	class:EventHandle
EventHandle::method	src/Data/Events/EventHandle.h	/^        void (*method)(); \/\/ variable method$/;"	m	class:EventHandle
EventHandle::method1	include/Eternia/Data/Events/EventHandle.h	/^        void (*method1)(void* arg);$/;"	m	class:EventHandle
EventHandle::method1	src/Data/Events/EventHandle.h	/^        void (*method1)(void* arg);$/;"	m	class:EventHandle
EventHandle::method2	include/Eternia/Data/Events/EventHandle.h	/^        void (*method2)(void* arg, void* arg2);$/;"	m	class:EventHandle
EventHandle::method2	src/Data/Events/EventHandle.h	/^        void (*method2)(void* arg, void* arg2);$/;"	m	class:EventHandle
EventHandle::recurring	include/Eternia/Data/Events/EventHandle.h	/^        int recurring; \/\/ always run?$/;"	m	class:EventHandle
EventHandle::recurring	src/Data/Events/EventHandle.h	/^        int recurring; \/\/ always run?$/;"	m	class:EventHandle
EventHandle::setPeriod	include/Eternia/Data/Events/EventHandle.h	/^        void setPeriod(long periodlen); \/\/ set the time period for occurence in ms (precedes recurring)$/;"	p	class:EventHandle
EventHandle::setPeriod	src/Data/Events/EventHandle.cpp	/^void EventHandle::setPeriod(long periodlen) {$/;"	f	class:EventHandle
EventHandle::setPeriod	src/Data/Events/EventHandle.h	/^        void setPeriod(long periodlen); \/\/ set the time period for occurence in ms (precedes recurring)$/;"	p	class:EventHandle
EventHandle::setRecurForever	include/Eternia/Data/Events/EventHandle.h	/^        void setRecurForever(); \/\/ recur forever... and ever... and ever$/;"	p	class:EventHandle
EventHandle::setRecurForever	src/Data/Events/EventHandle.cpp	/^void EventHandle::setRecurForever() {$/;"	f	class:EventHandle
EventHandle::setRecurForever	src/Data/Events/EventHandle.h	/^        void setRecurForever(); \/\/ recur forever... and ever... and ever$/;"	p	class:EventHandle
EventHandle::setRecurrences	include/Eternia/Data/Events/EventHandle.h	/^        void setRecurrences(int recurs);$/;"	p	class:EventHandle
EventHandle::setRecurrences	src/Data/Events/EventHandle.cpp	/^void EventHandle::setRecurrences(int recurs) {$/;"	f	class:EventHandle
EventHandle::setRecurrences	src/Data/Events/EventHandle.h	/^        void setRecurrences(int recurs);$/;"	p	class:EventHandle
EventHandle::timediff	include/Eternia/Data/Events/EventHandle.h	/^        long timex, timediff;$/;"	m	class:EventHandle
EventHandle::timediff	src/Data/Events/EventHandle.h	/^        long timex, timediff;$/;"	m	class:EventHandle
EventHandle::timex	include/Eternia/Data/Events/EventHandle.h	/^        long timex, timediff;$/;"	m	class:EventHandle
EventHandle::timex	src/Data/Events/EventHandle.h	/^        long timex, timediff;$/;"	m	class:EventHandle
EventHandle::~EventHandle	include/Eternia/Data/Events/EventHandle.h	/^        ~EventHandle();$/;"	p	class:EventHandle
EventHandle::~EventHandle	src/Data/Events/EventHandle.h	/^        ~EventHandle();$/;"	p	class:EventHandle
EventHandler	include/Eternia/Data/Events/EventHandler.h	/^        EventHandler();$/;"	p	class:EventHandler
EventHandler	include/Eternia/Data/Events/EventHandler.h	/^class EventHandler {$/;"	c
EventHandler	src/Data/Events/EventHandler.cpp	/^EventHandler::EventHandler() {$/;"	f	class:EventHandler
EventHandler	src/Data/Events/EventHandler.h	/^        EventHandler();$/;"	p	class:EventHandler
EventHandler	src/Data/Events/EventHandler.h	/^class EventHandler {$/;"	c
EventHandler::EventHandler	include/Eternia/Data/Events/EventHandler.h	/^        EventHandler();$/;"	p	class:EventHandler
EventHandler::EventHandler	src/Data/Events/EventHandler.cpp	/^EventHandler::EventHandler() {$/;"	f	class:EventHandler
EventHandler::EventHandler	src/Data/Events/EventHandler.h	/^        EventHandler();$/;"	p	class:EventHandler
EventHandler::addEvent	include/Eternia/Data/Events/EventHandler.h	/^        void addEvent(EventHandle *event, int priority); \/\/ add Event, the priority is set by lowest value$/;"	p	class:EventHandler
EventHandler::addEvent	src/Data/Events/EventHandler.cpp	/^void EventHandler::addEvent(EventHandle *event, int priority) {$/;"	f	class:EventHandler
EventHandler::addEvent	src/Data/Events/EventHandler.h	/^        void addEvent(EventHandle *event, int priority); \/\/ add Event, the priority is set by lowest value$/;"	p	class:EventHandler
EventHandler::clearEvents	include/Eternia/Data/Events/EventHandler.h	/^        void clearEvents(); \/\/ clear all objects$/;"	p	class:EventHandler
EventHandler::clearEvents	src/Data/Events/EventHandler.cpp	/^void EventHandler::clearEvents() {$/;"	f	class:EventHandler
EventHandler::clearEvents	src/Data/Events/EventHandler.h	/^        void clearEvents(); \/\/ clear all objects$/;"	p	class:EventHandler
EventHandler::createEvent	include/Eternia/Data/Events/EventHandler.h	/^        EventHandle* createEvent(void (*func)(), unsigned long priority);$/;"	p	class:EventHandler
EventHandler::createEvent	include/Eternia/Data/Events/EventHandler.h	/^        EventHandle* createEvent(void (*func)(void*), unsigned long priority);$/;"	p	class:EventHandler
EventHandler::createEvent	include/Eternia/Data/Events/EventHandler.h	/^        EventHandle* createEvent(void (*func)(void*,void*), unsigned long priority);$/;"	p	class:EventHandler
EventHandler::createEvent	src/Data/Events/EventHandler.cpp	/^EventHandle* EventHandler::createEvent(void (*func)(), unsigned long priority) {$/;"	f	class:EventHandler
EventHandler::createEvent	src/Data/Events/EventHandler.cpp	/^EventHandle* EventHandler::createEvent(void (*func)(void*), unsigned long priority) {$/;"	f	class:EventHandler
EventHandler::createEvent	src/Data/Events/EventHandler.cpp	/^EventHandle* EventHandler::createEvent(void (*func)(void*,void*), unsigned long priority) {$/;"	f	class:EventHandler
EventHandler::createEvent	src/Data/Events/EventHandler.h	/^        EventHandle* createEvent(void (*func)(), unsigned long priority);$/;"	p	class:EventHandler
EventHandler::createEvent	src/Data/Events/EventHandler.h	/^        EventHandle* createEvent(void (*func)(void*), unsigned long priority);$/;"	p	class:EventHandler
EventHandler::createEvent	src/Data/Events/EventHandler.h	/^        EventHandle* createEvent(void (*func)(void*,void*), unsigned long priority);$/;"	p	class:EventHandler
EventHandler::handleEvents	include/Eternia/Data/Events/EventHandler.h	/^        void handleEvents(); \/\/ handles automatic events$/;"	p	class:EventHandler
EventHandler::handleEvents	src/Data/Events/EventHandler.cpp	/^void EventHandler::handleEvents() {$/;"	f	class:EventHandler
EventHandler::handleEvents	src/Data/Events/EventHandler.h	/^        void handleEvents(); \/\/ handles automatic events$/;"	p	class:EventHandler
EventHandler::handles	include/Eternia/Data/Events/EventHandler.h	/^        PriorityQueue *handles; \/\/ events to handle$/;"	m	class:EventHandler
EventHandler::handles	src/Data/Events/EventHandler.h	/^        PriorityQueue *handles; \/\/ events to handle$/;"	m	class:EventHandler
EventHandler::isEmpty	include/Eternia/Data/Events/EventHandler.h	/^        bool isEmpty(); \/\/ returns if the event queue is empty$/;"	p	class:EventHandler
EventHandler::isEmpty	src/Data/Events/EventHandler.cpp	/^bool EventHandler::isEmpty() {$/;"	f	class:EventHandler
EventHandler::isEmpty	src/Data/Events/EventHandler.h	/^        bool isEmpty(); \/\/ returns if the event queue is empty$/;"	p	class:EventHandler
EventHandler::removeEvent	include/Eternia/Data/Events/EventHandler.h	/^        void removeEvent(EventHandle *event); \/\/ remove a specific object (expensive)$/;"	p	class:EventHandler
EventHandler::removeEvent	src/Data/Events/EventHandler.cpp	/^void EventHandler::removeEvent(EventHandle *event) {$/;"	f	class:EventHandler
EventHandler::removeEvent	src/Data/Events/EventHandler.h	/^        void removeEvent(EventHandle *event); \/\/ remove a specific object (expensive)$/;"	p	class:EventHandler
EventHandler::~EventHandler	include/Eternia/Data/Events/EventHandler.h	/^        ~EventHandler();$/;"	p	class:EventHandler
EventHandler::~EventHandler	src/Data/Events/EventHandler.cpp	/^EventHandler::~EventHandler() {$/;"	f	class:EventHandler
EventHandler::~EventHandler	src/Data/Events/EventHandler.h	/^        ~EventHandler();$/;"	p	class:EventHandler
ExHash_h_	include/Eternia/Algorithm/Cryptography/ExHash.h	/^#define ExHash_h_$/;"	d
ExHash_h_	src/Algorithm/Cryptography/ExHash.h	/^#define ExHash_h_$/;"	d
F	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline uint4 F(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
F	include/Eternia/constants.h	/^        const double F = 21.83;$/;"	m	namespace:electromagnetic::sound
F	include/Eternia/constants.h	/^        const double F = Farad;$/;"	m	namespace:physical::unit
F	src/Algorithm/Cryptography/Aes267.cpp	/^#define F(/;"	d	file:
F	src/Algorithm/Cryptography/md5.cpp	/^inline MD5::uint4 MD5::F(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5
F	src/Algorithm/Cryptography/md5.h	/^        static inline uint4 F(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
F	src/constants.h	/^        const double F = 21.83;$/;"	m	namespace:electromagnetic::sound
F	src/constants.h	/^        const double F = Farad;$/;"	m	namespace:physical::unit
FAIL	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FAIL /;"	d
FAIL	src/Emulation/MPU/msp430g2553.h	/^#define FAIL /;"	d
FCTL1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define FCTL1 /;"	d
FCTL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(FCTL1);                             \/* FLASH Control 1 *\/$/;"	v
FCTL1	src/Emulation/MPU/msp430_declare_consts.h	/^#define FCTL1 /;"	d
FCTL1	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(FCTL1);                             \/* FLASH Control 1 *\/$/;"	v
FCTL2	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define FCTL2 /;"	d
FCTL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(FCTL2);                             \/* FLASH Control 2 *\/$/;"	v
FCTL2	src/Emulation/MPU/msp430_declare_consts.h	/^#define FCTL2 /;"	d
FCTL2	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(FCTL2);                             \/* FLASH Control 2 *\/$/;"	v
FCTL3	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define FCTL3 /;"	d
FCTL3	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(FCTL3);                             \/* FLASH Control 3 *\/$/;"	v
FCTL3	src/Emulation/MPU/msp430_declare_consts.h	/^#define FCTL3 /;"	d
FCTL3	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(FCTL3);                             \/* FLASH Control 3 *\/$/;"	v
FD	src/Algorithm/Cryptography/Aes267.cpp	/^#define FD(/;"	d	file:
FF	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline void FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
FF	src/Algorithm/Cryptography/md5.cpp	/^inline void MD5::FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5
FF	src/Algorithm/Cryptography/md5.h	/^        static inline void FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
FFT	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    FreqSignal FFT(); \/\/ outputs the frequency domain, useful to apply filters$/;"	p	class:TimeSignal
FFT	src/Engineering/Electrical/Signal/TimeSignal.h	/^    FreqSignal FFT(); \/\/ outputs the frequency domain, useful to apply filters$/;"	p	class:TimeSignal
FFT_H_	include/Eternia/Math/Functions/FFT.h	/^#define FFT_H_$/;"	d
FFT_H_	src/Math/Functions/FFT.h	/^#define FFT_H_$/;"	d
FG	include/Eternia/constants.h	/^        const double FG = 23.12;$/;"	m	namespace:electromagnetic::sound
FG	src/constants.h	/^        const double FG = 23.12;$/;"	m	namespace:electromagnetic::sound
FILECACHE_H_	include/Eternia/Data/FileCache.hpp	/^#define FILECACHE_H_$/;"	d
FILECACHE_H_	src/Data/FileCache.hpp	/^#define FILECACHE_H_$/;"	d
FILESYSTEM_H_	include/Eternia/Data/FileSystem.h	/^#define FILESYSTEM_H_$/;"	d
FILESYSTEM_H_	src/Data/FileSystem.h	/^#define FILESYSTEM_H_$/;"	d
FLUIDMECHANICS_H_	include/Eternia/Engineering/Physics/FluidMechanics/FluidMechanics.h	/^#define FLUIDMECHANICS_H_$/;"	d
FLUIDMECHANICS_H_	src/Engineering/Physics/FluidMechanics/FluidMechanics.h	/^#define FLUIDMECHANICS_H_$/;"	d
FN0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FN0 /;"	d
FN0	src/Emulation/MPU/msp430g2553.h	/^#define FN0 /;"	d
FN1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FN1 /;"	d
FN1	src/Emulation/MPU/msp430g2553.h	/^#define FN1 /;"	d
FN2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FN2 /;"	d
FN2	src/Emulation/MPU/msp430g2553.h	/^#define FN2 /;"	d
FN3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FN3 /;"	d
FN3	src/Emulation/MPU/msp430g2553.h	/^#define FN3 /;"	d
FN4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FN4 /;"	d
FN4	src/Emulation/MPU/msp430g2553.h	/^#define FN4 /;"	d
FN5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FN5 /;"	d
FN5	src/Emulation/MPU/msp430g2553.h	/^#define FN5 /;"	d
FREEBODY_H_	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^#define FREEBODY_H_$/;"	d
FREEBODY_H_	src/Engineering/Physics/Kinematics/FreeBody.h	/^#define FREEBODY_H_$/;"	d
FRKEY	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FRKEY /;"	d
FRKEY	src/Emulation/MPU/msp430g2553.h	/^#define FRKEY /;"	d
FSSEL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FSSEL0 /;"	d
FSSEL0	src/Emulation/MPU/msp430g2553.h	/^#define FSSEL0 /;"	d
FSSEL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FSSEL1 /;"	d
FSSEL1	src/Emulation/MPU/msp430g2553.h	/^#define FSSEL1 /;"	d
FSSEL_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FSSEL_0 /;"	d
FSSEL_0	src/Emulation/MPU/msp430g2553.h	/^#define FSSEL_0 /;"	d
FSSEL_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FSSEL_1 /;"	d
FSSEL_1	src/Emulation/MPU/msp430g2553.h	/^#define FSSEL_1 /;"	d
FSSEL_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FSSEL_2 /;"	d
FSSEL_2	src/Emulation/MPU/msp430g2553.h	/^#define FSSEL_2 /;"	d
FSSEL_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FSSEL_3 /;"	d
FSSEL_3	src/Emulation/MPU/msp430g2553.h	/^#define FSSEL_3 /;"	d
FTL	include/Eternia/Gamelogic/Ship/FTL/FTL.h	/^class FTL{$/;"	c
FTL	src/Gamelogic/Ship/FTL/FTL.h	/^class FTL{$/;"	c
FTL_H_	include/Eternia/Gamelogic/Ship/FTL/FTL.h	/^#define FTL_H_$/;"	d
FTL_H_	src/Gamelogic/Ship/FTL/FTL.h	/^#define FTL_H_$/;"	d
FULLVERSION_STRING	version.h	/^#define FULLVERSION_STRING /;"	d
FWKEY	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FWKEY /;"	d
FWKEY	src/Emulation/MPU/msp430g2553.h	/^#define FWKEY /;"	d
FXKEY	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define FXKEY /;"	d
FXKEY	src/Emulation/MPU/msp430g2553.h	/^#define FXKEY /;"	d
Farad	include/Eternia/constants.h	/^        const double Farad = Coulomb\/Volt;$/;"	m	namespace:physical::unit
Farad	src/constants.h	/^        const double Farad = Coulomb\/Volt;$/;"	m	namespace:physical::unit
Farads	include/Eternia/Engineering/Electrical/Components/Capacitor.h	/^        double Farads; \/\/ Capacitor rating$/;"	m	class:Capacitor
Farads	include/Eternia/constants.h	/^        const double Farads = Farad;$/;"	m	namespace:physical::unit
Farads	src/Engineering/Electrical/Components/Capacitor.h	/^        double Farads; \/\/ Capacitor rating$/;"	m	class:Capacitor
Farads	src/constants.h	/^        const double Farads = Farad;$/;"	m	namespace:physical::unit
Fermi	include/Eternia/constants.h	/^        const double Fermi = meter\/1000000000000000.0;$/;"	m	namespace:physical::unit
Fermi	src/constants.h	/^        const double Fermi = meter\/1000000000000000.0;$/;"	m	namespace:physical::unit
Fermis	include/Eternia/constants.h	/^        const double Fermis = Fermi;$/;"	m	namespace:physical::unit
Fermis	src/constants.h	/^        const double Fermis = Fermi;$/;"	m	namespace:physical::unit
Fermium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Fermium = new Atom("Fermium", "Fm", 0, 7, 100, 157,99, UNKNOWN,UNKNOWN, UNKNOWN, 1800,UNKNOWN, UNKNOWN, 3, COLOR_SlateGray,ELEM_Actinide);$/;"	v
Fermium	src/Engineering/Chemistry/elementals.h	/^const Atom Fermium = new Atom("Fermium", "Fm", 0, 7, 100, 157,99, UNKNOWN,UNKNOWN, UNKNOWN, 1800,UNKNOWN, UNKNOWN, 3, COLOR_SlateGray,ELEM_Actinide);$/;"	v
File	include/Eternia/Data/FileSystem.h	/^enum DType {Directory,File};$/;"	e	enum:DType
File	src/Data/FileSystem.h	/^enum DType {Directory,File};$/;"	e	enum:DType
FileCache	include/Eternia/Data/FileCache.hpp	/^        FileCache(char* storeFile, long maxRAMSize, bool manual) {$/;"	f	class:FileCache
FileCache	include/Eternia/Data/FileCache.hpp	/^class FileCache {$/;"	c
FileCache	src/Data/FileCache.hpp	/^        FileCache(char* storeFile, long maxRAMSize, bool manual) {$/;"	f	class:FileCache
FileCache	src/Data/FileCache.hpp	/^class FileCache {$/;"	c
FileCache::FileCache	include/Eternia/Data/FileCache.hpp	/^        FileCache(char* storeFile, long maxRAMSize, bool manual) {$/;"	f	class:FileCache
FileCache::FileCache	src/Data/FileCache.hpp	/^        FileCache(char* storeFile, long maxRAMSize, bool manual) {$/;"	f	class:FileCache
FileCache::add	include/Eternia/Data/FileCache.hpp	/^        long add(T* data) {$/;"	f	class:FileCache
FileCache::add	src/Data/FileCache.hpp	/^        long add(T* data) {$/;"	f	class:FileCache
FileCache::autoManage	include/Eternia/Data/FileCache.hpp	/^        bool autoManage;$/;"	m	class:FileCache
FileCache::autoManage	src/Data/FileCache.hpp	/^        bool autoManage;$/;"	m	class:FileCache
FileCache::clean	include/Eternia/Data/FileCache.hpp	/^        void clean() {$/;"	f	class:FileCache
FileCache::clean	src/Data/FileCache.hpp	/^        void clean() {$/;"	f	class:FileCache
FileCache::current_ram_size	include/Eternia/Data/FileCache.hpp	/^        long current_ram_size;$/;"	m	class:FileCache
FileCache::current_ram_size	src/Data/FileCache.hpp	/^        long current_ram_size;$/;"	m	class:FileCache
FileCache::dFile	include/Eternia/Data/FileCache.hpp	/^        fstream dFile;$/;"	m	class:FileCache
FileCache::dFile	src/Data/FileCache.hpp	/^        fstream dFile;$/;"	m	class:FileCache
FileCache::entries	include/Eternia/Data/FileCache.hpp	/^        unordered_map<long, T> entries; \/\/ RAM entries.$/;"	m	class:FileCache
FileCache::entries	src/Data/FileCache.hpp	/^        unordered_map<long, T> entries; \/\/ RAM entries.$/;"	m	class:FileCache
FileCache::get	include/Eternia/Data/FileCache.hpp	/^        T* get(long id) {$/;"	f	class:FileCache
FileCache::get	src/Data/FileCache.hpp	/^        T* get(long id) {$/;"	f	class:FileCache
FileCache::iterator	include/Eternia/Data/FileCache.hpp	/^        long iterator;$/;"	m	class:FileCache
FileCache::iterator	src/Data/FileCache.hpp	/^        long iterator;$/;"	m	class:FileCache
FileCache::loadedIDs	include/Eternia/Data/FileCache.hpp	/^        LinkedList<long> *loadedIDs;$/;"	m	class:FileCache
FileCache::loadedIDs	src/Data/FileCache.hpp	/^        LinkedList<long> *loadedIDs;$/;"	m	class:FileCache
FileCache::max_ram_size	include/Eternia/Data/FileCache.hpp	/^        long max_ram_size;$/;"	m	class:FileCache
FileCache::max_ram_size	src/Data/FileCache.hpp	/^        long max_ram_size;$/;"	m	class:FileCache
FileCache::preload	include/Eternia/Data/FileCache.hpp	/^        void preload(long ID) {$/;"	f	class:FileCache
FileCache::preload	src/Data/FileCache.hpp	/^        void preload(long ID) {$/;"	f	class:FileCache
FileCache::store_file	include/Eternia/Data/FileCache.hpp	/^        char* store_file;$/;"	m	class:FileCache
FileCache::store_file	src/Data/FileCache.hpp	/^        char* store_file;$/;"	m	class:FileCache
FileCache::unload	include/Eternia/Data/FileCache.hpp	/^        void unload(long ID) {$/;"	f	class:FileCache
FileCache::unload	src/Data/FileCache.hpp	/^        void unload(long ID) {$/;"	f	class:FileCache
FileCache::~FileCache	include/Eternia/Data/FileCache.hpp	/^        ~FileCache() {$/;"	f	class:FileCache
FileCache::~FileCache	src/Data/FileCache.hpp	/^        ~FileCache() {$/;"	f	class:FileCache
FileStructureNode	include/Eternia/Data/FileSystem.h	/^class FileStructureNode {$/;"	c
FileStructureNode	src/Data/FileSystem.h	/^class FileStructureNode {$/;"	c
FileStructureNode::Child	include/Eternia/Data/FileSystem.h	/^        FileStructureNode *Child,*Parent;$/;"	m	class:FileStructureNode
FileStructureNode::Child	src/Data/FileSystem.h	/^        FileStructureNode *Child,*Parent;$/;"	m	class:FileStructureNode
FileStructureNode::Parent	include/Eternia/Data/FileSystem.h	/^        FileStructureNode *Child,*Parent;$/;"	m	class:FileStructureNode
FileStructureNode::Parent	src/Data/FileSystem.h	/^        FileStructureNode *Child,*Parent;$/;"	m	class:FileStructureNode
FileStructureNode::PrevSibling	include/Eternia/Data/FileSystem.h	/^        FileStructureNode *Sibling,*PrevSibling;$/;"	m	class:FileStructureNode
FileStructureNode::PrevSibling	src/Data/FileSystem.h	/^        FileStructureNode *Sibling,*PrevSibling;$/;"	m	class:FileStructureNode
FileStructureNode::Sibling	include/Eternia/Data/FileSystem.h	/^        FileStructureNode *Sibling,*PrevSibling;$/;"	m	class:FileStructureNode
FileStructureNode::Sibling	src/Data/FileSystem.h	/^        FileStructureNode *Sibling,*PrevSibling;$/;"	m	class:FileStructureNode
FileStructureNode::addObject	include/Eternia/Data/FileSystem.h	/^        void addObject(FileStructureNode* object); \/\/ add object to this$/;"	p	class:FileStructureNode
FileStructureNode::addObject	src/Data/FileSystem.cpp	/^void FileStructureNode::addObject(FileStructureNode* object) {$/;"	f	class:FileStructureNode
FileStructureNode::addObject	src/Data/FileSystem.h	/^        void addObject(FileStructureNode* object); \/\/ add object to this$/;"	p	class:FileStructureNode
FileStructureNode::del	include/Eternia/Data/FileSystem.h	/^        void del(); \/\/ delete THIS from listings.$/;"	p	class:FileStructureNode
FileStructureNode::del	src/Data/FileSystem.cpp	/^void FileStructureNode::del() {$/;"	f	class:FileStructureNode
FileStructureNode::del	src/Data/FileSystem.h	/^        void del(); \/\/ delete THIS from listings.$/;"	p	class:FileStructureNode
FileStructureNode::delObject	include/Eternia/Data/FileSystem.h	/^        bool delObject(FileStructureNode* object); \/\/ delete object from this$/;"	p	class:FileStructureNode
FileStructureNode::delObject	src/Data/FileSystem.h	/^        bool delObject(FileStructureNode* object); \/\/ delete object from this$/;"	p	class:FileStructureNode
FileStructureNode::name	include/Eternia/Data/FileSystem.h	/^        CharString name;$/;"	m	class:FileStructureNode
FileStructureNode::name	src/Data/FileSystem.h	/^        CharString name;$/;"	m	class:FileStructureNode
FileStructureNode::nameEquals	include/Eternia/Data/FileSystem.h	/^        bool nameEquals(CharString AName); \/\/ quick compare of names$/;"	p	class:FileStructureNode
FileStructureNode::nameEquals	src/Data/FileSystem.h	/^        bool nameEquals(CharString AName); \/\/ quick compare of names$/;"	p	class:FileStructureNode
FileStructureNode::type	include/Eternia/Data/FileSystem.h	/^        DType type;$/;"	m	class:FileStructureNode
FileStructureNode::type	src/Data/FileSystem.h	/^        DType type;$/;"	m	class:FileStructureNode
FileSystem	include/Eternia/Data/FileSystem.h	/^        FileSystem();$/;"	p	class:FileSystem
FileSystem	include/Eternia/Data/FileSystem.h	/^class FileSystem {$/;"	c
FileSystem	src/Data/FileSystem.cpp	/^FileSystem::FileSystem() {$/;"	f	class:FileSystem
FileSystem	src/Data/FileSystem.h	/^        FileSystem();$/;"	p	class:FileSystem
FileSystem	src/Data/FileSystem.h	/^class FileSystem {$/;"	c
FileSystem::Current	include/Eternia/Data/FileSystem.h	/^        FileStructureNode *Root, *Current;$/;"	m	class:FileSystem
FileSystem::Current	src/Data/FileSystem.h	/^        FileStructureNode *Root, *Current;$/;"	m	class:FileSystem
FileSystem::ErrorString	include/Eternia/Data/FileSystem.h	/^        char* ErrorString;$/;"	m	class:FileSystem
FileSystem::ErrorString	src/Data/FileSystem.h	/^        char* ErrorString;$/;"	m	class:FileSystem
FileSystem::FileSystem	include/Eternia/Data/FileSystem.h	/^        FileSystem();$/;"	p	class:FileSystem
FileSystem::FileSystem	src/Data/FileSystem.cpp	/^FileSystem::FileSystem() {$/;"	f	class:FileSystem
FileSystem::FileSystem	src/Data/FileSystem.h	/^        FileSystem();$/;"	p	class:FileSystem
FileSystem::Root	include/Eternia/Data/FileSystem.h	/^        FileStructureNode *Root, *Current;$/;"	m	class:FileSystem
FileSystem::Root	src/Data/FileSystem.h	/^        FileStructureNode *Root, *Current;$/;"	m	class:FileSystem
FileSystem::addDirectory	include/Eternia/Data/FileSystem.h	/^        void addDirectory(CharString location); \/\/ add directory to system$/;"	p	class:FileSystem
FileSystem::addDirectory	src/Data/FileSystem.cpp	/^void FileSystem::addDirectory(CharString location) {$/;"	f	class:FileSystem
FileSystem::addDirectory	src/Data/FileSystem.h	/^        void addDirectory(CharString location); \/\/ add directory to system$/;"	p	class:FileSystem
FileSystem::addFile	include/Eternia/Data/FileSystem.h	/^        void addFile(CharString location); \/\/ add file (touch) to system$/;"	p	class:FileSystem
FileSystem::addFile	src/Data/FileSystem.cpp	/^void FileSystem::addFile(CharString location) {$/;"	f	class:FileSystem
FileSystem::addFile	src/Data/FileSystem.h	/^        void addFile(CharString location); \/\/ add file (touch) to system$/;"	p	class:FileSystem
FileSystem::callDirectory	include/Eternia/Data/FileSystem.h	/^        void callDirectory(CharString location); \/\/ call directory (cd \/)$/;"	p	class:FileSystem
FileSystem::callDirectory	src/Data/FileSystem.cpp	/^void FileSystem::callDirectory(CharString location) {$/;"	f	class:FileSystem
FileSystem::callDirectory	src/Data/FileSystem.h	/^        void callDirectory(CharString location); \/\/ call directory (cd \/)$/;"	p	class:FileSystem
FileSystem::getBaseNodeFromString	include/Eternia/Data/FileSystem.h	/^        FileStructureNode* getBaseNodeFromString(CharString location); \/\/ find a BASE directory or file at location.$/;"	p	class:FileSystem
FileSystem::getBaseNodeFromString	src/Data/FileSystem.cpp	/^FileStructureNode* FileSystem::getBaseNodeFromString(CharString location) {$/;"	f	class:FileSystem
FileSystem::getBaseNodeFromString	src/Data/FileSystem.h	/^        FileStructureNode* getBaseNodeFromString(CharString location); \/\/ find a BASE directory or file at location.$/;"	p	class:FileSystem
FileSystem::getNameFromString	include/Eternia/Data/FileSystem.h	/^        CharString getNameFromString(CharString location); \/\/ returns the name of the object in the breadcrum list.$/;"	p	class:FileSystem
FileSystem::getNameFromString	src/Data/FileSystem.cpp	/^CharString FileSystem::getNameFromString(CharString location) {$/;"	f	class:FileSystem
FileSystem::getNameFromString	src/Data/FileSystem.h	/^        CharString getNameFromString(CharString location); \/\/ returns the name of the object in the breadcrum list.$/;"	p	class:FileSystem
FileSystem::getNodeFromString	include/Eternia/Data/FileSystem.h	/^        FileStructureNode* getNodeFromString(CharString location); \/\/ find a directory or file at location.$/;"	p	class:FileSystem
FileSystem::getNodeFromString	src/Data/FileSystem.cpp	/^FileStructureNode* FileSystem::getNodeFromString(CharString location) {$/;"	f	class:FileSystem
FileSystem::getNodeFromString	src/Data/FileSystem.h	/^        FileStructureNode* getNodeFromString(CharString location); \/\/ find a directory or file at location.$/;"	p	class:FileSystem
FileSystem::getStringFromNode	include/Eternia/Data/FileSystem.h	/^        CharString getStringFromNode(FileStructureNode* location); \/\/ converts current location into a directory location$/;"	p	class:FileSystem
FileSystem::getStringFromNode	src/Data/FileSystem.cpp	/^CharString FileSystem::getStringFromNode(FileStructureNode* location) {$/;"	f	class:FileSystem
FileSystem::getStringFromNode	src/Data/FileSystem.h	/^        CharString getStringFromNode(FileStructureNode* location); \/\/ converts current location into a directory location$/;"	p	class:FileSystem
FileSystem::listDirs	include/Eternia/Data/FileSystem.h	/^        void listDirs(); \/\/ list directories (ls)$/;"	p	class:FileSystem
FileSystem::listDirs	include/Eternia/Data/FileSystem.h	/^        void listDirs(CharString location); \/\/ list directories (ls \/loc)$/;"	p	class:FileSystem
FileSystem::listDirs	src/Data/FileSystem.cpp	/^void FileSystem::listDirs() {$/;"	f	class:FileSystem
FileSystem::listDirs	src/Data/FileSystem.h	/^        void listDirs(); \/\/ list directories (ls)$/;"	p	class:FileSystem
FileSystem::listDirs	src/Data/FileSystem.h	/^        void listDirs(CharString location); \/\/ list directories (ls \/loc)$/;"	p	class:FileSystem
FileSystem::printWorkingDirectory	include/Eternia/Data/FileSystem.h	/^        void printWorkingDirectory(); \/\/ print current directory location (pwd)$/;"	p	class:FileSystem
FileSystem::printWorkingDirectory	src/Data/FileSystem.cpp	/^void FileSystem::printWorkingDirectory() {$/;"	f	class:FileSystem
FileSystem::printWorkingDirectory	src/Data/FileSystem.h	/^        void printWorkingDirectory(); \/\/ print current directory location (pwd)$/;"	p	class:FileSystem
FileSystem::removeAll	include/Eternia/Data/FileSystem.h	/^        void removeAll(DType t, FileStructureNode* location); \/\/ use of '*' mask to remove all of type$/;"	p	class:FileSystem
FileSystem::removeAll	src/Data/FileSystem.cpp	/^void FileSystem::removeAll(DType t, FileStructureNode* location) {$/;"	f	class:FileSystem
FileSystem::removeAll	src/Data/FileSystem.h	/^        void removeAll(DType t, FileStructureNode* location); \/\/ use of '*' mask to remove all of type$/;"	p	class:FileSystem
FileSystem::removeDir	include/Eternia/Data/FileSystem.h	/^        void removeDir(CharString location); \/\/ remove directory (rmdir)$/;"	p	class:FileSystem
FileSystem::removeDir	src/Data/FileSystem.cpp	/^void FileSystem::removeDir(CharString location) {$/;"	f	class:FileSystem
FileSystem::removeDir	src/Data/FileSystem.h	/^        void removeDir(CharString location); \/\/ remove directory (rmdir)$/;"	p	class:FileSystem
FileSystem::removeFile	include/Eternia/Data/FileSystem.h	/^        void removeFile(CharString location); \/\/ remove file (rm)$/;"	p	class:FileSystem
FileSystem::removeFile	src/Data/FileSystem.cpp	/^void FileSystem::removeFile(CharString location) {$/;"	f	class:FileSystem
FileSystem::removeFile	src/Data/FileSystem.h	/^        void removeFile(CharString location); \/\/ remove file (rm)$/;"	p	class:FileSystem
FileSystem::~FileSystem	include/Eternia/Data/FileSystem.h	/^        virtual ~FileSystem();$/;"	p	class:FileSystem
FileSystem::~FileSystem	src/Data/FileSystem.cpp	/^FileSystem::~FileSystem() {}$/;"	f	class:FileSystem
FileSystem::~FileSystem	src/Data/FileSystem.h	/^        virtual ~FileSystem();$/;"	p	class:FileSystem
Flerovium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Flerovium = new Atom("Flerovium", "Fl", 14, 7, 114,  ,113, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Poor);$/;"	v
Flerovium	src/Engineering/Chemistry/elementals.h	/^const Atom Flerovium = new Atom("Flerovium", "Fl", 14, 7, 114,  ,113, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Poor);$/;"	v
FluidMechanics	include/Eternia/Engineering/Physics/FluidMechanics/FluidMechanics.h	/^        FluidMechanics();$/;"	p	class:FluidMechanics
FluidMechanics	include/Eternia/Engineering/Physics/FluidMechanics/FluidMechanics.h	/^class FluidMechanics {$/;"	c
FluidMechanics	src/Engineering/Physics/FluidMechanics/FluidMechanics.cpp	/^FluidMechanics::FluidMechanics() {$/;"	f	class:FluidMechanics
FluidMechanics	src/Engineering/Physics/FluidMechanics/FluidMechanics.h	/^        FluidMechanics();$/;"	p	class:FluidMechanics
FluidMechanics	src/Engineering/Physics/FluidMechanics/FluidMechanics.h	/^class FluidMechanics {$/;"	c
FluidMechanics::FluidMechanics	include/Eternia/Engineering/Physics/FluidMechanics/FluidMechanics.h	/^        FluidMechanics();$/;"	p	class:FluidMechanics
FluidMechanics::FluidMechanics	src/Engineering/Physics/FluidMechanics/FluidMechanics.cpp	/^FluidMechanics::FluidMechanics() {$/;"	f	class:FluidMechanics
FluidMechanics::FluidMechanics	src/Engineering/Physics/FluidMechanics/FluidMechanics.h	/^        FluidMechanics();$/;"	p	class:FluidMechanics
FluidMechanics::~FluidMechanics	include/Eternia/Engineering/Physics/FluidMechanics/FluidMechanics.h	/^        virtual ~FluidMechanics();$/;"	p	class:FluidMechanics
FluidMechanics::~FluidMechanics	src/Engineering/Physics/FluidMechanics/FluidMechanics.cpp	/^FluidMechanics::~FluidMechanics() {$/;"	f	class:FluidMechanics
FluidMechanics::~FluidMechanics	src/Engineering/Physics/FluidMechanics/FluidMechanics.h	/^        virtual ~FluidMechanics();$/;"	p	class:FluidMechanics
Fluorine	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Fluorine = new Atom("Fluorine", "F", 17, 2, 9, 10,9, 0.001696,UNKNOWN, 0.0000277, 53.53,85.03, 0.824, 1, COLOR_None,ELEM_Halogen);$/;"	v
Fluorine	src/Engineering/Chemistry/elementals.h	/^const Atom Fluorine = new Atom("Fluorine", "F", 17, 2, 9, 10,9, 0.001696,UNKNOWN, 0.0000277, 53.53,85.03, 0.824, 1, COLOR_None,ELEM_Halogen);$/;"	v
Force	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        Force();$/;"	p	class:Force
Force	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^class Force {$/;"	c
Force	src/Engineering/Physics/Kinematics/FreeBody.cpp	/^Force::Force() {$/;"	f	class:Force
Force	src/Engineering/Physics/Kinematics/FreeBody.h	/^        Force();$/;"	p	class:Force
Force	src/Engineering/Physics/Kinematics/FreeBody.h	/^class Force {$/;"	c
Force::Force	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        Force();$/;"	p	class:Force
Force::Force	src/Engineering/Physics/Kinematics/FreeBody.cpp	/^Force::Force() {$/;"	f	class:Force
Force::Force	src/Engineering/Physics/Kinematics/FreeBody.h	/^        Force();$/;"	p	class:Force
Force::direction	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        KDirection* direction; \/\/ direction of force$/;"	m	class:Force
Force::direction	src/Engineering/Physics/Kinematics/FreeBody.h	/^        KDirection* direction; \/\/ direction of force$/;"	m	class:Force
Force::directionNegative	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        bool directionNegative; \/\/ is the direction on the opposite side?$/;"	m	class:Force
Force::directionNegative	src/Engineering/Physics/Kinematics/FreeBody.h	/^        bool directionNegative; \/\/ is the direction on the opposite side?$/;"	m	class:Force
Force::equation	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        Equation* equation;$/;"	m	class:Force
Force::equation	src/Engineering/Physics/Kinematics/FreeBody.h	/^        Equation* equation;$/;"	m	class:Force
Force::force	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        KItem* force; \/\/ type of force$/;"	m	class:Force
Force::force	src/Engineering/Physics/Kinematics/FreeBody.h	/^        KItem* force; \/\/ type of force$/;"	m	class:Force
Force::quantity	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        double quantity; \/\/ quantity of force$/;"	m	class:Force
Force::quantity	src/Engineering/Physics/Kinematics/FreeBody.h	/^        double quantity; \/\/ quantity of force$/;"	m	class:Force
Force::tiedItem	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        FreeBody* tiedItem;$/;"	m	class:Force
Force::tiedItem	src/Engineering/Physics/Kinematics/FreeBody.h	/^        FreeBody* tiedItem;$/;"	m	class:Force
Francium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Francium = new Atom("Francium", "Fr", 1, 7, 87, 136,86, 1.87,UNKNOWN, UNKNOWN, 300,950, UNKNOWN, 3, COLOR_Silver,ELEM_Alkali);$/;"	v
Francium	src/Engineering/Chemistry/elementals.h	/^const Atom Francium = new Atom("Francium", "Fr", 1, 7, 87, 136,86, 1.87,UNKNOWN, UNKNOWN, 300,950, UNKNOWN, 3, COLOR_Silver,ELEM_Alkali);$/;"	v
Franklin	include/Eternia/constants.h	/^        const double Franklin = 3.33564e-10*Coulombs;$/;"	m	namespace:physical::unit
Franklin	src/constants.h	/^        const double Franklin = 3.33564e-10*Coulombs;$/;"	m	namespace:physical::unit
Franklins	include/Eternia/constants.h	/^        const double Franklins = Franklin;$/;"	m	namespace:physical::unit
Franklins	src/constants.h	/^        const double Franklins = Franklin;$/;"	m	namespace:physical::unit
FreeBody	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        FreeBody();$/;"	p	class:FreeBody
FreeBody	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^class FreeBody : public VertexObject {$/;"	c
FreeBody	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^class FreeBody;$/;"	x
FreeBody	src/Engineering/Physics/Kinematics/FreeBody.cpp	/^FreeBody::FreeBody() {$/;"	f	class:FreeBody
FreeBody	src/Engineering/Physics/Kinematics/FreeBody.h	/^        FreeBody();$/;"	p	class:FreeBody
FreeBody	src/Engineering/Physics/Kinematics/FreeBody.h	/^class FreeBody : public VertexObject {$/;"	c
FreeBody	src/Engineering/Physics/Kinematics/FreeBody.h	/^class FreeBody;$/;"	x
FreeBody::FreeBody	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        FreeBody();$/;"	p	class:FreeBody
FreeBody::FreeBody	src/Engineering/Physics/Kinematics/FreeBody.cpp	/^FreeBody::FreeBody() {$/;"	f	class:FreeBody
FreeBody::FreeBody	src/Engineering/Physics/Kinematics/FreeBody.h	/^        FreeBody();$/;"	p	class:FreeBody
FreeBody::addItem	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        void addItem(KItem item, double quantity); \/\/ KForce in constants.h defines a set of kinematic forces that can be used.$/;"	p	class:FreeBody
FreeBody::addItem	src/Engineering/Physics/Kinematics/FreeBody.cpp	/^void FreeBody::addItem(KItem item, double quantity) {$/;"	f	class:FreeBody
FreeBody::addItem	src/Engineering/Physics/Kinematics/FreeBody.h	/^        void addItem(KItem item, double quantity); \/\/ KForce in constants.h defines a set of kinematic forces that can be used.$/;"	p	class:FreeBody
FreeBody::forceList	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        LinkedListT *forceList;$/;"	m	class:FreeBody
FreeBody::forceList	src/Engineering/Physics/Kinematics/FreeBody.h	/^        LinkedListT *forceList;$/;"	m	class:FreeBody
FreeBody::getProperty	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        double getProperty(KItem item); \/\/ get a specific property of this element. (Returns -99999 if not found)$/;"	p	class:FreeBody
FreeBody::getProperty	src/Engineering/Physics/Kinematics/FreeBody.cpp	/^double FreeBody::getProperty(KItem item) {$/;"	f	class:FreeBody
FreeBody::getProperty	src/Engineering/Physics/Kinematics/FreeBody.h	/^        double getProperty(KItem item); \/\/ get a specific property of this element. (Returns -99999 if not found)$/;"	p	class:FreeBody
FreeBody::hasItemType	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        bool hasItemType(KItem item);$/;"	p	class:FreeBody
FreeBody::hasItemType	src/Engineering/Physics/Kinematics/FreeBody.cpp	/^bool FreeBody::hasItemType(KItem item) {$/;"	f	class:FreeBody
FreeBody::hasItemType	src/Engineering/Physics/Kinematics/FreeBody.h	/^        bool hasItemType(KItem item);$/;"	p	class:FreeBody
FreqSignal	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    FreqSignal();$/;"	p	class:FreqSignal
FreqSignal	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^class FreqSignal {$/;"	c
FreqSignal	src/Engineering/Electrical/Signal/FreqSignal.h	/^    FreqSignal();$/;"	p	class:FreqSignal
FreqSignal	src/Engineering/Electrical/Signal/FreqSignal.h	/^class FreqSignal {$/;"	c
FreqSignal::FreqSignal	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    FreqSignal();$/;"	p	class:FreqSignal
FreqSignal::FreqSignal	src/Engineering/Electrical/Signal/FreqSignal.h	/^    FreqSignal();$/;"	p	class:FreqSignal
FreqSignal::IFFT	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    TimeSignal IFFT(); \/\/ outputs the time domain$/;"	p	class:FreqSignal
FreqSignal::IFFT	src/Engineering/Electrical/Signal/FreqSignal.h	/^    TimeSignal IFFT(); \/\/ outputs the time domain$/;"	p	class:FreqSignal
FreqSignal::bandpassFilter	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    void bandpassFilter(float centerFreq, float dbm); $/;"	p	class:FreqSignal
FreqSignal::bandpassFilter	src/Engineering/Electrical/Signal/FreqSignal.h	/^    void bandpassFilter(float centerFreq, float dbm); $/;"	p	class:FreqSignal
FreqSignal::highpassFilter	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    void highpassFilter(float centerFreq, float dbm);$/;"	p	class:FreqSignal
FreqSignal::highpassFilter	src/Engineering/Electrical/Signal/FreqSignal.h	/^    void highpassFilter(float centerFreq, float dbm);$/;"	p	class:FreqSignal
FreqSignal::lowpassFilter	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    void lowpassFilter(float centerFreq, float dbm);$/;"	p	class:FreqSignal
FreqSignal::lowpassFilter	src/Engineering/Electrical/Signal/FreqSignal.h	/^    void lowpassFilter(float centerFreq, float dbm);$/;"	p	class:FreqSignal
FreqSignal::noiseFilter	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    void noiseFilter(FreqSignal profile, float dbm); \/\/ appends that filter$/;"	p	class:FreqSignal
FreqSignal::noiseFilter	src/Engineering/Electrical/Signal/FreqSignal.h	/^    void noiseFilter(FreqSignal profile, float dbm); \/\/ appends that filter$/;"	p	class:FreqSignal
FreqSignal::noiseProfile	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    FreqSignal noiseProfile(); \/\/ gets the profile for noise (use static ambient)$/;"	p	class:FreqSignal
FreqSignal::noiseProfile	src/Engineering/Electrical/Signal/FreqSignal.h	/^    FreqSignal noiseProfile(); \/\/ gets the profile for noise (use static ambient)$/;"	p	class:FreqSignal
FreqSignal::notchFilter	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    void notchFilter(float centerFreq, float dbm);$/;"	p	class:FreqSignal
FreqSignal::notchFilter	src/Engineering/Electrical/Signal/FreqSignal.h	/^    void notchFilter(float centerFreq, float dbm);$/;"	p	class:FreqSignal
FreqSignal::samples	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    LinkedList<Sample> samples;$/;"	m	class:FreqSignal
FreqSignal::samples	src/Engineering/Electrical/Signal/FreqSignal.h	/^    LinkedList<Sample> samples;$/;"	m	class:FreqSignal
FreqSignal::~FreqSignal	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    virtual ~FreqSignal();$/;"	p	class:FreqSignal
FreqSignal::~FreqSignal	src/Engineering/Electrical/Signal/FreqSignal.h	/^    virtual ~FreqSignal();$/;"	p	class:FreqSignal
FreqSignal_H_	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^#define FreqSignal_H_$/;"	d
FreqSignal_H_	src/Engineering/Electrical/Signal/FreqSignal.h	/^#define FreqSignal_H_$/;"	d
Frigorie	include/Eternia/constants.h	/^        const double Frigorie = kilocalorie;$/;"	m	namespace:physical::unit
Frigorie	src/constants.h	/^        const double Frigorie = kilocalorie;$/;"	m	namespace:physical::unit
Frigories	include/Eternia/constants.h	/^        const double Frigories = Frigorie;$/;"	m	namespace:physical::unit
Frigories	src/constants.h	/^        const double Frigories = Frigorie;$/;"	m	namespace:physical::unit
G	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline uint4 G(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
G	include/Eternia/constants.h	/^        const double G = 24.50;$/;"	m	namespace:electromagnetic::sound
G	include/Eternia/constants.h	/^        const double G = 6.67259e-11*m*m*m\/(kg*s*s);$/;"	m	namespace:physical::constant
G	src/Algorithm/Cryptography/md5.cpp	/^inline MD5::uint4 MD5::G(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5
G	src/Algorithm/Cryptography/md5.h	/^        static inline uint4 G(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
G	src/constants.h	/^        const double G = 24.50;$/;"	m	namespace:electromagnetic::sound
G	src/constants.h	/^        const double G = 6.67259e-11*m*m*m\/(kg*s*s);$/;"	m	namespace:physical::constant
GA	include/Eternia/constants.h	/^        const double GA = 25.96;$/;"	m	namespace:electromagnetic::sound
GA	src/constants.h	/^        const double GA = 25.96;$/;"	m	namespace:electromagnetic::sound
GEARP_Abdomen	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Abdomen	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Arm	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Arm	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Back	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Back	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_ChestPlate	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_ChestPlate	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_FINGER	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_FINGER	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Foot	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Foot	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Hand	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Hand	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Helmet	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Helmet	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Leg	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Leg	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Shin	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Shin	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Wrist	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARP_Wrist	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	e	enum:GEAR_Placement
GEARSIDE_LEFT	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_SIDE {GEARSIDE_LEFT, GEARSIDE_RIGHT};$/;"	e	enum:GEAR_SIDE
GEARSIDE_LEFT	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_SIDE {GEARSIDE_LEFT, GEARSIDE_RIGHT};$/;"	e	enum:GEAR_SIDE
GEARSIDE_RIGHT	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_SIDE {GEARSIDE_LEFT, GEARSIDE_RIGHT};$/;"	e	enum:GEAR_SIDE
GEARSIDE_RIGHT	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_SIDE {GEARSIDE_LEFT, GEARSIDE_RIGHT};$/;"	e	enum:GEAR_SIDE
GEAR_Placement	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	g
GEAR_Placement	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_Placement {GEARP_Helmet, GEARP_ChestPlate, GEARP_Arm, GEARP_Back, GEARP_Wrist, GEARP_Hand, GEARP_Abdomen, GEARP_Leg, GEARP_Shin, GEARP_Foot, GEARP_FINGER};$/;"	g
GEAR_SIDE	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_SIDE {GEARSIDE_LEFT, GEARSIDE_RIGHT};$/;"	g
GEAR_SIDE	src/Gamelogic/Avatar/AvatarGear.h	/^enum GEAR_SIDE {GEARSIDE_LEFT, GEARSIDE_RIGHT};$/;"	g
GEdge	include/Eternia/Data/Graph.h	/^        GEdge();$/;"	p	class:GEdge
GEdge	include/Eternia/Data/Graph.h	/^        GEdge(GVertex *a_, GVertex *b_, int c);$/;"	p	class:GEdge
GEdge	include/Eternia/Data/Graph.h	/^class GEdge {$/;"	c
GEdge	include/Eternia/Data/Graph.h	/^class GEdge;$/;"	x
GEdge	src/Data/Graph.h	/^        GEdge();$/;"	p	class:GEdge
GEdge	src/Data/Graph.h	/^        GEdge(GVertex *a_, GVertex *b_, int c);$/;"	p	class:GEdge
GEdge	src/Data/Graph.h	/^class GEdge {$/;"	c
GEdge	src/Data/Graph.h	/^class GEdge;$/;"	x
GEdge::GEdge	include/Eternia/Data/Graph.h	/^        GEdge();$/;"	p	class:GEdge
GEdge::GEdge	include/Eternia/Data/Graph.h	/^        GEdge(GVertex *a_, GVertex *b_, int c);$/;"	p	class:GEdge
GEdge::GEdge	src/Data/Graph.h	/^        GEdge();$/;"	p	class:GEdge
GEdge::GEdge	src/Data/Graph.h	/^        GEdge(GVertex *a_, GVertex *b_, int c);$/;"	p	class:GEdge
GEdge::a	include/Eternia/Data/Graph.h	/^        GVertex *a, *b;$/;"	m	class:GEdge
GEdge::a	src/Data/Graph.h	/^        GVertex *a, *b;$/;"	m	class:GEdge
GEdge::b	include/Eternia/Data/Graph.h	/^        GVertex *a, *b;$/;"	m	class:GEdge
GEdge::b	src/Data/Graph.h	/^        GVertex *a, *b;$/;"	m	class:GEdge
GEdge::data	include/Eternia/Data/Graph.h	/^        int data;$/;"	m	class:GEdge
GEdge::data	src/Data/Graph.h	/^        int data;$/;"	m	class:GEdge
GEdge::edgeList	include/Eternia/Data/Graph.h	/^        LinkedListT* edgeList; \/\/ structure that stores this.$/;"	m	class:GEdge
GEdge::edgeList	src/Data/Graph.h	/^        LinkedListT* edgeList; \/\/ structure that stores this.$/;"	m	class:GEdge
GEdge::isAdjacentTo	include/Eternia/Data/Graph.h	/^        bool isAdjacentTo(GVertex* v);$/;"	p	class:GEdge
GEdge::isAdjacentTo	src/Data/Graph.h	/^        bool isAdjacentTo(GVertex* v);$/;"	p	class:GEdge
GEdge::opposite	include/Eternia/Data/Graph.h	/^        GVertex* opposite(GVertex* v);$/;"	p	class:GEdge
GEdge::opposite	src/Data/Graph.h	/^        GVertex* opposite(GVertex* v);$/;"	p	class:GEdge
GEdge::~GEdge	include/Eternia/Data/Graph.h	/^        virtual ~GEdge();$/;"	p	class:GEdge
GEdge::~GEdge	src/Data/Graph.h	/^        virtual ~GEdge();$/;"	p	class:GEdge
GG	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline void GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
GG	src/Algorithm/Cryptography/md5.cpp	/^inline void MD5::GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5
GG	src/Algorithm/Cryptography/md5.h	/^        static inline void GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
GHz	include/Eternia/constants.h	/^        const double GHz = gigaHertz;$/;"	m	namespace:physical::unit
GHz	src/constants.h	/^        const double GHz = gigaHertz;$/;"	m	namespace:physical::unit
GIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define GIE /;"	d
GIE	src/Emulation/MPU/msp430g2553.h	/^#define GIE /;"	d
GPUInstruction	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        GPUInstruction(char* pureinstruct); \/\/ pure data in$/;"	p	class:GPUInstruction
GPUInstruction	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^class GPUInstruction {$/;"	c
GPUInstruction	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        GPUInstruction(char* pureinstruct); \/\/ pure data in$/;"	p	class:GPUInstruction
GPUInstruction	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^class GPUInstruction {$/;"	c
GPUInstruction::GPUInstruction	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        GPUInstruction(char* pureinstruct); \/\/ pure data in$/;"	p	class:GPUInstruction
GPUInstruction::GPUInstruction	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        GPUInstruction(char* pureinstruct); \/\/ pure data in$/;"	p	class:GPUInstruction
GPUInstruction::mesh1	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        LinkedList<vertex>* mesh1; \/\/ RAW data points$/;"	m	class:GPUInstruction
GPUInstruction::mesh1	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        LinkedList<vertex>* mesh1; \/\/ RAW data points$/;"	m	class:GPUInstruction
GPUInstruction::mesh2	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        LinkedList<vertex>* mesh2; \/\/ RAW data points$/;"	m	class:GPUInstruction
GPUInstruction::mesh2	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        LinkedList<vertex>* mesh2; \/\/ RAW data points$/;"	m	class:GPUInstruction
GPUInstruction::number1	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        double number1;$/;"	m	class:GPUInstruction
GPUInstruction::number1	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        double number1;$/;"	m	class:GPUInstruction
GPUInstruction::number2	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        double number2;$/;"	m	class:GPUInstruction
GPUInstruction::number2	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        double number2;$/;"	m	class:GPUInstruction
GPUInstruction::typecode	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        INSTRUCTIONTYPE typecode; \/\/ what to do? (Determines variables below)$/;"	m	class:GPUInstruction
GPUInstruction::typecode	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        INSTRUCTIONTYPE typecode; \/\/ what to do? (Determines variables below)$/;"	m	class:GPUInstruction
GPUInstruction::vertexMap	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        LinkedList<vertex>* vertexMap;$/;"	m	class:GPUInstruction
GPUInstruction::vertexMap	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        LinkedList<vertex>* vertexMap;$/;"	m	class:GPUInstruction
GPUInstruction_h_	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^#define GPUInstruction_h_$/;"	d
GPUInstruction_h_	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^#define GPUInstruction_h_$/;"	d
GVertex	include/Eternia/Data/Graph.h	/^        GVertex();$/;"	p	class:GVertex
GVertex	include/Eternia/Data/Graph.h	/^class GVertex {$/;"	c
GVertex	include/Eternia/Data/Graph.h	/^class GVertex;$/;"	x
GVertex	src/Data/Graph.h	/^        GVertex();$/;"	p	class:GVertex
GVertex	src/Data/Graph.h	/^class GVertex {$/;"	c
GVertex	src/Data/Graph.h	/^class GVertex;$/;"	x
GVertex::GVertex	include/Eternia/Data/Graph.h	/^        GVertex();$/;"	p	class:GVertex
GVertex::GVertex	src/Data/Graph.h	/^        GVertex();$/;"	p	class:GVertex
GVertex::incidentEdges	include/Eternia/Data/Graph.h	/^        LinkedListT* incidentEdges;$/;"	m	class:GVertex
GVertex::incidentEdges	src/Data/Graph.h	/^        LinkedListT* incidentEdges;$/;"	m	class:GVertex
GVertex::label	include/Eternia/Data/Graph.h	/^        int label;$/;"	m	class:GVertex
GVertex::label	src/Data/Graph.h	/^        int label;$/;"	m	class:GVertex
GVertex::location	include/Eternia/Data/Graph.h	/^        vertex location;$/;"	m	class:GVertex
GVertex::location	src/Data/Graph.h	/^        vertex location;$/;"	m	class:GVertex
GVertex::vertexList	include/Eternia/Data/Graph.h	/^        LinkedListT* vertexList; \/\/ structure that stores this.$/;"	m	class:GVertex
GVertex::vertexList	src/Data/Graph.h	/^        LinkedListT* vertexList; \/\/ structure that stores this.$/;"	m	class:GVertex
GVertex::~GVertex	include/Eternia/Data/Graph.h	/^        virtual ~GVertex();$/;"	p	class:GVertex
GVertex::~GVertex	src/Data/Graph.h	/^        virtual ~GVertex();$/;"	p	class:GVertex
Gadolinium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Gadolinium = new Atom("Gadolinium", "Gd", 0, 6, 64, 94,63, 7.895,0.0000013, 0.011, 1585,3546, 0.236, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Gadolinium	src/Engineering/Chemistry/elementals.h	/^const Atom Gadolinium = new Atom("Gadolinium", "Gd", 0, 6, 64, 94,63, 7.895,0.0000013, 0.011, 1585,3546, 0.236, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Galaxy_H_	include/Eternia/Gamelogic/Environment/Space/Galaxy.h	/^#define Galaxy_H_$/;"	d
Galaxy_H_	src/Gamelogic/Environment/Space/Galaxy.h	/^#define Galaxy_H_$/;"	d
Galileo	include/Eternia/constants.h	/^        const double Galileo = centimeters\/second\/second;$/;"	m	namespace:physical::unit
Galileo	src/constants.h	/^        const double Galileo = centimeters\/second\/second;$/;"	m	namespace:physical::unit
Galileos	include/Eternia/constants.h	/^        const double Galileos = Galileo;$/;"	m	namespace:physical::unit
Galileos	src/constants.h	/^        const double Galileos = Galileo;$/;"	m	namespace:physical::unit
Gallium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Gallium = new Atom("Gallium", "Ga", 13, 4, 31, 39,30, 5.907,0.00000014, 0.029, 302.9146,2477, 0.371, 3, COLOR_Silver,ELEM_Poor);$/;"	v
Gallium	src/Engineering/Chemistry/elementals.h	/^const Atom Gallium = new Atom("Gallium", "Ga", 13, 4, 31, 39,30, 5.907,0.00000014, 0.029, 302.9146,2477, 0.371, 3, COLOR_Silver,ELEM_Poor);$/;"	v
Gauss	include/Eternia/constants.h	/^        const double Gauss = Tesla\/10000.0;$/;"	m	namespace:physical::unit
Gauss	src/constants.h	/^        const double Gauss = Tesla\/10000.0;$/;"	m	namespace:physical::unit
GeV	include/Eternia/constants.h	/^        const double GeV = 1000000000.0*eV;$/;"	m	namespace:physical::constant
GeV	src/constants.h	/^        const double GeV = 1000000000.0*eV;$/;"	m	namespace:physical::constant
Germanium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Germanium = new Atom("Germanium", "Ge", 14, 4, 32, 41,31, 5.323,0.0005, 0.06, 1211.4,3106, 0.32, 4, COLOR_Gray,ELEM_Metalloid);$/;"	v
Germanium	src/Engineering/Chemistry/elementals.h	/^const Atom Germanium = new Atom("Germanium", "Ge", 14, 4, 32, 41,31, 5.323,0.0005, 0.06, 1211.4,3106, 0.32, 4, COLOR_Gray,ELEM_Metalloid);$/;"	v
GetP2PPort	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int GetP2PPort(); \/\/ determines if this computer can become a P2P Server. If so, port above -1 will be assigned.$/;"	p	class:P2PManager
GetP2PPort	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int GetP2PPort(); \/\/ determines if this computer can become a P2P Server. If so, port above -1 will be assigned.$/;"	p	class:P2PManager
GetSizeOfType	src/Serialization/SpecificSerializer.cpp	/^int GetSizeOfType(PointerType* pt) {$/;"	f
Gilbert	include/Eternia/constants.h	/^        const double Gilbert = 0.795775*Amperes;$/;"	m	namespace:physical::unit
Gilbert	src/constants.h	/^        const double Gilbert = 0.795775*Amperes;$/;"	m	namespace:physical::unit
Gilberts	include/Eternia/constants.h	/^        const double Gilberts = Gilbert;$/;"	m	namespace:physical::unit
Gilberts	src/constants.h	/^        const double Gilberts = Gilbert;$/;"	m	namespace:physical::unit
GlobalMaxSubClients	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int GlobalMaxSubClients; \/\/ Global max # of clients.$/;"	m	class:P2PManager
GlobalMaxSubClients	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int GlobalMaxSubClients; \/\/ Global max # of clients.$/;"	m	class:P2PManager
GlobalMinSubClients	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int GlobalMinSubClients; \/\/ max # of clients before a sub-node is created.$/;"	m	class:P2PManager
GlobalMinSubClients	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int GlobalMinSubClients; \/\/ max # of clients before a sub-node is created.$/;"	m	class:P2PManager
Gluon_h_	include/Eternia/Engineering/Chemistry/Hadron/Quarks/Gluon.h	/^#define Gluon_h_$/;"	d
Gluon_h_	src/Engineering/Chemistry/Hadron/Quarks/Gluon.h	/^#define Gluon_h_$/;"	d
Gold	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Gold = new Atom("Gold", "Au", 11, 6, 79, 118,78, 19.282,0.000000022, 0.32, 1337.33,3129, 0.129, 5, COLOR_Gold,ELEM_Transition);$/;"	v
Gold	src/Engineering/Chemistry/elementals.h	/^const Atom Gold = new Atom("Gold", "Au", 11, 6, 79, 118,78, 19.282,0.000000022, 0.32, 1337.33,3129, 0.129, 5, COLOR_Gold,ELEM_Transition);$/;"	v
Government	include/Eternia/Gamelogic/Social/Government/Government.h	/^        Government();$/;"	p	class:Government
Government	include/Eternia/Gamelogic/Social/Government/Government.h	/^class Government {$/;"	c
Government	src/Gamelogic/Social/Government/Government.h	/^        Government();$/;"	p	class:Government
Government	src/Gamelogic/Social/Government/Government.h	/^class Government {$/;"	c
Government::Government	include/Eternia/Gamelogic/Social/Government/Government.h	/^        Government();$/;"	p	class:Government
Government::Government	src/Gamelogic/Social/Government/Government.h	/^        Government();$/;"	p	class:Government
Government::branches	include/Eternia/Gamelogic/Social/Government/Government.h	/^        LinkedList<GovernmentBranch> branches; \/\/ list of government power sectors (branches of government)$/;"	m	class:Government
Government::branches	src/Gamelogic/Social/Government/Government.h	/^        LinkedList<GovernmentBranch> branches; \/\/ list of government power sectors (branches of government)$/;"	m	class:Government
Government::citizens	include/Eternia/Gamelogic/Social/Government/Government.h	/^        LinkedList<Citizen> citizens; \/\/ list of citizens living in this government (Effectively online)$/;"	m	class:Government
Government::citizens	src/Gamelogic/Social/Government/Government.h	/^        LinkedList<Citizen> citizens; \/\/ list of citizens living in this government (Effectively online)$/;"	m	class:Government
Government::taxes	include/Eternia/Gamelogic/Social/Government/Government.h	/^        Tax taxes;$/;"	m	class:Government
Government::taxes	src/Gamelogic/Social/Government/Government.h	/^        Tax taxes;$/;"	m	class:Government
GovernmentBranch	include/Eternia/Gamelogic/Social/Government/GovernmentBranch.h	/^        GovernmentBranch();$/;"	p	class:GovernmentBranch
GovernmentBranch	include/Eternia/Gamelogic/Social/Government/GovernmentBranch.h	/^class GovernmentBranch {$/;"	c
GovernmentBranch	src/Gamelogic/Social/Government/GovernmentBranch.h	/^        GovernmentBranch();$/;"	p	class:GovernmentBranch
GovernmentBranch	src/Gamelogic/Social/Government/GovernmentBranch.h	/^class GovernmentBranch {$/;"	c
GovernmentBranch::GovernmentBranch	include/Eternia/Gamelogic/Social/Government/GovernmentBranch.h	/^        GovernmentBranch();$/;"	p	class:GovernmentBranch
GovernmentBranch::GovernmentBranch	src/Gamelogic/Social/Government/GovernmentBranch.h	/^        GovernmentBranch();$/;"	p	class:GovernmentBranch
Government_Branch	include/Eternia/Gamelogic/Social/Government/GovernmentBranch.h	/^#define Government_Branch$/;"	d
Government_Branch	src/Gamelogic/Social/Government/GovernmentBranch.h	/^#define Government_Branch$/;"	d
Government_h	include/Eternia/Gamelogic/Social/Government/Government.h	/^#define Government_h$/;"	d
Government_h	src/Gamelogic/Social/Government/Government.h	/^#define Government_h$/;"	d
Graph	include/Eternia/Algorithm/Pathing/DijkstraPath.hpp	/^class Graph;$/;"	x
Graph	include/Eternia/Data/Graph.h	/^        Graph();$/;"	p	class:Graph
Graph	include/Eternia/Data/Graph.h	/^class Graph {$/;"	c
Graph	src/Algorithm/Pathing/DijkstraPath.hpp	/^class Graph;$/;"	x
Graph	src/Data/Graph.h	/^        Graph();$/;"	p	class:Graph
Graph	src/Data/Graph.h	/^class Graph {$/;"	c
Graph::AdjacencyMatrix	include/Eternia/Data/Graph.h	/^        GEdge*** AdjacencyMatrix;$/;"	m	class:Graph
Graph::AdjacencyMatrix	src/Data/Graph.h	/^        GEdge*** AdjacencyMatrix;$/;"	m	class:Graph
Graph::Graph	include/Eternia/Data/Graph.h	/^        Graph();$/;"	p	class:Graph
Graph::Graph	src/Data/Graph.h	/^        Graph();$/;"	p	class:Graph
Graph::createAdjMatrix	include/Eternia/Data/Graph.h	/^        void createAdjMatrix(); \/\/ Computes the adjacency Matrix for each vertex.$/;"	p	class:Graph
Graph::createAdjMatrix	src/Data/Graph.h	/^        void createAdjMatrix(); \/\/ Computes the adjacency Matrix for each vertex.$/;"	p	class:Graph
Graph::edges	include/Eternia/Data/Graph.h	/^        LinkedListT* edges(); \/\/ returns the full list of edges$/;"	p	class:Graph
Graph::edges	src/Data/Graph.h	/^        LinkedListT* edges(); \/\/ returns the full list of edges$/;"	p	class:Graph
Graph::edgesList	include/Eternia/Data/Graph.h	/^        LinkedListT* edgesList;$/;"	m	class:Graph
Graph::edgesList	src/Data/Graph.h	/^        LinkedListT* edgesList;$/;"	m	class:Graph
Graph::eraseEdge	include/Eternia/Data/Graph.h	/^        void eraseEdge(GEdge* e); \/\/ erase an edge$/;"	p	class:Graph
Graph::eraseEdge	src/Data/Graph.h	/^        void eraseEdge(GEdge* e); \/\/ erase an edge$/;"	p	class:Graph
Graph::eraseVertex	include/Eternia/Data/Graph.h	/^        void eraseVertex(GVertex* v); \/\/ remove all related edges$/;"	p	class:Graph
Graph::eraseVertex	src/Data/Graph.h	/^        void eraseVertex(GVertex* v); \/\/ remove all related edges$/;"	p	class:Graph
Graph::insertEdge	include/Eternia/Data/Graph.h	/^        void insertEdge(GEdge* e); \/\/ inserts an edge if it doesn't exist.$/;"	p	class:Graph
Graph::insertEdge	src/Data/Graph.h	/^        void insertEdge(GEdge* e); \/\/ inserts an edge if it doesn't exist.$/;"	p	class:Graph
Graph::insertVertex	include/Eternia/Data/Graph.h	/^        void insertVertex(GVertex* o); \/\/ inserts a vertex if it doesn't exist.$/;"	p	class:Graph
Graph::insertVertex	src/Data/Graph.h	/^        void insertVertex(GVertex* o); \/\/ inserts a vertex if it doesn't exist.$/;"	p	class:Graph
Graph::lookupEdges	include/Eternia/Data/Graph.h	/^        HashMap<GEdge>* lookupEdges;$/;"	m	class:Graph
Graph::lookupEdges	src/Data/Graph.h	/^        HashMap<GEdge>* lookupEdges;$/;"	m	class:Graph
Graph::lookupVerticies	include/Eternia/Data/Graph.h	/^        HashMap<GVertex>* lookupVerticies;$/;"	m	class:Graph
Graph::lookupVerticies	src/Data/Graph.h	/^        HashMap<GVertex>* lookupVerticies;$/;"	m	class:Graph
Graph::makeEdge	include/Eternia/Data/Graph.h	/^        GEdge* makeEdge(GVertex* v1, GVertex* v2, int len); \/\/ creates an edge if it doesn't exist.$/;"	p	class:Graph
Graph::makeEdge	src/Data/Graph.h	/^        GEdge* makeEdge(GVertex* v1, GVertex* v2, int len); \/\/ creates an edge if it doesn't exist.$/;"	p	class:Graph
Graph::verticies	include/Eternia/Data/Graph.h	/^        LinkedListT* verticies(); \/\/ returns the full list of verticies$/;"	p	class:Graph
Graph::verticies	src/Data/Graph.h	/^        LinkedListT* verticies(); \/\/ returns the full list of verticies$/;"	p	class:Graph
Graph::verticiesList	include/Eternia/Data/Graph.h	/^        LinkedListT* verticiesList;$/;"	m	class:Graph
Graph::verticiesList	src/Data/Graph.h	/^        LinkedListT* verticiesList;$/;"	m	class:Graph
Graph::~Graph	include/Eternia/Data/Graph.h	/^        virtual ~Graph();$/;"	p	class:Graph
Graph::~Graph	src/Data/Graph.h	/^        virtual ~Graph();$/;"	p	class:Graph
Graph_H_	include/Eternia/Data/Graph.h	/^#define Graph_H_$/;"	d
Graph_H_	src/Data/Graph.h	/^#define Graph_H_$/;"	d
Gravity	include/Eternia/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
Gravity	src/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
Gray	include/Eternia/constants.h	/^            const double Gray = Joule\/kilogram;$/;"	m	namespace:physical::unit::dose
Gray	src/constants.h	/^            const double Gray = Joule\/kilogram;$/;"	m	namespace:physical::unit::dose
Grays	include/Eternia/constants.h	/^            const double Grays = Gray;$/;"	m	namespace:physical::unit::dose
Grays	src/constants.h	/^            const double Grays = Gray;$/;"	m	namespace:physical::unit::dose
Greater	include/Eternia/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	e	enum:MOperator
Greater	src/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	e	enum:MOperator
Gunn_DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Gunn_DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Gunters	include/Eternia/constants.h	/^        namespace Gunters {$/;"	n	namespace:physical::unit
Gunters	src/constants.h	/^        namespace Gunters {$/;"	n	namespace:physical::unit
Gy	include/Eternia/constants.h	/^            const double Gy = Gray;$/;"	m	namespace:physical::unit::dose
Gy	src/constants.h	/^            const double Gy = Gray;$/;"	m	namespace:physical::unit::dose
H	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline uint4 H(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
H	include/Eternia/constants.h	/^        const double H = Henry;$/;"	m	namespace:physical::unit
H	src/Algorithm/Cryptography/md5.cpp	/^inline MD5::uint4 MD5::H(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5
H	src/Algorithm/Cryptography/md5.h	/^        static inline uint4 H(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
H	src/constants.h	/^        const double H = Henry;$/;"	m	namespace:physical::unit
HARDPOINT_H_	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^#define HARDPOINT_H_$/;"	d
HARDPOINT_H_	src/Gamelogic/CoreSystems/Hardpoint.h	/^#define HARDPOINT_H_$/;"	d
HASHTABLE_H_	include/Eternia/Data/HashTable.h	/^#define HASHTABLE_H_$/;"	d
HASHTABLE_H_	src/Data/HashTable.h	/^#define HASHTABLE_H_$/;"	d
HBridge	include/Eternia/Engineering/Electrical/Components/HBridge.h	/^        HBridge();$/;"	p	class:HBridge
HBridge	include/Eternia/Engineering/Electrical/Components/HBridge.h	/^class HBridge : private Component {$/;"	c
HBridge	src/Engineering/Electrical/Components/HBridge.h	/^        HBridge();$/;"	p	class:HBridge
HBridge	src/Engineering/Electrical/Components/HBridge.h	/^class HBridge : private Component {$/;"	c
HBridge::HBridge	include/Eternia/Engineering/Electrical/Components/HBridge.h	/^        HBridge();$/;"	p	class:HBridge
HBridge::HBridge	src/Engineering/Electrical/Components/HBridge.h	/^        HBridge();$/;"	p	class:HBridge
HBridge::tick	include/Eternia/Engineering/Electrical/Components/HBridge.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:HBridge
HBridge::tick	src/Engineering/Electrical/Components/HBridge.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:HBridge
HBridge::~HBridge	include/Eternia/Engineering/Electrical/Components/HBridge.h	/^        virtual ~HBridge();$/;"	p	class:HBridge
HBridge::~HBridge	src/Engineering/Electrical/Components/HBridge.h	/^        virtual ~HBridge();$/;"	p	class:HBridge
HBridge_h_	include/Eternia/Engineering/Electrical/Components/HBridge.h	/^#define HBridge_h_$/;"	d
HBridge_h_	src/Engineering/Electrical/Components/HBridge.h	/^#define HBridge_h_$/;"	d
HDELETE	include/Eternia/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HDELETE	src/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HEAP_H_	include/Eternia/Data/Heap.h	/^#define HEAP_H_$/;"	d
HEAP_H_	src/Data/Heap.h	/^#define HEAP_H_$/;"	d
HEX	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HGET	include/Eternia/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HGET	src/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HH	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline void HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
HH	src/Algorithm/Cryptography/md5.cpp	/^inline void MD5::HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5
HH	src/Algorithm/Cryptography/md5.h	/^        static inline void HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
HHEAD	include/Eternia/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HHEAD	src/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HMTLREQUEST_H_	include/Eternia/WebFramework/Network/Types/HTMLRequest.h	/^#define HMTLREQUEST_H_$/;"	d
HMTLREQUEST_H_	src/WebFramework/Network/Types/HTMLRequest.h	/^#define HMTLREQUEST_H_$/;"	d
HMTLRESPONSE_H_	include/Eternia/WebFramework/Network/Types/HTMLResponse.h	/^#define HMTLRESPONSE_H_$/;"	d
HMTLRESPONSE_H_	src/WebFramework/Network/Types/HTMLResponse.h	/^#define HMTLRESPONSE_H_$/;"	d
HOPTIONS	include/Eternia/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HOPTIONS	src/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HP	include/Eternia/constants.h	/^        const double HP = horsepower;$/;"	m	namespace:physical::unit
HP	src/constants.h	/^        const double HP = horsepower;$/;"	m	namespace:physical::unit
HPATCH	include/Eternia/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HPATCH	src/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HPOST	include/Eternia/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HPOST	src/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HPTYPE	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^enum HPTYPE {HPT_FIXED, HPT_2GIMBAL, HPT_3GIMBAL};$/;"	g
HPTYPE	src/Gamelogic/CoreSystems/Hardpoint.h	/^enum HPTYPE {HPT_FIXED, HPT_2GIMBAL, HPT_3GIMBAL};$/;"	g
HPT_2GIMBAL	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^enum HPTYPE {HPT_FIXED, HPT_2GIMBAL, HPT_3GIMBAL};$/;"	e	enum:HPTYPE
HPT_2GIMBAL	src/Gamelogic/CoreSystems/Hardpoint.h	/^enum HPTYPE {HPT_FIXED, HPT_2GIMBAL, HPT_3GIMBAL};$/;"	e	enum:HPTYPE
HPT_3GIMBAL	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^enum HPTYPE {HPT_FIXED, HPT_2GIMBAL, HPT_3GIMBAL};$/;"	e	enum:HPTYPE
HPT_3GIMBAL	src/Gamelogic/CoreSystems/Hardpoint.h	/^enum HPTYPE {HPT_FIXED, HPT_2GIMBAL, HPT_3GIMBAL};$/;"	e	enum:HPTYPE
HPT_FIXED	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^enum HPTYPE {HPT_FIXED, HPT_2GIMBAL, HPT_3GIMBAL};$/;"	e	enum:HPTYPE
HPT_FIXED	src/Gamelogic/CoreSystems/Hardpoint.h	/^enum HPTYPE {HPT_FIXED, HPT_2GIMBAL, HPT_3GIMBAL};$/;"	e	enum:HPTYPE
HPUT	include/Eternia/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HPUT	src/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	e	enum:HTMLMETHOD
HTEntry	include/Eternia/Data/HashMap.hpp	/^        HTEntry() {$/;"	f	class:HTEntry
HTEntry	include/Eternia/Data/HashMap.hpp	/^        HTEntry(CharString key, T* data,int size) {$/;"	f	class:HTEntry
HTEntry	include/Eternia/Data/HashMap.hpp	/^        HTEntry(long id_, T* data,int size) {$/;"	f	class:HTEntry
HTEntry	include/Eternia/Data/HashMap.hpp	/^class HTEntry {$/;"	c
HTEntry	include/Eternia/Data/HashTable.h	/^        HTEntry();$/;"	p	class:HTEntry
HTEntry	include/Eternia/Data/HashTable.h	/^        HTEntry(CharString key, CharString data);$/;"	p	class:HTEntry
HTEntry	include/Eternia/Data/HashTable.h	/^class HTEntry {$/;"	c
HTEntry	src/Data/HashMap.hpp	/^        HTEntry() {$/;"	f	class:HTEntry
HTEntry	src/Data/HashMap.hpp	/^        HTEntry(CharString key, T* data,int size) {$/;"	f	class:HTEntry
HTEntry	src/Data/HashMap.hpp	/^        HTEntry(long id_, T* data,int size) {$/;"	f	class:HTEntry
HTEntry	src/Data/HashMap.hpp	/^class HTEntry {$/;"	c
HTEntry	src/Data/HashTable.cpp	/^HTEntry::HTEntry() {}$/;"	f	class:HTEntry
HTEntry	src/Data/HashTable.cpp	/^HTEntry::HTEntry(CharString key, CharString data) {$/;"	f	class:HTEntry
HTEntry	src/Data/HashTable.h	/^        HTEntry();$/;"	p	class:HTEntry
HTEntry	src/Data/HashTable.h	/^        HTEntry(CharString key, CharString data);$/;"	p	class:HTEntry
HTEntry	src/Data/HashTable.h	/^class HTEntry {$/;"	c
HTEntry::HTEntry	include/Eternia/Data/HashMap.hpp	/^        HTEntry() {$/;"	f	class:HTEntry
HTEntry::HTEntry	include/Eternia/Data/HashMap.hpp	/^        HTEntry(CharString key, T* data,int size) {$/;"	f	class:HTEntry
HTEntry::HTEntry	include/Eternia/Data/HashMap.hpp	/^        HTEntry(long id_, T* data,int size) {$/;"	f	class:HTEntry
HTEntry::HTEntry	include/Eternia/Data/HashTable.h	/^        HTEntry();$/;"	p	class:HTEntry
HTEntry::HTEntry	include/Eternia/Data/HashTable.h	/^        HTEntry(CharString key, CharString data);$/;"	p	class:HTEntry
HTEntry::HTEntry	src/Data/HashMap.hpp	/^        HTEntry() {$/;"	f	class:HTEntry
HTEntry::HTEntry	src/Data/HashMap.hpp	/^        HTEntry(CharString key, T* data,int size) {$/;"	f	class:HTEntry
HTEntry::HTEntry	src/Data/HashMap.hpp	/^        HTEntry(long id_, T* data,int size) {$/;"	f	class:HTEntry
HTEntry::HTEntry	src/Data/HashTable.cpp	/^HTEntry::HTEntry() {}$/;"	f	class:HTEntry
HTEntry::HTEntry	src/Data/HashTable.cpp	/^HTEntry::HTEntry(CharString key, CharString data) {$/;"	f	class:HTEntry
HTEntry::HTEntry	src/Data/HashTable.h	/^        HTEntry();$/;"	p	class:HTEntry
HTEntry::HTEntry	src/Data/HashTable.h	/^        HTEntry(CharString key, CharString data);$/;"	p	class:HTEntry
HTEntry::add	include/Eternia/Data/HashMap.hpp	/^        void add(HTEntry<T>* entry) {$/;"	f	class:HTEntry
HTEntry::add	include/Eternia/Data/HashTable.h	/^        void add(HTEntry* entry); \/\/ add to the list.$/;"	p	class:HTEntry
HTEntry::add	src/Data/HashMap.hpp	/^        void add(HTEntry<T>* entry) {$/;"	f	class:HTEntry
HTEntry::add	src/Data/HashTable.cpp	/^void HTEntry::add(HTEntry* entry) {$/;"	f	class:HTEntry
HTEntry::add	src/Data/HashTable.h	/^        void add(HTEntry* entry); \/\/ add to the list.$/;"	p	class:HTEntry
HTEntry::d	include/Eternia/Data/HashMap.hpp	/^        T *d;$/;"	m	class:HTEntry
HTEntry::d	include/Eternia/Data/HashTable.h	/^        CharString k, d;$/;"	m	class:HTEntry
HTEntry::d	src/Data/HashMap.hpp	/^        T *d;$/;"	m	class:HTEntry
HTEntry::d	src/Data/HashTable.h	/^        CharString k, d;$/;"	m	class:HTEntry
HTEntry::get	include/Eternia/Data/HashMap.hpp	/^        T* get(CharString key) {$/;"	f	class:HTEntry
HTEntry::get	include/Eternia/Data/HashMap.hpp	/^        T* get(long key) {$/;"	f	class:HTEntry
HTEntry::get	include/Eternia/Data/HashTable.h	/^        CharString get(CharString key); \/\/ get using EXACT key values.$/;"	p	class:HTEntry
HTEntry::get	src/Data/HashMap.hpp	/^        T* get(CharString key) {$/;"	f	class:HTEntry
HTEntry::get	src/Data/HashMap.hpp	/^        T* get(long key) {$/;"	f	class:HTEntry
HTEntry::get	src/Data/HashTable.cpp	/^CharString HTEntry::get(CharString key) {$/;"	f	class:HTEntry
HTEntry::get	src/Data/HashTable.h	/^        CharString get(CharString key); \/\/ get using EXACT key values.$/;"	p	class:HTEntry
HTEntry::getData	include/Eternia/Data/HashMap.hpp	/^        T* getData() {$/;"	f	class:HTEntry
HTEntry::getData	include/Eternia/Data/HashTable.h	/^        CharString getData();$/;"	p	class:HTEntry
HTEntry::getData	src/Data/HashMap.hpp	/^        T* getData() {$/;"	f	class:HTEntry
HTEntry::getData	src/Data/HashTable.cpp	/^CharString HTEntry::getData() {$/;"	f	class:HTEntry
HTEntry::getData	src/Data/HashTable.h	/^        CharString getData();$/;"	p	class:HTEntry
HTEntry::getID	include/Eternia/Data/HashMap.hpp	/^        int getID() {$/;"	f	class:HTEntry
HTEntry::getID	include/Eternia/Data/HashTable.h	/^        int getID();$/;"	p	class:HTEntry
HTEntry::getID	src/Data/HashMap.hpp	/^        int getID() {$/;"	f	class:HTEntry
HTEntry::getID	src/Data/HashTable.cpp	/^int HTEntry::getID() {$/;"	f	class:HTEntry
HTEntry::getID	src/Data/HashTable.h	/^        int getID();$/;"	p	class:HTEntry
HTEntry::getKey	include/Eternia/Data/HashMap.hpp	/^        CharString getKey() {$/;"	f	class:HTEntry
HTEntry::getKey	include/Eternia/Data/HashTable.h	/^        CharString getKey();$/;"	p	class:HTEntry
HTEntry::getKey	src/Data/HashMap.hpp	/^        CharString getKey() {$/;"	f	class:HTEntry
HTEntry::getKey	src/Data/HashTable.cpp	/^CharString HTEntry::getKey() {$/;"	f	class:HTEntry
HTEntry::getKey	src/Data/HashTable.h	/^        CharString getKey();$/;"	p	class:HTEntry
HTEntry::id	include/Eternia/Data/HashMap.hpp	/^        int id;$/;"	m	class:HTEntry
HTEntry::id	include/Eternia/Data/HashTable.h	/^        unsigned int id;$/;"	m	class:HTEntry
HTEntry::id	src/Data/HashMap.hpp	/^        int id;$/;"	m	class:HTEntry
HTEntry::id	src/Data/HashTable.h	/^        unsigned int id;$/;"	m	class:HTEntry
HTEntry::k	include/Eternia/Data/HashMap.hpp	/^        CharString k;$/;"	m	class:HTEntry
HTEntry::k	include/Eternia/Data/HashTable.h	/^        CharString k, d;$/;"	m	class:HTEntry
HTEntry::k	src/Data/HashMap.hpp	/^        CharString k;$/;"	m	class:HTEntry
HTEntry::k	src/Data/HashTable.h	/^        CharString k, d;$/;"	m	class:HTEntry
HTEntry::next	include/Eternia/Data/HashMap.hpp	/^        HTEntry<T>* next; \/\/ for over-load of collisions. (separate chaining)$/;"	m	class:HTEntry
HTEntry::next	include/Eternia/Data/HashTable.h	/^        HTEntry* next;$/;"	m	class:HTEntry
HTEntry::next	src/Data/HashMap.hpp	/^        HTEntry<T>* next; \/\/ for over-load of collisions. (separate chaining)$/;"	m	class:HTEntry
HTEntry::next	src/Data/HashTable.h	/^        HTEntry* next;$/;"	m	class:HTEntry
HTEntry::remove	include/Eternia/Data/HashMap.hpp	/^        T* remove(CharString* key) {$/;"	f	class:HTEntry
HTEntry::remove	src/Data/HashMap.hpp	/^        T* remove(CharString* key) {$/;"	f	class:HTEntry
HTEntry::reset	include/Eternia/Data/HashMap.hpp	/^        void reset() {$/;"	f	class:HTEntry
HTEntry::reset	src/Data/HashMap.hpp	/^        void reset() {$/;"	f	class:HTEntry
HTEntry::set	include/Eternia/Data/HashMap.hpp	/^        void set(HTEntry<T>* entry) {$/;"	f	class:HTEntry
HTEntry::set	include/Eternia/Data/HashTable.h	/^        void set(HTEntry* entry); \/\/ set value directly.$/;"	p	class:HTEntry
HTEntry::set	src/Data/HashMap.hpp	/^        void set(HTEntry<T>* entry) {$/;"	f	class:HTEntry
HTEntry::set	src/Data/HashTable.cpp	/^void HTEntry::set(HTEntry* entry) {$/;"	f	class:HTEntry
HTEntry::set	src/Data/HashTable.h	/^        void set(HTEntry* entry); \/\/ set value directly.$/;"	p	class:HTEntry
HTEntry::setID	include/Eternia/Data/HashMap.hpp	/^        void setID() {$/;"	f	class:HTEntry
HTEntry::setID	include/Eternia/Data/HashTable.h	/^        void setID(); \/\/ h(k), hashing function.$/;"	p	class:HTEntry
HTEntry::setID	src/Data/HashMap.hpp	/^        void setID() {$/;"	f	class:HTEntry
HTEntry::setID	src/Data/HashTable.cpp	/^void HTEntry::setID() {$/;"	f	class:HTEntry
HTEntry::setID	src/Data/HashTable.h	/^        void setID(); \/\/ h(k), hashing function.$/;"	p	class:HTEntry
HTEntry::size	include/Eternia/Data/HashMap.hpp	/^        unsigned long size;$/;"	m	class:HTEntry
HTEntry::size	src/Data/HashMap.hpp	/^        unsigned long size;$/;"	m	class:HTEntry
HTMLMETHOD	include/Eternia/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	g
HTMLMETHOD	src/WebFramework/Network/HTMLServer.h	/^enum HTMLMETHOD {HGET, HPOST, HDELETE, HPUT, HPATCH, HHEAD, HOPTIONS};$/;"	g
HTMLParser	include/Eternia/Parsing/HTMLParser.h	/^class HTMLParser {$/;"	c
HTMLParser	src/Parsing/HTMLParser.h	/^class HTMLParser {$/;"	c
HTMLRequest	include/Eternia/WebFramework/Network/Types/HTMLRequest.h	/^        HTMLRequest(CharString* HMTL_raw); \/\/ Raw input from the HMTL Server, auto-calculates the header\/body$/;"	p	class:HTMLResponse
HTMLRequest	src/WebFramework/Network/Types/HTMLRequest.h	/^        HTMLRequest(CharString* HMTL_raw); \/\/ Raw input from the HMTL Server, auto-calculates the header\/body$/;"	p	class:HTMLResponse
HTMLResponse	include/Eternia/WebFramework/Network/Types/HTMLRequest.h	/^class HTMLResponse {$/;"	c
HTMLResponse	include/Eternia/WebFramework/Network/Types/HTMLResponse.h	/^        HTMLResponse();$/;"	p	class:HTMLResponse
HTMLResponse	include/Eternia/WebFramework/Network/Types/HTMLResponse.h	/^class HTMLResponse {$/;"	c
HTMLResponse	src/WebFramework/Network/Types/HTMLRequest.h	/^class HTMLResponse {$/;"	c
HTMLResponse	src/WebFramework/Network/Types/HTMLResponse.h	/^        HTMLResponse();$/;"	p	class:HTMLResponse
HTMLResponse	src/WebFramework/Network/Types/HTMLResponse.h	/^class HTMLResponse {$/;"	c
HTMLResponse::HTMLRequest	include/Eternia/WebFramework/Network/Types/HTMLRequest.h	/^        HTMLRequest(CharString* HMTL_raw); \/\/ Raw input from the HMTL Server, auto-calculates the header\/body$/;"	p	class:HTMLResponse
HTMLResponse::HTMLRequest	src/WebFramework/Network/Types/HTMLRequest.h	/^        HTMLRequest(CharString* HMTL_raw); \/\/ Raw input from the HMTL Server, auto-calculates the header\/body$/;"	p	class:HTMLResponse
HTMLResponse::HTMLResponse	include/Eternia/WebFramework/Network/Types/HTMLResponse.h	/^        HTMLResponse();$/;"	p	class:HTMLResponse
HTMLResponse::HTMLResponse	src/WebFramework/Network/Types/HTMLResponse.h	/^        HTMLResponse();$/;"	p	class:HTMLResponse
HTMLResponse::body	include/Eternia/WebFramework/Network/Types/HTMLRequest.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
HTMLResponse::body	include/Eternia/WebFramework/Network/Types/HTMLResponse.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
HTMLResponse::body	src/WebFramework/Network/Types/HTMLRequest.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
HTMLResponse::body	src/WebFramework/Network/Types/HTMLResponse.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
HTMLResponse::getHeader	include/Eternia/WebFramework/Network/Types/HTMLRequest.h	/^        unordered_map<string,int> getHeader(); \/\/ return the header$/;"	p	class:HTMLResponse
HTMLResponse::getHeader	src/WebFramework/Network/Types/HTMLRequest.h	/^        unordered_map<string,int> getHeader(); \/\/ return the header$/;"	p	class:HTMLResponse
HTMLResponse::head	include/Eternia/WebFramework/Network/Types/HTMLRequest.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
HTMLResponse::head	include/Eternia/WebFramework/Network/Types/HTMLResponse.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
HTMLResponse::head	src/WebFramework/Network/Types/HTMLRequest.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
HTMLResponse::head	src/WebFramework/Network/Types/HTMLResponse.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
HTMLResponse::raw	include/Eternia/WebFramework/Network/Types/HTMLRequest.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
HTMLResponse::raw	include/Eternia/WebFramework/Network/Types/HTMLResponse.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
HTMLResponse::raw	src/WebFramework/Network/Types/HTMLRequest.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
HTMLResponse::raw	src/WebFramework/Network/Types/HTMLResponse.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
HTMLSERVER_H_	include/Eternia/WebFramework/Network/HTMLServer.h	/^#define HTMLSERVER_H_$/;"	d
HTMLSERVER_H_	src/WebFramework/Network/HTMLServer.h	/^#define HTMLSERVER_H_$/;"	d
HTMLServer	include/Eternia/WebFramework/Network/HTMLServer.h	/^    HTMLServer(SocketServerType serverType,$/;"	p	class:HTMLServer
HTMLServer	include/Eternia/WebFramework/Network/HTMLServer.h	/^class HTMLServer {$/;"	c
HTMLServer	src/WebFramework/Network/HTMLServer.h	/^    HTMLServer(SocketServerType serverType,$/;"	p	class:HTMLServer
HTMLServer	src/WebFramework/Network/HTMLServer.h	/^class HTMLServer {$/;"	c
HTMLServer::HTMLServer	include/Eternia/WebFramework/Network/HTMLServer.h	/^    HTMLServer(SocketServerType serverType,$/;"	p	class:HTMLServer
HTMLServer::HTMLServer	src/WebFramework/Network/HTMLServer.h	/^    HTMLServer(SocketServerType serverType,$/;"	p	class:HTMLServer
HTMLServer::~HTMLServer	include/Eternia/WebFramework/Network/HTMLServer.h	/^    virtual ~HTMLServer();$/;"	p	class:HTMLServer
HTMLServer::~HTMLServer	src/WebFramework/Network/HTMLServer.h	/^    virtual ~HTMLServer();$/;"	p	class:HTMLServer
HTMLStyle	include/Eternia/Parsing/HTMLTags.h	/^class HTMLStyle {$/;"	c
HTMLStyle	src/Parsing/HTMLTags.h	/^class HTMLStyle {$/;"	c
HTMLTag	include/Eternia/Parsing/HTMLTags.h	/^class HTMLTag {$/;"	c
HTMLTag	src/Parsing/HTMLTags.h	/^class HTMLTag {$/;"	c
HTMLTagType	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	g
HTMLTagType	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	g
HTML_Parser_h_	include/Eternia/Parsing/HTMLParser.h	/^#define HTML_Parser_h_$/;"	d
HTML_Parser_h_	src/Parsing/HTMLParser.h	/^#define HTML_Parser_h_$/;"	d
HTML_Tags_h_	include/Eternia/Parsing/HTMLTags.h	/^#define HTML_Tags_h_$/;"	d
HTML_Tags_h_	src/Parsing/HTMLTags.h	/^#define HTML_Tags_h_$/;"	d
HYPERLANE_FTL_H_	include/Eternia/Gamelogic/Ship/FTL/Hyperlane.h	/^#define HYPERLANE_FTL_H_$/;"	d
HYPERLANE_FTL_H_	src/Gamelogic/Ship/FTL/Hyperlane.h	/^#define HYPERLANE_FTL_H_$/;"	d
Hafnium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Hafnium = new Atom("Hafnium", "Hf", 4, 6, 72, 106,71, 13.31,0.0000003, 0.023, 2506,4876, 0.144, 4, COLOR_Gray,ELEM_Transition);$/;"	v
Hafnium	src/Engineering/Chemistry/elementals.h	/^const Atom Hafnium = new Atom("Hafnium", "Hf", 4, 6, 72, 106,71, 13.31,0.0000003, 0.023, 2506,4876, 0.144, 4, COLOR_Gray,ELEM_Transition);$/;"	v
HardPoint	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	HardPoint();$/;"	p	class:HardPoint
HardPoint	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^class HardPoint{$/;"	c
HardPoint	src/Gamelogic/CoreSystems/Hardpoint.h	/^	HardPoint();$/;"	p	class:HardPoint
HardPoint	src/Gamelogic/CoreSystems/Hardpoint.h	/^class HardPoint{$/;"	c
HardPoint2Gimbal	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	HardPoint2Gimbal();$/;"	p	class:HardPoint2Gimbal
HardPoint2Gimbal	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^class HardPoint2Gimbal : public HardPoint{$/;"	c
HardPoint2Gimbal	src/Gamelogic/CoreSystems/Hardpoint.h	/^	HardPoint2Gimbal();$/;"	p	class:HardPoint2Gimbal
HardPoint2Gimbal	src/Gamelogic/CoreSystems/Hardpoint.h	/^class HardPoint2Gimbal : public HardPoint{$/;"	c
HardPoint2Gimbal::HardPoint2Gimbal	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	HardPoint2Gimbal();$/;"	p	class:HardPoint2Gimbal
HardPoint2Gimbal::HardPoint2Gimbal	src/Gamelogic/CoreSystems/Hardpoint.h	/^	HardPoint2Gimbal();$/;"	p	class:HardPoint2Gimbal
HardPoint2Gimbal::angleX	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	float angleX; \/\/ Angle turret yaw  (Max is 180 degrees)$/;"	m	class:HardPoint2Gimbal
HardPoint2Gimbal::angleX	src/Gamelogic/CoreSystems/Hardpoint.h	/^	float angleX; \/\/ Angle turret yaw  (Max is 180 degrees)$/;"	m	class:HardPoint2Gimbal
HardPoint2Gimbal::angleY	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	float angleY; \/\/ Angle turret pitch (Max is 359.999~ degrees)$/;"	m	class:HardPoint2Gimbal
HardPoint2Gimbal::angleY	src/Gamelogic/CoreSystems/Hardpoint.h	/^	float angleY; \/\/ Angle turret pitch (Max is 359.999~ degrees)$/;"	m	class:HardPoint2Gimbal
HardPoint2Gimbal::tick2	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	void tick2(double time); \/\/ tick amount of time$/;"	p	class:HardPoint2Gimbal
HardPoint2Gimbal::tick2	src/Gamelogic/CoreSystems/Hardpoint.h	/^	void tick2(double time); \/\/ tick amount of time$/;"	p	class:HardPoint2Gimbal
HardPoint2Gimbal::torqueX	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	float torqueX; \/\/ Torque also includes the Y-axis turning mechanism's mass.$/;"	m	class:HardPoint2Gimbal
HardPoint2Gimbal::torqueX	src/Gamelogic/CoreSystems/Hardpoint.h	/^	float torqueX; \/\/ Torque also includes the Y-axis turning mechanism's mass.$/;"	m	class:HardPoint2Gimbal
HardPoint2Gimbal::torqueY	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	float torqueY; \/\/ Torque only includes the weapon's mass.$/;"	m	class:HardPoint2Gimbal
HardPoint2Gimbal::torqueY	src/Gamelogic/CoreSystems/Hardpoint.h	/^	float torqueY; \/\/ Torque only includes the weapon's mass.$/;"	m	class:HardPoint2Gimbal
HardPoint::HardPoint	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	HardPoint();$/;"	p	class:HardPoint
HardPoint::HardPoint	src/Gamelogic/CoreSystems/Hardpoint.h	/^	HardPoint();$/;"	p	class:HardPoint
HashMap	include/Eternia/Data/HashMap.hpp	/^        HashMap() {$/;"	f	class:HashMap
HashMap	include/Eternia/Data/HashMap.hpp	/^        HashMap(int max) {$/;"	f	class:HashMap
HashMap	include/Eternia/Data/HashMap.hpp	/^class HashMap {$/;"	c
HashMap	src/Data/HashMap.hpp	/^        HashMap() {$/;"	f	class:HashMap
HashMap	src/Data/HashMap.hpp	/^        HashMap(int max) {$/;"	f	class:HashMap
HashMap	src/Data/HashMap.hpp	/^class HashMap {$/;"	c
HashMap::HashMap	include/Eternia/Data/HashMap.hpp	/^        HashMap() {$/;"	f	class:HashMap
HashMap::HashMap	include/Eternia/Data/HashMap.hpp	/^        HashMap(int max) {$/;"	f	class:HashMap
HashMap::HashMap	src/Data/HashMap.hpp	/^        HashMap() {$/;"	f	class:HashMap
HashMap::HashMap	src/Data/HashMap.hpp	/^        HashMap(int max) {$/;"	f	class:HashMap
HashMap::add	include/Eternia/Data/HashMap.hpp	/^        void add(CharString key, T* data) {$/;"	f	class:HashMap
HashMap::add	src/Data/HashMap.hpp	/^        void add(CharString key, T* data) {$/;"	f	class:HashMap
HashMap::addL	include/Eternia/Data/HashMap.hpp	/^        void addL(unsigned long key, T* data) {$/;"	f	class:HashMap
HashMap::addL	src/Data/HashMap.hpp	/^        void addL(unsigned long key, T* data) {$/;"	f	class:HashMap
HashMap::addLoc	include/Eternia/Data/HashMap.hpp	/^        void addLoc(unsigned long key, HTEntry<T>* entry) {$/;"	f	class:HashMap
HashMap::addLoc	src/Data/HashMap.hpp	/^        void addLoc(unsigned long key, HTEntry<T>* entry) {$/;"	f	class:HashMap
HashMap::collides	include/Eternia/Data/HashMap.hpp	/^        int collides,size; \/\/ for use with hashmap debugging.$/;"	m	class:HashMap
HashMap::collides	src/Data/HashMap.hpp	/^        int collides,size; \/\/ for use with hashmap debugging.$/;"	m	class:HashMap
HashMap::entries	include/Eternia/Data/HashMap.hpp	/^        HTEntry<T>* entries;$/;"	m	class:HashMap
HashMap::entries	src/Data/HashMap.hpp	/^        HTEntry<T>* entries;$/;"	m	class:HashMap
HashMap::get	include/Eternia/Data/HashMap.hpp	/^        T* get(CharString key) {$/;"	f	class:HashMap
HashMap::get	src/Data/HashMap.hpp	/^        T* get(CharString key) {$/;"	f	class:HashMap
HashMap::getDirect	include/Eternia/Data/HashMap.hpp	/^        T* getDirect(long id) {$/;"	f	class:HashMap
HashMap::getDirect	src/Data/HashMap.hpp	/^        T* getDirect(long id) {$/;"	f	class:HashMap
HashMap::getL	include/Eternia/Data/HashMap.hpp	/^        T* getL(unsigned long key) {$/;"	f	class:HashMap
HashMap::getL	src/Data/HashMap.hpp	/^        T* getL(unsigned long key) {$/;"	f	class:HashMap
HashMap::remove	include/Eternia/Data/HashMap.hpp	/^        T* remove(CharString key) {$/;"	f	class:HashMap
HashMap::remove	src/Data/HashMap.hpp	/^        T* remove(CharString key) {$/;"	f	class:HashMap
HashMap::removeL	include/Eternia/Data/HashMap.hpp	/^        T* removeL(unsigned long ID) {$/;"	f	class:HashMap
HashMap::removeL	src/Data/HashMap.hpp	/^        T* removeL(unsigned long ID) {$/;"	f	class:HashMap
HashMap::size	include/Eternia/Data/HashMap.hpp	/^        int collides,size; \/\/ for use with hashmap debugging.$/;"	m	class:HashMap
HashMap::size	src/Data/HashMap.hpp	/^        int collides,size; \/\/ for use with hashmap debugging.$/;"	m	class:HashMap
HashMap_H_	include/Eternia/Data/HashMap.hpp	/^#define HashMap_H_$/;"	d
HashMap_H_	src/Data/HashMap.hpp	/^#define HashMap_H_$/;"	d
HashTable	include/Eternia/Data/HashTable.h	/^        HashTable(int max);$/;"	p	class:HashTable
HashTable	include/Eternia/Data/HashTable.h	/^class HashTable {$/;"	c
HashTable	src/Data/HashTable.cpp	/^HashTable::HashTable(int max) {$/;"	f	class:HashTable
HashTable	src/Data/HashTable.h	/^        HashTable(int max);$/;"	p	class:HashTable
HashTable	src/Data/HashTable.h	/^class HashTable {$/;"	c
HashTable::HashTable	include/Eternia/Data/HashTable.h	/^        HashTable(int max);$/;"	p	class:HashTable
HashTable::HashTable	src/Data/HashTable.cpp	/^HashTable::HashTable(int max) {$/;"	f	class:HashTable
HashTable::HashTable	src/Data/HashTable.h	/^        HashTable(int max);$/;"	p	class:HashTable
HashTable::add	include/Eternia/Data/HashTable.h	/^        void add(HTEntry* entry);$/;"	p	class:HashTable
HashTable::add	src/Data/HashTable.cpp	/^void HashTable::add(HTEntry* entry) {$/;"	f	class:HashTable
HashTable::add	src/Data/HashTable.h	/^        void add(HTEntry* entry);$/;"	p	class:HashTable
HashTable::collides	include/Eternia/Data/HashTable.h	/^        int collides;$/;"	m	class:HashTable
HashTable::collides	src/Data/HashTable.h	/^        int collides;$/;"	m	class:HashTable
HashTable::entries	include/Eternia/Data/HashTable.h	/^        HTEntry* entries;$/;"	m	class:HashTable
HashTable::entries	src/Data/HashTable.h	/^        HTEntry* entries;$/;"	m	class:HashTable
HashTable::get	include/Eternia/Data/HashTable.h	/^        CharString get(CharString key); \/\/ get value$/;"	p	class:HashTable
HashTable::get	src/Data/HashTable.cpp	/^CharString HashTable::get(CharString key) {$/;"	f	class:HashTable
HashTable::get	src/Data/HashTable.h	/^        CharString get(CharString key); \/\/ get value$/;"	p	class:HashTable
Hassium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Hassium = new Atom("Hassium", "Hs", 8, 7, 108, 157,107, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Transition);$/;"	v
Hassium	src/Engineering/Chemistry/elementals.h	/^const Atom Hassium = new Atom("Hassium", "Hs", 8, 7, 108, 157,107, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Transition);$/;"	v
Head	include/Eternia/Data/DoubleList.h	/^        DoubleNode *Head;$/;"	m	class:DoubleList
Head	include/Eternia/Data/IntegerList.h	/^        IntegerNode *Head, *Tail, *CNext;$/;"	m	class:IntegerList
Head	include/Eternia/Data/Queue.h	/^        QueueNode *Head,*Tail;$/;"	m	class:Queue
Head	include/Eternia/Data/Stack.h	/^        ValueNode* Head;$/;"	m	class:Stack
Head	src/Data/DoubleList.h	/^        DoubleNode *Head;$/;"	m	class:DoubleList
Head	src/Data/IntegerList.h	/^        IntegerNode *Head, *Tail, *CNext;$/;"	m	class:IntegerList
Head	src/Data/Queue.h	/^        QueueNode *Head,*Tail;$/;"	m	class:Queue
Head	src/Data/Stack.h	/^        ValueNode* Head;$/;"	m	class:Stack
Heap	include/Eternia/Data/Heap.h	/^        Heap(int maxSize);$/;"	p	class:Heap
Heap	include/Eternia/Data/Heap.h	/^class Heap {$/;"	c
Heap	src/Data/Heap.cpp	/^Heap::Heap(int maxSize) {$/;"	f	class:Heap
Heap	src/Data/Heap.h	/^        Heap(int maxSize);$/;"	p	class:Heap
Heap	src/Data/Heap.h	/^class Heap {$/;"	c
Heap::Heap	include/Eternia/Data/Heap.h	/^        Heap(int maxSize);$/;"	p	class:Heap
Heap::Heap	src/Data/Heap.cpp	/^Heap::Heap(int maxSize) {$/;"	f	class:Heap
Heap::Heap	src/Data/Heap.h	/^        Heap(int maxSize);$/;"	p	class:Heap
Heap::HeapList	include/Eternia/Data/Heap.h	/^        int *HeapList, size;$/;"	m	class:Heap
Heap::HeapList	src/Data/Heap.h	/^        int *HeapList, size;$/;"	m	class:Heap
Heap::downheap	include/Eternia/Data/Heap.h	/^        void downheap(int from, int to);$/;"	p	class:Heap
Heap::downheap	src/Data/Heap.cpp	/^void Heap::downheap(int from, int to) {$/;"	f	class:Heap
Heap::downheap	src/Data/Heap.h	/^        void downheap(int from, int to);$/;"	p	class:Heap
Heap::findinsertionposition	include/Eternia/Data/Heap.h	/^        int findinsertionposition(); \/\/ finds the correct insertion position.$/;"	p	class:Heap
Heap::findinsertionposition	src/Data/Heap.cpp	/^int Heap::findinsertionposition() {$/;"	f	class:Heap
Heap::findinsertionposition	src/Data/Heap.h	/^        int findinsertionposition(); \/\/ finds the correct insertion position.$/;"	p	class:Heap
Heap::insert	include/Eternia/Data/Heap.h	/^        void insert(int item); \/\/ insert item into list.$/;"	p	class:Heap
Heap::insert	src/Data/Heap.cpp	/^void Heap::insert(int item) {$/;"	f	class:Heap
Heap::insert	src/Data/Heap.h	/^        void insert(int item); \/\/ insert item into list.$/;"	p	class:Heap
Heap::removeMin	include/Eternia/Data/Heap.h	/^        int removeMin();$/;"	p	class:Heap
Heap::removeMin	src/Data/Heap.cpp	/^int Heap::removeMin() {$/;"	f	class:Heap
Heap::removeMin	src/Data/Heap.h	/^        int removeMin();$/;"	p	class:Heap
Heap::size	include/Eternia/Data/Heap.h	/^        int *HeapList, size;$/;"	m	class:Heap
Heap::size	src/Data/Heap.h	/^        int *HeapList, size;$/;"	m	class:Heap
Heap::sortDown	include/Eternia/Data/Heap.h	/^        void sortDown(); \/\/ implement downheap and sort the list.$/;"	p	class:Heap
Heap::sortDown	src/Data/Heap.cpp	/^void Heap::sortDown() {$/;"	f	class:Heap
Heap::sortDown	src/Data/Heap.h	/^        void sortDown(); \/\/ implement downheap and sort the list.$/;"	p	class:Heap
Heap::sortUp	include/Eternia/Data/Heap.h	/^        void sortUp(); \/\/ implement upheap and sort the list.$/;"	p	class:Heap
Heap::sortUp	src/Data/Heap.cpp	/^void Heap::sortUp() {$/;"	f	class:Heap
Heap::sortUp	src/Data/Heap.h	/^        void sortUp(); \/\/ implement upheap and sort the list.$/;"	p	class:Heap
Heap::upheap	include/Eternia/Data/Heap.h	/^        void upheap(int from, int to); \/\/ sort through list to make sure that it is sorted (Bottom up)$/;"	p	class:Heap
Heap::upheap	src/Data/Heap.cpp	/^void Heap::upheap(int from, int to) {$/;"	f	class:Heap
Heap::upheap	src/Data/Heap.h	/^        void upheap(int from, int to); \/\/ sort through list to make sure that it is sorted (Bottom up)$/;"	p	class:Heap
Heap::~Heap	include/Eternia/Data/Heap.h	/^        virtual ~Heap();$/;"	p	class:Heap
Heap::~Heap	src/Data/Heap.cpp	/^Heap::~Heap() {$/;"	f	class:Heap
Heap::~Heap	src/Data/Heap.h	/^        virtual ~Heap();$/;"	p	class:Heap
HeapList	include/Eternia/Data/Heap.h	/^        int *HeapList, size;$/;"	m	class:Heap
HeapList	src/Data/Heap.h	/^        int *HeapList, size;$/;"	m	class:Heap
HeapSort	src/Data/Heap.cpp	/^void HeapSort(int* list, int len) {$/;"	f
Hefner	include/Eternia/constants.h	/^        namespace Hefner {$/;"	n	namespace:physical::unit
Hefner	src/constants.h	/^        namespace Hefner {$/;"	n	namespace:physical::unit
Height	include/Eternia/Data/TreeList.h	/^        int Height(); \/\/ maximum depth$/;"	p	class:TreeList
Height	src/Data/TreeList.h	/^        int Height(); \/\/ maximum depth$/;"	p	class:TreeList
Helium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Helium = new Atom("Helium", "He", 18, 1, 2, 2,2, 0.0001785,UNKNOWN, 0.0001513, 0.956,4.22, 5.193, 0, COLOR_None,ELEM_Noble);$/;"	v
Helium	src/Engineering/Chemistry/elementals.h	/^const Atom Helium = new Atom("Helium", "He", 18, 1, 2, 2,2, 0.0001785,UNKNOWN, 0.0001513, 0.956,4.22, 5.193, 0, COLOR_None,ELEM_Noble);$/;"	v
Henry	include/Eternia/constants.h	/^        const double Henry = Weber\/Ampere;$/;"	m	namespace:physical::unit
Henry	src/constants.h	/^        const double Henry = Weber\/Ampere;$/;"	m	namespace:physical::unit
Henrys	include/Eternia/constants.h	/^        const double Henrys = Henry;$/;"	m	namespace:physical::unit
Henrys	src/constants.h	/^        const double Henrys = Henry;$/;"	m	namespace:physical::unit
Hertz	include/Eternia/constants.h	/^        const double Hertz = 1.0\/second;$/;"	m	namespace:physical::unit
Hertz	src/constants.h	/^        const double Hertz = 1.0\/second;$/;"	m	namespace:physical::unit
Holmium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Holmium = new Atom("Holmium", "Ho", 0, 6, 67, 99,66, 8.795,0.00000094, 0.016, 1734,2993, 0.165, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Holmium	src/Engineering/Chemistry/elementals.h	/^const Atom Holmium = new Atom("Holmium", "Ho", 0, 6, 67, 99,66, 8.795,0.00000094, 0.016, 1734,2993, 0.165, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Hydrogen	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Hydrogen = new Atom("Hydrogen", "H", 1, 1, 1, 0,1, 0.00008988,UNKNOWN, 0.0001805, 14.01,20.28, 14.304, 1, COLOR_None,ELEM_NonMetal);$/;"	v
Hydrogen	src/Engineering/Chemistry/elementals.h	/^const Atom Hydrogen = new Atom("Hydrogen", "H", 1, 1, 1, 0,1, 0.00008988,UNKNOWN, 0.0001805, 14.01,20.28, 14.304, 1, COLOR_None,ELEM_NonMetal);$/;"	v
Hyperlane	include/Eternia/Gamelogic/Ship/FTL/Hyperlane.h	/^class Hyperlane{$/;"	c
Hyperlane	src/Gamelogic/Ship/FTL/Hyperlane.h	/^class Hyperlane{$/;"	c
Hz	include/Eternia/constants.h	/^        const double Hz = Hertz;$/;"	m	namespace:physical::unit
Hz	src/constants.h	/^        const double Hz = Hertz;$/;"	m	namespace:physical::unit
I	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline uint4 I(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
I	src/Algorithm/Cryptography/md5.cpp	/^inline MD5::uint4 MD5::I(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5
I	src/Algorithm/Cryptography/md5.h	/^        static inline uint4 I(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
I4_ADD	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_ADD	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_COLLISION	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_COLLISION	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_DIV	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_DIV	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_HASH	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_HASH	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_MUL	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_MUL	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_PARTICLE	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_PARTICLE	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_RENDER	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_RENDER	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_SUB	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I4_SUB	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	e	enum:INSTRUCTIONTYPE
I5_LIST	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONPROCESSTYPE {I5_LIST, I5_RENDER};$/;"	e	enum:INSTRUCTIONPROCESSTYPE
I5_LIST	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONPROCESSTYPE {I5_LIST, I5_RENDER};$/;"	e	enum:INSTRUCTIONPROCESSTYPE
I5_RENDER	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONPROCESSTYPE {I5_LIST, I5_RENDER};$/;"	e	enum:INSTRUCTIONPROCESSTYPE
I5_RENDER	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONPROCESSTYPE {I5_LIST, I5_RENDER};$/;"	e	enum:INSTRUCTIONPROCESSTYPE
IBall	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
IBall	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
IC	include/Eternia/Engineering/Electrical/IC/IC.h	/^class IC : private virtual Component {$/;"	c
IC	src/Engineering/Electrical/IC/IC.h	/^class IC : private virtual Component {$/;"	c
IC555	include/Eternia/Engineering/Electrical/IC/General/IC555.h	/^        IC555();$/;"	p	class:IC555
IC555	include/Eternia/Engineering/Electrical/IC/General/IC555.h	/^class IC555 : private virtual IC {$/;"	c
IC555	src/Engineering/Electrical/IC/General/IC555.cpp	/^IC555::IC555() {$/;"	f	class:IC555
IC555	src/Engineering/Electrical/IC/General/IC555.h	/^        IC555();$/;"	p	class:IC555
IC555	src/Engineering/Electrical/IC/General/IC555.h	/^class IC555 : private virtual IC {$/;"	c
IC555::IC555	include/Eternia/Engineering/Electrical/IC/General/IC555.h	/^        IC555();$/;"	p	class:IC555
IC555::IC555	src/Engineering/Electrical/IC/General/IC555.cpp	/^IC555::IC555() {$/;"	f	class:IC555
IC555::IC555	src/Engineering/Electrical/IC/General/IC555.h	/^        IC555();$/;"	p	class:IC555
IC555::getPin	include/Eternia/Engineering/Electrical/IC/General/IC555.h	/^        virtual double getPin(int pin); \/\/ return the value on a specific pin$/;"	p	class:IC555
IC555::getPin	src/Engineering/Electrical/IC/General/IC555.cpp	/^double IC555::getPin(int pin) {$/;"	f	class:IC555
IC555::getPin	src/Engineering/Electrical/IC/General/IC555.h	/^        virtual double getPin(int pin); \/\/ return the value on a specific pin$/;"	p	class:IC555
IC555::setPin	include/Eternia/Engineering/Electrical/IC/General/IC555.h	/^        virtual void setPin(int pin, double value); \/\/ set the value on a pin$/;"	p	class:IC555
IC555::setPin	src/Engineering/Electrical/IC/General/IC555.cpp	/^void IC555::setPin(int pin, double value) {$/;"	f	class:IC555
IC555::setPin	src/Engineering/Electrical/IC/General/IC555.h	/^        virtual void setPin(int pin, double value); \/\/ set the value on a pin$/;"	p	class:IC555
IC555::tick	include/Eternia/Engineering/Electrical/IC/General/IC555.h	/^        virtual void tick(SecondTick* tickTime); \/\/ operate the component$/;"	p	class:IC555
IC555::tick	src/Engineering/Electrical/IC/General/IC555.cpp	/^void IC555::tick(SecondTick* tickTime) {$/;"	f	class:IC555
IC555::tick	src/Engineering/Electrical/IC/General/IC555.h	/^        virtual void tick(SecondTick* tickTime); \/\/ operate the component$/;"	p	class:IC555
IC555::~IC555	include/Eternia/Engineering/Electrical/IC/General/IC555.h	/^        virtual ~IC555();$/;"	p	class:IC555
IC555::~IC555	src/Engineering/Electrical/IC/General/IC555.cpp	/^IC555::~IC555() {$/;"	f	class:IC555
IC555::~IC555	src/Engineering/Electrical/IC/General/IC555.h	/^        virtual ~IC555();$/;"	p	class:IC555
IC555_h_	include/Eternia/Engineering/Electrical/IC/General/IC555.h	/^#define IC555_h_$/;"	d
IC555_h_	src/Engineering/Electrical/IC/General/IC555.h	/^#define IC555_h_$/;"	d
IC::getMaxPins	include/Eternia/Engineering/Electrical/IC/IC.h	/^        int getMaxPins();$/;"	p	class:IC
IC::getMaxPins	src/Engineering/Electrical/IC/IC.h	/^        int getMaxPins();$/;"	p	class:IC
IC::getPin	include/Eternia/Engineering/Electrical/IC/IC.h	/^        Pin* getPin(int pin); \/\/ return the value on a specific pin$/;"	p	class:IC
IC::getPin	src/Engineering/Electrical/IC/IC.h	/^        Pin* getPin(int pin); \/\/ return the value on a specific pin$/;"	p	class:IC
IC::maxPins	include/Eternia/Engineering/Electrical/IC/IC.h	/^        int maxPins;$/;"	m	class:IC
IC::maxPins	src/Engineering/Electrical/IC/IC.h	/^        int maxPins;$/;"	m	class:IC
IC::pins	include/Eternia/Engineering/Electrical/IC/IC.h	/^        LinkedList<Pin>* pins;$/;"	m	class:IC
IC::pins	src/Engineering/Electrical/IC/IC.h	/^        LinkedList<Pin>* pins;$/;"	m	class:IC
IC::setPin	include/Eternia/Engineering/Electrical/IC/IC.h	/^        void setPin(int pin, Pin* value); \/\/ set the value on a pin$/;"	p	class:IC
IC::setPin	src/Engineering/Electrical/IC/IC.h	/^        void setPin(int pin, Pin* value); \/\/ set the value on a pin$/;"	p	class:IC
IC::setPins	include/Eternia/Engineering/Electrical/IC/IC.h	/^        void setPins(LinkedList<Pin>* list); \/\/ set the initial pins list$/;"	p	class:IC
IC::setPins	src/Engineering/Electrical/IC/IC.cpp	/^void IC::setPins(LinkedList<Pin>* list) {$/;"	f	class:IC
IC::setPins	src/Engineering/Electrical/IC/IC.h	/^        void setPins(LinkedList<Pin>* list); \/\/ set the initial pins list$/;"	p	class:IC
IC::tick	include/Eternia/Engineering/Electrical/IC/IC.h	/^        void tick(SecondTick* tickTime); \/\/ operate the component$/;"	p	class:IC
IC::tick	src/Engineering/Electrical/IC/IC.h	/^        void tick(SecondTick* tickTime); \/\/ operate the component$/;"	p	class:IC
ICRAM_h_	include/Eternia/Engineering/Electrical/IC/RAM.h	/^#define ICRAM_h_$/;"	d
ICRAM_h_	src/Engineering/Electrical/IC/RAM.h	/^#define ICRAM_h_$/;"	d
IC_h_	include/Eternia/Engineering/Electrical/IC/IC.h	/^#define IC_h_$/;"	d
IC_h_	src/Engineering/Electrical/IC/IC.h	/^#define IC_h_$/;"	d
ICylinder	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
ICylinder	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
ID0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ID0 /;"	d
ID0	src/Emulation/MPU/msp430g2553.h	/^#define ID0 /;"	d
ID1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ID1 /;"	d
ID1	src/Emulation/MPU/msp430g2553.h	/^#define ID1 /;"	d
ID_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ID_0 /;"	d
ID_0	src/Emulation/MPU/msp430g2553.h	/^#define ID_0 /;"	d
ID_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ID_1 /;"	d
ID_1	src/Emulation/MPU/msp430g2553.h	/^#define ID_1 /;"	d
ID_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ID_2 /;"	d
ID_2	src/Emulation/MPU/msp430g2553.h	/^#define ID_2 /;"	d
ID_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ID_3 /;"	d
ID_3	src/Emulation/MPU/msp430g2553.h	/^#define ID_3 /;"	d
ID_VOID_MAIN	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
IDisc	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
IDisc	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
IE1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define IE1 /;"	d
IE1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(IE1);                                \/* Interrupt Enable 1 *\/$/;"	v
IE1	src/Emulation/MPU/msp430_declare_consts.h	/^#define IE1 /;"	d
IE1	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(IE1);                                \/* Interrupt Enable 1 *\/$/;"	v
IE2	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define IE2 /;"	d
IE2	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(IE2);                                \/* Interrupt Enable 2 *\/$/;"	v
IE2	src/Emulation/MPU/msp430_declare_consts.h	/^#define IE2 /;"	d
IE2	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(IE2);                                \/* Interrupt Enable 2 *\/$/;"	v
IFFT	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    TimeSignal IFFT(); \/\/ outputs the time domain$/;"	p	class:FreqSignal
IFFT	src/Engineering/Electrical/Signal/FreqSignal.h	/^    TimeSignal IFFT(); \/\/ outputs the time domain$/;"	p	class:FreqSignal
IFG1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define IFG1 /;"	d
IFG1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(IFG1);                               \/* Interrupt Flag 1 *\/$/;"	v
IFG1	src/Emulation/MPU/msp430_declare_consts.h	/^#define IFG1 /;"	d
IFG1	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(IFG1);                               \/* Interrupt Flag 1 *\/$/;"	v
IFG2	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define IFG2 /;"	d
IFG2	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(IFG2);                               \/* Interrupt Flag 2 *\/$/;"	v
IFG2	src/Emulation/MPU/msp430_declare_consts.h	/^#define IFG2 /;"	d
IFG2	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(IFG2);                               \/* Interrupt Flag 2 *\/$/;"	v
II	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline void II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
II	src/Algorithm/Cryptography/md5.cpp	/^inline void MD5::II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5
II	src/Algorithm/Cryptography/md5.h	/^        static inline void II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
IID_ADC10	include/Eternia/Emulation/MPU/msp430.h	/^    IID_ADC10, IID_PORT2, IID_PORT1$/;"	e	enum:INTERRUPT_ID
IID_ADC10	src/Emulation/MPU/msp430.h	/^    IID_ADC10, IID_PORT2, IID_PORT1$/;"	e	enum:INTERRUPT_ID
IID_COMPARATOR_A	include/Eternia/Emulation/MPU/msp430.h	/^    IID_RESET, IID_OSC_MEM_FAULT, IID_TA1_A0, IID_TA1_A1, IID_COMPARATOR_A,$/;"	e	enum:INTERRUPT_ID
IID_COMPARATOR_A	src/Emulation/MPU/msp430.h	/^    IID_RESET, IID_OSC_MEM_FAULT, IID_TA1_A0, IID_TA1_A1, IID_COMPARATOR_A,$/;"	e	enum:INTERRUPT_ID
IID_OSC_MEM_FAULT	include/Eternia/Emulation/MPU/msp430.h	/^    IID_RESET, IID_OSC_MEM_FAULT, IID_TA1_A0, IID_TA1_A1, IID_COMPARATOR_A,$/;"	e	enum:INTERRUPT_ID
IID_OSC_MEM_FAULT	src/Emulation/MPU/msp430.h	/^    IID_RESET, IID_OSC_MEM_FAULT, IID_TA1_A0, IID_TA1_A1, IID_COMPARATOR_A,$/;"	e	enum:INTERRUPT_ID
IID_PORT1	include/Eternia/Emulation/MPU/msp430.h	/^    IID_ADC10, IID_PORT2, IID_PORT1$/;"	e	enum:INTERRUPT_ID
IID_PORT1	src/Emulation/MPU/msp430.h	/^    IID_ADC10, IID_PORT2, IID_PORT1$/;"	e	enum:INTERRUPT_ID
IID_PORT2	include/Eternia/Emulation/MPU/msp430.h	/^    IID_ADC10, IID_PORT2, IID_PORT1$/;"	e	enum:INTERRUPT_ID
IID_PORT2	src/Emulation/MPU/msp430.h	/^    IID_ADC10, IID_PORT2, IID_PORT1$/;"	e	enum:INTERRUPT_ID
IID_RESET	include/Eternia/Emulation/MPU/msp430.h	/^    IID_RESET, IID_OSC_MEM_FAULT, IID_TA1_A0, IID_TA1_A1, IID_COMPARATOR_A,$/;"	e	enum:INTERRUPT_ID
IID_RESET	src/Emulation/MPU/msp430.h	/^    IID_RESET, IID_OSC_MEM_FAULT, IID_TA1_A0, IID_TA1_A1, IID_COMPARATOR_A,$/;"	e	enum:INTERRUPT_ID
IID_TA0_A0	include/Eternia/Emulation/MPU/msp430.h	/^    IID_WDT, IID_TA0_A0, IID_TA0_A1, IID_USCI_RECEIVE, IID_USCI_TRANSMIT,$/;"	e	enum:INTERRUPT_ID
IID_TA0_A0	src/Emulation/MPU/msp430.h	/^    IID_WDT, IID_TA0_A0, IID_TA0_A1, IID_USCI_RECEIVE, IID_USCI_TRANSMIT,$/;"	e	enum:INTERRUPT_ID
IID_TA0_A1	include/Eternia/Emulation/MPU/msp430.h	/^    IID_WDT, IID_TA0_A0, IID_TA0_A1, IID_USCI_RECEIVE, IID_USCI_TRANSMIT,$/;"	e	enum:INTERRUPT_ID
IID_TA0_A1	src/Emulation/MPU/msp430.h	/^    IID_WDT, IID_TA0_A0, IID_TA0_A1, IID_USCI_RECEIVE, IID_USCI_TRANSMIT,$/;"	e	enum:INTERRUPT_ID
IID_TA1_A0	include/Eternia/Emulation/MPU/msp430.h	/^    IID_RESET, IID_OSC_MEM_FAULT, IID_TA1_A0, IID_TA1_A1, IID_COMPARATOR_A,$/;"	e	enum:INTERRUPT_ID
IID_TA1_A0	src/Emulation/MPU/msp430.h	/^    IID_RESET, IID_OSC_MEM_FAULT, IID_TA1_A0, IID_TA1_A1, IID_COMPARATOR_A,$/;"	e	enum:INTERRUPT_ID
IID_TA1_A1	include/Eternia/Emulation/MPU/msp430.h	/^    IID_RESET, IID_OSC_MEM_FAULT, IID_TA1_A0, IID_TA1_A1, IID_COMPARATOR_A,$/;"	e	enum:INTERRUPT_ID
IID_TA1_A1	src/Emulation/MPU/msp430.h	/^    IID_RESET, IID_OSC_MEM_FAULT, IID_TA1_A0, IID_TA1_A1, IID_COMPARATOR_A,$/;"	e	enum:INTERRUPT_ID
IID_USCI_RECEIVE	include/Eternia/Emulation/MPU/msp430.h	/^    IID_WDT, IID_TA0_A0, IID_TA0_A1, IID_USCI_RECEIVE, IID_USCI_TRANSMIT,$/;"	e	enum:INTERRUPT_ID
IID_USCI_RECEIVE	src/Emulation/MPU/msp430.h	/^    IID_WDT, IID_TA0_A0, IID_TA0_A1, IID_USCI_RECEIVE, IID_USCI_TRANSMIT,$/;"	e	enum:INTERRUPT_ID
IID_USCI_TRANSMIT	include/Eternia/Emulation/MPU/msp430.h	/^    IID_WDT, IID_TA0_A0, IID_TA0_A1, IID_USCI_RECEIVE, IID_USCI_TRANSMIT,$/;"	e	enum:INTERRUPT_ID
IID_USCI_TRANSMIT	src/Emulation/MPU/msp430.h	/^    IID_WDT, IID_TA0_A0, IID_TA0_A1, IID_USCI_RECEIVE, IID_USCI_TRANSMIT,$/;"	e	enum:INTERRUPT_ID
IID_WDT	include/Eternia/Emulation/MPU/msp430.h	/^    IID_WDT, IID_TA0_A0, IID_TA0_A1, IID_USCI_RECEIVE, IID_USCI_TRANSMIT,$/;"	e	enum:INTERRUPT_ID
IID_WDT	src/Emulation/MPU/msp430.h	/^    IID_WDT, IID_TA0_A0, IID_TA0_A1, IID_USCI_RECEIVE, IID_USCI_TRANSMIT,$/;"	e	enum:INTERRUPT_ID
INCH0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH0 /;"	d
INCH0	src/Emulation/MPU/msp430g2553.h	/^#define INCH0 /;"	d
INCH1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH1 /;"	d
INCH1	src/Emulation/MPU/msp430g2553.h	/^#define INCH1 /;"	d
INCH2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH2 /;"	d
INCH2	src/Emulation/MPU/msp430g2553.h	/^#define INCH2 /;"	d
INCH3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH3 /;"	d
INCH3	src/Emulation/MPU/msp430g2553.h	/^#define INCH3 /;"	d
INCH_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_0 /;"	d
INCH_0	src/Emulation/MPU/msp430g2553.h	/^#define INCH_0 /;"	d
INCH_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_1 /;"	d
INCH_1	src/Emulation/MPU/msp430g2553.h	/^#define INCH_1 /;"	d
INCH_10	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_10 /;"	d
INCH_10	src/Emulation/MPU/msp430g2553.h	/^#define INCH_10 /;"	d
INCH_11	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_11 /;"	d
INCH_11	src/Emulation/MPU/msp430g2553.h	/^#define INCH_11 /;"	d
INCH_12	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_12 /;"	d
INCH_12	src/Emulation/MPU/msp430g2553.h	/^#define INCH_12 /;"	d
INCH_13	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_13 /;"	d
INCH_13	src/Emulation/MPU/msp430g2553.h	/^#define INCH_13 /;"	d
INCH_14	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_14 /;"	d
INCH_14	src/Emulation/MPU/msp430g2553.h	/^#define INCH_14 /;"	d
INCH_15	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_15 /;"	d
INCH_15	src/Emulation/MPU/msp430g2553.h	/^#define INCH_15 /;"	d
INCH_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_2 /;"	d
INCH_2	src/Emulation/MPU/msp430g2553.h	/^#define INCH_2 /;"	d
INCH_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_3 /;"	d
INCH_3	src/Emulation/MPU/msp430g2553.h	/^#define INCH_3 /;"	d
INCH_4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_4 /;"	d
INCH_4	src/Emulation/MPU/msp430g2553.h	/^#define INCH_4 /;"	d
INCH_5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_5 /;"	d
INCH_5	src/Emulation/MPU/msp430g2553.h	/^#define INCH_5 /;"	d
INCH_6	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_6 /;"	d
INCH_6	src/Emulation/MPU/msp430g2553.h	/^#define INCH_6 /;"	d
INCH_7	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_7 /;"	d
INCH_7	src/Emulation/MPU/msp430g2553.h	/^#define INCH_7 /;"	d
INCH_8	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_8 /;"	d
INCH_8	src/Emulation/MPU/msp430g2553.h	/^#define INCH_8 /;"	d
INCH_9	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define INCH_9 /;"	d
INCH_9	src/Emulation/MPU/msp430g2553.h	/^#define INCH_9 /;"	d
INPUTREDIRECTION_H_	include/Eternia/Parsing/InputRedirection.h	/^#define INPUTREDIRECTION_H_$/;"	d
INPUTREDIRECTION_H_	src/Parsing/InputRedirection.h	/^#define INPUTREDIRECTION_H_$/;"	d
INSERTIONSORT_H_	include/Eternia/Algorithm/Sorting/InsertionSort.h	/^#define INSERTIONSORT_H_$/;"	d
INSERTIONSORT_H_	src/Algorithm/Sorting/InsertionSort.h	/^#define INSERTIONSORT_H_$/;"	d
INSTRUCTIONPROCESSTYPE	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONPROCESSTYPE {I5_LIST, I5_RENDER};$/;"	g
INSTRUCTIONPROCESSTYPE	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONPROCESSTYPE {I5_LIST, I5_RENDER};$/;"	g
INSTRUCTIONTYPE	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	g
INSTRUCTIONTYPE	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^enum INSTRUCTIONTYPE {I4_ADD, I4_SUB, I4_MUL, I4_DIV, I4_COLLISION, I4_PARTICLE, I4_HASH, I4_RENDER$/;"	g
INSTRUCTION_H_	include/Eternia/Programming/Instruction.h	/^#define INSTRUCTION_H_$/;"	d
INSTRUCTION_H_	src/Programming/Instruction.h	/^#define INSTRUCTION_H_$/;"	d
INTEGERLIST_H_	include/Eternia/Data/IntegerList.h	/^#define INTEGERLIST_H_$/;"	d
INTEGERLIST_H_	src/Data/IntegerList.h	/^#define INTEGERLIST_H_$/;"	d
INTERRUPT_ID	include/Eternia/Emulation/MPU/msp430.h	/^enum INTERRUPT_ID {$/;"	g
INTERRUPT_ID	src/Emulation/MPU/msp430.h	/^enum INTERRUPT_ID {$/;"	g
IRod	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
IRod	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
ISR_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ISR_VECTOR(/;"	d
ISR_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define ISR_VECTOR(/;"	d
ISSH	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define ISSH /;"	d
ISSH	src/Emulation/MPU/msp430g2553.h	/^#define ISSH /;"	d
ISphere	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
ISphere	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
ITEM_BASE_H_	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^#define ITEM_BASE_H_$/;"	d
ITEM_BASE_H_	src/Gamelogic/Inventory/ItemBase.h	/^#define ITEM_BASE_H_$/;"	d
ITEM_H_	include/Eternia/Gamelogic/Inventory/Item.h	/^#define ITEM_H_$/;"	d
ITEM_H_	src/Gamelogic/Inventory/Item.h	/^#define ITEM_H_$/;"	d
IType	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	g	namespace:Rotational
IType	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	g	namespace:Rotational
Imperial	include/Eternia/constants.h	/^        namespace Imperial = British;$/;"	x
Imperial	src/constants.h	/^        namespace Imperial = British;$/;"	x
Income	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        double Income, Trade, Sales;$/;"	m	class:Tax
Income	src/Gamelogic/Economics/Tax/Tax.h	/^        double Income, Trade, Sales;$/;"	m	class:Tax
IncomeTotal	include/Eternia/Gamelogic/Social/Citizen.h	/^        double IncomeTotal; \/\/ Used for income taxes! :D$/;"	m	class:Citizen
IncomeTotal	include/Eternia/Gamelogic/Social/Company/Company.h	/^        long IncomeTotal; \/\/ used for government tax$/;"	m	class:Company
IncomeTotal	src/Gamelogic/Social/Citizen.h	/^        double IncomeTotal; \/\/ Used for income taxes! :D$/;"	m	class:Citizen
IncomeTotal	src/Gamelogic/Social/Company/Company.h	/^        long IncomeTotal; \/\/ used for government tax$/;"	m	class:Company
Indium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Indium = new Atom("Indium", "In", 13, 5, 49, 66,48, 7.31,0.00000008, 0.082, 429.75,2345, 0.233, 3, COLOR_Silver,ELEM_Poor);$/;"	v
Indium	src/Engineering/Chemistry/elementals.h	/^const Atom Indium = new Atom("Indium", "In", 13, 5, 49, 66,48, 7.31,0.00000008, 0.082, 429.75,2345, 0.233, 3, COLOR_Silver,ELEM_Poor);$/;"	v
Inductor	include/Eternia/Engineering/Electrical/Components/Inductor.h	/^class Inductor : private Component {$/;"	c
Inductor	src/Engineering/Electrical/Components/Inductor.h	/^class Inductor : private Component {$/;"	c
Inductor::tick	include/Eternia/Engineering/Electrical/Components/Inductor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Inductor
Inductor::tick	src/Engineering/Electrical/Components/Inductor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Inductor
Inductor_h_	include/Eternia/Engineering/Electrical/Components/Inductor.h	/^#define Inductor_h_$/;"	d
Inductor_h_	src/Engineering/Electrical/Components/Inductor.h	/^#define Inductor_h_$/;"	d
InputRedirection	include/Eternia/Parsing/InputRedirection.h	/^        InputRedirection();$/;"	p	class:InputRedirection
InputRedirection	include/Eternia/Parsing/InputRedirection.h	/^class InputRedirection {$/;"	c
InputRedirection	src/Parsing/InputRedirection.cpp	/^InputRedirection::InputRedirection() {$/;"	f	class:InputRedirection
InputRedirection	src/Parsing/InputRedirection.h	/^        InputRedirection();$/;"	p	class:InputRedirection
InputRedirection	src/Parsing/InputRedirection.h	/^class InputRedirection {$/;"	c
InputRedirection::InputRedirection	include/Eternia/Parsing/InputRedirection.h	/^        InputRedirection();$/;"	p	class:InputRedirection
InputRedirection::InputRedirection	src/Parsing/InputRedirection.cpp	/^InputRedirection::InputRedirection() {$/;"	f	class:InputRedirection
InputRedirection::InputRedirection	src/Parsing/InputRedirection.h	/^        InputRedirection();$/;"	p	class:InputRedirection
InputRedirection::handleInputLine	include/Eternia/Parsing/InputRedirection.h	/^        virtual void handleInputLine(CharString* input);$/;"	p	class:InputRedirection
InputRedirection::handleInputLine	main.cpp	/^void InputRedirection::handleInputLine(CharString* input) {$/;"	f	class:InputRedirection
InputRedirection::handleInputLine	src/Parsing/InputRedirection.h	/^        virtual void handleInputLine(CharString* input);$/;"	p	class:InputRedirection
InputRedirection::process	include/Eternia/Parsing/InputRedirection.h	/^        bool process(); \/\/ process line by line$/;"	p	class:InputRedirection
InputRedirection::process	src/Parsing/InputRedirection.cpp	/^bool InputRedirection::process() {$/;"	f	class:InputRedirection
InputRedirection::process	src/Parsing/InputRedirection.h	/^        bool process(); \/\/ process line by line$/;"	p	class:InputRedirection
InputRedirection::redirect	include/Eternia/Parsing/InputRedirection.h	/^        void redirect();$/;"	p	class:InputRedirection
InputRedirection::redirect	src/Parsing/InputRedirection.cpp	/^void InputRedirection::redirect() {$/;"	f	class:InputRedirection
InputRedirection::redirect	src/Parsing/InputRedirection.h	/^        void redirect();$/;"	p	class:InputRedirection
InputRedirection::stop	include/Eternia/Parsing/InputRedirection.h	/^        bool stop;$/;"	m	class:InputRedirection
InputRedirection::stop	src/Parsing/InputRedirection.h	/^        bool stop;$/;"	m	class:InputRedirection
InsertionSort	include/Eternia/Algorithm/Sorting/InsertionSort.h	/^void InsertionSort(int *list, int len);$/;"	p
InsertionSort	src/Algorithm/Sorting/InsertionSort.cpp	/^void InsertionSort(int *list, int len) {$/;"	f
InsertionSort	src/Algorithm/Sorting/InsertionSort.h	/^void InsertionSort(int *list, int len);$/;"	p
Instruction	include/Eternia/Programming/Instruction.h	/^    Instruction(CPLBASEFMT baseCompany);$/;"	p	class:Instruction
Instruction	include/Eternia/Programming/Instruction.h	/^class Instruction{$/;"	c
Instruction	src/Programming/Instruction.h	/^    Instruction(CPLBASEFMT baseCompany);$/;"	p	class:Instruction
Instruction	src/Programming/Instruction.h	/^class Instruction{$/;"	c
Instruction::Instruction	include/Eternia/Programming/Instruction.h	/^    Instruction(CPLBASEFMT baseCompany);$/;"	p	class:Instruction
Instruction::Instruction	src/Programming/Instruction.h	/^    Instruction(CPLBASEFMT baseCompany);$/;"	p	class:Instruction
Instruction::R1	include/Eternia/Programming/Instruction.h	/^    int R1; \/\/ Opcodes with a req for R1 (in\/out?\/...)$/;"	m	class:Instruction
Instruction::R1	src/Programming/Instruction.h	/^    int R1; \/\/ Opcodes with a req for R1 (in\/out?\/...)$/;"	m	class:Instruction
Instruction::R2	include/Eternia/Programming/Instruction.h	/^    int R2; \/\/ Opcodes with a req for R2 (in\/out?)$/;"	m	class:Instruction
Instruction::R2	src/Programming/Instruction.h	/^    int R2; \/\/ Opcodes with a req for R2 (in\/out?)$/;"	m	class:Instruction
Instruction::R3	include/Eternia/Programming/Instruction.h	/^    int R3; \/\/ Opcodes with a req for R3 (in\/out\/...\/?)$/;"	m	class:Instruction
Instruction::R3	src/Programming/Instruction.h	/^    int R3; \/\/ Opcodes with a req for R3 (in\/out\/...\/?)$/;"	m	class:Instruction
Instruction::R4	include/Eternia/Programming/Instruction.h	/^    int R4; \/\/ Makes no sense to have this fourth variable.$/;"	m	class:Instruction
Instruction::R4	src/Programming/Instruction.h	/^    int R4; \/\/ Makes no sense to have this fourth variable.$/;"	m	class:Instruction
Instruction::compile128	include/Eternia/Programming/Instruction.h	/^    CharString compile128(); \/\/ compile this Instruction for 128-bit$/;"	p	class:Instruction
Instruction::compile128	src/Programming/Instruction.h	/^    CharString compile128(); \/\/ compile this Instruction for 128-bit$/;"	p	class:Instruction
Instruction::compile16	include/Eternia/Programming/Instruction.h	/^    CharString compile16(); \/\/ compile this Instruction for 16-bit$/;"	p	class:Instruction
Instruction::compile16	src/Programming/Instruction.h	/^    CharString compile16(); \/\/ compile this Instruction for 16-bit$/;"	p	class:Instruction
Instruction::compile256	include/Eternia/Programming/Instruction.h	/^    CharString compile256(); \/\/ compile this Instruction for 256-bit$/;"	p	class:Instruction
Instruction::compile256	src/Programming/Instruction.h	/^    CharString compile256(); \/\/ compile this Instruction for 256-bit$/;"	p	class:Instruction
Instruction::compile32	include/Eternia/Programming/Instruction.h	/^    CharString compile32(); \/\/ compile this Instruction for 32-bit$/;"	p	class:Instruction
Instruction::compile32	src/Programming/Instruction.h	/^    CharString compile32(); \/\/ compile this Instruction for 32-bit$/;"	p	class:Instruction
Instruction::compile64	include/Eternia/Programming/Instruction.h	/^    CharString compile64(); \/\/ compile this Instruction for 64-bit$/;"	p	class:Instruction
Instruction::compile64	src/Programming/Instruction.h	/^    CharString compile64(); \/\/ compile this Instruction for 64-bit$/;"	p	class:Instruction
Instruction::compile8	include/Eternia/Programming/Instruction.h	/^    CharString compile8(); \/\/ compile this Instruction for 8-bit$/;"	p	class:Instruction
Instruction::compile8	src/Programming/Instruction.h	/^    CharString compile8(); \/\/ compile this Instruction for 8-bit$/;"	p	class:Instruction
Instruction::opcode	include/Eternia/Programming/Instruction.h	/^    short opcode; \/\/ Primary opcode. 16-bit max. (Highly dependent on the OS, but 2^11,  1024 seems the be the max # of opcodes on 64-bits)$/;"	m	class:Instruction
Instruction::opcode	src/Programming/Instruction.h	/^    short opcode; \/\/ Primary opcode. 16-bit max. (Highly dependent on the OS, but 2^11,  1024 seems the be the max # of opcodes on 64-bits)$/;"	m	class:Instruction
Instruction::prefix	include/Eternia/Programming/Instruction.h	/^    char prefix; \/\/ some opcodes have a specific prefix$/;"	m	class:Instruction
Instruction::prefix	src/Programming/Instruction.h	/^    char prefix; \/\/ some opcodes have a specific prefix$/;"	m	class:Instruction
IntegerList	include/Eternia/Data/IntegerList.h	/^        IntegerList();$/;"	p	class:IntegerList
IntegerList	include/Eternia/Data/IntegerList.h	/^class IntegerList {$/;"	c
IntegerList	src/Data/IntegerList.cpp	/^IntegerList::IntegerList() {$/;"	f	class:IntegerList
IntegerList	src/Data/IntegerList.h	/^        IntegerList();$/;"	p	class:IntegerList
IntegerList	src/Data/IntegerList.h	/^class IntegerList {$/;"	c
IntegerList::CNext	include/Eternia/Data/IntegerList.h	/^        IntegerNode *Head, *Tail, *CNext;$/;"	m	class:IntegerList
IntegerList::CNext	src/Data/IntegerList.h	/^        IntegerNode *Head, *Tail, *CNext;$/;"	m	class:IntegerList
IntegerList::Head	include/Eternia/Data/IntegerList.h	/^        IntegerNode *Head, *Tail, *CNext;$/;"	m	class:IntegerList
IntegerList::Head	src/Data/IntegerList.h	/^        IntegerNode *Head, *Tail, *CNext;$/;"	m	class:IntegerList
IntegerList::IntegerList	include/Eternia/Data/IntegerList.h	/^        IntegerList();$/;"	p	class:IntegerList
IntegerList::IntegerList	src/Data/IntegerList.cpp	/^IntegerList::IntegerList() {$/;"	f	class:IntegerList
IntegerList::IntegerList	src/Data/IntegerList.h	/^        IntegerList();$/;"	p	class:IntegerList
IntegerList::Tail	include/Eternia/Data/IntegerList.h	/^        IntegerNode *Head, *Tail, *CNext;$/;"	m	class:IntegerList
IntegerList::Tail	src/Data/IntegerList.h	/^        IntegerNode *Head, *Tail, *CNext;$/;"	m	class:IntegerList
IntegerList::_Size	include/Eternia/Data/IntegerList.h	/^        int _Size;$/;"	m	class:IntegerList
IntegerList::_Size	src/Data/IntegerList.h	/^        int _Size;$/;"	m	class:IntegerList
IntegerList::addBack	include/Eternia/Data/IntegerList.h	/^        void addBack(int a);$/;"	p	class:IntegerList
IntegerList::addBack	src/Data/IntegerList.cpp	/^void IntegerList::addBack(int input) {$/;"	f	class:IntegerList
IntegerList::addBack	src/Data/IntegerList.h	/^        void addBack(int a);$/;"	p	class:IntegerList
IntegerList::addFront	include/Eternia/Data/IntegerList.h	/^        void addFront(int a);$/;"	p	class:IntegerList
IntegerList::addFront	src/Data/IntegerList.cpp	/^void IntegerList::addFront(int input) {$/;"	f	class:IntegerList
IntegerList::addFront	src/Data/IntegerList.h	/^        void addFront(int a);$/;"	p	class:IntegerList
IntegerList::categorizer	include/Eternia/Data/IntegerList.h	/^        int* categorizer;$/;"	m	class:IntegerList
IntegerList::categorizer	src/Data/IntegerList.h	/^        int* categorizer;$/;"	m	class:IntegerList
IntegerList::clear	include/Eternia/Data/IntegerList.h	/^        void clear();$/;"	p	class:IntegerList
IntegerList::clear	src/Data/IntegerList.cpp	/^void IntegerList::clear() {$/;"	f	class:IntegerList
IntegerList::clear	src/Data/IntegerList.h	/^        void clear();$/;"	p	class:IntegerList
IntegerList::empty	include/Eternia/Data/IntegerList.h	/^        bool empty();$/;"	p	class:IntegerList
IntegerList::empty	src/Data/IntegerList.cpp	/^bool IntegerList::empty() {$/;"	f	class:IntegerList
IntegerList::empty	src/Data/IntegerList.h	/^        bool empty();$/;"	p	class:IntegerList
IntegerList::erase	include/Eternia/Data/IntegerList.h	/^        int erase(int i);$/;"	p	class:IntegerList
IntegerList::erase	src/Data/IntegerList.cpp	/^int IntegerList::erase(int index) {$/;"	f	class:IntegerList
IntegerList::erase	src/Data/IntegerList.h	/^        int erase(int i);$/;"	p	class:IntegerList
IntegerList::front	include/Eternia/Data/IntegerList.h	/^        int front();$/;"	p	class:IntegerList
IntegerList::front	src/Data/IntegerList.cpp	/^int IntegerList::front() {$/;"	f	class:IntegerList
IntegerList::front	src/Data/IntegerList.h	/^        int front();$/;"	p	class:IntegerList
IntegerList::get	include/Eternia/Data/IntegerList.h	/^        int get(int i);$/;"	p	class:IntegerList
IntegerList::get	src/Data/IntegerList.cpp	/^int IntegerList::get(int index) {$/;"	f	class:IntegerList
IntegerList::get	src/Data/IntegerList.h	/^        int get(int i);$/;"	p	class:IntegerList
IntegerList::getNext	include/Eternia/Data/IntegerList.h	/^        int getNext();$/;"	p	class:IntegerList
IntegerList::getNext	src/Data/IntegerList.cpp	/^int IntegerList::getNext() {$/;"	f	class:IntegerList
IntegerList::getNext	src/Data/IntegerList.h	/^        int getNext();$/;"	p	class:IntegerList
IntegerList::isCategorized	include/Eternia/Data/IntegerList.h	/^        bool isCategorized;\/\/ is the list categorized into a fast fixed list?$/;"	m	class:IntegerList
IntegerList::isCategorized	src/Data/IntegerList.h	/^        bool isCategorized;\/\/ is the list categorized into a fast fixed list?$/;"	m	class:IntegerList
IntegerList::pop	include/Eternia/Data/IntegerList.h	/^        int pop(); \/\/ erase front$/;"	p	class:IntegerList
IntegerList::pop	src/Data/IntegerList.cpp	/^int IntegerList::pop() {$/;"	f	class:IntegerList
IntegerList::pop	src/Data/IntegerList.h	/^        int pop(); \/\/ erase front$/;"	p	class:IntegerList
IntegerList::resetNext	include/Eternia/Data/IntegerList.h	/^        void resetNext();$/;"	p	class:IntegerList
IntegerList::resetNext	src/Data/IntegerList.cpp	/^void IntegerList::resetNext() {$/;"	f	class:IntegerList
IntegerList::resetNext	src/Data/IntegerList.h	/^        void resetNext();$/;"	p	class:IntegerList
IntegerList::set	include/Eternia/Data/IntegerList.h	/^        void set(int i, int item);$/;"	p	class:IntegerList
IntegerList::set	src/Data/IntegerList.cpp	/^void IntegerList::set(int index, int item) {$/;"	f	class:IntegerList
IntegerList::set	src/Data/IntegerList.h	/^        void set(int i, int item);$/;"	p	class:IntegerList
IntegerList::size	include/Eternia/Data/IntegerList.h	/^        int size();$/;"	p	class:IntegerList
IntegerList::size	src/Data/IntegerList.cpp	/^int IntegerList::size() {$/;"	f	class:IntegerList
IntegerList::size	src/Data/IntegerList.h	/^        int size();$/;"	p	class:IntegerList
IntegerList::~IntegerList	include/Eternia/Data/IntegerList.h	/^        virtual ~IntegerList();$/;"	p	class:IntegerList
IntegerList::~IntegerList	src/Data/IntegerList.cpp	/^IntegerList::~IntegerList() {$/;"	f	class:IntegerList
IntegerList::~IntegerList	src/Data/IntegerList.h	/^        virtual ~IntegerList();$/;"	p	class:IntegerList
IntegerNode	include/Eternia/Data/IntegerList.h	/^class IntegerNode {$/;"	c
IntegerNode	src/Data/IntegerList.h	/^class IntegerNode {$/;"	c
IntegerNode::data	include/Eternia/Data/IntegerList.h	/^        int data;$/;"	m	class:IntegerNode
IntegerNode::data	src/Data/IntegerList.h	/^        int data;$/;"	m	class:IntegerNode
IntegerNode::next	include/Eternia/Data/IntegerList.h	/^        IntegerNode *prev, *next;$/;"	m	class:IntegerNode
IntegerNode::next	src/Data/IntegerList.h	/^        IntegerNode *prev, *next;$/;"	m	class:IntegerNode
IntegerNode::prev	include/Eternia/Data/IntegerList.h	/^        IntegerNode *prev, *next;$/;"	m	class:IntegerNode
IntegerNode::prev	src/Data/IntegerList.h	/^        IntegerNode *prev, *next;$/;"	m	class:IntegerNode
Interest_DAILY	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^enum interestTYPE {Interest_HOURLY, Interest_DAILY, Interest_WEEKLY, Interest_MONTHLY, Interest_YEARLY};$/;"	e	enum:interestTYPE
Interest_DAILY	src/Gamelogic/Economics/Banking/Account.h	/^enum interestTYPE {Interest_HOURLY, Interest_DAILY, Interest_WEEKLY, Interest_MONTHLY, Interest_YEARLY};$/;"	e	enum:interestTYPE
Interest_HOURLY	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^enum interestTYPE {Interest_HOURLY, Interest_DAILY, Interest_WEEKLY, Interest_MONTHLY, Interest_YEARLY};$/;"	e	enum:interestTYPE
Interest_HOURLY	src/Gamelogic/Economics/Banking/Account.h	/^enum interestTYPE {Interest_HOURLY, Interest_DAILY, Interest_WEEKLY, Interest_MONTHLY, Interest_YEARLY};$/;"	e	enum:interestTYPE
Interest_MONTHLY	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^enum interestTYPE {Interest_HOURLY, Interest_DAILY, Interest_WEEKLY, Interest_MONTHLY, Interest_YEARLY};$/;"	e	enum:interestTYPE
Interest_MONTHLY	src/Gamelogic/Economics/Banking/Account.h	/^enum interestTYPE {Interest_HOURLY, Interest_DAILY, Interest_WEEKLY, Interest_MONTHLY, Interest_YEARLY};$/;"	e	enum:interestTYPE
Interest_WEEKLY	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^enum interestTYPE {Interest_HOURLY, Interest_DAILY, Interest_WEEKLY, Interest_MONTHLY, Interest_YEARLY};$/;"	e	enum:interestTYPE
Interest_WEEKLY	src/Gamelogic/Economics/Banking/Account.h	/^enum interestTYPE {Interest_HOURLY, Interest_DAILY, Interest_WEEKLY, Interest_MONTHLY, Interest_YEARLY};$/;"	e	enum:interestTYPE
Interest_YEARLY	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^enum interestTYPE {Interest_HOURLY, Interest_DAILY, Interest_WEEKLY, Interest_MONTHLY, Interest_YEARLY};$/;"	e	enum:interestTYPE
Interest_YEARLY	src/Gamelogic/Economics/Banking/Account.h	/^enum interestTYPE {Interest_HOURLY, Interest_DAILY, Interest_WEEKLY, Interest_MONTHLY, Interest_YEARLY};$/;"	e	enum:interestTYPE
InterruptHandle	include/Eternia/Emulation/MPU/msp430.h	/^        InterruptHandle() {}$/;"	f	class:InterruptHandle
InterruptHandle	include/Eternia/Emulation/MPU/msp430.h	/^class InterruptHandle {$/;"	c
InterruptHandle	src/Emulation/MPU/msp430.h	/^        InterruptHandle() {}$/;"	f	class:InterruptHandle
InterruptHandle	src/Emulation/MPU/msp430.h	/^class InterruptHandle {$/;"	c
InterruptHandle::InterruptHandle	include/Eternia/Emulation/MPU/msp430.h	/^        InterruptHandle() {}$/;"	f	class:InterruptHandle
InterruptHandle::InterruptHandle	src/Emulation/MPU/msp430.h	/^        InterruptHandle() {}$/;"	f	class:InterruptHandle
InterruptHandle::id	include/Eternia/Emulation/MPU/msp430.h	/^        INTERRUPT_ID id;$/;"	m	class:InterruptHandle
InterruptHandle::id	src/Emulation/MPU/msp430.h	/^        INTERRUPT_ID id;$/;"	m	class:InterruptHandle
InterruptHandle::method	include/Eternia/Emulation/MPU/msp430.h	/^        int* method; \/\/ << method to call$/;"	m	class:InterruptHandle
InterruptHandle::method	src/Emulation/MPU/msp430.h	/^        int* method; \/\/ << method to call$/;"	m	class:InterruptHandle
Inverter	include/Eternia/Engineering/Electrical/Components/Inverter.h	/^        Inverter(double Frequency);$/;"	p	class:Inverter
Inverter	include/Eternia/Engineering/Electrical/Components/Inverter.h	/^class Inverter : private Component {$/;"	c
Inverter	src/Engineering/Electrical/Components/Inverter.h	/^        Inverter(double Frequency);$/;"	p	class:Inverter
Inverter	src/Engineering/Electrical/Components/Inverter.h	/^class Inverter : private Component {$/;"	c
Inverter::Inverter	include/Eternia/Engineering/Electrical/Components/Inverter.h	/^        Inverter(double Frequency);$/;"	p	class:Inverter
Inverter::Inverter	src/Engineering/Electrical/Components/Inverter.h	/^        Inverter(double Frequency);$/;"	p	class:Inverter
Inverter::frequency	include/Eternia/Engineering/Electrical/Components/Inverter.h	/^        double frequency; \/\/ frequency at which the inverter converts DC to.$/;"	m	class:Inverter
Inverter::frequency	src/Engineering/Electrical/Components/Inverter.h	/^        double frequency; \/\/ frequency at which the inverter converts DC to.$/;"	m	class:Inverter
Inverter::tick	include/Eternia/Engineering/Electrical/Components/Inverter.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Inverter
Inverter::tick	src/Engineering/Electrical/Components/Inverter.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Inverter
Inverter::~Inverter	include/Eternia/Engineering/Electrical/Components/Inverter.h	/^        virtual ~Inverter();$/;"	p	class:Inverter
Inverter::~Inverter	src/Engineering/Electrical/Components/Inverter.h	/^        virtual ~Inverter();$/;"	p	class:Inverter
Inverter_h_	include/Eternia/Engineering/Electrical/Components/Inverter.h	/^#define Inverter_h_$/;"	d
Inverter_h_	src/Engineering/Electrical/Components/Inverter.h	/^#define Inverter_h_$/;"	d
Iodine	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Iodine = new Atom("Iodine", "I", 17, 5, 53, 74,52, 4.93,10000000, 0.000449, 386.85,457.4, 0.214, 7, COLOR_SlateGray,ELEM_Halogen);$/;"	v
Iodine	src/Engineering/Chemistry/elementals.h	/^const Atom Iodine = new Atom("Iodine", "I", 17, 5, 53, 74,52, 4.93,10000000, 0.000449, 386.85,457.4, 0.214, 7, COLOR_SlateGray,ELEM_Halogen);$/;"	v
Iridium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Iridium = new Atom("Iridium", "Ir", 9, 6, 77, 115,76, 22.56,0.000000047, 0.15, 2719,4701, 0.131, 6, COLOR_Silver,ELEM_Transition);$/;"	v
Iridium	src/Engineering/Chemistry/elementals.h	/^const Atom Iridium = new Atom("Iridium", "Ir", 9, 6, 77, 115,76, 22.56,0.000000047, 0.15, 2719,4701, 0.131, 6, COLOR_Silver,ELEM_Transition);$/;"	v
Iron	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Iron = new Atom("Iron", "Fe", 8, 4, 26, 30,25, 7.874,0.000000097, 0.08, 1811,3134, 0.449, 3, COLOR_Gray,ELEM_Transition);$/;"	v
Iron	src/Engineering/Chemistry/elementals.h	/^const Atom Iron = new Atom("Iron", "Fe", 8, 4, 26, 30,25, 7.874,0.000000097, 0.08, 1811,3134, 0.449, 3, COLOR_Gray,ELEM_Transition);$/;"	v
Item	include/Eternia/Gamelogic/Inventory/Item.h	/^    Item();$/;"	p	class:Item
Item	include/Eternia/Gamelogic/Inventory/Item.h	/^class Item : public ItemBase {$/;"	c
Item	src/Gamelogic/Inventory/Item.h	/^    Item();$/;"	p	class:Item
Item	src/Gamelogic/Inventory/Item.h	/^class Item : public ItemBase {$/;"	c
Item::Item	include/Eternia/Gamelogic/Inventory/Item.h	/^    Item();$/;"	p	class:Item
Item::Item	src/Gamelogic/Inventory/Item.h	/^    Item();$/;"	p	class:Item
ItemBase	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^class ItemBase {$/;"	c
ItemBase	src/Gamelogic/Inventory/ItemBase.h	/^class ItemBase {$/;"	c
ItemBase::description	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^    CharString* description; \/\/ description of the item.$/;"	m	class:ItemBase
ItemBase::description	src/Gamelogic/Inventory/ItemBase.h	/^    CharString* description; \/\/ description of the item.$/;"	m	class:ItemBase
ItemBase::id	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^    int id; \/\/ base item id, useful for net transfer ids.$/;"	m	class:ItemBase
ItemBase::id	src/Gamelogic/Inventory/ItemBase.h	/^    int id; \/\/ base item id, useful for net transfer ids.$/;"	m	class:ItemBase
ItemBase::init	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^    void init(int id, int stacksize, double price); \/\/ initializes basic item base, use in declaration of item.$/;"	p	class:ItemBase
ItemBase::init	src/Gamelogic/Inventory/ItemBase.h	/^    void init(int id, int stacksize, double price); \/\/ initializes basic item base, use in declaration of item.$/;"	p	class:ItemBase
ItemBase::name	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^    CharString* name; \/\/ basic name of this item.$/;"	m	class:ItemBase
ItemBase::name	src/Gamelogic/Inventory/ItemBase.h	/^    CharString* name; \/\/ basic name of this item.$/;"	m	class:ItemBase
ItemBase::price	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^    double price; \/\/ Base price for this item.$/;"	m	class:ItemBase
ItemBase::price	src/Gamelogic/Inventory/ItemBase.h	/^    double price; \/\/ Base price for this item.$/;"	m	class:ItemBase
ItemBase::stacksize	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^    int stacksize; \/\/ number of items in this stack.$/;"	m	class:ItemBase
ItemBase::stacksize	src/Gamelogic/Inventory/ItemBase.h	/^    int stacksize; \/\/ number of items in this stack.$/;"	m	class:ItemBase
J	include/Eternia/constants.h	/^        const double J = Joule;$/;"	m	namespace:physical::unit
J	src/constants.h	/^        const double J = Joule;$/;"	m	namespace:physical::unit
JSON	include/Eternia/WebFramework/Encoding/JSON.h	/^        JSON(CharString data);$/;"	p	class:JSON
JSON	include/Eternia/WebFramework/Encoding/JSON.h	/^class JSON {$/;"	c
JSON	src/WebFramework/Encoding/JSON.h	/^        JSON(CharString data);$/;"	p	class:JSON
JSON	src/WebFramework/Encoding/JSON.h	/^class JSON {$/;"	c
JSON::JSON	include/Eternia/WebFramework/Encoding/JSON.h	/^        JSON(CharString data);$/;"	p	class:JSON
JSON::JSON	src/WebFramework/Encoding/JSON.h	/^        JSON(CharString data);$/;"	p	class:JSON
JSON::data	include/Eternia/WebFramework/Encoding/JSON.h	/^        CharString data;$/;"	m	class:JSON
JSON::data	src/WebFramework/Encoding/JSON.h	/^        CharString data;$/;"	m	class:JSON
JSON::decode	include/Eternia/WebFramework/Encoding/JSON.h	/^        CharString static decode(CharString data);$/;"	p	class:JSON
JSON::decode	src/WebFramework/Encoding/JSON.h	/^        CharString static decode(CharString data);$/;"	p	class:JSON
JSON::encode	include/Eternia/WebFramework/Encoding/JSON.h	/^        CharString static encode(CharString data);$/;"	p	class:JSON
JSON::encode	src/WebFramework/Encoding/JSON.h	/^        CharString static encode(CharString data);$/;"	p	class:JSON
JSON::loadFile	include/Eternia/WebFramework/Encoding/JSON.h	/^        void loadFile(CharString loc); \/\/ load JSON from file$/;"	p	class:JSON
JSON::loadFile	src/WebFramework/Encoding/JSON.h	/^        void loadFile(CharString loc); \/\/ load JSON from file$/;"	p	class:JSON
JSON::saveFile	include/Eternia/WebFramework/Encoding/JSON.h	/^        void saveFile(CharString loc); \/\/ save JSON (overwrite) to file$/;"	p	class:JSON
JSON::saveFile	src/WebFramework/Encoding/JSON.h	/^        void saveFile(CharString loc); \/\/ save JSON (overwrite) to file$/;"	p	class:JSON
JSON_H_	include/Eternia/WebFramework/Encoding/JSON.h	/^#define JSON_H_$/;"	d
JSON_H_	src/WebFramework/Encoding/JSON.h	/^#define JSON_H_$/;"	d
Joule	include/Eternia/constants.h	/^        const double Joule = Newton*meter;$/;"	m	namespace:physical::unit
Joule	src/constants.h	/^        const double Joule = Newton*meter;$/;"	m	namespace:physical::unit
Joules	include/Eternia/constants.h	/^        const double Joules = Joule;$/;"	m	namespace:physical::unit
Joules	src/constants.h	/^        const double Joules = Joule;$/;"	m	namespace:physical::unit
K	include/Eternia/constants.h	/^        const double K = Kelvin;$/;"	m	namespace:physical::unit
K	src/constants.h	/^        const double K = Kelvin;$/;"	m	namespace:physical::unit
KAcceleration	include/Eternia/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
KAcceleration	src/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
KCentripetal	include/Eternia/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
KCentripetal	src/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
KDirection	include/Eternia/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	g	namespace:physical
KDirection	src/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	g	namespace:physical
KDistance	include/Eternia/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
KDistance	src/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
KEYV	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define KEYV /;"	d
KEYV	src/Emulation/MPU/msp430g2553.h	/^#define KEYV /;"	d
KEnergyType	include/Eternia/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	g	namespace:physical
KEnergyType	src/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	g	namespace:physical
KFriction	include/Eternia/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
KFriction	src/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
KGravity	include/Eternia/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
KGravity	src/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
KItem	include/Eternia/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	g	namespace:physical
KItem	src/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	g	namespace:physical
KMass	include/Eternia/constants.h	/^                KMass$/;"	e	enum:physical::KItem
KMass	src/constants.h	/^                KMass$/;"	e	enum:physical::KItem
KMu	include/Eternia/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
KMu	src/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
KNewton	include/Eternia/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
KNewton	src/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
KNormal	include/Eternia/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
KNormal	src/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
KTension	include/Eternia/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
KTension	src/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
KTime	include/Eternia/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
KTime	src/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
KVelocity	include/Eternia/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
KVelocity	src/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
KVelocityFinal	include/Eternia/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
KVelocityFinal	src/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
K_B	include/Eternia/constants.h	/^        const double K_B = 1.380658e-23*Joules\/Kelvin;$/;"	m	namespace:physical::constant
K_B	src/constants.h	/^        const double K_B = 1.380658e-23*Joules\/Kelvin;$/;"	m	namespace:physical::constant
Kelvin	include/Eternia/constants.h	/^        const double Kelvin = 1.0;$/;"	m	namespace:physical::unit
Kelvin	src/constants.h	/^        const double Kelvin = 1.0;$/;"	m	namespace:physical::unit
Kelvins	include/Eternia/constants.h	/^        const double Kelvins = Kelvin;$/;"	m	namespace:physical::unit
Kelvins	src/constants.h	/^        const double Kelvins = Kelvin;$/;"	m	namespace:physical::unit
KineticREnergy	include/Eternia/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
KineticREnergy	src/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
KineticTEnergy	include/Eternia/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
KineticTEnergy	src/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
Krypton	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Krypton = new Atom("Krypton", "Kr", 18, 4, 36, 48,35, 0.003733,UNKNOWN, 0.00000943, 115.79,119.93, 0.248, 2, COLOR_None,ELEM_Noble);$/;"	v
Krypton	src/Engineering/Chemistry/elementals.h	/^const Atom Krypton = new Atom("Krypton", "Kr", 18, 4, 36, 48,35, 0.003733,UNKNOWN, 0.00000943, 115.79,119.93, 0.248, 2, COLOR_None,ELEM_Noble);$/;"	v
Kx	include/Eternia/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	e	enum:physical::KDirection
Kx	src/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	e	enum:physical::KDirection
Kxf	include/Eternia/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
Kxf	src/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
Kxi	include/Eternia/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
Kxi	src/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
Ky	include/Eternia/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	e	enum:physical::KDirection
Ky	src/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	e	enum:physical::KDirection
Kz	include/Eternia/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	e	enum:physical::KDirection
Kz	src/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	e	enum:physical::KDirection
L	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^enum P2PTYPE {data,cpu,L,E};$/;"	e	enum:P2PTYPE
L	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^enum P2PTYPE {data,cpu,L,E};$/;"	e	enum:P2PTYPE
LANG	include/Eternia/Localization/LanguageController.h	/^enum LANG {$/;"	g
LANG	src/Localization/LanguageController.h	/^enum LANG {$/;"	g
LANGCONTROLLER_H_	include/Eternia/Localization/LanguageController.h	/^#define LANGCONTROLLER_H_$/;"	d
LANGCONTROLLER_H_	src/Localization/LanguageController.h	/^#define LANGCONTROLLER_H_$/;"	d
LANG_AFRIKAANS	include/Eternia/Localization/LanguageController.h	/^    LANG_AFRIKAANS = 0x2f,$/;"	e	enum:LANG
LANG_AFRIKAANS	src/Localization/LanguageController.h	/^    LANG_AFRIKAANS = 0x2f,$/;"	e	enum:LANG
LANG_ALBANIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_ALBANIAN = 0x1b,$/;"	e	enum:LANG
LANG_ALBANIAN	src/Localization/LanguageController.h	/^    LANG_ALBANIAN = 0x1b,$/;"	e	enum:LANG
LANG_ARABIC	include/Eternia/Localization/LanguageController.h	/^    LANG_ARABIC = 0x00,$/;"	e	enum:LANG
LANG_ARABIC	src/Localization/LanguageController.h	/^    LANG_ARABIC = 0x00,$/;"	e	enum:LANG
LANG_ARMENIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_ARMENIAN = 0x2a,$/;"	e	enum:LANG
LANG_ARMENIAN	src/Localization/LanguageController.h	/^    LANG_ARMENIAN = 0x2a,$/;"	e	enum:LANG
LANG_ASSAMESE	include/Eternia/Localization/LanguageController.h	/^    LANG_ASSAMESE = 0x4c,$/;"	e	enum:LANG
LANG_ASSAMESE	src/Localization/LanguageController.h	/^    LANG_ASSAMESE = 0x4c,$/;"	e	enum:LANG
LANG_AZERI	include/Eternia/Localization/LanguageController.h	/^    LANG_AZERI = 0x2b,$/;"	e	enum:LANG
LANG_AZERI	src/Localization/LanguageController.h	/^    LANG_AZERI = 0x2b,$/;"	e	enum:LANG
LANG_BASQUE	include/Eternia/Localization/LanguageController.h	/^    LANG_BASQUE = 0x2c,$/;"	e	enum:LANG
LANG_BASQUE	src/Localization/LanguageController.h	/^    LANG_BASQUE = 0x2c,$/;"	e	enum:LANG
LANG_BELARUSIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_BELARUSIAN = 0x22,$/;"	e	enum:LANG
LANG_BELARUSIAN	src/Localization/LanguageController.h	/^    LANG_BELARUSIAN = 0x22,$/;"	e	enum:LANG
LANG_BENGALI	include/Eternia/Localization/LanguageController.h	/^    LANG_BENGALI = 0x44,$/;"	e	enum:LANG
LANG_BENGALI	src/Localization/LanguageController.h	/^    LANG_BENGALI = 0x44,$/;"	e	enum:LANG
LANG_BULGARIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_BULGARIAN = 0x01,$/;"	e	enum:LANG
LANG_BULGARIAN	src/Localization/LanguageController.h	/^    LANG_BULGARIAN = 0x01,$/;"	e	enum:LANG
LANG_CATALAN	include/Eternia/Localization/LanguageController.h	/^    LANG_CATALAN = 0x02,$/;"	e	enum:LANG
LANG_CATALAN	src/Localization/LanguageController.h	/^    LANG_CATALAN = 0x02,$/;"	e	enum:LANG
LANG_CHINESE	include/Eternia/Localization/LanguageController.h	/^    LANG_CHINESE = 0x03,$/;"	e	enum:LANG
LANG_CHINESE	src/Localization/LanguageController.h	/^    LANG_CHINESE = 0x03,$/;"	e	enum:LANG
LANG_CROATIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_CROATIAN = 0x19,$/;"	e	enum:LANG
LANG_CROATIAN	src/Localization/LanguageController.h	/^    LANG_CROATIAN = 0x19,$/;"	e	enum:LANG
LANG_CZECH	include/Eternia/Localization/LanguageController.h	/^    LANG_CZECH = 0x04,$/;"	e	enum:LANG
LANG_CZECH	src/Localization/LanguageController.h	/^    LANG_CZECH = 0x04,$/;"	e	enum:LANG
LANG_DANISH	include/Eternia/Localization/LanguageController.h	/^    LANG_DANISH = 0x05,$/;"	e	enum:LANG
LANG_DANISH	src/Localization/LanguageController.h	/^    LANG_DANISH = 0x05,$/;"	e	enum:LANG
LANG_DUTCH	include/Eternia/Localization/LanguageController.h	/^    LANG_DUTCH = 0x12,$/;"	e	enum:LANG
LANG_DUTCH	src/Localization/LanguageController.h	/^    LANG_DUTCH = 0x12,$/;"	e	enum:LANG
LANG_ENGLISH	include/Eternia/Localization/LanguageController.h	/^    LANG_ENGLISH = 0x08,$/;"	e	enum:LANG
LANG_ENGLISH	src/Localization/LanguageController.h	/^    LANG_ENGLISH = 0x08,$/;"	e	enum:LANG
LANG_ESTONIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_ESTONIAN = 0x24,$/;"	e	enum:LANG
LANG_ESTONIAN	src/Localization/LanguageController.h	/^    LANG_ESTONIAN = 0x24,$/;"	e	enum:LANG
LANG_FAEROESE	include/Eternia/Localization/LanguageController.h	/^    LANG_FAEROESE = 0x37,$/;"	e	enum:LANG
LANG_FAEROESE	src/Localization/LanguageController.h	/^    LANG_FAEROESE = 0x37,$/;"	e	enum:LANG
LANG_FARSI	include/Eternia/Localization/LanguageController.h	/^    LANG_FARSI = 0x27,$/;"	e	enum:LANG
LANG_FARSI	src/Localization/LanguageController.h	/^    LANG_FARSI = 0x27,$/;"	e	enum:LANG
LANG_FINNISH	include/Eternia/Localization/LanguageController.h	/^    LANG_FINNISH = 0x0a,$/;"	e	enum:LANG
LANG_FINNISH	src/Localization/LanguageController.h	/^    LANG_FINNISH = 0x0a,$/;"	e	enum:LANG
LANG_FRENCH	include/Eternia/Localization/LanguageController.h	/^    LANG_FRENCH = 0x0b,$/;"	e	enum:LANG
LANG_FRENCH	src/Localization/LanguageController.h	/^    LANG_FRENCH = 0x0b,$/;"	e	enum:LANG
LANG_GEORGIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_GEORGIAN = 0x36,$/;"	e	enum:LANG
LANG_GEORGIAN	src/Localization/LanguageController.h	/^    LANG_GEORGIAN = 0x36,$/;"	e	enum:LANG
LANG_GERMAN	include/Eternia/Localization/LanguageController.h	/^    LANG_GERMAN = 0x06,$/;"	e	enum:LANG
LANG_GERMAN	src/Localization/LanguageController.h	/^    LANG_GERMAN = 0x06,$/;"	e	enum:LANG
LANG_GREEK	include/Eternia/Localization/LanguageController.h	/^    LANG_GREEK = 0x07,$/;"	e	enum:LANG
LANG_GREEK	src/Localization/LanguageController.h	/^    LANG_GREEK = 0x07,$/;"	e	enum:LANG
LANG_GUJARATI	include/Eternia/Localization/LanguageController.h	/^    LANG_GUJARATI = 0x46,$/;"	e	enum:LANG
LANG_GUJARATI	src/Localization/LanguageController.h	/^    LANG_GUJARATI = 0x46,$/;"	e	enum:LANG
LANG_HEBREW	include/Eternia/Localization/LanguageController.h	/^    LANG_HEBREW = 0x0c,$/;"	e	enum:LANG
LANG_HEBREW	src/Localization/LanguageController.h	/^    LANG_HEBREW = 0x0c,$/;"	e	enum:LANG
LANG_HINDI	include/Eternia/Localization/LanguageController.h	/^    LANG_HINDI = 0x38,$/;"	e	enum:LANG
LANG_HINDI	src/Localization/LanguageController.h	/^    LANG_HINDI = 0x38,$/;"	e	enum:LANG
LANG_HUNGARIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_HUNGARIAN = 0x0d,$/;"	e	enum:LANG
LANG_HUNGARIAN	src/Localization/LanguageController.h	/^    LANG_HUNGARIAN = 0x0d,$/;"	e	enum:LANG
LANG_ICELANDIC	include/Eternia/Localization/LanguageController.h	/^    LANG_ICELANDIC = 0x0e,$/;"	e	enum:LANG
LANG_ICELANDIC	src/Localization/LanguageController.h	/^    LANG_ICELANDIC = 0x0e,$/;"	e	enum:LANG
LANG_INDONESIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_INDONESIAN = 0x20,$/;"	e	enum:LANG
LANG_INDONESIAN	src/Localization/LanguageController.h	/^    LANG_INDONESIAN = 0x20,$/;"	e	enum:LANG
LANG_ITALIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_ITALIAN = 0x0f,$/;"	e	enum:LANG
LANG_ITALIAN	src/Localization/LanguageController.h	/^    LANG_ITALIAN = 0x0f,$/;"	e	enum:LANG
LANG_JAPANESE	include/Eternia/Localization/LanguageController.h	/^    LANG_JAPANESE = 0x10,$/;"	e	enum:LANG
LANG_JAPANESE	src/Localization/LanguageController.h	/^    LANG_JAPANESE = 0x10,$/;"	e	enum:LANG
LANG_KANNADA	include/Eternia/Localization/LanguageController.h	/^    LANG_KANNADA = 0x4a,$/;"	e	enum:LANG
LANG_KANNADA	src/Localization/LanguageController.h	/^    LANG_KANNADA = 0x4a,$/;"	e	enum:LANG
LANG_KASHMIRI	include/Eternia/Localization/LanguageController.h	/^    LANG_KASHMIRI = 0x59,$/;"	e	enum:LANG
LANG_KASHMIRI	src/Localization/LanguageController.h	/^    LANG_KASHMIRI = 0x59,$/;"	e	enum:LANG
LANG_KAZAK	include/Eternia/Localization/LanguageController.h	/^    LANG_KAZAK = 0x3e,$/;"	e	enum:LANG
LANG_KAZAK	src/Localization/LanguageController.h	/^    LANG_KAZAK = 0x3e,$/;"	e	enum:LANG
LANG_KONKANI	include/Eternia/Localization/LanguageController.h	/^    LANG_KONKANI = 0x4f,$/;"	e	enum:LANG
LANG_KONKANI	src/Localization/LanguageController.h	/^    LANG_KONKANI = 0x4f,$/;"	e	enum:LANG
LANG_KOREAN	include/Eternia/Localization/LanguageController.h	/^    LANG_KOREAN = 0x11,$/;"	e	enum:LANG
LANG_KOREAN	src/Localization/LanguageController.h	/^    LANG_KOREAN = 0x11,$/;"	e	enum:LANG
LANG_LATVIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_LATVIAN = 0x25,$/;"	e	enum:LANG
LANG_LATVIAN	src/Localization/LanguageController.h	/^    LANG_LATVIAN = 0x25,$/;"	e	enum:LANG
LANG_LITHUANIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_LITHUANIAN = 0x26,$/;"	e	enum:LANG
LANG_LITHUANIAN	src/Localization/LanguageController.h	/^    LANG_LITHUANIAN = 0x26,$/;"	e	enum:LANG
LANG_MACEDONIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_MACEDONIAN = 0x2d,$/;"	e	enum:LANG
LANG_MACEDONIAN	src/Localization/LanguageController.h	/^    LANG_MACEDONIAN = 0x2d,$/;"	e	enum:LANG
LANG_MALAY	include/Eternia/Localization/LanguageController.h	/^    LANG_MALAY = 0x39,$/;"	e	enum:LANG
LANG_MALAY	src/Localization/LanguageController.h	/^    LANG_MALAY = 0x39,$/;"	e	enum:LANG
LANG_MALAYALAM	include/Eternia/Localization/LanguageController.h	/^    LANG_MALAYALAM = 0x4b,$/;"	e	enum:LANG
LANG_MALAYALAM	src/Localization/LanguageController.h	/^    LANG_MALAYALAM = 0x4b,$/;"	e	enum:LANG
LANG_MANIPURI	include/Eternia/Localization/LanguageController.h	/^    LANG_MANIPURI = 0x57,$/;"	e	enum:LANG
LANG_MANIPURI	src/Localization/LanguageController.h	/^    LANG_MANIPURI = 0x57,$/;"	e	enum:LANG
LANG_MARATHI	include/Eternia/Localization/LanguageController.h	/^    LANG_MARATHI = 0x4d,$/;"	e	enum:LANG
LANG_MARATHI	src/Localization/LanguageController.h	/^    LANG_MARATHI = 0x4d,$/;"	e	enum:LANG
LANG_NEPALI	include/Eternia/Localization/LanguageController.h	/^    LANG_NEPALI = 0x60,$/;"	e	enum:LANG
LANG_NEPALI	src/Localization/LanguageController.h	/^    LANG_NEPALI = 0x60,$/;"	e	enum:LANG
LANG_NORWEGIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_NORWEGIAN = 0x13,$/;"	e	enum:LANG
LANG_NORWEGIAN	src/Localization/LanguageController.h	/^    LANG_NORWEGIAN = 0x13,$/;"	e	enum:LANG
LANG_ORIYA	include/Eternia/Localization/LanguageController.h	/^    LANG_ORIYA = 0x47,$/;"	e	enum:LANG
LANG_ORIYA	src/Localization/LanguageController.h	/^    LANG_ORIYA = 0x47,$/;"	e	enum:LANG
LANG_POLISH	include/Eternia/Localization/LanguageController.h	/^    LANG_POLISH = 0x14,$/;"	e	enum:LANG
LANG_POLISH	src/Localization/LanguageController.h	/^    LANG_POLISH = 0x14,$/;"	e	enum:LANG
LANG_PORTUGUESE	include/Eternia/Localization/LanguageController.h	/^    LANG_PORTUGUESE = 0x15,$/;"	e	enum:LANG
LANG_PORTUGUESE	src/Localization/LanguageController.h	/^    LANG_PORTUGUESE = 0x15,$/;"	e	enum:LANG
LANG_PUNJABI	include/Eternia/Localization/LanguageController.h	/^    LANG_PUNJABI = 0x45,$/;"	e	enum:LANG
LANG_PUNJABI	src/Localization/LanguageController.h	/^    LANG_PUNJABI = 0x45,$/;"	e	enum:LANG
LANG_ROMANIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_ROMANIAN = 0x16,$/;"	e	enum:LANG
LANG_ROMANIAN	src/Localization/LanguageController.h	/^    LANG_ROMANIAN = 0x16,$/;"	e	enum:LANG
LANG_RUSSIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_RUSSIAN = 0x18,$/;"	e	enum:LANG
LANG_RUSSIAN	src/Localization/LanguageController.h	/^    LANG_RUSSIAN = 0x18,$/;"	e	enum:LANG
LANG_SANSKRIT	include/Eternia/Localization/LanguageController.h	/^    LANG_SANSKRIT = 0x4e,$/;"	e	enum:LANG
LANG_SANSKRIT	src/Localization/LanguageController.h	/^    LANG_SANSKRIT = 0x4e,$/;"	e	enum:LANG
LANG_SERBIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_SERBIAN = 0x1a,$/;"	e	enum:LANG
LANG_SERBIAN	src/Localization/LanguageController.h	/^    LANG_SERBIAN = 0x1a,$/;"	e	enum:LANG
LANG_SINDHI	include/Eternia/Localization/LanguageController.h	/^    LANG_SINDHI = 0x58,$/;"	e	enum:LANG
LANG_SINDHI	src/Localization/LanguageController.h	/^    LANG_SINDHI = 0x58,$/;"	e	enum:LANG
LANG_SLOVAK	include/Eternia/Localization/LanguageController.h	/^    LANG_SLOVAK = 0x1a,$/;"	e	enum:LANG
LANG_SLOVAK	src/Localization/LanguageController.h	/^    LANG_SLOVAK = 0x1a,$/;"	e	enum:LANG
LANG_SLOVENIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_SLOVENIAN = 0x23,$/;"	e	enum:LANG
LANG_SLOVENIAN	src/Localization/LanguageController.h	/^    LANG_SLOVENIAN = 0x23,$/;"	e	enum:LANG
LANG_SPANISH	include/Eternia/Localization/LanguageController.h	/^    LANG_SPANISH = 0x09,$/;"	e	enum:LANG
LANG_SPANISH	src/Localization/LanguageController.h	/^    LANG_SPANISH = 0x09,$/;"	e	enum:LANG
LANG_SWAHILI	include/Eternia/Localization/LanguageController.h	/^    LANG_SWAHILI = 0x3f,$/;"	e	enum:LANG
LANG_SWAHILI	src/Localization/LanguageController.h	/^    LANG_SWAHILI = 0x3f,$/;"	e	enum:LANG
LANG_SWEDISH	include/Eternia/Localization/LanguageController.h	/^    LANG_SWEDISH = 0x1c,$/;"	e	enum:LANG
LANG_SWEDISH	src/Localization/LanguageController.h	/^    LANG_SWEDISH = 0x1c,$/;"	e	enum:LANG
LANG_TAMIL	include/Eternia/Localization/LanguageController.h	/^    LANG_TAMIL = 0x48,$/;"	e	enum:LANG
LANG_TAMIL	src/Localization/LanguageController.h	/^    LANG_TAMIL = 0x48,$/;"	e	enum:LANG
LANG_TATAR	include/Eternia/Localization/LanguageController.h	/^    LANG_TATAR = 0x43,$/;"	e	enum:LANG
LANG_TATAR	src/Localization/LanguageController.h	/^    LANG_TATAR = 0x43,$/;"	e	enum:LANG
LANG_TELUGU	include/Eternia/Localization/LanguageController.h	/^    LANG_TELUGU = 0x49,$/;"	e	enum:LANG
LANG_TELUGU	src/Localization/LanguageController.h	/^    LANG_TELUGU = 0x49,$/;"	e	enum:LANG
LANG_THAI	include/Eternia/Localization/LanguageController.h	/^    LANG_THAI = 0x1d,$/;"	e	enum:LANG
LANG_THAI	src/Localization/LanguageController.h	/^    LANG_THAI = 0x1d,$/;"	e	enum:LANG
LANG_TURKISH	include/Eternia/Localization/LanguageController.h	/^    LANG_TURKISH = 0x1e,$/;"	e	enum:LANG
LANG_TURKISH	src/Localization/LanguageController.h	/^    LANG_TURKISH = 0x1e,$/;"	e	enum:LANG
LANG_UKRANIAN	include/Eternia/Localization/LanguageController.h	/^    LANG_UKRANIAN = 0x21,$/;"	e	enum:LANG
LANG_UKRANIAN	src/Localization/LanguageController.h	/^    LANG_UKRANIAN = 0x21,$/;"	e	enum:LANG
LANG_URDU	include/Eternia/Localization/LanguageController.h	/^    LANG_URDU = 0x1f,$/;"	e	enum:LANG
LANG_URDU	src/Localization/LanguageController.h	/^    LANG_URDU = 0x1f,$/;"	e	enum:LANG
LANG_UZBEK	include/Eternia/Localization/LanguageController.h	/^    LANG_UZBEK = 0x41,$/;"	e	enum:LANG
LANG_UZBEK	src/Localization/LanguageController.h	/^    LANG_UZBEK = 0x41,$/;"	e	enum:LANG
LANG_VIETNAMESE	include/Eternia/Localization/LanguageController.h	/^    LANG_VIETNAMESE = 0x29,$/;"	e	enum:LANG
LANG_VIETNAMESE	src/Localization/LanguageController.h	/^    LANG_VIETNAMESE = 0x29,$/;"	e	enum:LANG
LAYOUTOBJECT_H_	include/Eternia/Design/LayoutObject.h	/^#define LAYOUTOBJECT_H_$/;"	d
LAYOUTOBJECT_H_	src/Design/LayoutObject.h	/^#define LAYOUTOBJECT_H_$/;"	d
LAYOUT_H_	include/Eternia/Design/Layout.h	/^#define LAYOUT_H_$/;"	d
LAYOUT_H_	src/Design/Layout.h	/^#define LAYOUT_H_$/;"	d
LBranch	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        P2PNode* LBranch; \/\/ current L Branch that we are on. (changes over time)$/;"	m	class:P2PLClient
LBranch	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        P2PNode* LBranch; \/\/ current L Branch that we are on. (changes over time)$/;"	m	class:P2PLClient
LBridge	include/Eternia/Engineering/Electrical/Components/LBridge.h	/^        LBridge();$/;"	p	class:LBridge
LBridge	include/Eternia/Engineering/Electrical/Components/LBridge.h	/^class LBridge : private Component {$/;"	c
LBridge	src/Engineering/Electrical/Components/LBridge.h	/^        LBridge();$/;"	p	class:LBridge
LBridge	src/Engineering/Electrical/Components/LBridge.h	/^class LBridge : private Component {$/;"	c
LBridge::LBridge	include/Eternia/Engineering/Electrical/Components/LBridge.h	/^        LBridge();$/;"	p	class:LBridge
LBridge::LBridge	src/Engineering/Electrical/Components/LBridge.h	/^        LBridge();$/;"	p	class:LBridge
LBridge::tick	include/Eternia/Engineering/Electrical/Components/LBridge.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:LBridge
LBridge::tick	src/Engineering/Electrical/Components/LBridge.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:LBridge
LBridge::~LBridge	include/Eternia/Engineering/Electrical/Components/LBridge.h	/^        virtual ~LBridge();$/;"	p	class:LBridge
LBridge::~LBridge	src/Engineering/Electrical/Components/LBridge.h	/^        virtual ~LBridge();$/;"	p	class:LBridge
LBridge_h_	include/Eternia/Engineering/Electrical/Components/LBridge.h	/^#define LBridge_h_$/;"	d
LBridge_h_	src/Engineering/Electrical/Components/LBridge.h	/^#define LBridge_h_$/;"	d
LFXT1OF	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LFXT1OF /;"	d
LFXT1OF	src/Emulation/MPU/msp430g2553.h	/^#define LFXT1OF /;"	d
LFXT1S0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LFXT1S0 /;"	d
LFXT1S0	src/Emulation/MPU/msp430g2553.h	/^#define LFXT1S0 /;"	d
LFXT1S1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LFXT1S1 /;"	d
LFXT1S1	src/Emulation/MPU/msp430g2553.h	/^#define LFXT1S1 /;"	d
LFXT1S_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LFXT1S_0 /;"	d
LFXT1S_0	src/Emulation/MPU/msp430g2553.h	/^#define LFXT1S_0 /;"	d
LFXT1S_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LFXT1S_1 /;"	d
LFXT1S_1	src/Emulation/MPU/msp430g2553.h	/^#define LFXT1S_1 /;"	d
LFXT1S_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LFXT1S_2 /;"	d
LFXT1S_2	src/Emulation/MPU/msp430g2553.h	/^#define LFXT1S_2 /;"	d
LFXT1S_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LFXT1S_3 /;"	d
LFXT1S_3	src/Emulation/MPU/msp430g2553.h	/^#define LFXT1S_3 /;"	d
LINKEDLISTT_H_	include/Eternia/Data/LinkedListT.h	/^#define LINKEDLISTT_H_$/;"	d
LINKEDLISTT_H_	src/Data/LinkedListT.h	/^#define LINKEDLISTT_H_$/;"	d
LINKEDLIST_H_	include/Eternia/Data/LinkedList.hpp	/^#define LINKEDLIST_H_$/;"	d
LINKEDLIST_H_	src/Data/LinkedList.hpp	/^#define LINKEDLIST_H_$/;"	d
LINKEDMAP_H_	include/Eternia/Data/LinkedMap.h	/^#define LINKEDMAP_H_$/;"	d
LINKEDMAP_H_	src/Data/LinkedMap.h	/^#define LINKEDMAP_H_$/;"	d
LINUXXX	include/Eternia/WebFramework/Network/SockClient.h	/^#define LINUXXX$/;"	d
LINUXXX	include/Eternia/WebFramework/Network/SocketServer.h	/^    #define LINUXXX$/;"	d
LINUXXX	src/WebFramework/Network/SockClient.h	/^#define LINUXXX$/;"	d
LINUXXX	src/WebFramework/Network/SocketServer.h	/^    #define LINUXXX$/;"	d
LIghtEmitting_DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
LIghtEmitting_DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
LOADFILE_H_	include/Eternia/Parsing/LoadFile.h	/^#define LOADFILE_H_$/;"	d
LOADFILE_H_	src/Parsing/LoadFile.h	/^#define LOADFILE_H_$/;"	d
LOCALLAYOUT_H_	include/Eternia/Design/LocalLayout.h	/^#define LOCALLAYOUT_H_$/;"	d
LOCALLAYOUT_H_	src/Design/LocalLayout.h	/^#define LOCALLAYOUT_H_$/;"	d
LOCATION_H_	include/Eternia/Gamelogic/Location.h	/^#define LOCATION_H_$/;"	d
LOCATION_H_	src/Gamelogic/Location.h	/^#define LOCATION_H_$/;"	d
LOCK	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LOCK /;"	d
LOCK	src/Emulation/MPU/msp430g2553.h	/^#define LOCK /;"	d
LOCKA	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LOCKA /;"	d
LOCKA	src/Emulation/MPU/msp430g2553.h	/^#define LOCKA /;"	d
LOGGER_H_	include/Eternia/Data/Logger/Logger.h	/^#define LOGGER_H_$/;"	d
LOGGER_H_	src/Data/Logger/Logger.h	/^#define LOGGER_H_$/;"	d
LPM0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM0 /;"	d
LPM0	src/Emulation/MPU/msp430g2553.h	/^#define LPM0 /;"	d
LPM0_EXIT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM0_EXIT /;"	d
LPM0_EXIT	src/Emulation/MPU/msp430g2553.h	/^#define LPM0_EXIT /;"	d
LPM0_bits	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM0_bits /;"	d
LPM0_bits	src/Emulation/MPU/msp430g2553.h	/^#define LPM0_bits /;"	d
LPM1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM1 /;"	d
LPM1	src/Emulation/MPU/msp430g2553.h	/^#define LPM1 /;"	d
LPM1_EXIT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM1_EXIT /;"	d
LPM1_EXIT	src/Emulation/MPU/msp430g2553.h	/^#define LPM1_EXIT /;"	d
LPM1_bits	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM1_bits /;"	d
LPM1_bits	src/Emulation/MPU/msp430g2553.h	/^#define LPM1_bits /;"	d
LPM2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM2 /;"	d
LPM2	src/Emulation/MPU/msp430g2553.h	/^#define LPM2 /;"	d
LPM2_EXIT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM2_EXIT /;"	d
LPM2_EXIT	src/Emulation/MPU/msp430g2553.h	/^#define LPM2_EXIT /;"	d
LPM2_bits	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM2_bits /;"	d
LPM2_bits	src/Emulation/MPU/msp430g2553.h	/^#define LPM2_bits /;"	d
LPM3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM3 /;"	d
LPM3	src/Emulation/MPU/msp430g2553.h	/^#define LPM3 /;"	d
LPM3_EXIT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM3_EXIT /;"	d
LPM3_EXIT	src/Emulation/MPU/msp430g2553.h	/^#define LPM3_EXIT /;"	d
LPM3_bits	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM3_bits /;"	d
LPM3_bits	src/Emulation/MPU/msp430g2553.h	/^#define LPM3_bits /;"	d
LPM4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM4 /;"	d
LPM4	src/Emulation/MPU/msp430g2553.h	/^#define LPM4 /;"	d
LPM4_EXIT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM4_EXIT /;"	d
LPM4_EXIT	src/Emulation/MPU/msp430g2553.h	/^#define LPM4_EXIT /;"	d
LPM4_bits	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define LPM4_bits /;"	d
LPM4_bits	src/Emulation/MPU/msp430g2553.h	/^#define LPM4_bits /;"	d
LServerList	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        P2PNode* LServerList; \/\/list of P2PNodes down the L-Server node line. (this is a client of *)$/;"	m	class:P2PNode
LServerList	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        P2PNode* LServerList; \/\/list of P2PNodes down the L-Server node line. (this is a client of *)$/;"	m	class:P2PNode
Lambert	include/Eternia/constants.h	/^        const double Lambert = 10000.0*Blondels;$/;"	m	namespace:physical::unit
Lambert	src/constants.h	/^        const double Lambert = 10000.0*Blondels;$/;"	m	namespace:physical::unit
Lamberts	include/Eternia/constants.h	/^        const double Lamberts = Lambert;$/;"	m	namespace:physical::unit
Lamberts	src/constants.h	/^        const double Lamberts = Lambert;$/;"	m	namespace:physical::unit
LanguageController	include/Eternia/Localization/LanguageController.h	/^        LanguageController();$/;"	p	class:LanguageController
LanguageController	include/Eternia/Localization/LanguageController.h	/^class LanguageController {$/;"	c
LanguageController	src/Localization/LanguageController.cpp	/^LanguageController::LanguageController() {$/;"	f	class:LanguageController
LanguageController	src/Localization/LanguageController.h	/^        LanguageController();$/;"	p	class:LanguageController
LanguageController	src/Localization/LanguageController.h	/^class LanguageController {$/;"	c
LanguageController::LanguageController	include/Eternia/Localization/LanguageController.h	/^        LanguageController();$/;"	p	class:LanguageController
LanguageController::LanguageController	src/Localization/LanguageController.cpp	/^LanguageController::LanguageController() {$/;"	f	class:LanguageController
LanguageController::LanguageController	src/Localization/LanguageController.h	/^        LanguageController();$/;"	p	class:LanguageController
LanguageController::addTranslation	include/Eternia/Localization/LanguageController.h	/^        void addTranslation(LANG langid, CharString* english, CharString* language); \/\/ single-word translation$/;"	p	class:LanguageController
LanguageController::addTranslation	src/Localization/LanguageController.h	/^        void addTranslation(LANG langid, CharString* english, CharString* language); \/\/ single-word translation$/;"	p	class:LanguageController
LanguageController::translateString	include/Eternia/Localization/LanguageController.h	/^        CharString* translateString(CharString* sentence); \/\/ Determine$/;"	p	class:LanguageController
LanguageController::translateString	src/Localization/LanguageController.h	/^        CharString* translateString(CharString* sentence); \/\/ Determine$/;"	p	class:LanguageController
LanguageController::translateWord	include/Eternia/Localization/LanguageController.h	/^        CharString* translateWord(CharString* word);$/;"	p	class:LanguageController
LanguageController::translateWord	src/Localization/LanguageController.h	/^        CharString* translateWord(CharString* word);$/;"	p	class:LanguageController
Lanthanum	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Lanthanum = new Atom("Lanthanum", "La", 0, 6, 57, 82,56, 6.145,0.00000061, 0.013, 1193,3737, 0.195, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Lanthanum	src/Engineering/Chemistry/elementals.h	/^const Atom Lanthanum = new Atom("Lanthanum", "La", 0, 6, 57, 82,56, 6.145,0.00000061, 0.013, 1193,3737, 0.195, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Laser_DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Laser_DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Lawrencium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Lawrencium = new Atom("Lawrencium", "Lr", 3, 7, 103, 159,102, UNKNOWN,UNKNOWN, UNKNOWN, 1900,UNKNOWN, UNKNOWN, 3, COLOR_SlateGray,ELEM_Actinide);$/;"	v
Lawrencium	src/Engineering/Chemistry/elementals.h	/^const Atom Lawrencium = new Atom("Lawrencium", "Lr", 3, 7, 103, 159,102, UNKNOWN,UNKNOWN, UNKNOWN, 1900,UNKNOWN, UNKNOWN, 3, COLOR_SlateGray,ELEM_Actinide);$/;"	v
Layout	include/Eternia/Design/Layout.h	/^        Layout();$/;"	p	class:Layout
Layout	include/Eternia/Design/Layout.h	/^class Layout : public LayoutObject {$/;"	c
Layout	src/Design/Layout.h	/^        Layout();$/;"	p	class:Layout
Layout	src/Design/Layout.h	/^class Layout : public LayoutObject {$/;"	c
Layout::Layout	include/Eternia/Design/Layout.h	/^        Layout();$/;"	p	class:Layout
Layout::Layout	src/Design/Layout.h	/^        Layout();$/;"	p	class:Layout
LayoutObject	include/Eternia/Design/LayoutObject.h	/^class LayoutObject {$/;"	c
LayoutObject	src/Design/LayoutObject.h	/^class LayoutObject {$/;"	c
LayoutObject::_draw	include/Eternia/Design/LayoutObject.h	/^        public void _draw();                    \/\/ pre-draw event$/;"	p	class:LayoutObject
LayoutObject::_draw	src/Design/LayoutObject.h	/^        public void _draw();                    \/\/ pre-draw event$/;"	p	class:LayoutObject
LayoutObject::addChild	include/Eternia/Design/LayoutObject.h	/^        public void addChild(LayoutObject* child);      \/\/ add a child$/;"	p	class:LayoutObject
LayoutObject::addChild	src/Design/LayoutObject.h	/^        public void addChild(LayoutObject* child);      \/\/ add a child$/;"	p	class:LayoutObject
LayoutObject::children	include/Eternia/Design/LayoutObject.h	/^        LinkedList<LayoutObject> *children; \/\/ children$/;"	m	class:LayoutObject
LayoutObject::children	src/Design/LayoutObject.h	/^        LinkedList<LayoutObject> *children; \/\/ children$/;"	m	class:LayoutObject
LayoutObject::clearChildren	include/Eternia/Design/LayoutObject.h	/^        public void clearChildren();                    \/\/ clears all children$/;"	p	class:LayoutObject
LayoutObject::clearChildren	src/Design/LayoutObject.h	/^        public void clearChildren();                    \/\/ clears all children$/;"	p	class:LayoutObject
LayoutObject::draw	include/Eternia/Design/LayoutObject.h	/^        bool resize, draw;$/;"	m	class:LayoutObject
LayoutObject::draw	include/Eternia/Design/LayoutObject.h	/^        public virtual void draw();             \/\/ abstract draw method (implements OpenGL, SDL, ect.)$/;"	p	class:LayoutObject
LayoutObject::draw	src/Design/LayoutObject.h	/^        bool resize, draw;$/;"	m	class:LayoutObject
LayoutObject::draw	src/Design/LayoutObject.h	/^        public virtual void draw();             \/\/ abstract draw method (implements OpenGL, SDL, ect.)$/;"	p	class:LayoutObject
LayoutObject::draw_	include/Eternia/Design/LayoutObject.h	/^        public void draw_();$/;"	p	class:LayoutObject
LayoutObject::draw_	src/Design/LayoutObject.h	/^        public void draw_();$/;"	p	class:LayoutObject
LayoutObject::getChildren	include/Eternia/Design/LayoutObject.h	/^        public LayoutObject* getChildren();             \/\/ get all children$/;"	p	class:LayoutObject
LayoutObject::getChildren	src/Design/LayoutObject.h	/^        public LayoutObject* getChildren();             \/\/ get all children$/;"	p	class:LayoutObject
LayoutObject::getParent	include/Eternia/Design/LayoutObject.h	/^        public LayoutObject* getParent();$/;"	p	class:LayoutObject
LayoutObject::getParent	src/Design/LayoutObject.h	/^        public LayoutObject* getParent();$/;"	p	class:LayoutObject
LayoutObject::height	include/Eternia/Design/LayoutObject.h	/^        int width, height;$/;"	m	class:LayoutObject
LayoutObject::height	src/Design/LayoutObject.h	/^        int width, height;$/;"	m	class:LayoutObject
LayoutObject::initObject	include/Eternia/Design/LayoutObject.h	/^        private initObject(); \/\/ initialize variables$/;"	p	class:LayoutObject
LayoutObject::initObject	src/Design/LayoutObject.h	/^        private initObject(); \/\/ initialize variables$/;"	p	class:LayoutObject
LayoutObject::parent	include/Eternia/Design/LayoutObject.h	/^        LayoutObject *parent; \/\/ parent object$/;"	m	class:LayoutObject
LayoutObject::parent	src/Design/LayoutObject.h	/^        LayoutObject *parent; \/\/ parent object$/;"	m	class:LayoutObject
LayoutObject::removeChild	include/Eternia/Design/LayoutObject.h	/^        public void removeChild(LayoutObject* child);   \/\/ remove a single child$/;"	p	class:LayoutObject
LayoutObject::removeChild	src/Design/LayoutObject.h	/^        public void removeChild(LayoutObject* child);   \/\/ remove a single child$/;"	p	class:LayoutObject
LayoutObject::resize	include/Eternia/Design/LayoutObject.h	/^        bool resize, draw;$/;"	m	class:LayoutObject
LayoutObject::resize	src/Design/LayoutObject.h	/^        bool resize, draw;$/;"	m	class:LayoutObject
LayoutObject::setParent	include/Eternia/Design/LayoutObject.h	/^        public void setParent(LayoutObject* child);$/;"	p	class:LayoutObject
LayoutObject::setParent	src/Design/LayoutObject.h	/^        public void setParent(LayoutObject* child);$/;"	p	class:LayoutObject
LayoutObject::width	include/Eternia/Design/LayoutObject.h	/^        int width, height;$/;"	m	class:LayoutObject
LayoutObject::width	src/Design/LayoutObject.h	/^        int width, height;$/;"	m	class:LayoutObject
LayoutObject::x	include/Eternia/Design/LayoutObject.h	/^        int x,y;$/;"	m	class:LayoutObject
LayoutObject::x	src/Design/LayoutObject.h	/^        int x,y;$/;"	m	class:LayoutObject
LayoutObject::y	include/Eternia/Design/LayoutObject.h	/^        int x,y;$/;"	m	class:LayoutObject
LayoutObject::y	src/Design/LayoutObject.h	/^        int x,y;$/;"	m	class:LayoutObject
LayoutObject::~LayoutObject	include/Eternia/Design/LayoutObject.h	/^        ~LayoutObject();$/;"	p	class:LayoutObject
LayoutObject::~LayoutObject	src/Design/LayoutObject.h	/^        ~LayoutObject();$/;"	p	class:LayoutObject
Lead	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Lead = new Atom("Lead", "Pb", 14, 6, 82, 126,81, 11.342,0.00000021, 0.035, 600.61,2022, 0.129, 4, COLOR_SlateGray,ELEM_Poor);$/;"	v
Lead	src/Engineering/Chemistry/elementals.h	/^const Atom Lead = new Atom("Lead", "Pb", 14, 6, 82, 126,81, 11.342,0.00000021, 0.035, 600.61,2022, 0.129, 4, COLOR_SlateGray,ELEM_Poor);$/;"	v
Less	include/Eternia/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	e	enum:MOperator
Less	src/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	e	enum:MOperator
LinkedList	include/Eternia/Data/LinkedList.hpp	/^    LinkedList() {$/;"	f	class:LinkedList
LinkedList	include/Eternia/Data/LinkedList.hpp	/^class LinkedList {$/;"	c
LinkedList	src/Data/LinkedList.hpp	/^    LinkedList() {$/;"	f	class:LinkedList
LinkedList	src/Data/LinkedList.hpp	/^class LinkedList {$/;"	c
LinkedList::LinkedList	include/Eternia/Data/LinkedList.hpp	/^    LinkedList() {$/;"	f	class:LinkedList
LinkedList::LinkedList	src/Data/LinkedList.hpp	/^    LinkedList() {$/;"	f	class:LinkedList
LinkedList::_size	include/Eternia/Data/LinkedList.hpp	/^    int _size;$/;"	m	class:LinkedList
LinkedList::_size	src/Data/LinkedList.hpp	/^    int _size;$/;"	m	class:LinkedList
LinkedList::add	include/Eternia/Data/LinkedList.hpp	/^    void add(T cc) {$/;"	f	class:LinkedList
LinkedList::add	include/Eternia/Data/LinkedList.hpp	/^    void add(T* cc) {$/;"	f	class:LinkedList
LinkedList::add	src/Data/LinkedList.hpp	/^    void add(T cc) {$/;"	f	class:LinkedList
LinkedList::add	src/Data/LinkedList.hpp	/^    void add(T* cc) {$/;"	f	class:LinkedList
LinkedList::baseNode	include/Eternia/Data/LinkedList.hpp	/^    LinkedNode<T>* baseNode;$/;"	m	class:LinkedList
LinkedList::baseNode	src/Data/LinkedList.hpp	/^    LinkedNode<T>* baseNode;$/;"	m	class:LinkedList
LinkedList::changed	include/Eternia/Data/LinkedList.hpp	/^    bool changed; \/\/ used with freezing to help keep better performance$/;"	m	class:LinkedList
LinkedList::changed	src/Data/LinkedList.hpp	/^    bool changed; \/\/ used with freezing to help keep better performance$/;"	m	class:LinkedList
LinkedList::clear	include/Eternia/Data/LinkedList.hpp	/^    void clear() {$/;"	f	class:LinkedList
LinkedList::clear	src/Data/LinkedList.hpp	/^    void clear() {$/;"	f	class:LinkedList
LinkedList::currentNode	include/Eternia/Data/LinkedList.hpp	/^    LinkedNode<T>* currentNode;$/;"	m	class:LinkedList
LinkedList::currentNode	src/Data/LinkedList.hpp	/^    LinkedNode<T>* currentNode;$/;"	m	class:LinkedList
LinkedList::freeze	include/Eternia/Data/LinkedList.hpp	/^    void freeze() {$/;"	f	class:LinkedList
LinkedList::freeze	src/Data/LinkedList.hpp	/^    void freeze() {$/;"	f	class:LinkedList
LinkedList::frozen	include/Eternia/Data/LinkedList.hpp	/^    T **frozen;$/;"	m	class:LinkedList
LinkedList::frozen	src/Data/LinkedList.hpp	/^    T **frozen;$/;"	m	class:LinkedList
LinkedList::frozenlen	include/Eternia/Data/LinkedList.hpp	/^    int frozenlen;$/;"	m	class:LinkedList
LinkedList::frozenlen	src/Data/LinkedList.hpp	/^    int frozenlen;$/;"	m	class:LinkedList
LinkedList::get	include/Eternia/Data/LinkedList.hpp	/^    T* get(int index) {$/;"	f	class:LinkedList
LinkedList::get	src/Data/LinkedList.hpp	/^    T* get(int index) {$/;"	f	class:LinkedList
LinkedList::insert	include/Eternia/Data/LinkedList.hpp	/^    void insert(T* data, int location){$/;"	f	class:LinkedList
LinkedList::insert	src/Data/LinkedList.hpp	/^    void insert(T* data, int location){$/;"	f	class:LinkedList
LinkedList::operator []	include/Eternia/Data/LinkedList.hpp	/^    T operator [](int i) const {$/;"	f	class:LinkedList
LinkedList::operator []	include/Eternia/Data/LinkedList.hpp	/^    T& operator [](int i){$/;"	f	class:LinkedList
LinkedList::operator []	src/Data/LinkedList.hpp	/^    T operator [](int i) const {$/;"	f	class:LinkedList
LinkedList::operator []	src/Data/LinkedList.hpp	/^    T& operator [](int i){$/;"	f	class:LinkedList
LinkedList::refreeze	include/Eternia/Data/LinkedList.hpp	/^    void refreeze(){$/;"	f	class:LinkedList
LinkedList::refreeze	src/Data/LinkedList.hpp	/^    void refreeze(){$/;"	f	class:LinkedList
LinkedList::remove	include/Eternia/Data/LinkedList.hpp	/^    T* remove(long index) {$/;"	f	class:LinkedList
LinkedList::remove	src/Data/LinkedList.hpp	/^    T* remove(long index) {$/;"	f	class:LinkedList
LinkedList::size	include/Eternia/Data/LinkedList.hpp	/^    int size() {$/;"	f	class:LinkedList
LinkedList::size	src/Data/LinkedList.hpp	/^    int size() {$/;"	f	class:LinkedList
LinkedList::slice	include/Eternia/Data/LinkedList.hpp	/^    LinkedList<T> slice(int start, int count, int skip){$/;"	f	class:LinkedList
LinkedList::slice	src/Data/LinkedList.hpp	/^    LinkedList<T> slice(int start, int count, int skip){$/;"	f	class:LinkedList
LinkedList::top	include/Eternia/Data/LinkedList.hpp	/^    LinkedNode<T>* top() {$/;"	f	class:LinkedList
LinkedList::top	src/Data/LinkedList.hpp	/^    LinkedNode<T>* top() {$/;"	f	class:LinkedList
LinkedList::typeSize	include/Eternia/Data/LinkedList.hpp	/^    int typeSize() {$/;"	f	class:LinkedList
LinkedList::typeSize	src/Data/LinkedList.hpp	/^    int typeSize() {$/;"	f	class:LinkedList
LinkedList::unfreeze	include/Eternia/Data/LinkedList.hpp	/^    void unfreeze(void* list, int bytes) {$/;"	f	class:LinkedList
LinkedList::unfreeze	src/Data/LinkedList.hpp	/^    void unfreeze(void* list, int bytes) {$/;"	f	class:LinkedList
LinkedList::~LinkedList	include/Eternia/Data/LinkedList.hpp	/^    ~LinkedList() {$/;"	f	class:LinkedList
LinkedList::~LinkedList	src/Data/LinkedList.hpp	/^    ~LinkedList() {$/;"	f	class:LinkedList
LinkedListT	include/Eternia/Algorithm/Pathing/DijkstraPath.hpp	/^class LinkedListT;$/;"	x
LinkedListT	include/Eternia/Data/LinkedListT.h	/^        LinkedListT();$/;"	p	class:LinkedListT
LinkedListT	include/Eternia/Data/LinkedListT.h	/^class LinkedListT {$/;"	c
LinkedListT	src/Algorithm/Pathing/DijkstraPath.hpp	/^class LinkedListT;$/;"	x
LinkedListT	src/Data/LinkedListT.cpp	/^LinkedListT::LinkedListT() {$/;"	f	class:LinkedListT
LinkedListT	src/Data/LinkedListT.h	/^        LinkedListT();$/;"	p	class:LinkedListT
LinkedListT	src/Data/LinkedListT.h	/^class LinkedListT {$/;"	c
LinkedListT::LinkedListT	include/Eternia/Data/LinkedListT.h	/^        LinkedListT();$/;"	p	class:LinkedListT
LinkedListT::LinkedListT	src/Data/LinkedListT.cpp	/^LinkedListT::LinkedListT() {$/;"	f	class:LinkedListT
LinkedListT::LinkedListT	src/Data/LinkedListT.h	/^        LinkedListT();$/;"	p	class:LinkedListT
LinkedListT::_size	include/Eternia/Data/LinkedListT.h	/^        int _size;$/;"	m	class:LinkedListT
LinkedListT::_size	src/Data/LinkedListT.h	/^        int _size;$/;"	m	class:LinkedListT
LinkedListT::add	include/Eternia/Data/LinkedListT.h	/^        void add(void *cc);$/;"	p	class:LinkedListT
LinkedListT::add	src/Data/LinkedListT.cpp	/^void LinkedListT::add(void *cc) {$/;"	f	class:LinkedListT
LinkedListT::add	src/Data/LinkedListT.h	/^        void add(void *cc);$/;"	p	class:LinkedListT
LinkedListT::baseNode	include/Eternia/Data/LinkedListT.h	/^        LinkedNodeT * baseNode;$/;"	m	class:LinkedListT
LinkedListT::baseNode	src/Data/LinkedListT.h	/^        LinkedNodeT * baseNode;$/;"	m	class:LinkedListT
LinkedListT::currentNode	include/Eternia/Data/LinkedListT.h	/^        LinkedNodeT * currentNode;$/;"	m	class:LinkedListT
LinkedListT::currentNode	src/Data/LinkedListT.h	/^        LinkedNodeT * currentNode;$/;"	m	class:LinkedListT
LinkedListT::freeze	include/Eternia/Data/LinkedListT.h	/^        void freeze();$/;"	p	class:LinkedListT
LinkedListT::freeze	src/Data/LinkedListT.cpp	/^void LinkedListT::freeze() {$/;"	f	class:LinkedListT
LinkedListT::freeze	src/Data/LinkedListT.h	/^        void freeze();$/;"	p	class:LinkedListT
LinkedListT::frozen	include/Eternia/Data/LinkedListT.h	/^        void **frozen;$/;"	m	class:LinkedListT
LinkedListT::frozen	src/Data/LinkedListT.h	/^        void **frozen;$/;"	m	class:LinkedListT
LinkedListT::frozenlen	include/Eternia/Data/LinkedListT.h	/^        int frozenlen;$/;"	m	class:LinkedListT
LinkedListT::frozenlen	src/Data/LinkedListT.h	/^        int frozenlen;$/;"	m	class:LinkedListT
LinkedListT::get	include/Eternia/Data/LinkedListT.h	/^        void* get(int index);$/;"	p	class:LinkedListT
LinkedListT::get	src/Data/LinkedListT.cpp	/^void* LinkedListT::get(int index) {$/;"	f	class:LinkedListT
LinkedListT::get	src/Data/LinkedListT.h	/^        void* get(int index);$/;"	p	class:LinkedListT
LinkedListT::size	include/Eternia/Data/LinkedListT.h	/^        int size();$/;"	p	class:LinkedListT
LinkedListT::size	src/Data/LinkedListT.cpp	/^int LinkedListT::size() {$/;"	f	class:LinkedListT
LinkedListT::size	src/Data/LinkedListT.h	/^        int size();$/;"	p	class:LinkedListT
LinkedListT::~LinkedListT	include/Eternia/Data/LinkedListT.h	/^        virtual ~LinkedListT();$/;"	p	class:LinkedListT
LinkedListT::~LinkedListT	src/Data/LinkedListT.cpp	/^LinkedListT::~LinkedListT() {$/;"	f	class:LinkedListT
LinkedListT::~LinkedListT	src/Data/LinkedListT.h	/^        virtual ~LinkedListT();$/;"	p	class:LinkedListT
LinkedMap	include/Eternia/Data/LinkedMap.h	/^        LinkedMap();$/;"	p	class:LinkedMap
LinkedMap	include/Eternia/Data/LinkedMap.h	/^class LinkedMap {$/;"	c
LinkedMap	src/Data/LinkedMap.cpp	/^LinkedMap::LinkedMap() {$/;"	f	class:LinkedMap
LinkedMap	src/Data/LinkedMap.h	/^        LinkedMap();$/;"	p	class:LinkedMap
LinkedMap	src/Data/LinkedMap.h	/^class LinkedMap {$/;"	c
LinkedMap::LinkedMap	include/Eternia/Data/LinkedMap.h	/^        LinkedMap();$/;"	p	class:LinkedMap
LinkedMap::LinkedMap	src/Data/LinkedMap.cpp	/^LinkedMap::LinkedMap() {$/;"	f	class:LinkedMap
LinkedMap::LinkedMap	src/Data/LinkedMap.h	/^        LinkedMap();$/;"	p	class:LinkedMap
LinkedMap::add	include/Eternia/Data/LinkedMap.h	/^        void add(char* key, char* data);$/;"	p	class:LinkedMap
LinkedMap::add	src/Data/LinkedMap.cpp	/^void LinkedMap::add(char* key,char* cc) {$/;"	f	class:LinkedMap
LinkedMap::add	src/Data/LinkedMap.h	/^        void add(char* key, char* data);$/;"	p	class:LinkedMap
LinkedMap::baseNode	include/Eternia/Data/LinkedMap.h	/^        LinkedMapNode * baseNode;$/;"	m	class:LinkedMap
LinkedMap::baseNode	src/Data/LinkedMap.h	/^        LinkedMapNode * baseNode;$/;"	m	class:LinkedMap
LinkedMap::clear	include/Eternia/Data/LinkedMap.h	/^        void clear();$/;"	p	class:LinkedMap
LinkedMap::clear	src/Data/LinkedMap.cpp	/^void LinkedMap::clear() {$/;"	f	class:LinkedMap
LinkedMap::clear	src/Data/LinkedMap.h	/^        void clear();$/;"	p	class:LinkedMap
LinkedMap::currentNode	include/Eternia/Data/LinkedMap.h	/^        LinkedMapNode * currentNode;$/;"	m	class:LinkedMap
LinkedMap::currentNode	src/Data/LinkedMap.h	/^        LinkedMapNode * currentNode;$/;"	m	class:LinkedMap
LinkedMap::get	include/Eternia/Data/LinkedMap.h	/^        char* get(char* key);$/;"	p	class:LinkedMap
LinkedMap::get	include/Eternia/Data/LinkedMap.h	/^        char* get(int index);$/;"	p	class:LinkedMap
LinkedMap::get	src/Data/LinkedMap.cpp	/^char* LinkedMap::get(char* key) {$/;"	f	class:LinkedMap
LinkedMap::get	src/Data/LinkedMap.cpp	/^char* LinkedMap::get(int index) {$/;"	f	class:LinkedMap
LinkedMap::get	src/Data/LinkedMap.h	/^        char* get(char* key);$/;"	p	class:LinkedMap
LinkedMap::get	src/Data/LinkedMap.h	/^        char* get(int index);$/;"	p	class:LinkedMap
LinkedMap::~LinkedMap	include/Eternia/Data/LinkedMap.h	/^        virtual ~LinkedMap();$/;"	p	class:LinkedMap
LinkedMap::~LinkedMap	src/Data/LinkedMap.cpp	/^LinkedMap::~LinkedMap() {$/;"	f	class:LinkedMap
LinkedMap::~LinkedMap	src/Data/LinkedMap.h	/^        virtual ~LinkedMap();$/;"	p	class:LinkedMap
LinkedMapNode	include/Eternia/Data/LinkedMap.h	/^        LinkedMapNode();$/;"	p	class:LinkedMapNode
LinkedMapNode	include/Eternia/Data/LinkedMap.h	/^class LinkedMapNode {$/;"	c
LinkedMapNode	src/Data/LinkedMap.cpp	/^LinkedMapNode::LinkedMapNode() {$/;"	f	class:LinkedMapNode
LinkedMapNode	src/Data/LinkedMap.h	/^        LinkedMapNode();$/;"	p	class:LinkedMapNode
LinkedMapNode	src/Data/LinkedMap.h	/^class LinkedMapNode {$/;"	c
LinkedMapNode::LinkedMapNode	include/Eternia/Data/LinkedMap.h	/^        LinkedMapNode();$/;"	p	class:LinkedMapNode
LinkedMapNode::LinkedMapNode	src/Data/LinkedMap.cpp	/^LinkedMapNode::LinkedMapNode() {$/;"	f	class:LinkedMapNode
LinkedMapNode::LinkedMapNode	src/Data/LinkedMap.h	/^        LinkedMapNode();$/;"	p	class:LinkedMapNode
LinkedMapNode::data	include/Eternia/Data/LinkedMap.h	/^        void * data;$/;"	m	class:LinkedMapNode
LinkedMapNode::data	src/Data/LinkedMap.h	/^        void * data;$/;"	m	class:LinkedMapNode
LinkedMapNode::key	include/Eternia/Data/LinkedMap.h	/^        char * key; \/\/ <-- primary key$/;"	m	class:LinkedMapNode
LinkedMapNode::key	src/Data/LinkedMap.h	/^        char * key; \/\/ <-- primary key$/;"	m	class:LinkedMapNode
LinkedMapNode::next	include/Eternia/Data/LinkedMap.h	/^        void * next;$/;"	m	class:LinkedMapNode
LinkedMapNode::next	src/Data/LinkedMap.h	/^        void * next;$/;"	m	class:LinkedMapNode
LinkedMapNode::prev	include/Eternia/Data/LinkedMap.h	/^        void * prev;$/;"	m	class:LinkedMapNode
LinkedMapNode::prev	src/Data/LinkedMap.h	/^        void * prev;$/;"	m	class:LinkedMapNode
LinkedMapNode::self	include/Eternia/Data/LinkedMap.h	/^        LinkedMapNode* const self();$/;"	p	class:LinkedMapNode
LinkedMapNode::self	src/Data/LinkedMap.cpp	/^LinkedMapNode* const LinkedMapNode::self() {$/;"	f	class:LinkedMapNode
LinkedMapNode::self	src/Data/LinkedMap.h	/^        LinkedMapNode* const self();$/;"	p	class:LinkedMapNode
LinkedMapNode::~LinkedMapNode	include/Eternia/Data/LinkedMap.h	/^        virtual ~LinkedMapNode();$/;"	p	class:LinkedMapNode
LinkedMapNode::~LinkedMapNode	src/Data/LinkedMap.cpp	/^LinkedMapNode::~LinkedMapNode() {$/;"	f	class:LinkedMapNode
LinkedMapNode::~LinkedMapNode	src/Data/LinkedMap.h	/^        virtual ~LinkedMapNode();$/;"	p	class:LinkedMapNode
LinkedNode	include/Eternia/Data/LinkedList.hpp	/^    LinkedNode() {$/;"	f	class:LinkedNode
LinkedNode	include/Eternia/Data/LinkedList.hpp	/^class LinkedNode {$/;"	c
LinkedNode	src/Data/LinkedList.hpp	/^    LinkedNode() {$/;"	f	class:LinkedNode
LinkedNode	src/Data/LinkedList.hpp	/^class LinkedNode {$/;"	c
LinkedNode::LinkedNode	include/Eternia/Data/LinkedList.hpp	/^    LinkedNode() {$/;"	f	class:LinkedNode
LinkedNode::LinkedNode	src/Data/LinkedList.hpp	/^    LinkedNode() {$/;"	f	class:LinkedNode
LinkedNode::data	include/Eternia/Data/LinkedList.hpp	/^    T* data;$/;"	m	class:LinkedNode
LinkedNode::data	src/Data/LinkedList.hpp	/^    T* data;$/;"	m	class:LinkedNode
LinkedNode::id	include/Eternia/Data/LinkedList.hpp	/^    int id;$/;"	m	class:LinkedNode
LinkedNode::id	src/Data/LinkedList.hpp	/^    int id;$/;"	m	class:LinkedNode
LinkedNode::next	include/Eternia/Data/LinkedList.hpp	/^    LinkedNode<T> * next;$/;"	m	class:LinkedNode
LinkedNode::next	src/Data/LinkedList.hpp	/^    LinkedNode<T> * next;$/;"	m	class:LinkedNode
LinkedNode::~LinkedNode	include/Eternia/Data/LinkedList.hpp	/^    ~LinkedNode() {$/;"	f	class:LinkedNode
LinkedNode::~LinkedNode	src/Data/LinkedList.hpp	/^    ~LinkedNode() {$/;"	f	class:LinkedNode
LinkedNodeT	include/Eternia/Data/LinkedListT.h	/^        LinkedNodeT();$/;"	p	class:LinkedNodeT
LinkedNodeT	include/Eternia/Data/LinkedListT.h	/^class LinkedNodeT {$/;"	c
LinkedNodeT	src/Data/LinkedListT.cpp	/^LinkedNodeT::LinkedNodeT() {$/;"	f	class:LinkedNodeT
LinkedNodeT	src/Data/LinkedListT.h	/^        LinkedNodeT();$/;"	p	class:LinkedNodeT
LinkedNodeT	src/Data/LinkedListT.h	/^class LinkedNodeT {$/;"	c
LinkedNodeT::LinkedNodeT	include/Eternia/Data/LinkedListT.h	/^        LinkedNodeT();$/;"	p	class:LinkedNodeT
LinkedNodeT::LinkedNodeT	src/Data/LinkedListT.cpp	/^LinkedNodeT::LinkedNodeT() {$/;"	f	class:LinkedNodeT
LinkedNodeT::LinkedNodeT	src/Data/LinkedListT.h	/^        LinkedNodeT();$/;"	p	class:LinkedNodeT
LinkedNodeT::data	include/Eternia/Data/LinkedListT.h	/^        void * data;$/;"	m	class:LinkedNodeT
LinkedNodeT::data	src/Data/LinkedListT.h	/^        void * data;$/;"	m	class:LinkedNodeT
LinkedNodeT::next	include/Eternia/Data/LinkedListT.h	/^        LinkedNodeT * next;$/;"	m	class:LinkedNodeT
LinkedNodeT::next	src/Data/LinkedListT.h	/^        LinkedNodeT * next;$/;"	m	class:LinkedNodeT
LinkedNodeT::prev	include/Eternia/Data/LinkedListT.h	/^        LinkedNodeT * prev;$/;"	m	class:LinkedNodeT
LinkedNodeT::prev	src/Data/LinkedListT.h	/^        LinkedNodeT * prev;$/;"	m	class:LinkedNodeT
LinkedNodeT::~LinkedNodeT	include/Eternia/Data/LinkedListT.h	/^        virtual ~LinkedNodeT();$/;"	p	class:LinkedNodeT
LinkedNodeT::~LinkedNodeT	src/Data/LinkedListT.cpp	/^LinkedNodeT::~LinkedNodeT() {$/;"	f	class:LinkedNodeT
LinkedNodeT::~LinkedNodeT	src/Data/LinkedListT.h	/^        virtual ~LinkedNodeT();$/;"	p	class:LinkedNodeT
ListenSocket	include/Eternia/WebFramework/Network/SocketServer.h	/^    SOCKET ListenSocket = INVALID_SOCKET;$/;"	m	class:SocketServer
ListenSocket	src/WebFramework/Network/SocketServer.h	/^    SOCKET ListenSocket = INVALID_SOCKET;$/;"	m	class:SocketServer
Lithium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Lithium = new Atom("Lithium", "Li", 1, 2, 3, 4,3, 0.534,0.000000094, 0.085, 453.69,1560, 3.582, 1, COLOR_Silver,ELEM_Alkali);$/;"	v
Lithium	src/Engineering/Chemistry/elementals.h	/^const Atom Lithium = new Atom("Lithium", "Li", 1, 2, 3, 4,3, 0.534,0.000000094, 0.085, 453.69,1560, 3.582, 1, COLOR_Silver,ELEM_Alkali);$/;"	v
Livermorium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Livermorium = new Atom("Livermorium", "Lv", 16, 7, 116,  ,115, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Poor);$/;"	v
Livermorium	src/Engineering/Chemistry/elementals.h	/^const Atom Livermorium = new Atom("Livermorium", "Lv", 16, 7, 116,  ,115, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Poor);$/;"	v
LocalLayout	include/Eternia/Design/LocalLayout.h	/^        LocalLayout();$/;"	p	class:LocalLayout
LocalLayout	include/Eternia/Design/LocalLayout.h	/^class LocalLayout : public Layout {$/;"	c
LocalLayout	src/Design/LocalLayout.h	/^        LocalLayout();$/;"	p	class:LocalLayout
LocalLayout	src/Design/LocalLayout.h	/^class LocalLayout : public Layout {$/;"	c
LocalLayout::LocalLayout	include/Eternia/Design/LocalLayout.h	/^        LocalLayout();$/;"	p	class:LocalLayout
LocalLayout::LocalLayout	src/Design/LocalLayout.h	/^        LocalLayout();$/;"	p	class:LocalLayout
LocalLayout::~LocalLayout	include/Eternia/Design/LocalLayout.h	/^        virtual ~LocalLayout();$/;"	p	class:LocalLayout
LocalLayout::~LocalLayout	src/Design/LocalLayout.h	/^        virtual ~LocalLayout();$/;"	p	class:LocalLayout
Location	include/Eternia/Gamelogic/Location.h	/^        Location();$/;"	p	class:Location
Location	include/Eternia/Gamelogic/Location.h	/^        Location(vertex sector, VertexObject local);$/;"	p	class:Location
Location	include/Eternia/Gamelogic/Location.h	/^class Location : public SpecificSerializer {$/;"	c
Location	src/Gamelogic/Location.cpp	/^Location::Location() {$/;"	f	class:Location
Location	src/Gamelogic/Location.cpp	/^Location::Location(vertex loc1, VertexObject loc2) {$/;"	f	class:Location
Location	src/Gamelogic/Location.h	/^        Location();$/;"	p	class:Location
Location	src/Gamelogic/Location.h	/^        Location(vertex sector, VertexObject local);$/;"	p	class:Location
Location	src/Gamelogic/Location.h	/^class Location : public SpecificSerializer {$/;"	c
Location::Location	include/Eternia/Gamelogic/Location.h	/^        Location();$/;"	p	class:Location
Location::Location	include/Eternia/Gamelogic/Location.h	/^        Location(vertex sector, VertexObject local);$/;"	p	class:Location
Location::Location	src/Gamelogic/Location.cpp	/^Location::Location() {$/;"	f	class:Location
Location::Location	src/Gamelogic/Location.cpp	/^Location::Location(vertex loc1, VertexObject loc2) {$/;"	f	class:Location
Location::Location	src/Gamelogic/Location.h	/^        Location();$/;"	p	class:Location
Location::Location	src/Gamelogic/Location.h	/^        Location(vertex sector, VertexObject local);$/;"	p	class:Location
Location::local	include/Eternia/Gamelogic/Location.h	/^        VertexObject local; \/\/ local area (by local, solar-system wide)$/;"	m	class:Location
Location::local	src/Gamelogic/Location.h	/^        VertexObject local; \/\/ local area (by local, solar-system wide)$/;"	m	class:Location
Location::sector	include/Eternia/Gamelogic/Location.h	/^        vertex sector; \/\/ sector quadrant$/;"	m	class:Location
Location::sector	src/Gamelogic/Location.h	/^        vertex sector; \/\/ sector quadrant$/;"	m	class:Location
Log	include/Eternia/Data/Logger/Logger.h	/^    void Log(CharString data);$/;"	p	class:Logger
Log	src/Data/Logger/Logger.cpp	/^void Logger::Log(CharString data){$/;"	f	class:Logger
Log	src/Data/Logger/Logger.h	/^    void Log(CharString data);$/;"	p	class:Logger
Logger	include/Eternia/Data/Logger/Logger.h	/^    Logger(); \/\/ Runs basic properties, unknown values?$/;"	p	class:Logger
Logger	include/Eternia/Data/Logger/Logger.h	/^    Logger(CharString logfileloc, CharString prefix, bool async, bool console, bool clearfile); \/\/ if ASYNC, start thread$/;"	p	class:Logger
Logger	include/Eternia/Data/Logger/Logger.h	/^class Logger{$/;"	c
Logger	src/Data/Logger/Logger.cpp	/^Logger::Logger(){$/;"	f	class:Logger
Logger	src/Data/Logger/Logger.cpp	/^Logger::Logger(CharString logfileloc, CharString prefix, bool async, bool console, bool clearfile){$/;"	f	class:Logger
Logger	src/Data/Logger/Logger.h	/^    Logger(); \/\/ Runs basic properties, unknown values?$/;"	p	class:Logger
Logger	src/Data/Logger/Logger.h	/^    Logger(CharString logfileloc, CharString prefix, bool async, bool console, bool clearfile); \/\/ if ASYNC, start thread$/;"	p	class:Logger
Logger	src/Data/Logger/Logger.h	/^class Logger{$/;"	c
Logger::Log	include/Eternia/Data/Logger/Logger.h	/^    void Log(CharString data);$/;"	p	class:Logger
Logger::Log	src/Data/Logger/Logger.cpp	/^void Logger::Log(CharString data){$/;"	f	class:Logger
Logger::Log	src/Data/Logger/Logger.h	/^    void Log(CharString data);$/;"	p	class:Logger
Logger::Logger	include/Eternia/Data/Logger/Logger.h	/^    Logger(); \/\/ Runs basic properties, unknown values?$/;"	p	class:Logger
Logger::Logger	include/Eternia/Data/Logger/Logger.h	/^    Logger(CharString logfileloc, CharString prefix, bool async, bool console, bool clearfile); \/\/ if ASYNC, start thread$/;"	p	class:Logger
Logger::Logger	src/Data/Logger/Logger.cpp	/^Logger::Logger(){$/;"	f	class:Logger
Logger::Logger	src/Data/Logger/Logger.cpp	/^Logger::Logger(CharString logfileloc, CharString prefix, bool async, bool console, bool clearfile){$/;"	f	class:Logger
Logger::Logger	src/Data/Logger/Logger.h	/^    Logger(); \/\/ Runs basic properties, unknown values?$/;"	p	class:Logger
Logger::Logger	src/Data/Logger/Logger.h	/^    Logger(CharString logfileloc, CharString prefix, bool async, bool console, bool clearfile); \/\/ if ASYNC, start thread$/;"	p	class:Logger
Logger::async	include/Eternia/Data/Logger/Logger.h	/^    bool async, console, ending;$/;"	m	class:Logger
Logger::async	src/Data/Logger/Logger.h	/^    bool async, console, ending;$/;"	m	class:Logger
Logger::asyncLog	include/Eternia/Data/Logger/Logger.h	/^    Queue asyncLog;$/;"	m	class:Logger
Logger::asyncLog	src/Data/Logger/Logger.h	/^    Queue asyncLog;$/;"	m	class:Logger
Logger::asyncthread	include/Eternia/Data/Logger/Logger.h	/^    std::thread asyncthread;$/;"	m	class:Logger
Logger::asyncthread	src/Data/Logger/Logger.h	/^    std::thread asyncthread;$/;"	m	class:Logger
Logger::console	include/Eternia/Data/Logger/Logger.h	/^    bool async, console, ending;$/;"	m	class:Logger
Logger::console	src/Data/Logger/Logger.h	/^    bool async, console, ending;$/;"	m	class:Logger
Logger::ending	include/Eternia/Data/Logger/Logger.h	/^    bool async, console, ending;$/;"	m	class:Logger
Logger::ending	src/Data/Logger/Logger.h	/^    bool async, console, ending;$/;"	m	class:Logger
Logger::file	include/Eternia/Data/Logger/Logger.h	/^    std::ofstream file;$/;"	m	class:Logger
Logger::file	src/Data/Logger/Logger.h	/^    std::ofstream file;$/;"	m	class:Logger
Logger::handleLogs	include/Eternia/Data/Logger/Logger.h	/^    bool handleLogs(); \/\/ internal Async command, writes to file$/;"	p	class:Logger
Logger::handleLogs	src/Data/Logger/Logger.cpp	/^bool Logger::handleLogs(){$/;"	f	class:Logger
Logger::handleLogs	src/Data/Logger/Logger.h	/^    bool handleLogs(); \/\/ internal Async command, writes to file$/;"	p	class:Logger
Logger::logfileloc	include/Eternia/Data/Logger/Logger.h	/^    CharString logfileloc, prefix;$/;"	m	class:Logger
Logger::logfileloc	src/Data/Logger/Logger.h	/^    CharString logfileloc, prefix;$/;"	m	class:Logger
Logger::prefix	include/Eternia/Data/Logger/Logger.h	/^    CharString logfileloc, prefix;$/;"	m	class:Logger
Logger::prefix	src/Data/Logger/Logger.h	/^    CharString logfileloc, prefix;$/;"	m	class:Logger
Logger::processLog	include/Eternia/Data/Logger/Logger.h	/^    void processLog(CharString data);$/;"	p	class:Logger
Logger::processLog	src/Data/Logger/Logger.cpp	/^void Logger::processLog(CharString data){$/;"	f	class:Logger
Logger::processLog	src/Data/Logger/Logger.h	/^    void processLog(CharString data);$/;"	p	class:Logger
Logger::~Logger	include/Eternia/Data/Logger/Logger.h	/^    virtual ~Logger(); \/\/ if ASYNC, stop thread$/;"	p	class:Logger
Logger::~Logger	src/Data/Logger/Logger.cpp	/^Logger::~Logger(){$/;"	f	class:Logger
Logger::~Logger	src/Data/Logger/Logger.h	/^    virtual ~Logger(); \/\/ if ASYNC, stop thread$/;"	p	class:Logger
Lutetium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Lutetium = new Atom("Lutetium", "Lu", 3, 6, 71, 104,70, 9.84,0.00000056, 0.016, 1925,3675, 0.154, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Lutetium	src/Engineering/Chemistry/elementals.h	/^const Atom Lutetium = new Atom("Lutetium", "Lu", 3, 6, 71, 104,70, 9.84,0.00000056, 0.016, 1925,3675, 0.154, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
M	include/Eternia/constants.h	/^        const double M = Maxwell;$/;"	m	namespace:physical::unit
M	src/constants.h	/^        const double M = Maxwell;$/;"	m	namespace:physical::unit
MAJOR	version.h	/^#define MAJOR /;"	d
MATHBASIC_H_	include/Eternia/Math/Functions/Basic.h	/^#define MATHBASIC_H_$/;"	d
MATHBASIC_H_	src/Math/Functions/Basic.h	/^#define MATHBASIC_H_$/;"	d
MATH_H_	include/Eternia/Math/Math.h	/^#define MATH_H_$/;"	d
MATH_H_	src/Math/Math.h	/^#define MATH_H_$/;"	d
MATRIX_H_	include/Eternia/Math/struct/Matrix.h	/^#define MATRIX_H_$/;"	d
MATRIX_H_	src/Math/struct/Matrix.h	/^#define MATRIX_H_$/;"	d
MAX_RUNS	src/Math/Functions/Basic.cpp	/^#define MAX_RUNS /;"	d	file:
MC0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MC0 /;"	d
MC0	src/Emulation/MPU/msp430g2553.h	/^#define MC0 /;"	d
MC1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MC1 /;"	d
MC1	src/Emulation/MPU/msp430g2553.h	/^#define MC1 /;"	d
MC_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MC_0 /;"	d
MC_0	src/Emulation/MPU/msp430g2553.h	/^#define MC_0 /;"	d
MC_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MC_1 /;"	d
MC_1	src/Emulation/MPU/msp430g2553.h	/^#define MC_1 /;"	d
MC_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MC_2 /;"	d
MC_2	src/Emulation/MPU/msp430g2553.h	/^#define MC_2 /;"	d
MC_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MC_3 /;"	d
MC_3	src/Emulation/MPU/msp430g2553.h	/^#define MC_3 /;"	d
MD5	include/Eternia/Algorithm/Cryptography/md5.h	/^        MD5();$/;"	p	class:MD5
MD5	include/Eternia/Algorithm/Cryptography/md5.h	/^        MD5(const std::string& text);$/;"	p	class:MD5
MD5	include/Eternia/Algorithm/Cryptography/md5.h	/^class MD5 {$/;"	c
MD5	src/Algorithm/Cryptography/md5.cpp	/^MD5::MD5() {$/;"	f	class:MD5
MD5	src/Algorithm/Cryptography/md5.cpp	/^MD5::MD5(const std::string &text) {$/;"	f	class:MD5
MD5	src/Algorithm/Cryptography/md5.h	/^        MD5();$/;"	p	class:MD5
MD5	src/Algorithm/Cryptography/md5.h	/^        MD5(const std::string& text);$/;"	p	class:MD5
MD5	src/Algorithm/Cryptography/md5.h	/^class MD5 {$/;"	c
MD5::F	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline uint4 F(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
MD5::F	src/Algorithm/Cryptography/md5.cpp	/^inline MD5::uint4 MD5::F(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5
MD5::F	src/Algorithm/Cryptography/md5.h	/^        static inline uint4 F(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
MD5::FF	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline void FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
MD5::FF	src/Algorithm/Cryptography/md5.cpp	/^inline void MD5::FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5
MD5::FF	src/Algorithm/Cryptography/md5.h	/^        static inline void FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
MD5::G	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline uint4 G(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
MD5::G	src/Algorithm/Cryptography/md5.cpp	/^inline MD5::uint4 MD5::G(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5
MD5::G	src/Algorithm/Cryptography/md5.h	/^        static inline uint4 G(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
MD5::GG	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline void GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
MD5::GG	src/Algorithm/Cryptography/md5.cpp	/^inline void MD5::GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5
MD5::GG	src/Algorithm/Cryptography/md5.h	/^        static inline void GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
MD5::H	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline uint4 H(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
MD5::H	src/Algorithm/Cryptography/md5.cpp	/^inline MD5::uint4 MD5::H(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5
MD5::H	src/Algorithm/Cryptography/md5.h	/^        static inline uint4 H(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
MD5::HH	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline void HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
MD5::HH	src/Algorithm/Cryptography/md5.cpp	/^inline void MD5::HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5
MD5::HH	src/Algorithm/Cryptography/md5.h	/^        static inline void HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
MD5::I	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline uint4 I(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
MD5::I	src/Algorithm/Cryptography/md5.cpp	/^inline MD5::uint4 MD5::I(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5
MD5::I	src/Algorithm/Cryptography/md5.h	/^        static inline uint4 I(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5
MD5::II	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline void II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
MD5::II	src/Algorithm/Cryptography/md5.cpp	/^inline void MD5::II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5
MD5::II	src/Algorithm/Cryptography/md5.h	/^        static inline void II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5
MD5::MD5	include/Eternia/Algorithm/Cryptography/md5.h	/^        MD5();$/;"	p	class:MD5
MD5::MD5	include/Eternia/Algorithm/Cryptography/md5.h	/^        MD5(const std::string& text);$/;"	p	class:MD5
MD5::MD5	src/Algorithm/Cryptography/md5.cpp	/^MD5::MD5() {$/;"	f	class:MD5
MD5::MD5	src/Algorithm/Cryptography/md5.cpp	/^MD5::MD5(const std::string &text) {$/;"	f	class:MD5
MD5::MD5	src/Algorithm/Cryptography/md5.h	/^        MD5();$/;"	p	class:MD5
MD5::MD5	src/Algorithm/Cryptography/md5.h	/^        MD5(const std::string& text);$/;"	p	class:MD5
MD5::blocksize	include/Eternia/Algorithm/Cryptography/md5.h	/^        enum {blocksize = 64}; \/\/ VC6 won't eat a const static int here$/;"	e	enum:MD5::__anon8
MD5::blocksize	src/Algorithm/Cryptography/md5.h	/^        enum {blocksize = 64}; \/\/ VC6 won't eat a const static int here$/;"	e	enum:MD5::__anon2
MD5::buffer	include/Eternia/Algorithm/Cryptography/md5.h	/^        uint1 buffer[blocksize]; \/\/ bytes that didn't fit in last 64 byte chunk$/;"	m	class:MD5
MD5::buffer	src/Algorithm/Cryptography/md5.h	/^        uint1 buffer[blocksize]; \/\/ bytes that didn't fit in last 64 byte chunk$/;"	m	class:MD5
MD5::count	include/Eternia/Algorithm/Cryptography/md5.h	/^        uint4 count[2];   \/\/ 64bit counter for number of bits (lo, hi)$/;"	m	class:MD5
MD5::count	src/Algorithm/Cryptography/md5.h	/^        uint4 count[2];   \/\/ 64bit counter for number of bits (lo, hi)$/;"	m	class:MD5
MD5::decode	include/Eternia/Algorithm/Cryptography/md5.h	/^        static void decode(uint4 output[], const uint1 input[], size_type len);$/;"	p	class:MD5
MD5::decode	src/Algorithm/Cryptography/md5.cpp	/^void MD5::decode(uint4 output[], const uint1 input[], size_type len) {$/;"	f	class:MD5
MD5::decode	src/Algorithm/Cryptography/md5.h	/^        static void decode(uint4 output[], const uint1 input[], size_type len);$/;"	p	class:MD5
MD5::digest	include/Eternia/Algorithm/Cryptography/md5.h	/^        uint1 digest[16]; \/\/ the result$/;"	m	class:MD5
MD5::digest	src/Algorithm/Cryptography/md5.h	/^        uint1 digest[16]; \/\/ the result$/;"	m	class:MD5
MD5::encode	include/Eternia/Algorithm/Cryptography/md5.h	/^        static void encode(uint1 output[], const uint4 input[], size_type len);$/;"	p	class:MD5
MD5::encode	src/Algorithm/Cryptography/md5.cpp	/^void MD5::encode(uint1 output[], const uint4 input[], size_type len) {$/;"	f	class:MD5
MD5::encode	src/Algorithm/Cryptography/md5.h	/^        static void encode(uint1 output[], const uint4 input[], size_type len);$/;"	p	class:MD5
MD5::finalize	include/Eternia/Algorithm/Cryptography/md5.h	/^        MD5& finalize();$/;"	p	class:MD5
MD5::finalize	src/Algorithm/Cryptography/md5.cpp	/^MD5& MD5::finalize() {$/;"	f	class:MD5
MD5::finalize	src/Algorithm/Cryptography/md5.h	/^        MD5& finalize();$/;"	p	class:MD5
MD5::finalized	include/Eternia/Algorithm/Cryptography/md5.h	/^        bool finalized;$/;"	m	class:MD5
MD5::finalized	src/Algorithm/Cryptography/md5.h	/^        bool finalized;$/;"	m	class:MD5
MD5::hexdigest	include/Eternia/Algorithm/Cryptography/md5.h	/^        std::string hexdigest() const;$/;"	p	class:MD5
MD5::hexdigest	src/Algorithm/Cryptography/md5.cpp	/^std::string MD5::hexdigest() const {$/;"	f	class:MD5
MD5::hexdigest	src/Algorithm/Cryptography/md5.h	/^        std::string hexdigest() const;$/;"	p	class:MD5
MD5::init	include/Eternia/Algorithm/Cryptography/md5.h	/^        void init();$/;"	p	class:MD5
MD5::init	src/Algorithm/Cryptography/md5.cpp	/^void MD5::init() {$/;"	f	class:MD5
MD5::init	src/Algorithm/Cryptography/md5.h	/^        void init();$/;"	p	class:MD5
MD5::operator <<	include/Eternia/Algorithm/Cryptography/md5.h	/^        friend std::ostream& operator<<(std::ostream&, MD5 md5);$/;"	p	class:MD5
MD5::operator <<	src/Algorithm/Cryptography/md5.h	/^        friend std::ostream& operator<<(std::ostream&, MD5 md5);$/;"	p	class:MD5
MD5::rotate_left	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline uint4 rotate_left(uint4 x, int n);$/;"	p	class:MD5
MD5::rotate_left	src/Algorithm/Cryptography/md5.cpp	/^inline MD5::uint4 MD5::rotate_left(uint4 x, int n) {$/;"	f	class:MD5
MD5::rotate_left	src/Algorithm/Cryptography/md5.h	/^        static inline uint4 rotate_left(uint4 x, int n);$/;"	p	class:MD5
MD5::size_type	include/Eternia/Algorithm/Cryptography/md5.h	/^        typedef unsigned int size_type; \/\/ must be 32bit$/;"	t	class:MD5
MD5::size_type	src/Algorithm/Cryptography/md5.h	/^        typedef unsigned int size_type; \/\/ must be 32bit$/;"	t	class:MD5
MD5::state	include/Eternia/Algorithm/Cryptography/md5.h	/^        uint4 state[4];   \/\/ digest so far$/;"	m	class:MD5
MD5::state	src/Algorithm/Cryptography/md5.h	/^        uint4 state[4];   \/\/ digest so far$/;"	m	class:MD5
MD5::transform	include/Eternia/Algorithm/Cryptography/md5.h	/^        void transform(const uint1 block[blocksize]);$/;"	p	class:MD5
MD5::transform	src/Algorithm/Cryptography/md5.cpp	/^void MD5::transform(const uint1 block[blocksize]) {$/;"	f	class:MD5
MD5::transform	src/Algorithm/Cryptography/md5.h	/^        void transform(const uint1 block[blocksize]);$/;"	p	class:MD5
MD5::uint1	include/Eternia/Algorithm/Cryptography/md5.h	/^        typedef unsigned char uint1; \/\/  8bit$/;"	t	class:MD5
MD5::uint1	src/Algorithm/Cryptography/md5.h	/^        typedef unsigned char uint1; \/\/  8bit$/;"	t	class:MD5
MD5::uint4	include/Eternia/Algorithm/Cryptography/md5.h	/^        typedef unsigned int uint4;  \/\/ 32bit$/;"	t	class:MD5
MD5::uint4	src/Algorithm/Cryptography/md5.h	/^        typedef unsigned int uint4;  \/\/ 32bit$/;"	t	class:MD5
MD5::update	include/Eternia/Algorithm/Cryptography/md5.h	/^        void update(const char *buf, size_type length);$/;"	p	class:MD5
MD5::update	include/Eternia/Algorithm/Cryptography/md5.h	/^        void update(const unsigned char *buf, size_type length);$/;"	p	class:MD5
MD5::update	src/Algorithm/Cryptography/md5.cpp	/^void MD5::update(const char input[], size_type length) {$/;"	f	class:MD5
MD5::update	src/Algorithm/Cryptography/md5.cpp	/^void MD5::update(const unsigned char input[], size_type length) {$/;"	f	class:MD5
MD5::update	src/Algorithm/Cryptography/md5.h	/^        void update(const char *buf, size_type length);$/;"	p	class:MD5
MD5::update	src/Algorithm/Cryptography/md5.h	/^        void update(const unsigned char *buf, size_type length);$/;"	p	class:MD5
MEM_SIZE	include/Eternia/Emulation/MPU/msp430.h	/^#define MEM_SIZE /;"	d
MEM_SIZE	src/Emulation/MPU/msp430.h	/^#define MEM_SIZE /;"	d
MERAS	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MERAS /;"	d
MERAS	src/Emulation/MPU/msp430g2553.h	/^#define MERAS /;"	d
MERGESORT_H_	include/Eternia/Algorithm/Sorting/MergeSort.h	/^#define MERGESORT_H_$/;"	d
MERGESORT_H_	src/Algorithm/Sorting/MergeSort.h	/^#define MERGESORT_H_$/;"	d
MHz	include/Eternia/constants.h	/^        const double MHz = megaHertz;$/;"	m	namespace:physical::unit
MHz	src/constants.h	/^        const double MHz = megaHertz;$/;"	m	namespace:physical::unit
MINOR	version.h	/^#define MINOR /;"	d
MIPP	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	g
MIPP	src/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	g
MIP_AIR	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	e	enum:MIPP
MIP_AIR	src/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	e	enum:MIPP
MIP_DOT	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	e	enum:MIPP
MIP_DOT	src/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	e	enum:MIPP
MIP_FAR	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	e	enum:MIPP
MIP_FAR	src/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	e	enum:MIPP
MIP_NEAR	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	e	enum:MIPP
MIP_NEAR	src/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	e	enum:MIPP
MIP_ORBIT	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	e	enum:MIPP
MIP_ORBIT	src/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	e	enum:MIPP
MIP_SURFACE	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	e	enum:MIPP
MIP_SURFACE	src/Gamelogic/Environment/Planet/Planet.h	/^enum MIPP {MIP_SURFACE,MIP_NEAR,MIP_AIR,MIP_ORBIT,MIP_FAR,MIP_DOT};$/;"	e	enum:MIPP
MOD0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MOD0 /;"	d
MOD0	src/Emulation/MPU/msp430g2553.h	/^#define MOD0 /;"	d
MOD1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MOD1 /;"	d
MOD1	src/Emulation/MPU/msp430g2553.h	/^#define MOD1 /;"	d
MOD2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MOD2 /;"	d
MOD2	src/Emulation/MPU/msp430g2553.h	/^#define MOD2 /;"	d
MOD3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MOD3 /;"	d
MOD3	src/Emulation/MPU/msp430g2553.h	/^#define MOD3 /;"	d
MOD4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MOD4 /;"	d
MOD4	src/Emulation/MPU/msp430g2553.h	/^#define MOD4 /;"	d
MODSHIPPART_H_	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^#define MODSHIPPART_H_$/;"	d
MODSHIPPART_H_	src/Gamelogic/Ship/ModularShipPart.h	/^#define MODSHIPPART_H_$/;"	d
MODSHIP_H_	include/Eternia/Gamelogic/Ship/ModularShip.h	/^#define MODSHIP_H_$/;"	d
MODSHIP_H_	src/Gamelogic/Ship/ModularShip.h	/^#define MODSHIP_H_$/;"	d
MONTH	version.h	/^#define MONTH /;"	d
MOOD	include/Eternia/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	g
MOOD	src/Gamelogic/Avatar/Mood.h	/^enum MOOD {AM_Happy, AM_Sad, AM_Mad, AM_Accomplished, AM_Alone, AM_Amused, AM_Annoyed, AM_Anxious, AM_Apathetic, AM_Awake,$/;"	g
MOSFET_h_	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^#define MOSFET_h_$/;"	d
MOSFET_h_	src/Engineering/Electrical/Components/Mosfet.h	/^#define MOSFET_h_$/;"	d
MOperator	include/Eternia/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	g
MOperator	src/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	g
MSC	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define MSC /;"	d
MSC	src/Emulation/MPU/msp430g2553.h	/^#define MSC /;"	d
MSP430	include/Eternia/Emulation/MPU/msp430.h	/^        MSP430();$/;"	p	class:MSP430
MSP430	include/Eternia/Emulation/MPU/msp430.h	/^class MSP430 {$/;"	c
MSP430	src/Emulation/MPU/msp430.cpp	/^MSP430::MSP430() {$/;"	f	class:MSP430
MSP430	src/Emulation/MPU/msp430.h	/^        MSP430();$/;"	p	class:MSP430
MSP430	src/Emulation/MPU/msp430.h	/^class MSP430 {$/;"	c
MSP430::Continue	include/Eternia/Emulation/MPU/msp430.h	/^        void Continue(); \/\/ continue processor$/;"	p	class:MSP430
MSP430::Continue	src/Emulation/MPU/msp430.cpp	/^void MSP430::Continue() {$/;"	f	class:MSP430
MSP430::Continue	src/Emulation/MPU/msp430.h	/^        void Continue(); \/\/ continue processor$/;"	p	class:MSP430
MSP430::MSP430	include/Eternia/Emulation/MPU/msp430.h	/^        MSP430();$/;"	p	class:MSP430
MSP430::MSP430	src/Emulation/MPU/msp430.cpp	/^MSP430::MSP430() {$/;"	f	class:MSP430
MSP430::MSP430	src/Emulation/MPU/msp430.h	/^        MSP430();$/;"	p	class:MSP430
MSP430::Memory	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned char Memory[MEM_SIZE]; \/\/ declare raw memeory region$/;"	m	class:MSP430
MSP430::Memory	src/Emulation/MPU/msp430.h	/^        unsigned char Memory[MEM_SIZE]; \/\/ declare raw memeory region$/;"	m	class:MSP430
MSP430::Pause	include/Eternia/Emulation/MPU/msp430.h	/^        void Pause(); \/\/ pause processor$/;"	p	class:MSP430
MSP430::Pause	src/Emulation/MPU/msp430.cpp	/^void MSP430::Pause() {$/;"	f	class:MSP430
MSP430::Pause	src/Emulation/MPU/msp430.h	/^        void Pause(); \/\/ pause processor$/;"	p	class:MSP430
MSP430::R0	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R0	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R1	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R1	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R10	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R10	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R11	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R11	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R12	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R12	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R13	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R13	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R14	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R14	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R15	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R15	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R2	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R2	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R3	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R3	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R4	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R4	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R5	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R5	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R6	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R6	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R7	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R7	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R8	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R8	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R9	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::R9	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
MSP430::T0_up	include/Eternia/Emulation/MPU/msp430.h	/^        bool paused, T0_up, T1_up;$/;"	m	class:MSP430
MSP430::T0_up	src/Emulation/MPU/msp430.h	/^        bool paused, T0_up, T1_up;$/;"	m	class:MSP430
MSP430::T1_up	include/Eternia/Emulation/MPU/msp430.h	/^        bool paused, T0_up, T1_up;$/;"	m	class:MSP430
MSP430::T1_up	src/Emulation/MPU/msp430.h	/^        bool paused, T0_up, T1_up;$/;"	m	class:MSP430
MSP430::addInterruptHandle	include/Eternia/Emulation/MPU/msp430.h	/^        void addInterruptHandle(INTERRUPT_ID id, void (func)());$/;"	p	class:MSP430
MSP430::addInterruptHandle	src/Emulation/MPU/msp430.h	/^        void addInterruptHandle(INTERRUPT_ID id, void (func)());$/;"	p	class:MSP430
MSP430::call	include/Eternia/Emulation/MPU/msp430.h	/^        void call(unsigned int addr); \/\/ push twice and change PC$/;"	p	class:MSP430
MSP430::call	src/Emulation/MPU/msp430.h	/^        void call(unsigned int addr); \/\/ push twice and change PC$/;"	p	class:MSP430
MSP430::call	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::call(unsigned int addr) {} \/\/ push twice and change PC$/;"	f	class:MSP430
MSP430::exec	include/Eternia/Emulation/MPU/msp430.h	/^        void exec(unsigned int address); \/\/ execute a line with PC$/;"	p	class:MSP430
MSP430::exec	src/Emulation/MPU/msp430.cpp	/^void MSP430::exec(unsigned int) {$/;"	f	class:MSP430
MSP430::exec	src/Emulation/MPU/msp430.h	/^        void exec(unsigned int address); \/\/ execute a line with PC$/;"	p	class:MSP430
MSP430::getByte	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned char getByte(unsigned int address); \/\/ [address]$/;"	p	class:MSP430
MSP430::getByte	src/Emulation/MPU/msp430.cpp	/^unsigned char MSP430::getByte(unsigned int address) {$/;"	f	class:MSP430
MSP430::getByte	src/Emulation/MPU/msp430.h	/^        unsigned char getByte(unsigned int address); \/\/ [address]$/;"	p	class:MSP430
MSP430::getWord	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int getWord(unsigned int address); \/\/ [address]<<4 + [address+1]$/;"	p	class:MSP430
MSP430::getWord	src/Emulation/MPU/msp430.cpp	/^unsigned int MSP430::getWord(unsigned int address) {$/;"	f	class:MSP430
MSP430::getWord	src/Emulation/MPU/msp430.h	/^        unsigned int getWord(unsigned int address); \/\/ [address]<<4 + [address+1]$/;"	p	class:MSP430
MSP430::handleInterrupt	include/Eternia/Emulation/MPU/msp430.h	/^        void handleInterrupt(INTERRUPT_ID id);$/;"	p	class:MSP430
MSP430::handleInterrupt	src/Emulation/MPU/msp430.h	/^        void handleInterrupt(INTERRUPT_ID id);$/;"	p	class:MSP430
MSP430::handleInterrupt	src/Emulation/MPU/msp430_Interrupts.cpp	/^void MSP430::handleInterrupt(INTERRUPT_ID id) {$/;"	f	class:MSP430
MSP430::handleUSCIA	include/Eternia/Emulation/MPU/msp430.h	/^        void handleUSCIA();$/;"	p	class:MSP430
MSP430::handleUSCIA	src/Emulation/MPU/msp430.h	/^        void handleUSCIA();$/;"	p	class:MSP430
MSP430::handleUSCIA	src/Emulation/MPU/msp430_USCI.cpp	/^void MSP430::handleUSCIA() {$/;"	f	class:MSP430
MSP430::handleUSCIB	include/Eternia/Emulation/MPU/msp430.h	/^        void handleUSCIB();$/;"	p	class:MSP430
MSP430::handleUSCIB	src/Emulation/MPU/msp430.h	/^        void handleUSCIB();$/;"	p	class:MSP430
MSP430::handleUSCIB	src/Emulation/MPU/msp430_USCI.cpp	/^void MSP430::handleUSCIB() {$/;"	f	class:MSP430
MSP430::init	include/Eternia/Emulation/MPU/msp430.h	/^        void init(); \/\/ or reinit msp430$/;"	p	class:MSP430
MSP430::init	src/Emulation/MPU/msp430.cpp	/^void MSP430::init() {$/;"	f	class:MSP430
MSP430::init	src/Emulation/MPU/msp430.h	/^        void init(); \/\/ or reinit msp430$/;"	p	class:MSP430
MSP430::interruptHandles	include/Eternia/Emulation/MPU/msp430.h	/^        HashMap<LinkedList<InterruptHandle> >* interruptHandles;$/;"	m	class:MSP430
MSP430::interruptHandles	src/Emulation/MPU/msp430.h	/^        HashMap<LinkedList<InterruptHandle> >* interruptHandles;$/;"	m	class:MSP430
MSP430::jc	include/Eternia/Emulation/MPU/msp430.h	/^        void jc(unsigned int location); \/\/ jump carry$/;"	p	class:MSP430
MSP430::jc	src/Emulation/MPU/msp430.h	/^        void jc(unsigned int location); \/\/ jump carry$/;"	p	class:MSP430
MSP430::jc	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jc(unsigned int location) {$/;"	f	class:MSP430
MSP430::jeq	include/Eternia/Emulation/MPU/msp430.h	/^        void jeq(unsigned int location); \/\/ jz$/;"	p	class:MSP430
MSP430::jeq	src/Emulation/MPU/msp430.h	/^        void jeq(unsigned int location); \/\/ jz$/;"	p	class:MSP430
MSP430::jeq	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jeq(unsigned int location) {$/;"	f	class:MSP430
MSP430::jge	include/Eternia/Emulation/MPU/msp430.h	/^        void jge(unsigned int location);$/;"	p	class:MSP430
MSP430::jge	src/Emulation/MPU/msp430.h	/^        void jge(unsigned int location);$/;"	p	class:MSP430
MSP430::jge	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jge(unsigned int location) {$/;"	f	class:MSP430
MSP430::jl	include/Eternia/Emulation/MPU/msp430.h	/^        void jl(unsigned int location);$/;"	p	class:MSP430
MSP430::jl	src/Emulation/MPU/msp430.h	/^        void jl(unsigned int location);$/;"	p	class:MSP430
MSP430::jl	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jl(unsigned int location) {$/;"	f	class:MSP430
MSP430::jmp	include/Eternia/Emulation/MPU/msp430.h	/^        void jmp(unsigned int location);$/;"	p	class:MSP430
MSP430::jmp	src/Emulation/MPU/msp430.h	/^        void jmp(unsigned int location);$/;"	p	class:MSP430
MSP430::jmp	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jmp(unsigned int location) {$/;"	f	class:MSP430
MSP430::jn	include/Eternia/Emulation/MPU/msp430.h	/^        void jn(unsigned int location); \/\/ jump negative$/;"	p	class:MSP430
MSP430::jn	src/Emulation/MPU/msp430.h	/^        void jn(unsigned int location); \/\/ jump negative$/;"	p	class:MSP430
MSP430::jn	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jn(unsigned int location) {$/;"	f	class:MSP430
MSP430::jnc	include/Eternia/Emulation/MPU/msp430.h	/^        void jnc(unsigned int location); \/\/ jump not carry$/;"	p	class:MSP430
MSP430::jnc	src/Emulation/MPU/msp430.h	/^        void jnc(unsigned int location); \/\/ jump not carry$/;"	p	class:MSP430
MSP430::jnc	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jnc(unsigned int location) {$/;"	f	class:MSP430
MSP430::jne	include/Eternia/Emulation/MPU/msp430.h	/^        void jne(unsigned int location); \/\/ jnz$/;"	p	class:MSP430
MSP430::jne	src/Emulation/MPU/msp430.h	/^        void jne(unsigned int location); \/\/ jnz$/;"	p	class:MSP430
MSP430::jne	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jne(unsigned int location) {$/;"	f	class:MSP430
MSP430::load	include/Eternia/Emulation/MPU/msp430.h	/^        void load(char* loc); \/\/ load a raw memory file (0xFFFF long)$/;"	p	class:MSP430
MSP430::load	src/Emulation/MPU/msp430.h	/^        void load(char* loc); \/\/ load a raw memory file (0xFFFF long)$/;"	p	class:MSP430
MSP430::loadHEX	include/Eternia/Emulation/MPU/msp430.h	/^        void loadHEX(char* loc); \/\/ load a hex desriptor file$/;"	p	class:MSP430
MSP430::loadHEX	src/Emulation/MPU/msp430.h	/^        void loadHEX(char* loc); \/\/ load a hex desriptor file$/;"	p	class:MSP430
MSP430::mclk	include/Eternia/Emulation/MPU/msp430.h	/^        void mclk();$/;"	p	class:MSP430
MSP430::mclk	src/Emulation/MPU/msp430.cpp	/^void MSP430::mclk() {$/;"	f	class:MSP430
MSP430::mclk	src/Emulation/MPU/msp430.h	/^        void mclk();$/;"	p	class:MSP430
MSP430::mov	include/Eternia/Emulation/MPU/msp430.h	/^        void mov(unsigned int addr, unsigned int value);$/;"	p	class:MSP430
MSP430::mov	src/Emulation/MPU/msp430.h	/^        void mov(unsigned int addr, unsigned int value);$/;"	p	class:MSP430
MSP430::mov	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::mov(unsigned int addr, unsigned int value) {}$/;"	f	class:MSP430
MSP430::paused	include/Eternia/Emulation/MPU/msp430.h	/^        bool paused, T0_up, T1_up;$/;"	m	class:MSP430
MSP430::paused	src/Emulation/MPU/msp430.h	/^        bool paused, T0_up, T1_up;$/;"	m	class:MSP430
MSP430::push	include/Eternia/Emulation/MPU/msp430.h	/^        void push(unsigned int addr); \/\/ move operator to stack and SP+2$/;"	p	class:MSP430
MSP430::push	src/Emulation/MPU/msp430.h	/^        void push(unsigned int addr); \/\/ move operator to stack and SP+2$/;"	p	class:MSP430
MSP430::push	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::push(unsigned int addr) {} \/\/ move operator to stack and SP+2$/;"	f	class:MSP430
MSP430::reti	include/Eternia/Emulation/MPU/msp430.h	/^        void reti(); \/\/ gets location from stack reg$/;"	p	class:MSP430
MSP430::reti	src/Emulation/MPU/msp430.h	/^        void reti(); \/\/ gets location from stack reg$/;"	p	class:MSP430
MSP430::reti	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::reti() {} \/\/ gets location from stack reg$/;"	f	class:MSP430
MSP430::rra	include/Eternia/Emulation/MPU/msp430.h	/^        void rra(unsigned int addr);$/;"	p	class:MSP430
MSP430::rra	src/Emulation/MPU/msp430.h	/^        void rra(unsigned int addr);$/;"	p	class:MSP430
MSP430::rra	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::rra(unsigned int addr) {}$/;"	f	class:MSP430
MSP430::rrc	include/Eternia/Emulation/MPU/msp430.h	/^        void rrc(unsigned int addr);$/;"	p	class:MSP430
MSP430::rrc	src/Emulation/MPU/msp430.h	/^        void rrc(unsigned int addr);$/;"	p	class:MSP430
MSP430::rrc	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::rrc(unsigned int addr) {}$/;"	f	class:MSP430
MSP430::runTimer0	include/Eternia/Emulation/MPU/msp430.h	/^        void runTimer0(bool is_mclk);$/;"	p	class:MSP430
MSP430::runTimer0	src/Emulation/MPU/msp430.h	/^        void runTimer0(bool is_mclk);$/;"	p	class:MSP430
MSP430::runTimer0	src/Emulation/MPU/msp430_timers.cpp	/^void MSP430::runTimer0(bool is_mclk) {$/;"	f	class:MSP430
MSP430::runTimer1	include/Eternia/Emulation/MPU/msp430.h	/^        void runTimer1(bool is_mclk);$/;"	p	class:MSP430
MSP430::runTimer1	src/Emulation/MPU/msp430.h	/^        void runTimer1(bool is_mclk);$/;"	p	class:MSP430
MSP430::runTimer1	src/Emulation/MPU/msp430_timers.cpp	/^void MSP430::runTimer1(bool is_mclk) {   }$/;"	f	class:MSP430
MSP430::setADC10Value	include/Eternia/Emulation/MPU/msp430.h	/^        void setADC10Value(unsigned int value); \/\/ sets ADC10MEM and sets ADC10IFG$/;"	p	class:MSP430
MSP430::setADC10Value	src/Emulation/MPU/msp430.cpp	/^void MSP430::setADC10Value(unsigned int value) {$/;"	f	class:MSP430
MSP430::setADC10Value	src/Emulation/MPU/msp430.h	/^        void setADC10Value(unsigned int value); \/\/ sets ADC10MEM and sets ADC10IFG$/;"	p	class:MSP430
MSP430::setByte	include/Eternia/Emulation/MPU/msp430.h	/^        void setByte(unsigned int address, unsigned char value);$/;"	p	class:MSP430
MSP430::setByte	src/Emulation/MPU/msp430.cpp	/^void MSP430::setByte(unsigned int address, unsigned char value) {$/;"	f	class:MSP430
MSP430::setByte	src/Emulation/MPU/msp430.h	/^        void setByte(unsigned int address, unsigned char value);$/;"	p	class:MSP430
MSP430::setWord	include/Eternia/Emulation/MPU/msp430.h	/^        void setWord(unsigned int address, unsigned int value);$/;"	p	class:MSP430
MSP430::setWord	src/Emulation/MPU/msp430.cpp	/^void MSP430::setWord(unsigned int address, unsigned int value) {$/;"	f	class:MSP430
MSP430::setWord	src/Emulation/MPU/msp430.h	/^        void setWord(unsigned int address, unsigned int value);$/;"	p	class:MSP430
MSP430::smclk	include/Eternia/Emulation/MPU/msp430.h	/^        void smclk();$/;"	p	class:MSP430
MSP430::smclk	src/Emulation/MPU/msp430.cpp	/^void MSP430::smclk() {$/;"	f	class:MSP430
MSP430::smclk	src/Emulation/MPU/msp430.h	/^        void smclk();$/;"	p	class:MSP430
MSP430::smclk_cnt	include/Eternia/Emulation/MPU/msp430.h	/^        int smclk_cnt;$/;"	m	class:MSP430
MSP430::smclk_cnt	src/Emulation/MPU/msp430.h	/^        int smclk_cnt;$/;"	m	class:MSP430
MSP430::swpb	include/Eternia/Emulation/MPU/msp430.h	/^        void swpb(unsigned int addr);$/;"	p	class:MSP430
MSP430::swpb	src/Emulation/MPU/msp430.h	/^        void swpb(unsigned int addr);$/;"	p	class:MSP430
MSP430::swpb	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::swpb(unsigned int addr) {}$/;"	f	class:MSP430
MSP430::sxt	include/Eternia/Emulation/MPU/msp430.h	/^        void sxt(unsigned int addr);$/;"	p	class:MSP430
MSP430::sxt	src/Emulation/MPU/msp430.h	/^        void sxt(unsigned int addr);$/;"	p	class:MSP430
MSP430::sxt	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::sxt(unsigned int addr) {}$/;"	f	class:MSP430
MSP430::testInterrupts	include/Eternia/Emulation/MPU/msp430.h	/^        void testInterrupts();$/;"	p	class:MSP430
MSP430::testInterrupts	src/Emulation/MPU/msp430.h	/^        void testInterrupts();$/;"	p	class:MSP430
MSP430::testInterrupts	src/Emulation/MPU/msp430_Interrupts.cpp	/^void MSP430::testInterrupts() {$/;"	f	class:MSP430
MSP430_ADD	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
MSP430_ADD	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
MSP430_ADDC	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
MSP430_ADDC	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
MSP430_AND	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_DADD, MSP430_BIT, MSP430_BIC, MSP430_BS, MSP430_XOR, MSP430_AND$/;"	e	enum:MSP430_OP_2
MSP430_AND	src/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_DADD, MSP430_BIT, MSP430_BIC, MSP430_BS, MSP430_XOR, MSP430_AND$/;"	e	enum:MSP430_OP_2
MSP430_BIC	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_DADD, MSP430_BIT, MSP430_BIC, MSP430_BS, MSP430_XOR, MSP430_AND$/;"	e	enum:MSP430_OP_2
MSP430_BIC	src/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_DADD, MSP430_BIT, MSP430_BIC, MSP430_BS, MSP430_XOR, MSP430_AND$/;"	e	enum:MSP430_OP_2
MSP430_BIT	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_DADD, MSP430_BIT, MSP430_BIC, MSP430_BS, MSP430_XOR, MSP430_AND$/;"	e	enum:MSP430_OP_2
MSP430_BIT	src/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_DADD, MSP430_BIT, MSP430_BIC, MSP430_BS, MSP430_XOR, MSP430_AND$/;"	e	enum:MSP430_OP_2
MSP430_BS	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_DADD, MSP430_BIT, MSP430_BIC, MSP430_BS, MSP430_XOR, MSP430_AND$/;"	e	enum:MSP430_OP_2
MSP430_BS	src/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_DADD, MSP430_BIT, MSP430_BIC, MSP430_BS, MSP430_XOR, MSP430_AND$/;"	e	enum:MSP430_OP_2
MSP430_CALL	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_PUSH, MSP430_CALL, MSP430_RETI$/;"	e	enum:MSP430_OP_1
MSP430_CALL	src/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_PUSH, MSP430_CALL, MSP430_RETI$/;"	e	enum:MSP430_OP_1
MSP430_CMP	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
MSP430_CMP	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
MSP430_DADD	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_DADD, MSP430_BIT, MSP430_BIC, MSP430_BS, MSP430_XOR, MSP430_AND$/;"	e	enum:MSP430_OP_2
MSP430_DADD	src/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_DADD, MSP430_BIT, MSP430_BIC, MSP430_BS, MSP430_XOR, MSP430_AND$/;"	e	enum:MSP430_OP_2
MSP430_DECLAREVARS_H_	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define MSP430_DECLAREVARS_H_$/;"	d
MSP430_DECLAREVARS_H_	src/Emulation/MPU/msp430_declare_consts.h	/^#define MSP430_DECLAREVARS_H_$/;"	d
MSP430_JC	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_JMP {MSP430_JNE, MSP430_JEQ, MSP430_JNC, MSP430_JC, MSP430_JN,$/;"	e	enum:MSP430_OP_JMP
MSP430_JC	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_JMP {MSP430_JNE, MSP430_JEQ, MSP430_JNC, MSP430_JC, MSP430_JN,$/;"	e	enum:MSP430_OP_JMP
MSP430_JEQ	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_JMP {MSP430_JNE, MSP430_JEQ, MSP430_JNC, MSP430_JC, MSP430_JN,$/;"	e	enum:MSP430_OP_JMP
MSP430_JEQ	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_JMP {MSP430_JNE, MSP430_JEQ, MSP430_JNC, MSP430_JC, MSP430_JN,$/;"	e	enum:MSP430_OP_JMP
MSP430_JGE	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^                    MSP430_JGE,MSP430_JL, MSP430_JMP$/;"	e	enum:MSP430_OP_JMP
MSP430_JGE	src/Emulation/MPU/msp430_Opcodes.h	/^                    MSP430_JGE,MSP430_JL, MSP430_JMP$/;"	e	enum:MSP430_OP_JMP
MSP430_JL	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^                    MSP430_JGE,MSP430_JL, MSP430_JMP$/;"	e	enum:MSP430_OP_JMP
MSP430_JL	src/Emulation/MPU/msp430_Opcodes.h	/^                    MSP430_JGE,MSP430_JL, MSP430_JMP$/;"	e	enum:MSP430_OP_JMP
MSP430_JMP	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^                    MSP430_JGE,MSP430_JL, MSP430_JMP$/;"	e	enum:MSP430_OP_JMP
MSP430_JMP	src/Emulation/MPU/msp430_Opcodes.h	/^                    MSP430_JGE,MSP430_JL, MSP430_JMP$/;"	e	enum:MSP430_OP_JMP
MSP430_JN	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_JMP {MSP430_JNE, MSP430_JEQ, MSP430_JNC, MSP430_JC, MSP430_JN,$/;"	e	enum:MSP430_OP_JMP
MSP430_JN	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_JMP {MSP430_JNE, MSP430_JEQ, MSP430_JNC, MSP430_JC, MSP430_JN,$/;"	e	enum:MSP430_OP_JMP
MSP430_JNC	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_JMP {MSP430_JNE, MSP430_JEQ, MSP430_JNC, MSP430_JC, MSP430_JN,$/;"	e	enum:MSP430_OP_JMP
MSP430_JNC	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_JMP {MSP430_JNE, MSP430_JEQ, MSP430_JNC, MSP430_JC, MSP430_JN,$/;"	e	enum:MSP430_OP_JMP
MSP430_JNE	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_JMP {MSP430_JNE, MSP430_JEQ, MSP430_JNC, MSP430_JC, MSP430_JN,$/;"	e	enum:MSP430_OP_JMP
MSP430_JNE	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_JMP {MSP430_JNE, MSP430_JEQ, MSP430_JNC, MSP430_JC, MSP430_JN,$/;"	e	enum:MSP430_OP_JMP
MSP430_MOV	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
MSP430_MOV	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
MSP430_OPCODES	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^#define MSP430_OPCODES$/;"	d
MSP430_OPCODES	src/Emulation/MPU/msp430_Opcodes.h	/^#define MSP430_OPCODES$/;"	d
MSP430_OP_1	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_1 {MSP430_RRC, MSP430_SWPB, MSP430_RRA, MSP430_SXT,$/;"	g
MSP430_OP_1	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_1 {MSP430_RRC, MSP430_SWPB, MSP430_RRA, MSP430_SXT,$/;"	g
MSP430_OP_2	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	g
MSP430_OP_2	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	g
MSP430_OP_JMP	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_JMP {MSP430_JNE, MSP430_JEQ, MSP430_JNC, MSP430_JC, MSP430_JN,$/;"	g
MSP430_OP_JMP	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_JMP {MSP430_JNE, MSP430_JEQ, MSP430_JNC, MSP430_JC, MSP430_JN,$/;"	g
MSP430_PUSH	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_PUSH, MSP430_CALL, MSP430_RETI$/;"	e	enum:MSP430_OP_1
MSP430_PUSH	src/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_PUSH, MSP430_CALL, MSP430_RETI$/;"	e	enum:MSP430_OP_1
MSP430_REGISTERS_H	include/Eternia/Emulation/MPU/msp430_Registers.h	/^#define MSP430_REGISTERS_H$/;"	d
MSP430_REGISTERS_H	src/Emulation/MPU/msp430_Registers.h	/^#define MSP430_REGISTERS_H$/;"	d
MSP430_RETI	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_PUSH, MSP430_CALL, MSP430_RETI$/;"	e	enum:MSP430_OP_1
MSP430_RETI	src/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_PUSH, MSP430_CALL, MSP430_RETI$/;"	e	enum:MSP430_OP_1
MSP430_RRA	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_1 {MSP430_RRC, MSP430_SWPB, MSP430_RRA, MSP430_SXT,$/;"	e	enum:MSP430_OP_1
MSP430_RRA	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_1 {MSP430_RRC, MSP430_SWPB, MSP430_RRA, MSP430_SXT,$/;"	e	enum:MSP430_OP_1
MSP430_RRC	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_1 {MSP430_RRC, MSP430_SWPB, MSP430_RRA, MSP430_SXT,$/;"	e	enum:MSP430_OP_1
MSP430_RRC	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_1 {MSP430_RRC, MSP430_SWPB, MSP430_RRA, MSP430_SXT,$/;"	e	enum:MSP430_OP_1
MSP430_SUB	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
MSP430_SUB	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
MSP430_SUBC	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
MSP430_SUBC	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
MSP430_SWPB	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_1 {MSP430_RRC, MSP430_SWPB, MSP430_RRA, MSP430_SXT,$/;"	e	enum:MSP430_OP_1
MSP430_SWPB	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_1 {MSP430_RRC, MSP430_SWPB, MSP430_RRA, MSP430_SXT,$/;"	e	enum:MSP430_OP_1
MSP430_SXT	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_1 {MSP430_RRC, MSP430_SWPB, MSP430_RRA, MSP430_SXT,$/;"	e	enum:MSP430_OP_1
MSP430_SXT	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_1 {MSP430_RRC, MSP430_SWPB, MSP430_RRA, MSP430_SXT,$/;"	e	enum:MSP430_OP_1
MSP430_XOR	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_DADD, MSP430_BIT, MSP430_BIC, MSP430_BS, MSP430_XOR, MSP430_AND$/;"	e	enum:MSP430_OP_2
MSP430_XOR	src/Emulation/MPU/msp430_Opcodes.h	/^                  MSP430_DADD, MSP430_BIT, MSP430_BIC, MSP430_BS, MSP430_XOR, MSP430_AND$/;"	e	enum:MSP430_OP_2
MSP430_h	include/Eternia/Emulation/MPU/msp430.h	/^#define MSP430_h$/;"	d
MSP430_h	src/Emulation/MPU/msp430.h	/^#define MSP430_h$/;"	d
MSP_Armor	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^             MSP_CrewQuarters, MSP_Armor, MSP_Reactor, MSP_ShieldGen, MSP_Hangar$/;"	e	enum:MSType
MSP_Armor	src/Gamelogic/Ship/ModularShipPart.h	/^             MSP_CrewQuarters, MSP_Armor, MSP_Reactor, MSP_ShieldGen, MSP_Hangar$/;"	e	enum:MSType
MSP_CargoHold	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^enum MSType {MSP_None, MSP_Hull, MSP_Thruster, MSP_CargoHold, MSP_Medbay,$/;"	e	enum:MSType
MSP_CargoHold	src/Gamelogic/Ship/ModularShipPart.h	/^enum MSType {MSP_None, MSP_Hull, MSP_Thruster, MSP_CargoHold, MSP_Medbay,$/;"	e	enum:MSType
MSP_CrewQuarters	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^             MSP_CrewQuarters, MSP_Armor, MSP_Reactor, MSP_ShieldGen, MSP_Hangar$/;"	e	enum:MSType
MSP_CrewQuarters	src/Gamelogic/Ship/ModularShipPart.h	/^             MSP_CrewQuarters, MSP_Armor, MSP_Reactor, MSP_ShieldGen, MSP_Hangar$/;"	e	enum:MSType
MSP_Hangar	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^             MSP_CrewQuarters, MSP_Armor, MSP_Reactor, MSP_ShieldGen, MSP_Hangar$/;"	e	enum:MSType
MSP_Hangar	src/Gamelogic/Ship/ModularShipPart.h	/^             MSP_CrewQuarters, MSP_Armor, MSP_Reactor, MSP_ShieldGen, MSP_Hangar$/;"	e	enum:MSType
MSP_Hull	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^enum MSType {MSP_None, MSP_Hull, MSP_Thruster, MSP_CargoHold, MSP_Medbay,$/;"	e	enum:MSType
MSP_Hull	src/Gamelogic/Ship/ModularShipPart.h	/^enum MSType {MSP_None, MSP_Hull, MSP_Thruster, MSP_CargoHold, MSP_Medbay,$/;"	e	enum:MSType
MSP_Medbay	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^enum MSType {MSP_None, MSP_Hull, MSP_Thruster, MSP_CargoHold, MSP_Medbay,$/;"	e	enum:MSType
MSP_Medbay	src/Gamelogic/Ship/ModularShipPart.h	/^enum MSType {MSP_None, MSP_Hull, MSP_Thruster, MSP_CargoHold, MSP_Medbay,$/;"	e	enum:MSType
MSP_None	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^enum MSType {MSP_None, MSP_Hull, MSP_Thruster, MSP_CargoHold, MSP_Medbay,$/;"	e	enum:MSType
MSP_None	src/Gamelogic/Ship/ModularShipPart.h	/^enum MSType {MSP_None, MSP_Hull, MSP_Thruster, MSP_CargoHold, MSP_Medbay,$/;"	e	enum:MSType
MSP_Reactor	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^             MSP_CrewQuarters, MSP_Armor, MSP_Reactor, MSP_ShieldGen, MSP_Hangar$/;"	e	enum:MSType
MSP_Reactor	src/Gamelogic/Ship/ModularShipPart.h	/^             MSP_CrewQuarters, MSP_Armor, MSP_Reactor, MSP_ShieldGen, MSP_Hangar$/;"	e	enum:MSType
MSP_ShieldGen	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^             MSP_CrewQuarters, MSP_Armor, MSP_Reactor, MSP_ShieldGen, MSP_Hangar$/;"	e	enum:MSType
MSP_ShieldGen	src/Gamelogic/Ship/ModularShipPart.h	/^             MSP_CrewQuarters, MSP_Armor, MSP_Reactor, MSP_ShieldGen, MSP_Hangar$/;"	e	enum:MSType
MSP_Thruster	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^enum MSType {MSP_None, MSP_Hull, MSP_Thruster, MSP_CargoHold, MSP_Medbay,$/;"	e	enum:MSType
MSP_Thruster	src/Gamelogic/Ship/ModularShipPart.h	/^enum MSType {MSP_None, MSP_Hull, MSP_Thruster, MSP_CargoHold, MSP_Medbay,$/;"	e	enum:MSType
MSType	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^enum MSType {MSP_None, MSP_Hull, MSP_Thruster, MSP_CargoHold, MSP_Medbay,$/;"	g
MSType	src/Gamelogic/Ship/ModularShipPart.h	/^enum MSType {MSP_None, MSP_Hull, MSP_Thruster, MSP_CargoHold, MSP_Medbay,$/;"	g
MT_Add	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_Add	src/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_Div	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_Div	src/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_Exponent	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_Exponent	src/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_Mod	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_Mod	src/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_Mul	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_Mul	src/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_None	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_None	src/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_Sub	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MT_Sub	src/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	e	enum:PMathType
MW	include/Eternia/constants.h	/^        const double MW = megaWatt;$/;"	m	namespace:physical::unit
MW	src/constants.h	/^        const double MW = megaWatt;$/;"	m	namespace:physical::unit
Mach	include/Eternia/constants.h	/^        const double Mach = 331.46*meters\/second;$/;"	m	namespace:physical::constant
Mach	src/constants.h	/^        const double Mach = 331.46*meters\/second;$/;"	m	namespace:physical::constant
Magnesium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Magnesium = new Atom("Magnesium", "Mg", 2, 3, 12, 12,12, 1.738,0.000000044, 0.16, 923,1363, 1.023, 2, COLOR_Silver,ELEM_Alkaline);$/;"	v
Magnesium	src/Engineering/Chemistry/elementals.h	/^const Atom Magnesium = new Atom("Magnesium", "Mg", 2, 3, 12, 12,12, 1.738,0.000000044, 0.16, 923,1363, 1.023, 2, COLOR_Silver,ELEM_Alkaline);$/;"	v
Manganese	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Manganese = new Atom("Manganese", "Mn", 7, 4, 25, 30,24, 7.44,0.0000016, 0.0078, 1519,2334, 0.479, 4, COLOR_Silver,ELEM_Transition);$/;"	v
Manganese	src/Engineering/Chemistry/elementals.h	/^const Atom Manganese = new Atom("Manganese", "Mn", 7, 4, 25, 30,24, 7.44,0.0000016, 0.0078, 1519,2334, 0.479, 4, COLOR_Silver,ELEM_Transition);$/;"	v
Math	include/Eternia/Math/Functions/Basic.h	/^namespace Math {$/;"	n
Math	include/Eternia/Math/Functions/Trig.h	/^namespace Math {$/;"	n
Math	src/Math/Functions/Basic.cpp	/^namespace Math {$/;"	n	file:
Math	src/Math/Functions/Basic.h	/^namespace Math {$/;"	n
Math	src/Math/Functions/Trig.cpp	/^namespace Math {$/;"	n	file:
Math	src/Math/Functions/Trig.h	/^namespace Math {$/;"	n
Math::E	include/Eternia/Math/Functions/Basic.h	/^    const double E = 2.71828182845904523536028747135266249775724709369995;$/;"	m	namespace:Math
Math::E	src/Math/Functions/Basic.h	/^    const double E = 2.71828182845904523536028747135266249775724709369995;$/;"	m	namespace:Math
Math::PI	include/Eternia/Math/Functions/Basic.h	/^    const double PI = 3.14159265358979323846264338327950288419716939937510;$/;"	m	namespace:Math
Math::PI	src/Math/Functions/Basic.h	/^    const double PI = 3.14159265358979323846264338327950288419716939937510;$/;"	m	namespace:Math
Math::abs	include/Eternia/Math/Functions/Basic.h	/^    double abs(double a); \/\/ flips value if negative to positive$/;"	p	namespace:Math
Math::abs	src/Math/Functions/Basic.cpp	/^    double abs(double a) {$/;"	f	namespace:Math
Math::abs	src/Math/Functions/Basic.h	/^    double abs(double a); \/\/ flips value if negative to positive$/;"	p	namespace:Math
Math::acos	include/Eternia/Math/Functions/Trig.h	/^    double acos(double);$/;"	p	namespace:Math
Math::acos	src/Math/Functions/Trig.cpp	/^    double acos(double x) {$/;"	f	namespace:Math
Math::acos	src/Math/Functions/Trig.h	/^    double acos(double);$/;"	p	namespace:Math
Math::asin	include/Eternia/Math/Functions/Trig.h	/^    double asin(double);$/;"	p	namespace:Math
Math::asin	src/Math/Functions/Trig.cpp	/^    double asin(double x) {$/;"	f	namespace:Math
Math::asin	src/Math/Functions/Trig.h	/^    double asin(double);$/;"	p	namespace:Math
Math::atan	include/Eternia/Math/Functions/Trig.h	/^    double atan(double);$/;"	p	namespace:Math
Math::atan	src/Math/Functions/Trig.cpp	/^    double atan(double x) {$/;"	f	namespace:Math
Math::atan	src/Math/Functions/Trig.h	/^    double atan(double);$/;"	p	namespace:Math
Math::cos	include/Eternia/Math/Functions/Trig.h	/^    double cos(double); \/\/$/;"	p	namespace:Math
Math::cos	src/Math/Functions/Trig.cpp	/^    double cos(double x) {$/;"	f	namespace:Math
Math::cos	src/Math/Functions/Trig.h	/^    double cos(double); \/\/$/;"	p	namespace:Math
Math::cosh	include/Eternia/Math/Functions/Trig.h	/^    double cosh(double);$/;"	p	namespace:Math
Math::cosh	src/Math/Functions/Trig.cpp	/^    double cosh(double x) {$/;"	f	namespace:Math
Math::cosh	src/Math/Functions/Trig.h	/^    double cosh(double);$/;"	p	namespace:Math
Math::decToFrac	include/Eternia/Math/Functions/Basic.h	/^    int* decToFrac(double dec);$/;"	p	namespace:Math
Math::decToFrac	src/Math/Functions/Basic.cpp	/^    int* decToFrac(double dec) {$/;"	f	namespace:Math
Math::decToFrac	src/Math/Functions/Basic.h	/^    int* decToFrac(double dec);$/;"	p	namespace:Math
Math::factorial	include/Eternia/Math/Functions/Basic.h	/^    double factorial(double a); \/\/ finds the factorial of the numberex−e−x2$/;"	p	namespace:Math
Math::factorial	src/Math/Functions/Basic.cpp	/^    double factorial(double x) {$/;"	f	namespace:Math
Math::factorial	src/Math/Functions/Basic.h	/^    double factorial(double a); \/\/ finds the factorial of the numberex−e−x2$/;"	p	namespace:Math
Math::floor	include/Eternia/Math/Functions/Basic.h	/^    int floor(double val);$/;"	p	namespace:Math
Math::floor	src/Math/Functions/Basic.cpp	/^    int floor(double val) {$/;"	f	namespace:Math
Math::floor	src/Math/Functions/Basic.h	/^    int floor(double val);$/;"	p	namespace:Math
Math::ln	include/Eternia/Math/Functions/Basic.h	/^    double ln(double x); \/\/ natural log function$/;"	p	namespace:Math
Math::ln	src/Math/Functions/Basic.cpp	/^    double ln(double x) {$/;"	f	namespace:Math
Math::ln	src/Math/Functions/Basic.h	/^    double ln(double x); \/\/ natural log function$/;"	p	namespace:Math
Math::log	include/Eternia/Math/Functions/Basic.h	/^    double log(double base, double x); \/\/ log_b(x)$/;"	p	namespace:Math
Math::log	src/Math/Functions/Basic.cpp	/^    double log(double base, double x) {$/;"	f	namespace:Math
Math::log	src/Math/Functions/Basic.h	/^    double log(double base, double x); \/\/ log_b(x)$/;"	p	namespace:Math
Math::pow	include/Eternia/Math/Functions/Basic.h	/^    double pow(double a, double b); \/\/ power of function, gets the exponent a^b$/;"	p	namespace:Math
Math::pow	src/Math/Functions/Basic.cpp	/^    double pow(double x, double b) {$/;"	f	namespace:Math
Math::pow	src/Math/Functions/Basic.h	/^    double pow(double a, double b); \/\/ power of function, gets the exponent a^b$/;"	p	namespace:Math
Math::powb	include/Eternia/Math/Functions/Basic.h	/^    double powb(double x, double b); \/\/ Cheap and easy power for integers of b$/;"	p	namespace:Math
Math::powb	src/Math/Functions/Basic.cpp	/^    double powb(double x, double b) {$/;"	f	namespace:Math
Math::powb	src/Math/Functions/Basic.h	/^    double powb(double x, double b); \/\/ Cheap and easy power for integers of b$/;"	p	namespace:Math
Math::sin	include/Eternia/Math/Functions/Trig.h	/^    double sin(double); \/\/ x - x3\/3! + x5\/5! - x7\/7! ...$/;"	p	namespace:Math
Math::sin	src/Math/Functions/Trig.cpp	/^    double sin(double x) {$/;"	f	namespace:Math
Math::sin	src/Math/Functions/Trig.h	/^    double sin(double); \/\/ x - x3\/3! + x5\/5! - x7\/7! ...$/;"	p	namespace:Math
Math::sinh	include/Eternia/Math/Functions/Trig.h	/^    double sinh(double); \/\/(e^x−e^−x)\/2$/;"	p	namespace:Math
Math::sinh	src/Math/Functions/Trig.cpp	/^    double sinh(double x) {$/;"	f	namespace:Math
Math::sinh	src/Math/Functions/Trig.h	/^    double sinh(double); \/\/(e^x−e^−x)\/2$/;"	p	namespace:Math
Math::sqrt	include/Eternia/Math/Functions/Basic.h	/^    double sqrt(double x);$/;"	p	namespace:Math
Math::sqrt	src/Math/Functions/Basic.cpp	/^    double sqrt(double number) {$/;"	f	namespace:Math
Math::sqrt	src/Math/Functions/Basic.h	/^    double sqrt(double x);$/;"	p	namespace:Math
Math::tan	include/Eternia/Math/Functions/Trig.h	/^    double tan(double); \/\/$/;"	p	namespace:Math
Math::tan	src/Math/Functions/Trig.cpp	/^    double tan(double x) {$/;"	f	namespace:Math
Math::tan	src/Math/Functions/Trig.h	/^    double tan(double); \/\/$/;"	p	namespace:Math
Math::tanh	include/Eternia/Math/Functions/Trig.h	/^    double tanh(double);$/;"	p	namespace:Math
Math::tanh	src/Math/Functions/Trig.cpp	/^    double tanh(double x) {$/;"	f	namespace:Math
Math::tanh	src/Math/Functions/Trig.h	/^    double tanh(double);$/;"	p	namespace:Math
Matrix	include/Eternia/Math/struct/Matrix.h	/^    Matrix();$/;"	p	class:Matrix
Matrix	include/Eternia/Math/struct/Matrix.h	/^    Matrix(double **values, int columns, int rows);$/;"	p	class:Matrix
Matrix	include/Eternia/Math/struct/Matrix.h	/^class Matrix {$/;"	c
Matrix	include/Eternia/Math/struct/VectorSpace.h	/^    class Matrix;$/;"	x
Matrix	src/Math/struct/Matrix.cpp	/^Matrix::Matrix() {$/;"	f	class:Matrix
Matrix	src/Math/struct/Matrix.cpp	/^Matrix::Matrix(double **values_, int _m, int _n) {$/;"	f	class:Matrix
Matrix	src/Math/struct/Matrix.h	/^    Matrix();$/;"	p	class:Matrix
Matrix	src/Math/struct/Matrix.h	/^    Matrix(double **values, int columns, int rows);$/;"	p	class:Matrix
Matrix	src/Math/struct/Matrix.h	/^class Matrix {$/;"	c
Matrix	src/Math/struct/VectorSpace.h	/^    class Matrix;$/;"	x
Matrix::Matrix	include/Eternia/Math/struct/Matrix.h	/^    Matrix();$/;"	p	class:Matrix
Matrix::Matrix	include/Eternia/Math/struct/Matrix.h	/^    Matrix(double **values, int columns, int rows);$/;"	p	class:Matrix
Matrix::Matrix	src/Math/struct/Matrix.cpp	/^Matrix::Matrix() {$/;"	f	class:Matrix
Matrix::Matrix	src/Math/struct/Matrix.cpp	/^Matrix::Matrix(double **values_, int _m, int _n) {$/;"	f	class:Matrix
Matrix::Matrix	src/Math/struct/Matrix.h	/^    Matrix();$/;"	p	class:Matrix
Matrix::Matrix	src/Math/struct/Matrix.h	/^    Matrix(double **values, int columns, int rows);$/;"	p	class:Matrix
Matrix::add	include/Eternia/Math/struct/Matrix.h	/^    void add(Matrix* matrix); \/\/ add another matrix to this one.$/;"	p	class:Matrix
Matrix::add	src/Math/struct/Matrix.cpp	/^void Matrix::add(Matrix* matrix) {$/;"	f	class:Matrix
Matrix::add	src/Math/struct/Matrix.h	/^    void add(Matrix* matrix); \/\/ add another matrix to this one.$/;"	p	class:Matrix
Matrix::adjMinor	include/Eternia/Math/struct/Matrix.h	/^    double adjMinor(int x, int y); \/\/ find the minor (find inner keys)$/;"	p	class:Matrix
Matrix::adjMinor	src/Math/struct/Matrix.cpp	/^double Matrix::adjMinor(int n, int m) {$/;"	f	class:Matrix
Matrix::adjMinor	src/Math/struct/Matrix.h	/^    double adjMinor(int x, int y); \/\/ find the minor (find inner keys)$/;"	p	class:Matrix
Matrix::adjutant	include/Eternia/Math/struct/Matrix.h	/^    Matrix* adjutant(); \/\/ find the adjutant (obtained from minor of all values)$/;"	p	class:Matrix
Matrix::adjutant	src/Math/struct/Matrix.cpp	/^Matrix* Matrix::adjutant() {$/;"	f	class:Matrix
Matrix::adjutant	src/Math/struct/Matrix.h	/^    Matrix* adjutant(); \/\/ find the adjutant (obtained from minor of all values)$/;"	p	class:Matrix
Matrix::clone	include/Eternia/Math/struct/Matrix.h	/^    virtual Matrix* clone();$/;"	p	class:Matrix
Matrix::clone	src/Math/struct/Matrix.cpp	/^Matrix* Matrix::clone() {$/;"	f	class:Matrix
Matrix::clone	src/Math/struct/Matrix.h	/^    virtual Matrix* clone();$/;"	p	class:Matrix
Matrix::colSolve	include/Eternia/Math/struct/Matrix.h	/^    void colSolve(double scalar, int col, int toCool); \/\/ solves a single column using a scaled column.$/;"	p	class:Matrix
Matrix::colSolve	src/Math/struct/Matrix.cpp	/^void Matrix::colSolve(double scalar, int col, int toCool) {$/;"	f	class:Matrix
Matrix::colSolve	src/Math/struct/Matrix.h	/^    void colSolve(double scalar, int col, int toCool); \/\/ solves a single column using a scaled column.$/;"	p	class:Matrix
Matrix::columns	include/Eternia/Math/struct/Matrix.h	/^    int columns, rows; \/\/ columns, rows$/;"	m	class:Matrix
Matrix::columns	src/Math/struct/Matrix.h	/^    int columns, rows; \/\/ columns, rows$/;"	m	class:Matrix
Matrix::createMatrixContainer	include/Eternia/Math/struct/Matrix.h	/^    static double** createMatrixContainer(const int x, const int y);$/;"	p	class:Matrix
Matrix::createMatrixContainer	src/Math/struct/Matrix.cpp	/^double** Matrix::createMatrixContainer(const int x, const int y) {$/;"	f	class:Matrix
Matrix::createMatrixContainer	src/Math/struct/Matrix.h	/^    static double** createMatrixContainer(const int x, const int y);$/;"	p	class:Matrix
Matrix::determinant	include/Eternia/Math/struct/Matrix.h	/^    double determinant(); \/\/ finds the determinant by using minor(n,0) on top row.$/;"	p	class:Matrix
Matrix::determinant	src/Math/struct/Matrix.cpp	/^double Matrix::determinant() {$/;"	f	class:Matrix
Matrix::determinant	src/Math/struct/Matrix.h	/^    double determinant(); \/\/ finds the determinant by using minor(n,0) on top row.$/;"	p	class:Matrix
Matrix::echeolonForm	include/Eternia/Math/struct/Matrix.h	/^    void echeolonForm(); \/\/ changes to Echeolon form, in which rows linearly increase for each column.$/;"	p	class:Matrix
Matrix::echeolonForm	src/Math/struct/Matrix.cpp	/^void Matrix::echeolonForm() {$/;"	f	class:Matrix
Matrix::echeolonForm	src/Math/struct/Matrix.h	/^    void echeolonForm(); \/\/ changes to Echeolon form, in which rows linearly increase for each column.$/;"	p	class:Matrix
Matrix::getDeterminant	include/Eternia/Math/struct/Matrix.h	/^    double getDeterminant(int n, int m); \/\/ do inter-sequential determinants at location m,n.$/;"	p	class:Matrix
Matrix::getDeterminant	src/Math/struct/Matrix.h	/^    double getDeterminant(int n, int m); \/\/ do inter-sequential determinants at location m,n.$/;"	p	class:Matrix
Matrix::inverse	include/Eternia/Math/struct/Matrix.h	/^    void inverse(); \/\/ invert this matrix. (requires determinants)$/;"	p	class:Matrix
Matrix::inverse	src/Math/struct/Matrix.cpp	/^void Matrix::inverse() {$/;"	f	class:Matrix
Matrix::inverse	src/Math/struct/Matrix.h	/^    void inverse(); \/\/ invert this matrix. (requires determinants)$/;"	p	class:Matrix
Matrix::isSquare	include/Eternia/Math/struct/Matrix.h	/^    bool isSquare(); \/\/ _m == _n$/;"	p	class:Matrix
Matrix::isSquare	src/Math/struct/Matrix.cpp	/^bool Matrix::isSquare() {$/;"	f	class:Matrix
Matrix::isSquare	src/Math/struct/Matrix.h	/^    bool isSquare(); \/\/ _m == _n$/;"	p	class:Matrix
Matrix::lower	include/Eternia/Math/struct/Matrix.h	/^    void lower(); \/\/ linearly solves the lower quadrant$/;"	p	class:Matrix
Matrix::lower	src/Math/struct/Matrix.cpp	/^void Matrix::lower() {$/;"	f	class:Matrix
Matrix::lower	src/Math/struct/Matrix.h	/^    void lower(); \/\/ linearly solves the lower quadrant$/;"	p	class:Matrix
Matrix::multiply	include/Eternia/Math/struct/Matrix.h	/^    void multiply(Matrix* matrix); \/\/ multiplies with another matrix$/;"	p	class:Matrix
Matrix::multiply	src/Math/struct/Matrix.cpp	/^void Matrix::multiply(Matrix* matrix) {$/;"	f	class:Matrix
Matrix::multiply	src/Math/struct/Matrix.h	/^    void multiply(Matrix* matrix); \/\/ multiplies with another matrix$/;"	p	class:Matrix
Matrix::rank	include/Eternia/Math/struct/Matrix.h	/^    int rank(); \/\/ number of non-zero rows after echeolon form.$/;"	p	class:Matrix
Matrix::rank	src/Math/struct/Matrix.cpp	/^int Matrix::rank() {$/;"	f	class:Matrix
Matrix::rank	src/Math/struct/Matrix.h	/^    int rank(); \/\/ number of non-zero rows after echeolon form.$/;"	p	class:Matrix
Matrix::rowSolve	include/Eternia/Math/struct/Matrix.h	/^    void rowSolve(double scalar, int row, int toRow); \/\/ solves a single row using a scaled row.$/;"	p	class:Matrix
Matrix::rowSolve	src/Math/struct/Matrix.cpp	/^void Matrix::rowSolve(double scalar, int row, int toRow) {$/;"	f	class:Matrix
Matrix::rowSolve	src/Math/struct/Matrix.h	/^    void rowSolve(double scalar, int row, int toRow); \/\/ solves a single row using a scaled row.$/;"	p	class:Matrix
Matrix::rows	include/Eternia/Math/struct/Matrix.h	/^    int columns, rows; \/\/ columns, rows$/;"	m	class:Matrix
Matrix::rows	src/Math/struct/Matrix.h	/^    int columns, rows; \/\/ columns, rows$/;"	m	class:Matrix
Matrix::scale	include/Eternia/Math/struct/Matrix.h	/^    void scale(double scalar); \/\/ multiply all values in matrix by value.$/;"	p	class:Matrix
Matrix::scale	src/Math/struct/Matrix.cpp	/^void Matrix::scale(double scalar) {$/;"	f	class:Matrix
Matrix::scale	src/Math/struct/Matrix.h	/^    void scale(double scalar); \/\/ multiply all values in matrix by value.$/;"	p	class:Matrix
Matrix::set	include/Eternia/Math/struct/Matrix.h	/^    void set(double **values, int columns, int rows); \/\/ set a double matrix with m columns and n rows.$/;"	p	class:Matrix
Matrix::set	src/Math/struct/Matrix.cpp	/^void Matrix::set(double **values_, int _m, int _n) {$/;"	f	class:Matrix
Matrix::set	src/Math/struct/Matrix.h	/^    void set(double **values, int columns, int rows); \/\/ set a double matrix with m columns and n rows.$/;"	p	class:Matrix
Matrix::solveSquareDeterminant	include/Eternia/Math/struct/Matrix.h	/^    double solveSquareDeterminant(double a, double b, double c, double d); \/\/ solve a 2x2 determinant$/;"	p	class:Matrix
Matrix::solveSquareDeterminant	src/Math/struct/Matrix.cpp	/^double Matrix::solveSquareDeterminant(double a, double b, double c, double d) {$/;"	f	class:Matrix
Matrix::solveSquareDeterminant	src/Math/struct/Matrix.h	/^    double solveSquareDeterminant(double a, double b, double c, double d); \/\/ solve a 2x2 determinant$/;"	p	class:Matrix
Matrix::toOutput	include/Eternia/Math/struct/Matrix.h	/^    CharString* toOutput(); \/\/ converts to a string for output into console. (or w\/e)$/;"	p	class:Matrix
Matrix::toOutput	src/Math/struct/Matrix.cpp	/^CharString* Matrix::toOutput() {$/;"	f	class:Matrix
Matrix::toOutput	src/Math/struct/Matrix.h	/^    CharString* toOutput(); \/\/ converts to a string for output into console. (or w\/e)$/;"	p	class:Matrix
Matrix::transpose	include/Eternia/Math/struct/Matrix.h	/^    void transpose(); \/\/ transpose the matrix A T$/;"	p	class:Matrix
Matrix::transpose	src/Math/struct/Matrix.cpp	/^void Matrix::transpose() {$/;"	f	class:Matrix
Matrix::transpose	src/Math/struct/Matrix.h	/^    void transpose(); \/\/ transpose the matrix A T$/;"	p	class:Matrix
Matrix::upper	include/Eternia/Math/struct/Matrix.h	/^    void upper(); \/\/ linearly solves the upper quadrant$/;"	p	class:Matrix
Matrix::upper	src/Math/struct/Matrix.cpp	/^void Matrix::upper() {$/;"	f	class:Matrix
Matrix::upper	src/Math/struct/Matrix.h	/^    void upper(); \/\/ linearly solves the upper quadrant$/;"	p	class:Matrix
Matrix::values	include/Eternia/Math/struct/Matrix.h	/^    double **values;$/;"	m	class:Matrix
Matrix::values	src/Math/struct/Matrix.h	/^    double **values;$/;"	m	class:Matrix
Matrix::~Matrix	include/Eternia/Math/struct/Matrix.h	/^    virtual ~Matrix();$/;"	p	class:Matrix
Matrix::~Matrix	src/Math/struct/Matrix.cpp	/^Matrix::~Matrix() {$/;"	f	class:Matrix
Matrix::~Matrix	src/Math/struct/Matrix.h	/^    virtual ~Matrix();$/;"	p	class:Matrix
MaxSubNodes	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int MaxSubNodes; \/\/ Max # of sub-nodes to manage.$/;"	m	class:P2PManager
MaxSubNodes	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int MaxSubNodes; \/\/ Max # of sub-nodes to manage.$/;"	m	class:P2PManager
Maxwell	include/Eternia/constants.h	/^        const double Maxwell = Weber\/100000000.0;$/;"	m	namespace:physical::unit
Maxwell	src/constants.h	/^        const double Maxwell = Weber\/100000000.0;$/;"	m	namespace:physical::unit
Maxwells	include/Eternia/constants.h	/^        const double Maxwells = Maxwell;$/;"	m	namespace:physical::unit
Maxwells	src/constants.h	/^        const double Maxwells = Maxwell;$/;"	m	namespace:physical::unit
MeV	include/Eternia/constants.h	/^        const double MeV = 1000000.0*eV;$/;"	m	namespace:physical::constant
MeV	src/constants.h	/^        const double MeV = 1000000.0*eV;$/;"	m	namespace:physical::constant
Meitnerium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Meitnerium = new Atom("Meitnerium", "Mt", 9, 7, 109, 159,108, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Transition);$/;"	v
Meitnerium	src/Engineering/Chemistry/elementals.h	/^const Atom Meitnerium = new Atom("Meitnerium", "Mt", 9, 7, 109, 159,108, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Transition);$/;"	v
Memory	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned char Memory[MEM_SIZE]; \/\/ declare raw memeory region$/;"	m	class:MSP430
Memory	src/Emulation/MPU/msp430.h	/^        unsigned char Memory[MEM_SIZE]; \/\/ declare raw memeory region$/;"	m	class:MSP430
Mendelevium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Mendelevium = new Atom("Mendelevium", "Md", 0, 7, 101, 157,100, UNKNOWN,UNKNOWN, UNKNOWN, 1100,UNKNOWN, UNKNOWN, 3, COLOR_SlateGray,ELEM_Actinide);$/;"	v
Mendelevium	src/Engineering/Chemistry/elementals.h	/^const Atom Mendelevium = new Atom("Mendelevium", "Md", 0, 7, 101, 157,100, UNKNOWN,UNKNOWN, UNKNOWN, 1100,UNKNOWN, UNKNOWN, 3, COLOR_SlateGray,ELEM_Actinide);$/;"	v
Mercury	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Mercury = new Atom("Mercury", "Hg", 12, 6, 80, 121,79, 13.5336,0.00000096, 0.0083, 234.43,629.88, 0.14, 2, COLOR_Silver,ELEM_Transition);$/;"	v
Mercury	src/Engineering/Chemistry/elementals.h	/^const Atom Mercury = new Atom("Mercury", "Hg", 12, 6, 80, 121,79, 13.5336,0.00000096, 0.0083, 234.43,629.88, 0.14, 2, COLOR_Silver,ELEM_Transition);$/;"	v
MergeSort	include/Eternia/Algorithm/Sorting/MergeSort.h	/^IntegerList* MergeSort(IntegerList* list);$/;"	p
MergeSort	src/Algorithm/Sorting/MergeSort.cpp	/^IntegerList* MergeSort(IntegerList* list) {$/;"	f
MergeSort	src/Algorithm/Sorting/MergeSort.h	/^IntegerList* MergeSort(IntegerList* list);$/;"	p
MinSubNodes	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int MinSubNodes; \/\/ Max # of sub-nodes to manage.$/;"	m	class:P2PManager
MinSubNodes	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int MinSubNodes; \/\/ Max # of sub-nodes to manage.$/;"	m	class:P2PManager
Mob	include/Eternia/Gamelogic/Mob/Mob.h	/^        Mob(); \/\/ default attributes$/;"	p	class:Mob
Mob	include/Eternia/Gamelogic/Mob/Mob.h	/^class Mob : public Avatar {$/;"	c
Mob	src/Gamelogic/Mob/Mob.h	/^        Mob(); \/\/ default attributes$/;"	p	class:Mob
Mob	src/Gamelogic/Mob/Mob.h	/^class Mob : public Avatar {$/;"	c
Mob::Mob	include/Eternia/Gamelogic/Mob/Mob.h	/^        Mob(); \/\/ default attributes$/;"	p	class:Mob
Mob::Mob	src/Gamelogic/Mob/Mob.h	/^        Mob(); \/\/ default attributes$/;"	p	class:Mob
Mob::hear_range	include/Eternia/Gamelogic/Mob/Mob.h	/^        double hear_range; \/\/ Aggro algorithm requires direct sight or sound.$/;"	m	class:Mob
Mob::hear_range	src/Gamelogic/Mob/Mob.h	/^        double hear_range; \/\/ Aggro algorithm requires direct sight or sound.$/;"	m	class:Mob
Mob::vision_range	include/Eternia/Gamelogic/Mob/Mob.h	/^        double vision_range;$/;"	m	class:Mob
Mob::vision_range	src/Gamelogic/Mob/Mob.h	/^        double vision_range;$/;"	m	class:Mob
Mob_h_	include/Eternia/Gamelogic/Mob/Mob.h	/^#define Mob_h_$/;"	d
Mob_h_	src/Gamelogic/Mob/Mob.h	/^#define Mob_h_$/;"	d
ModularShip	include/Eternia/Gamelogic/Ship/ModularShip.h	/^        ModularShip();$/;"	p	class:ModularShip
ModularShip	include/Eternia/Gamelogic/Ship/ModularShip.h	/^class ModularShip {$/;"	c
ModularShip	src/Gamelogic/Ship/ModularShip.h	/^        ModularShip();$/;"	p	class:ModularShip
ModularShip	src/Gamelogic/Ship/ModularShip.h	/^class ModularShip {$/;"	c
ModularShip::ModularShip	include/Eternia/Gamelogic/Ship/ModularShip.h	/^        ModularShip();$/;"	p	class:ModularShip
ModularShip::ModularShip	src/Gamelogic/Ship/ModularShip.h	/^        ModularShip();$/;"	p	class:ModularShip
ModularShipPart	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        ModularShipPart();$/;"	p	class:ModularShipPart
ModularShipPart	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^class ModularShipPart : public ItemBase {$/;"	c
ModularShipPart	src/Gamelogic/Ship/ModularShipPart.h	/^        ModularShipPart();$/;"	p	class:ModularShipPart
ModularShipPart	src/Gamelogic/Ship/ModularShipPart.h	/^class ModularShipPart : public ItemBase {$/;"	c
ModularShipPart::ModularShipPart	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        ModularShipPart();$/;"	p	class:ModularShipPart
ModularShipPart::ModularShipPart	src/Gamelogic/Ship/ModularShipPart.h	/^        ModularShipPart();$/;"	p	class:ModularShipPart
ModularShipPart::armor	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        double armor, weight;$/;"	m	class:ModularShipPart
ModularShipPart::armor	src/Gamelogic/Ship/ModularShipPart.h	/^        double armor, weight;$/;"	m	class:ModularShipPart
ModularShipPart::description	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        CharString description; \/\/ description of this part (possibly dynamically generated)$/;"	m	class:ModularShipPart
ModularShipPart::description	src/Gamelogic/Ship/ModularShipPart.h	/^        CharString description; \/\/ description of this part (possibly dynamically generated)$/;"	m	class:ModularShipPart
ModularShipPart::hangar	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        ShipHangar hangar; \/\/ used in ship hangar, ships stored internally$/;"	m	class:ModularShipPart
ModularShipPart::hangar	src/Gamelogic/Ship/ModularShipPart.h	/^        ShipHangar hangar; \/\/ used in ship hangar, ships stored internally$/;"	m	class:ModularShipPart
ModularShipPart::name	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        CharString name; \/\/ name of this part$/;"	m	class:ModularShipPart
ModularShipPart::name	src/Gamelogic/Ship/ModularShipPart.h	/^        CharString name; \/\/ name of this part$/;"	m	class:ModularShipPart
ModularShipPart::type	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        MSType type; \/\/ type of ship part$/;"	m	class:ModularShipPart
ModularShipPart::type	src/Gamelogic/Ship/ModularShipPart.h	/^        MSType type; \/\/ type of ship part$/;"	m	class:ModularShipPart
ModularShipPart::weight	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        double armor, weight;$/;"	m	class:ModularShipPart
ModularShipPart::weight	src/Gamelogic/Ship/ModularShipPart.h	/^        double armor, weight;$/;"	m	class:ModularShipPart
Modulus	include/Eternia/Math/Eval.h	/^                addition=7,subtraction=8,multiplication=9,division=10,Modulus=11,exponent=12$/;"	e	enum:MOperator
Modulus	src/Math/Eval.h	/^                addition=7,subtraction=8,multiplication=9,division=10,Modulus=11,exponent=12$/;"	e	enum:MOperator
Molybdenum	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Molybdenum = new Atom("Molybdenum", "Mo", 6, 5, 42, 54,41, 10.22,0.00000005, 0.139, 2896,4912, 0.251, 6, COLOR_Gray,ELEM_Transition);$/;"	v
Molybdenum	src/Engineering/Chemistry/elementals.h	/^const Atom Molybdenum = new Atom("Molybdenum", "Mo", 6, 5, 42, 54,41, 10.22,0.00000005, 0.139, 2896,4912, 0.251, 6, COLOR_Gray,ELEM_Transition);$/;"	v
Mood	include/Eternia/Gamelogic/Avatar/Mood.h	/^        Mood(MOOD mood);$/;"	p	class:Mood
Mood	include/Eternia/Gamelogic/Avatar/Mood.h	/^class Mood : public SpecificSerializer {$/;"	c
Mood	src/Gamelogic/Avatar/Mood.cpp	/^Mood::Mood(MOOD mood) {$/;"	f	class:Mood
Mood	src/Gamelogic/Avatar/Mood.h	/^        Mood(MOOD mood);$/;"	p	class:Mood
Mood	src/Gamelogic/Avatar/Mood.h	/^class Mood : public SpecificSerializer {$/;"	c
Mood::Mood	include/Eternia/Gamelogic/Avatar/Mood.h	/^        Mood(MOOD mood);$/;"	p	class:Mood
Mood::Mood	src/Gamelogic/Avatar/Mood.cpp	/^Mood::Mood(MOOD mood) {$/;"	f	class:Mood
Mood::Mood	src/Gamelogic/Avatar/Mood.h	/^        Mood(MOOD mood);$/;"	p	class:Mood
Mood::act	include/Eternia/Gamelogic/Avatar/Mood.h	/^        void act(); \/\/ act out this mood (Very strong moods [>7] will do random things)$/;"	p	class:Mood
Mood::act	src/Gamelogic/Avatar/Mood.cpp	/^void Mood::act() {}$/;"	f	class:Mood
Mood::act	src/Gamelogic/Avatar/Mood.h	/^        void act(); \/\/ act out this mood (Very strong moods [>7] will do random things)$/;"	p	class:Mood
Mood::effect	include/Eternia/Gamelogic/Avatar/Mood.h	/^        void effect(); \/\/ place an effect on the avatar based on the mood. (i.e: Stressed will make the avatar make accuracy and intelligence mistakes, ect)$/;"	p	class:Mood
Mood::effect	src/Gamelogic/Avatar/Mood.cpp	/^void Mood::effect() {}$/;"	f	class:Mood
Mood::effect	src/Gamelogic/Avatar/Mood.h	/^        void effect(); \/\/ place an effect on the avatar based on the mood. (i.e: Stressed will make the avatar make accuracy and intelligence mistakes, ect)$/;"	p	class:Mood
Mood::isAllowed	include/Eternia/Gamelogic/Avatar/Mood.h	/^        bool isAllowed(); \/\/ determined if this mood is allowed in the current avatar situation$/;"	p	class:Mood
Mood::isAllowed	src/Gamelogic/Avatar/Mood.cpp	/^bool Mood::isAllowed() {}$/;"	f	class:Mood
Mood::isAllowed	src/Gamelogic/Avatar/Mood.h	/^        bool isAllowed(); \/\/ determined if this mood is allowed in the current avatar situation$/;"	p	class:Mood
Mood::mainmood	include/Eternia/Gamelogic/Avatar/Mood.h	/^        PType<MOOD> mainmood;$/;"	m	class:Mood
Mood::mainmood	src/Gamelogic/Avatar/Mood.h	/^        PType<MOOD> mainmood;$/;"	m	class:Mood
Mood::strength	include/Eternia/Gamelogic/Avatar/Mood.h	/^        PType<int> strength; \/\/ strength of this mood from 1-10, 10 being completely overwhelming$/;"	m	class:Mood
Mood::strength	src/Gamelogic/Avatar/Mood.h	/^        PType<int> strength; \/\/ strength of this mood from 1-10, 10 being completely overwhelming$/;"	m	class:Mood
Mood::tick	include/Eternia/Gamelogic/Avatar/Mood.h	/^        void tick(double tps);$/;"	p	class:Mood
Mood::tick	src/Gamelogic/Avatar/Mood.cpp	/^void Mood::tick(double tps) {$/;"	f	class:Mood
Mood::tick	src/Gamelogic/Avatar/Mood.h	/^        void tick(double tps);$/;"	p	class:Mood
Mood_h_	include/Eternia/Gamelogic/Avatar/Mood.h	/^#define Mood_h_$/;"	d
Mood_h_	src/Gamelogic/Avatar/Mood.h	/^#define Mood_h_$/;"	d
Mosfet	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        Mosfet(double impedance);$/;"	p	class:Mosfet
Mosfet	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^class Mosfet : private Component {$/;"	c
Mosfet	src/Engineering/Electrical/Components/Mosfet.h	/^        Mosfet(double impedance);$/;"	p	class:Mosfet
Mosfet	src/Engineering/Electrical/Components/Mosfet.h	/^class Mosfet : private Component {$/;"	c
Mosfet::Mosfet	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        Mosfet(double impedance);$/;"	p	class:Mosfet
Mosfet::Mosfet	src/Engineering/Electrical/Components/Mosfet.h	/^        Mosfet(double impedance);$/;"	p	class:Mosfet
Mosfet::impedance	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        double impedance; \/\/ Gate impedance$/;"	m	class:Mosfet
Mosfet::impedance	src/Engineering/Electrical/Components/Mosfet.h	/^        double impedance; \/\/ Gate impedance$/;"	m	class:Mosfet
Mosfet::pinD	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        PowerValue* pinD; \/\/ Drain pin 2$/;"	m	class:Mosfet
Mosfet::pinD	src/Engineering/Electrical/Components/Mosfet.h	/^        PowerValue* pinD; \/\/ Drain pin 2$/;"	m	class:Mosfet
Mosfet::pinG	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        PowerValue* pinG; \/\/ Gate Pin 1$/;"	m	class:Mosfet
Mosfet::pinG	src/Engineering/Electrical/Components/Mosfet.h	/^        PowerValue* pinG; \/\/ Gate Pin 1$/;"	m	class:Mosfet
Mosfet::pinS	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        PowerValue* pinS; \/\/ Source pin 3$/;"	m	class:Mosfet
Mosfet::pinS	src/Engineering/Electrical/Components/Mosfet.h	/^        PowerValue* pinS; \/\/ Source pin 3$/;"	m	class:Mosfet
Mosfet::tick	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Mosfet
Mosfet::tick	src/Engineering/Electrical/Components/Mosfet.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Mosfet
Mosfet::~Mosfet	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        virtual ~Mosfet();$/;"	p	class:Mosfet
Mosfet::~Mosfet	src/Engineering/Electrical/Components/Mosfet.h	/^        virtual ~Mosfet();$/;"	p	class:Mosfet
MountedEquip	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        MountedEquip();$/;"	p	class:MountedEquip
MountedEquip	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^class MountedEquip : public SpecificSerializer {$/;"	c
MountedEquip	src/Gamelogic/Avatar/AvatarGear.h	/^        MountedEquip();$/;"	p	class:MountedEquip
MountedEquip	src/Gamelogic/Avatar/AvatarGear.h	/^class MountedEquip : public SpecificSerializer {$/;"	c
MountedEquip::MountedEquip	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        MountedEquip();$/;"	p	class:MountedEquip
MountedEquip::MountedEquip	src/Gamelogic/Avatar/AvatarGear.h	/^        MountedEquip();$/;"	p	class:MountedEquip
MountedEquip::PlacementNumber	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        PType<int> PlacementNumber; \/\/ Used for rings and earings, each hand can have 5 rings.$/;"	m	class:MountedEquip
MountedEquip::PlacementNumber	src/Gamelogic/Avatar/AvatarGear.h	/^        PType<int> PlacementNumber; \/\/ Used for rings and earings, each hand can have 5 rings.$/;"	m	class:MountedEquip
MountedEquip::gear	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        DynamicEquip gear;$/;"	m	class:MountedEquip
MountedEquip::gear	src/Gamelogic/Avatar/AvatarGear.h	/^        DynamicEquip gear;$/;"	m	class:MountedEquip
MountedEquip::location	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        PType<GEAR_Placement> location;$/;"	m	class:MountedEquip
MountedEquip::location	src/Gamelogic/Avatar/AvatarGear.h	/^        PType<GEAR_Placement> location;$/;"	m	class:MountedEquip
MountedEquip::side	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        PType<GEAR_SIDE> side;$/;"	m	class:MountedEquip
MountedEquip::side	src/Gamelogic/Avatar/AvatarGear.h	/^        PType<GEAR_SIDE> side;$/;"	m	class:MountedEquip
N	include/Eternia/constants.h	/^        const double N = Newton;$/;"	m	namespace:physical::unit
N	src/constants.h	/^        const double N = Newton;$/;"	m	namespace:physical::unit
NANOROBOTS_H_	include/Eternia/Gamelogic/NanoRobotics/NanoRobots.h	/^#define NANOROBOTS_H_$/;"	d
NANOROBOTS_H_	src/Gamelogic/NanoRobotics/NanoRobots.h	/^#define NANOROBOTS_H_$/;"	d
NETTEST_H_	src/WebFramework/Network/test/NetworkTest.hpp	/^#define NETTEST_H_$/;"	d
NETWORKMANAGER_H_	include/Eternia/WebFramework/Network/PacketServer/NetworkManager.h	/^#define NETWORKMANAGER_H_$/;"	d
NETWORKMANAGER_H_	src/WebFramework/Network/PacketServer/NetworkManager.h	/^#define NETWORKMANAGER_H_$/;"	d
NMIIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define NMIIE /;"	d
NMIIE	src/Emulation/MPU/msp430g2553.h	/^#define NMIIE /;"	d
NMIIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define NMIIFG /;"	d
NMIIFG	src/Emulation/MPU/msp430g2553.h	/^#define NMIIFG /;"	d
NMI_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define NMI_VECTOR /;"	d
NMI_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define NMI_VECTOR /;"	d
NT_Cond	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_Cond	src/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_Dispplay	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_Dispplay	src/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_FISSION	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^enum NUCLEARTYPE {NT_FUSION, NT_FISSION, NT_STAR};$/;"	e	enum:NUCLEARTYPE
NT_FISSION	src/Gamelogic/CoreSystems/Reactor.h	/^enum NUCLEARTYPE {NT_FUSION, NT_FISSION, NT_STAR};$/;"	e	enum:NUCLEARTYPE
NT_FUSION	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^enum NUCLEARTYPE {NT_FUSION, NT_FISSION, NT_STAR};$/;"	e	enum:NUCLEARTYPE
NT_FUSION	src/Gamelogic/CoreSystems/Reactor.h	/^enum NUCLEARTYPE {NT_FUSION, NT_FISSION, NT_STAR};$/;"	e	enum:NUCLEARTYPE
NT_Input	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_Input	src/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_Math	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_Math	src/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_None	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_None	src/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_Output	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_Output	src/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_STAR	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^enum NUCLEARTYPE {NT_FUSION, NT_FISSION, NT_STAR};$/;"	e	enum:NUCLEARTYPE
NT_STAR	src/Gamelogic/CoreSystems/Reactor.h	/^enum NUCLEARTYPE {NT_FUSION, NT_FISSION, NT_STAR};$/;"	e	enum:NUCLEARTYPE
NT_Set	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NT_Set	src/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	e	enum:PNodeType
NUCLEARTYPE	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^enum NUCLEARTYPE {NT_FUSION, NT_FISSION, NT_STAR};$/;"	g
NUCLEARTYPE	src/Gamelogic/CoreSystems/Reactor.h	/^enum NUCLEARTYPE {NT_FUSION, NT_FISSION, NT_STAR};$/;"	g
NUL1	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
NUL1	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
NUL2	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
NUL2	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
NUL3	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
NUL3	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
NUL4	include/Eternia/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
NUL4	src/Emulation/MPU/msp430_Opcodes.h	/^enum MSP430_OP_2 {NUL1, NUL2, NUL3, NUL4, MSP430_MOV, MSP430_ADD, MSP430_ADDC, MSP430_SUBC, MSP430_SUB, MSP430_CMP,$/;"	e	enum:MSP430_OP_2
NULL_VERTEX	include/Eternia/Math/struct/vertex.h	/^#define NULL_VERTEX /;"	d
NULL_VERTEX	src/Math/struct/vertex.h	/^#define NULL_VERTEX /;"	d
N_A	include/Eternia/constants.h	/^        const double N_A = 6.0221367e23;$/;"	m	namespace:physical::constant
N_A	src/constants.h	/^        const double N_A = 6.0221367e23;$/;"	m	namespace:physical::constant
NanoRobots	include/Eternia/Gamelogic/NanoRobotics/NanoRobots.h	/^        NanoRobots();$/;"	p	class:NanoRobots
NanoRobots	include/Eternia/Gamelogic/NanoRobotics/NanoRobots.h	/^class NanoRobots {$/;"	c
NanoRobots	src/Gamelogic/NanoRobotics/NanoRobots.h	/^        NanoRobots();$/;"	p	class:NanoRobots
NanoRobots	src/Gamelogic/NanoRobotics/NanoRobots.h	/^class NanoRobots {$/;"	c
NanoRobots::NanoRobots	include/Eternia/Gamelogic/NanoRobotics/NanoRobots.h	/^        NanoRobots();$/;"	p	class:NanoRobots
NanoRobots::NanoRobots	src/Gamelogic/NanoRobotics/NanoRobots.h	/^        NanoRobots();$/;"	p	class:NanoRobots
NanoRobots::colonySet	include/Eternia/Gamelogic/NanoRobotics/NanoRobots.h	/^        double colonySet; \/\/ Unique ID number set into each Nano.$/;"	m	class:NanoRobots
NanoRobots::colonySet	src/Gamelogic/NanoRobotics/NanoRobots.h	/^        double colonySet; \/\/ Unique ID number set into each Nano.$/;"	m	class:NanoRobots
NanoRobots::hacking	include/Eternia/Gamelogic/NanoRobotics/NanoRobots.h	/^        void hacking(NanoRobots* attemptColony);$/;"	p	class:NanoRobots
NanoRobots::hacking	src/Gamelogic/NanoRobotics/NanoRobots.h	/^        void hacking(NanoRobots* attemptColony);$/;"	p	class:NanoRobots
NanoTech	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> NanoTech; \/\/ Skill with nano technology$/;"	m	class:SkillSet
NanoTech	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> NanoTech; \/\/ Skill with nano technology$/;"	m	class:SkillSet
Nebula_H_	include/Eternia/Gamelogic/Environment/Space/Nebula.h	/^#define Nebula_H_$/;"	d
Nebula_H_	src/Gamelogic/Environment/Space/Nebula.h	/^#define Nebula_H_$/;"	d
Neodymium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Neodymium = new Atom("Neodymium", "Nd", 0, 6, 60, 84,59, 7.007,0.00000064, 0.017, 1297,3347, 0.19, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Neodymium	src/Engineering/Chemistry/elementals.h	/^const Atom Neodymium = new Atom("Neodymium", "Nd", 0, 6, 60, 84,59, 7.007,0.00000064, 0.017, 1297,3347, 0.19, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Neon	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Neon = new Atom("Neon", "Ne", 18, 2, 10, 10,10, 0.0008999,UNKNOWN, 0.0000491, 24.56,27.07, 1.03, 0, COLOR_None,ELEM_Noble);$/;"	v
Neon	src/Engineering/Chemistry/elementals.h	/^const Atom Neon = new Atom("Neon", "Ne", 18, 2, 10, 10,10, 0.0008999,UNKNOWN, 0.0000491, 24.56,27.07, 1.03, 0, COLOR_None,ELEM_Noble);$/;"	v
Neptunium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Neptunium = new Atom("Neptunium", "Np", 0, 7, 93, 144,92, 20.45,0.0000012, 0.006, 917,4273, UNKNOWN, 6, COLOR_Silver,ELEM_Actinide);$/;"	v
Neptunium	src/Engineering/Chemistry/elementals.h	/^const Atom Neptunium = new Atom("Neptunium", "Np", 0, 7, 93, 144,92, 20.45,0.0000012, 0.006, 917,4273, UNKNOWN, 6, COLOR_Silver,ELEM_Actinide);$/;"	v
NetworkManager	include/Eternia/WebFramework/Network/PacketServer/NetworkManager.h	/^        NetworkManager();$/;"	p	class:NetworkManager
NetworkManager	include/Eternia/WebFramework/Network/PacketServer/NetworkManager.h	/^class NetworkManager {$/;"	c
NetworkManager	src/WebFramework/Network/PacketServer/NetworkManager.cpp	/^NetworkManager::NetworkManager() {$/;"	f	class:NetworkManager
NetworkManager	src/WebFramework/Network/PacketServer/NetworkManager.h	/^        NetworkManager();$/;"	p	class:NetworkManager
NetworkManager	src/WebFramework/Network/PacketServer/NetworkManager.h	/^class NetworkManager {$/;"	c
NetworkManager::NetworkManager	include/Eternia/WebFramework/Network/PacketServer/NetworkManager.h	/^        NetworkManager();$/;"	p	class:NetworkManager
NetworkManager::NetworkManager	src/WebFramework/Network/PacketServer/NetworkManager.cpp	/^NetworkManager::NetworkManager() {$/;"	f	class:NetworkManager
NetworkManager::NetworkManager	src/WebFramework/Network/PacketServer/NetworkManager.h	/^        NetworkManager();$/;"	p	class:NetworkManager
NetworkManager::~NetworkManager	include/Eternia/WebFramework/Network/PacketServer/NetworkManager.h	/^        virtual ~NetworkManager();$/;"	p	class:NetworkManager
NetworkManager::~NetworkManager	src/WebFramework/Network/PacketServer/NetworkManager.cpp	/^NetworkManager::~NetworkManager() {$/;"	f	class:NetworkManager
NetworkManager::~NetworkManager	src/WebFramework/Network/PacketServer/NetworkManager.h	/^        virtual ~NetworkManager();$/;"	p	class:NetworkManager
Neutrino	include/Eternia/Engineering/Chemistry/Hadron/Neutrino.h	/^        Neutrino();$/;"	p	class:Neutrino
Neutrino	include/Eternia/Engineering/Chemistry/Hadron/Neutrino.h	/^class Neutrino {$/;"	c
Neutrino	src/Engineering/Chemistry/Hadron/Neutrino.h	/^        Neutrino();$/;"	p	class:Neutrino
Neutrino	src/Engineering/Chemistry/Hadron/Neutrino.h	/^class Neutrino {$/;"	c
Neutrino::Neutrino	include/Eternia/Engineering/Chemistry/Hadron/Neutrino.h	/^        Neutrino();$/;"	p	class:Neutrino
Neutrino::Neutrino	src/Engineering/Chemistry/Hadron/Neutrino.h	/^        Neutrino();$/;"	p	class:Neutrino
Neutrino::~Neutrino	include/Eternia/Engineering/Chemistry/Hadron/Neutrino.h	/^        virtual ~Neutrino();$/;"	p	class:Neutrino
Neutrino::~Neutrino	src/Engineering/Chemistry/Hadron/Neutrino.h	/^        virtual ~Neutrino();$/;"	p	class:Neutrino
Neutrino_h_	include/Eternia/Engineering/Chemistry/Hadron/Neutrino.h	/^#define Neutrino_h_$/;"	d
Neutrino_h_	src/Engineering/Chemistry/Hadron/Neutrino.h	/^#define Neutrino_h_$/;"	d
Neutron	include/Eternia/Engineering/Chemistry/Hadron/Neutron.h	/^        Neutron();$/;"	p	class:Neutron
Neutron	include/Eternia/Engineering/Chemistry/Hadron/Neutron.h	/^class Neutron : protected Baryon {$/;"	c
Neutron	src/Engineering/Chemistry/Hadron/Neutron.h	/^        Neutron();$/;"	p	class:Neutron
Neutron	src/Engineering/Chemistry/Hadron/Neutron.h	/^class Neutron : protected Baryon {$/;"	c
Neutron::Neutron	include/Eternia/Engineering/Chemistry/Hadron/Neutron.h	/^        Neutron();$/;"	p	class:Neutron
Neutron::Neutron	src/Engineering/Chemistry/Hadron/Neutron.h	/^        Neutron();$/;"	p	class:Neutron
Neutron::~Neutron	include/Eternia/Engineering/Chemistry/Hadron/Neutron.h	/^        virtual ~Neutron();$/;"	p	class:Neutron
Neutron::~Neutron	src/Engineering/Chemistry/Hadron/Neutron.h	/^        virtual ~Neutron();$/;"	p	class:Neutron
Neutron_h_	include/Eternia/Engineering/Chemistry/Hadron/Neutron.h	/^#define Neutron_h_$/;"	d
Neutron_h_	src/Engineering/Chemistry/Hadron/Neutron.h	/^#define Neutron_h_$/;"	d
Newton	include/Eternia/constants.h	/^        const double Newton = kilogram*meter\/(second*second);$/;"	m	namespace:physical::unit
Newton	src/constants.h	/^        const double Newton = kilogram*meter\/(second*second);$/;"	m	namespace:physical::unit
Newtons	include/Eternia/constants.h	/^        const double Newtons = Newton;$/;"	m	namespace:physical::unit
Newtons	src/constants.h	/^        const double Newtons = Newton;$/;"	m	namespace:physical::unit
Next	include/Eternia/Data/Queue.h	/^        QueueNode *Prev, *Next;$/;"	m	class:QueueNode
Next	include/Eternia/Data/Stack.h	/^        ValueNode* Next; \/\/ Node linker$/;"	m	class:ValueNode
Next	src/Data/Queue.h	/^        QueueNode *Prev, *Next;$/;"	m	class:QueueNode
Next	src/Data/Stack.h	/^        ValueNode* Next; \/\/ Node linker$/;"	m	class:ValueNode
Nickel	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Nickel = new Atom("Nickel", "Ni", 10, 4, 28, 31,27, 8.912,0.00000007, 0.091, 1728,3186, 0.444, 2, COLOR_Gray,ELEM_Transition);$/;"	v
Nickel	src/Engineering/Chemistry/elementals.h	/^const Atom Nickel = new Atom("Nickel", "Ni", 10, 4, 28, 31,27, 8.912,0.00000007, 0.091, 1728,3186, 0.444, 2, COLOR_Gray,ELEM_Transition);$/;"	v
Niobium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Niobium = new Atom("Niobium", "Nb", 5, 5, 41, 52,40, 8.57,0.00000015, 0.054, 2750,5017, 0.265, 5, COLOR_Gray,ELEM_Transition);$/;"	v
Niobium	src/Engineering/Chemistry/elementals.h	/^const Atom Niobium = new Atom("Niobium", "Nb", 5, 5, 41, 52,40, 8.57,0.00000015, 0.054, 2750,5017, 0.265, 5, COLOR_Gray,ELEM_Transition);$/;"	v
Nitrogen	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Nitrogen = new Atom("Nitrogen", "N", 15, 2, 7, 0,7, 0.0012506,UNKNOWN, 0.00002583, 63.15,77.36, 1.04, 3, COLOR_None,ELEM_NonMetal);$/;"	v
Nitrogen	src/Engineering/Chemistry/elementals.h	/^const Atom Nitrogen = new Atom("Nitrogen", "N", 15, 2, 7, 0,7, 0.0012506,UNKNOWN, 0.00002583, 63.15,77.36, 1.04, 3, COLOR_None,ELEM_NonMetal);$/;"	v
Nobelium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Nobelium = new Atom("Nobelium", "No", 0, 7, 102, 157,101, UNKNOWN,UNKNOWN, UNKNOWN, 1100,UNKNOWN, UNKNOWN, 3, COLOR_SlateGray,ELEM_Actinide);$/;"	v
Nobelium	src/Engineering/Chemistry/elementals.h	/^const Atom Nobelium = new Atom("Nobelium", "No", 0, 7, 102, 157,101, UNKNOWN,UNKNOWN, UNKNOWN, 1100,UNKNOWN, UNKNOWN, 3, COLOR_SlateGray,ELEM_Actinide);$/;"	v
OCEAN_H_	include/Eternia/Gamelogic/Environment/Planet/Ocean.h	/^#define OCEAN_H_$/;"	d
OCEAN_H_	src/Gamelogic/Environment/Planet/Ocean.h	/^#define OCEAN_H_$/;"	d
OFIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OFIE /;"	d
OFIE	src/Emulation/MPU/msp430g2553.h	/^#define OFIE /;"	d
OFIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OFIFG /;"	d
OFIFG	src/Emulation/MPU/msp430g2553.h	/^#define OFIFG /;"	d
OPEQ_Imag	include/Eternia/Math/Complex.hpp	/^    OPEQ_Imag(&=, float);$/;"	m	class:Complex
OPEQ_Imag	include/Eternia/Math/Complex.hpp	/^    OPEQ_Imag(&=, int);$/;"	m	class:Complex
OPEQ_Imag	include/Eternia/Math/Complex.hpp	/^    OPEQ_Imag(&=, long);$/;"	m	class:Complex
OPEQ_Imag	include/Eternia/Math/Complex.hpp	/^#define OPEQ_Imag(/;"	d
OPEQ_Imag	src/Math/Complex.hpp	/^    OPEQ_Imag(&=, float);$/;"	m	class:Complex
OPEQ_Imag	src/Math/Complex.hpp	/^    OPEQ_Imag(&=, int);$/;"	m	class:Complex
OPEQ_Imag	src/Math/Complex.hpp	/^    OPEQ_Imag(&=, long);$/;"	m	class:Complex
OPEQ_Imag	src/Math/Complex.hpp	/^#define OPEQ_Imag(/;"	d
OPEQ_Real	include/Eternia/Math/Complex.hpp	/^    OPEQ_Real(=, float);$/;"	m	class:Complex
OPEQ_Real	include/Eternia/Math/Complex.hpp	/^    OPEQ_Real(=, int);$/;"	m	class:Complex
OPEQ_Real	include/Eternia/Math/Complex.hpp	/^    OPEQ_Real(=, long);$/;"	m	class:Complex
OPEQ_Real	include/Eternia/Math/Complex.hpp	/^#define OPEQ_Real(/;"	d
OPEQ_Real	src/Math/Complex.hpp	/^    OPEQ_Real(=, float);$/;"	m	class:Complex
OPEQ_Real	src/Math/Complex.hpp	/^    OPEQ_Real(=, int);$/;"	m	class:Complex
OPEQ_Real	src/Math/Complex.hpp	/^    OPEQ_Real(=, long);$/;"	m	class:Complex
OPEQ_Real	src/Math/Complex.hpp	/^#define OPEQ_Real(/;"	d
OPIM_MATH	include/Eternia/Math/Complex.hpp	/^#define OPIM_MATH(/;"	d
OPIM_MATH	src/Math/Complex.hpp	/^#define OPIM_MATH(/;"	d
OPI_MATH	include/Eternia/Math/Complex.hpp	/^    OPI_MATH(*=, float);$/;"	m	class:Complex
OPI_MATH	include/Eternia/Math/Complex.hpp	/^    OPI_MATH(*=, int); \/\/ imaginary multiply by scalar$/;"	m	class:Complex
OPI_MATH	include/Eternia/Math/Complex.hpp	/^    OPI_MATH(*=, long);$/;"	m	class:Complex
OPI_MATH	include/Eternia/Math/Complex.hpp	/^#define OPI_MATH(/;"	d
OPI_MATH	src/Math/Complex.hpp	/^    OPI_MATH(*=, float);$/;"	m	class:Complex
OPI_MATH	src/Math/Complex.hpp	/^    OPI_MATH(*=, int); \/\/ imaginary multiply by scalar$/;"	m	class:Complex
OPI_MATH	src/Math/Complex.hpp	/^    OPI_MATH(*=, long);$/;"	m	class:Complex
OPI_MATH	src/Math/Complex.hpp	/^#define OPI_MATH(/;"	d
OP_ALL	include/Eternia/Data/Protect/PType.hpp	/^#define OP_ALL(/;"	d
OP_ALL	src/Data/Protect/PType.hpp	/^#define OP_ALL(/;"	d
OP_ALL_COMP	include/Eternia/Data/Protect/PType.hpp	/^#define OP_ALL_COMP(/;"	d
OP_ALL_COMP	src/Data/Protect/PType.hpp	/^#define OP_ALL_COMP(/;"	d
OP_ALL_EQ	include/Eternia/Data/Protect/PType.hpp	/^#define OP_ALL_EQ(/;"	d
OP_ALL_EQ	src/Data/Protect/PType.hpp	/^#define OP_ALL_EQ(/;"	d
OP_COMPT_DO	include/Eternia/Data/Protect/PType.hpp	/^#define OP_COMPT_DO(/;"	d
OP_COMPT_DO	src/Data/Protect/PType.hpp	/^#define OP_COMPT_DO(/;"	d
OP_COMP_DO	include/Eternia/Data/Protect/PType.hpp	/^#define OP_COMP_DO(/;"	d
OP_COMP_DO	src/Data/Protect/PType.hpp	/^#define OP_COMP_DO(/;"	d
OP_EQ	include/Eternia/Data/Protect/PType.hpp	/^#define OP_EQ(/;"	d
OP_EQ	src/Data/Protect/PType.hpp	/^#define OP_EQ(/;"	d
OP_MATH	include/Eternia/Math/Complex.hpp	/^    OP_MATH(*, float, true);$/;"	m	class:Complex
OP_MATH	include/Eternia/Math/Complex.hpp	/^    OP_MATH(*, int, true); \/\/ multiply by real just scales$/;"	m	class:Complex
OP_MATH	include/Eternia/Math/Complex.hpp	/^    OP_MATH(*, long, true);$/;"	m	class:Complex
OP_MATH	include/Eternia/Math/Complex.hpp	/^#define OP_MATH(/;"	d
OP_MATH	src/Math/Complex.hpp	/^    OP_MATH(*, float, true);$/;"	m	class:Complex
OP_MATH	src/Math/Complex.hpp	/^    OP_MATH(*, int, true); \/\/ multiply by real just scales$/;"	m	class:Complex
OP_MATH	src/Math/Complex.hpp	/^    OP_MATH(*, long, true);$/;"	m	class:Complex
OP_MATH	src/Math/Complex.hpp	/^#define OP_MATH(/;"	d
OP_PPP_DO	include/Eternia/Data/Protect/PType.hpp	/^#define OP_PPP_DO(/;"	d
OP_PPP_DO	src/Data/Protect/PType.hpp	/^#define OP_PPP_DO(/;"	d
OP_PPP_DO_EQ	include/Eternia/Data/Protect/PType.hpp	/^#define OP_PPP_DO_EQ(/;"	d
OP_PPP_DO_EQ	src/Data/Protect/PType.hpp	/^#define OP_PPP_DO_EQ(/;"	d
OP_PTP_DO	include/Eternia/Data/Protect/PType.hpp	/^#define OP_PTP_DO(/;"	d
OP_PTP_DO	src/Data/Protect/PType.hpp	/^#define OP_PTP_DO(/;"	d
OP_PTP_DO_EQ	include/Eternia/Data/Protect/PType.hpp	/^#define OP_PTP_DO_EQ(/;"	d
OP_PTP_DO_EQ	src/Data/Protect/PType.hpp	/^#define OP_PTP_DO_EQ(/;"	d
ORE_H_	include/Eternia/Engineering/Chemistry/Ore.h	/^#define ORE_H_$/;"	d
ORE_H_	src/Engineering/Chemistry/Ore.h	/^#define ORE_H_$/;"	d
OSCOFF	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OSCOFF /;"	d
OSCOFF	src/Emulation/MPU/msp430g2553.h	/^#define OSCOFF /;"	d
OUT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OUT /;"	d
OUT	src/Emulation/MPU/msp430g2553.h	/^#define OUT /;"	d
OUTMOD0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OUTMOD0 /;"	d
OUTMOD0	src/Emulation/MPU/msp430g2553.h	/^#define OUTMOD0 /;"	d
OUTMOD1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OUTMOD1 /;"	d
OUTMOD1	src/Emulation/MPU/msp430g2553.h	/^#define OUTMOD1 /;"	d
OUTMOD2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OUTMOD2 /;"	d
OUTMOD2	src/Emulation/MPU/msp430g2553.h	/^#define OUTMOD2 /;"	d
OUTMOD_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_0 /;"	d
OUTMOD_0	src/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_0 /;"	d
OUTMOD_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_1 /;"	d
OUTMOD_1	src/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_1 /;"	d
OUTMOD_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_2 /;"	d
OUTMOD_2	src/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_2 /;"	d
OUTMOD_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_3 /;"	d
OUTMOD_3	src/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_3 /;"	d
OUTMOD_4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_4 /;"	d
OUTMOD_4	src/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_4 /;"	d
OUTMOD_5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_5 /;"	d
OUTMOD_5	src/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_5 /;"	d
OUTMOD_6	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_6 /;"	d
OUTMOD_6	src/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_6 /;"	d
OUTMOD_7	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_7 /;"	d
OUTMOD_7	src/Emulation/MPU/msp430g2553.h	/^#define OUTMOD_7 /;"	d
Ocean	include/Eternia/Gamelogic/Environment/Planet/Ocean.h	/^        Ocean();$/;"	p	class:Ocean
Ocean	include/Eternia/Gamelogic/Environment/Planet/Ocean.h	/^class Ocean {$/;"	c
Ocean	src/Gamelogic/Environment/Planet/Ocean.cpp	/^Ocean::Ocean() {$/;"	f	class:Ocean
Ocean	src/Gamelogic/Environment/Planet/Ocean.h	/^        Ocean();$/;"	p	class:Ocean
Ocean	src/Gamelogic/Environment/Planet/Ocean.h	/^class Ocean {$/;"	c
Ocean::Ocean	include/Eternia/Gamelogic/Environment/Planet/Ocean.h	/^        Ocean();$/;"	p	class:Ocean
Ocean::Ocean	src/Gamelogic/Environment/Planet/Ocean.cpp	/^Ocean::Ocean() {$/;"	f	class:Ocean
Ocean::Ocean	src/Gamelogic/Environment/Planet/Ocean.h	/^        Ocean();$/;"	p	class:Ocean
Ocean::~Ocean	include/Eternia/Gamelogic/Environment/Planet/Ocean.h	/^        virtual ~Ocean();$/;"	p	class:Ocean
Ocean::~Ocean	src/Gamelogic/Environment/Planet/Ocean.cpp	/^Ocean::~Ocean() {$/;"	f	class:Ocean
Ocean::~Ocean	src/Gamelogic/Environment/Planet/Ocean.h	/^        virtual ~Ocean();$/;"	p	class:Ocean
Oe	include/Eternia/constants.h	/^        const double Oe = Oerstedt;$/;"	m	namespace:physical::unit
Oe	src/constants.h	/^        const double Oe = Oerstedt;$/;"	m	namespace:physical::unit
Oerstedt	include/Eternia/constants.h	/^        const double Oerstedt = 79.57747*Ampere\/meter;$/;"	m	namespace:physical::unit
Oerstedt	src/constants.h	/^        const double Oerstedt = 79.57747*Ampere\/meter;$/;"	m	namespace:physical::unit
Oerstedts	include/Eternia/constants.h	/^        const double Oerstedts = Oerstedt;$/;"	m	namespace:physical::unit
Oerstedts	src/constants.h	/^        const double Oerstedts = Oerstedt;$/;"	m	namespace:physical::unit
Ohm	include/Eternia/constants.h	/^        const double Ohm = Volt\/Ampere;$/;"	m	namespace:physical::unit
Ohm	src/constants.h	/^        const double Ohm = Volt\/Ampere;$/;"	m	namespace:physical::unit
Ohms	include/Eternia/constants.h	/^        const double Ohms = Ohm;$/;"	m	namespace:physical::unit
Ohms	src/constants.h	/^        const double Ohms = Ohm;$/;"	m	namespace:physical::unit
OpStack	src/Math/Eval.cpp	/^Stack* OpStack = new Stack();$/;"	v
Ore	include/Eternia/Engineering/Chemistry/Ore.h	/^        Ore(char* name, char* formula, char* elements);$/;"	p	class:Ore
Ore	include/Eternia/Engineering/Chemistry/Ore.h	/^class Ore {$/;"	c
Ore	src/Engineering/Chemistry/Ore.h	/^        Ore(char* name, char* formula, char* elements);$/;"	p	class:Ore
Ore	src/Engineering/Chemistry/Ore.h	/^class Ore {$/;"	c
Ore::Clone	include/Eternia/Engineering/Chemistry/Ore.h	/^        Ore* Clone(); \/\/ clone this ore for use with implementations$/;"	p	class:Ore
Ore::Clone	src/Engineering/Chemistry/Ore.h	/^        Ore* Clone(); \/\/ clone this ore for use with implementations$/;"	p	class:Ore
Ore::Ore	include/Eternia/Engineering/Chemistry/Ore.h	/^        Ore(char* name, char* formula, char* elements);$/;"	p	class:Ore
Ore::Ore	src/Engineering/Chemistry/Ore.h	/^        Ore(char* name, char* formula, char* elements);$/;"	p	class:Ore
Ore::color	include/Eternia/Engineering/Chemistry/Ore.h	/^        vertex* color; \/\/ color of this ore$/;"	m	class:Ore
Ore::color	src/Engineering/Chemistry/Ore.h	/^        vertex* color; \/\/ color of this ore$/;"	m	class:Ore
Ore::elements	include/Eternia/Engineering/Chemistry/Ore.h	/^        CharString *name, *formula, *elements; \/\/ ore name$/;"	m	class:Ore
Ore::elements	src/Engineering/Chemistry/Ore.h	/^        CharString *name, *formula, *elements; \/\/ ore name$/;"	m	class:Ore
Ore::formula	include/Eternia/Engineering/Chemistry/Ore.h	/^        CharString *name, *formula, *elements; \/\/ ore name$/;"	m	class:Ore
Ore::formula	include/Eternia/Engineering/Chemistry/Ore.h	/^        Composite* formula; \/\/ formula used for this ore$/;"	m	class:Ore
Ore::formula	src/Engineering/Chemistry/Ore.h	/^        CharString *name, *formula, *elements; \/\/ ore name$/;"	m	class:Ore
Ore::formula	src/Engineering/Chemistry/Ore.h	/^        Composite* formula; \/\/ formula used for this ore$/;"	m	class:Ore
Ore::getColor	include/Eternia/Engineering/Chemistry/Ore.h	/^        vertex* getColor(); \/\/ get the color for this ore based on the formula given$/;"	p	class:Ore
Ore::getColor	src/Engineering/Chemistry/Ore.h	/^        vertex* getColor(); \/\/ get the color for this ore based on the formula given$/;"	p	class:Ore
Ore::getComposite	include/Eternia/Engineering/Chemistry/Ore.h	/^        Composite* getComposite(); \/\/ get the full composite of materials$/;"	p	class:Ore
Ore::getComposite	src/Engineering/Chemistry/Ore.h	/^        Composite* getComposite(); \/\/ get the full composite of materials$/;"	p	class:Ore
Ore::name	include/Eternia/Engineering/Chemistry/Ore.h	/^        CharString *name, *formula, *elements; \/\/ ore name$/;"	m	class:Ore
Ore::name	src/Engineering/Chemistry/Ore.h	/^        CharString *name, *formula, *elements; \/\/ ore name$/;"	m	class:Ore
Ore::oreSize	include/Eternia/Engineering/Chemistry/Ore.h	/^        double oreSize; \/\/ amount of ore in deposit, measrured in kilograms.$/;"	m	class:Ore
Ore::oreSize	src/Engineering/Chemistry/Ore.h	/^        double oreSize; \/\/ amount of ore in deposit, measrured in kilograms.$/;"	m	class:Ore
Osmium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Osmium = new Atom("Osmium", "Os", 8, 6, 76, 114,75, 22.61,0.000000081, 0.088, 3306,5285, 0.13, 6, COLOR_SlateGray,ELEM_Transition);$/;"	v
Osmium	src/Engineering/Chemistry/elementals.h	/^const Atom Osmium = new Atom("Osmium", "Os", 8, 6, 76, 114,75, 22.61,0.000000081, 0.088, 3306,5285, 0.13, 6, COLOR_SlateGray,ELEM_Transition);$/;"	v
Oxygen	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Oxygen = new Atom("Oxygen", "O", 16, 2, 8, 8,8, 0.001429,UNKNOWN, 0.00002658, 54.36,90.2, 0.918, 2, COLOR_None,ELEM_NonMetal);$/;"	v
Oxygen	src/Engineering/Chemistry/elementals.h	/^const Atom Oxygen = new Atom("Oxygen", "O", 16, 2, 8, 8,8, 0.001429,UNKNOWN, 0.00002658, 54.36,90.2, 0.918, 2, COLOR_None,ELEM_NonMetal);$/;"	v
P1DIR	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P1DIR /;"	d
P1DIR	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1DIR);                              \/* Port 1 Direction *\/$/;"	v
P1DIR	src/Emulation/MPU/msp430_declare_consts.h	/^#define P1DIR /;"	d
P1DIR	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1DIR);                              \/* Port 1 Direction *\/$/;"	v
P1IE	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P1IE /;"	d
P1IE	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1IE);                               \/* Port 1 Interrupt Enable *\/$/;"	v
P1IE	src/Emulation/MPU/msp430_declare_consts.h	/^#define P1IE /;"	d
P1IE	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1IE);                               \/* Port 1 Interrupt Enable *\/$/;"	v
P1IES	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P1IES /;"	d
P1IES	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1IES);                              \/* Port 1 Interrupt Edge Select *\/$/;"	v
P1IES	src/Emulation/MPU/msp430_declare_consts.h	/^#define P1IES /;"	d
P1IES	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1IES);                              \/* Port 1 Interrupt Edge Select *\/$/;"	v
P1IFG	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P1IFG /;"	d
P1IFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1IFG);                              \/* Port 1 Interrupt Flag *\/$/;"	v
P1IFG	src/Emulation/MPU/msp430_declare_consts.h	/^#define P1IFG /;"	d
P1IFG	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1IFG);                              \/* Port 1 Interrupt Flag *\/$/;"	v
P1IN	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P1IN /;"	d
P1IN	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1IN);                               \/* Port 1 Input *\/$/;"	v
P1IN	src/Emulation/MPU/msp430_declare_consts.h	/^#define P1IN /;"	d
P1IN	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1IN);                               \/* Port 1 Input *\/$/;"	v
P1OUT	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P1OUT /;"	d
P1OUT	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1OUT);                              \/* Port 1 Output *\/$/;"	v
P1OUT	src/Emulation/MPU/msp430_declare_consts.h	/^#define P1OUT /;"	d
P1OUT	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1OUT);                              \/* Port 1 Output *\/$/;"	v
P1REN	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P1REN /;"	d
P1REN	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1REN);                              \/* Port 1 Resistor Enable *\/$/;"	v
P1REN	src/Emulation/MPU/msp430_declare_consts.h	/^#define P1REN /;"	d
P1REN	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1REN);                              \/* Port 1 Resistor Enable *\/$/;"	v
P1SEL	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P1SEL /;"	d
P1SEL	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1SEL);                              \/* Port 1 Selection *\/$/;"	v
P1SEL	src/Emulation/MPU/msp430_declare_consts.h	/^#define P1SEL /;"	d
P1SEL	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1SEL);                              \/* Port 1 Selection *\/$/;"	v
P1SEL2	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P1SEL2 /;"	d
P1SEL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1SEL2);                             \/* Port 1 Selection 2 *\/$/;"	v
P1SEL2	src/Emulation/MPU/msp430_declare_consts.h	/^#define P1SEL2 /;"	d
P1SEL2	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P1SEL2);                             \/* Port 1 Selection 2 *\/$/;"	v
P2CA0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define P2CA0 /;"	d
P2CA0	src/Emulation/MPU/msp430g2553.h	/^#define P2CA0 /;"	d
P2CA1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define P2CA1 /;"	d
P2CA1	src/Emulation/MPU/msp430g2553.h	/^#define P2CA1 /;"	d
P2CA2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define P2CA2 /;"	d
P2CA2	src/Emulation/MPU/msp430g2553.h	/^#define P2CA2 /;"	d
P2CA3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define P2CA3 /;"	d
P2CA3	src/Emulation/MPU/msp430g2553.h	/^#define P2CA3 /;"	d
P2CA4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define P2CA4 /;"	d
P2CA4	src/Emulation/MPU/msp430g2553.h	/^#define P2CA4 /;"	d
P2DIR	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P2DIR /;"	d
P2DIR	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2DIR);                              \/* Port 2 Direction *\/$/;"	v
P2DIR	src/Emulation/MPU/msp430_declare_consts.h	/^#define P2DIR /;"	d
P2DIR	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2DIR);                              \/* Port 2 Direction *\/$/;"	v
P2IE	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P2IE /;"	d
P2IE	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2IE);                               \/* Port 2 Interrupt Enable *\/$/;"	v
P2IE	src/Emulation/MPU/msp430_declare_consts.h	/^#define P2IE /;"	d
P2IE	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2IE);                               \/* Port 2 Interrupt Enable *\/$/;"	v
P2IES	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P2IES /;"	d
P2IES	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2IES);                              \/* Port 2 Interrupt Edge Select *\/$/;"	v
P2IES	src/Emulation/MPU/msp430_declare_consts.h	/^#define P2IES /;"	d
P2IES	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2IES);                              \/* Port 2 Interrupt Edge Select *\/$/;"	v
P2IFG	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P2IFG /;"	d
P2IFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2IFG);                              \/* Port 2 Interrupt Flag *\/$/;"	v
P2IFG	src/Emulation/MPU/msp430_declare_consts.h	/^#define P2IFG /;"	d
P2IFG	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2IFG);                              \/* Port 2 Interrupt Flag *\/$/;"	v
P2IN	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P2IN /;"	d
P2IN	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2IN);                               \/* Port 2 Input *\/$/;"	v
P2IN	src/Emulation/MPU/msp430_declare_consts.h	/^#define P2IN /;"	d
P2IN	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2IN);                               \/* Port 2 Input *\/$/;"	v
P2OUT	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P2OUT /;"	d
P2OUT	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2OUT);                              \/* Port 2 Output *\/$/;"	v
P2OUT	src/Emulation/MPU/msp430_declare_consts.h	/^#define P2OUT /;"	d
P2OUT	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2OUT);                              \/* Port 2 Output *\/$/;"	v
P2PBOUNDARIES_H_	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^#define P2PBOUNDARIES_H_$/;"	d
P2PBOUNDARIES_H_	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^#define P2PBOUNDARIES_H_$/;"	d
P2PBoundaries	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        P2PBoundaries();$/;"	p	class:P2PBoundaries
P2PBoundaries	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^class P2PBoundaries {$/;"	c
P2PBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.cpp	/^P2PBoundaries::P2PBoundaries() {$/;"	f	class:P2PBoundaries
P2PBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        P2PBoundaries();$/;"	p	class:P2PBoundaries
P2PBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^class P2PBoundaries {$/;"	c
P2PBoundaries::P2PBoundaries	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        P2PBoundaries();$/;"	p	class:P2PBoundaries
P2PBoundaries::P2PBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.cpp	/^P2PBoundaries::P2PBoundaries() {$/;"	f	class:P2PBoundaries
P2PBoundaries::P2PBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        P2PBoundaries();$/;"	p	class:P2PBoundaries
P2PBoundaries::minsectorx	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long minsectorx; \/\/Min sector boundaries (Prevents P2PLServers from going lower and forces them to Co-server)$/;"	m	class:P2PBoundaries
P2PBoundaries::minsectorx	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long minsectorx; \/\/Min sector boundaries (Prevents P2PLServers from going lower and forces them to Co-server)$/;"	m	class:P2PBoundaries
P2PBoundaries::minsectory	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long minsectory;$/;"	m	class:P2PBoundaries
P2PBoundaries::minsectory	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long minsectory;$/;"	m	class:P2PBoundaries
P2PBoundaries::x	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x,y; \/\/ x, y coords$/;"	m	class:P2PBoundaries
P2PBoundaries::x	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x,y; \/\/ x, y coords$/;"	m	class:P2PBoundaries
P2PBoundaries::x1	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x1,y1; \/\/ other edge of boundary.$/;"	m	class:P2PBoundaries
P2PBoundaries::x1	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x1,y1; \/\/ other edge of boundary.$/;"	m	class:P2PBoundaries
P2PBoundaries::y	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x,y; \/\/ x, y coords$/;"	m	class:P2PBoundaries
P2PBoundaries::y	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x,y; \/\/ x, y coords$/;"	m	class:P2PBoundaries
P2PBoundaries::y1	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x1,y1; \/\/ other edge of boundary.$/;"	m	class:P2PBoundaries
P2PBoundaries::y1	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x1,y1; \/\/ other edge of boundary.$/;"	m	class:P2PBoundaries
P2PBoundaries::~P2PBoundaries	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        virtual ~P2PBoundaries();$/;"	p	class:P2PBoundaries
P2PBoundaries::~P2PBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.cpp	/^P2PBoundaries::~P2PBoundaries() {$/;"	f	class:P2PBoundaries
P2PBoundaries::~P2PBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        virtual ~P2PBoundaries();$/;"	p	class:P2PBoundaries
P2PCPUSERVER_H_	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^#define P2PCPUSERVER_H_$/;"	d
P2PCPUSERVER_H_	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^#define P2PCPUSERVER_H_$/;"	d
P2PCPUServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        P2PCPUServer();$/;"	p	class:P2PCPUServer
P2PCPUServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^class P2PCPUServer {$/;"	c
P2PCPUServer	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.cpp	/^P2PCPUServer::P2PCPUServer() {$/;"	f	class:P2PCPUServer
P2PCPUServer	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        P2PCPUServer();$/;"	p	class:P2PCPUServer
P2PCPUServer	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^class P2PCPUServer {$/;"	c
P2PCPUServer::P2PCPUServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        P2PCPUServer();$/;"	p	class:P2PCPUServer
P2PCPUServer::P2PCPUServer	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.cpp	/^P2PCPUServer::P2PCPUServer() {$/;"	f	class:P2PCPUServer
P2PCPUServer::P2PCPUServer	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        P2PCPUServer();$/;"	p	class:P2PCPUServer
P2PCPUServer::current	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        static P2PCPUServer current;$/;"	m	class:P2PCPUServer
P2PCPUServer::current	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        static P2PCPUServer current;$/;"	m	class:P2PCPUServer
P2PCPUServer::handleCPUServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        void handleCPUServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PCPUServer
P2PCPUServer::handleCPUServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        void handleCPUServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PCPUServer
P2PCPUServer::process	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        void process(); \/\/ compress data stores$/;"	p	class:P2PCPUServer
P2PCPUServer::process	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        void process(); \/\/ compress data stores$/;"	p	class:P2PCPUServer
P2PCPUServer::sendCPUServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        void sendCPUServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PCPUServer
P2PCPUServer::sendCPUServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        void sendCPUServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PCPUServer
P2PCPUServer::~P2PCPUServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        virtual ~P2PCPUServer();$/;"	p	class:P2PCPUServer
P2PCPUServer::~P2PCPUServer	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.cpp	/^P2PCPUServer::~P2PCPUServer() {$/;"	f	class:P2PCPUServer
P2PCPUServer::~P2PCPUServer	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        virtual ~P2PCPUServer();$/;"	p	class:P2PCPUServer
P2PDATASERVER_H_	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^#define P2PDATASERVER_H_$/;"	d
P2PDATASERVER_H_	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^#define P2PDATASERVER_H_$/;"	d
P2PDataServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        P2PDataServer();$/;"	p	class:P2PDataServer
P2PDataServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^class P2PDataServer {$/;"	c
P2PDataServer	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.cpp	/^P2PDataServer::P2PDataServer() {$/;"	f	class:P2PDataServer
P2PDataServer	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        P2PDataServer();$/;"	p	class:P2PDataServer
P2PDataServer	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^class P2PDataServer {$/;"	c
P2PDataServer::P2PDataServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        P2PDataServer();$/;"	p	class:P2PDataServer
P2PDataServer::P2PDataServer	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.cpp	/^P2PDataServer::P2PDataServer() {$/;"	f	class:P2PDataServer
P2PDataServer::P2PDataServer	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        P2PDataServer();$/;"	p	class:P2PDataServer
P2PDataServer::compress	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        void compress(); \/\/ compress data stores$/;"	p	class:P2PDataServer
P2PDataServer::compress	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        void compress(); \/\/ compress data stores$/;"	p	class:P2PDataServer
P2PDataServer::current	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        static P2PDataServer current;$/;"	m	class:P2PDataServer
P2PDataServer::current	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        static P2PDataServer current;$/;"	m	class:P2PDataServer
P2PDataServer::handleDataServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        void handleDataServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PDataServer
P2PDataServer::handleDataServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        void handleDataServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PDataServer
P2PDataServer::sendDataServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        void sendDataServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PDataServer
P2PDataServer::sendDataServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        void sendDataServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PDataServer
P2PDataServer::~P2PDataServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        virtual ~P2PDataServer();$/;"	p	class:P2PDataServer
P2PDataServer::~P2PDataServer	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.cpp	/^P2PDataServer::~P2PDataServer() {$/;"	f	class:P2PDataServer
P2PDataServer::~P2PDataServer	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        virtual ~P2PDataServer();$/;"	p	class:P2PDataServer
P2PIRCSERVER_H_	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^#define P2PIRCSERVER_H_$/;"	d
P2PIRCSERVER_H_	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^#define P2PIRCSERVER_H_$/;"	d
P2PIRCServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        P2PIRCServer();$/;"	p	class:P2PIRCServer
P2PIRCServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^class P2PIRCServer {$/;"	c
P2PIRCServer	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.cpp	/^P2PIRCServer::P2PIRCServer() {$/;"	f	class:P2PIRCServer
P2PIRCServer	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        P2PIRCServer();$/;"	p	class:P2PIRCServer
P2PIRCServer	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^class P2PIRCServer {$/;"	c
P2PIRCServer::P2PIRCServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        P2PIRCServer();$/;"	p	class:P2PIRCServer
P2PIRCServer::P2PIRCServer	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.cpp	/^P2PIRCServer::P2PIRCServer() {$/;"	f	class:P2PIRCServer
P2PIRCServer::P2PIRCServer	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        P2PIRCServer();$/;"	p	class:P2PIRCServer
P2PIRCServer::current	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        static P2PIRCServer current;$/;"	m	class:P2PIRCServer
P2PIRCServer::current	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        static P2PIRCServer current;$/;"	m	class:P2PIRCServer
P2PIRCServer::handlesIRCPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        void handlesIRCPacket(P2PNode client, P2PPacket packet); \/\/ Manages range of packet (May contact L1+ ir massive IRC)$/;"	p	class:P2PIRCServer
P2PIRCServer::handlesIRCPacket	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        void handlesIRCPacket(P2PNode client, P2PPacket packet); \/\/ Manages range of packet (May contact L1+ ir massive IRC)$/;"	p	class:P2PIRCServer
P2PIRCServer::sendIRCPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        void sendIRCPacket(P2PNode client, P2PPacket packet);$/;"	p	class:P2PIRCServer
P2PIRCServer::sendIRCPacket	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        void sendIRCPacket(P2PNode client, P2PPacket packet);$/;"	p	class:P2PIRCServer
P2PIRCServer::~P2PIRCServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        virtual ~P2PIRCServer();$/;"	p	class:P2PIRCServer
P2PIRCServer::~P2PIRCServer	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.cpp	/^P2PIRCServer::~P2PIRCServer() {$/;"	f	class:P2PIRCServer
P2PIRCServer::~P2PIRCServer	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        virtual ~P2PIRCServer();$/;"	p	class:P2PIRCServer
P2PLCLIENT_H_	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^#define P2PLCLIENT_H_$/;"	d
P2PLCLIENT_H_	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^#define P2PLCLIENT_H_$/;"	d
P2PLClient	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        P2PLClient();$/;"	p	class:P2PLClient
P2PLClient	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^class P2PLClient {$/;"	c
P2PLClient	src/WebFramework/Network/PacketServer/P2P/P2PLClient.cpp	/^P2PLClient::P2PLClient() {$/;"	f	class:P2PLClient
P2PLClient	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        P2PLClient();$/;"	p	class:P2PLClient
P2PLClient	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^class P2PLClient {$/;"	c
P2PLClient::LBranch	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        P2PNode* LBranch; \/\/ current L Branch that we are on. (changes over time)$/;"	m	class:P2PLClient
P2PLClient::LBranch	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        P2PNode* LBranch; \/\/ current L Branch that we are on. (changes over time)$/;"	m	class:P2PLClient
P2PLClient::P2PLClient	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        P2PLClient();$/;"	p	class:P2PLClient
P2PLClient::P2PLClient	src/WebFramework/Network/PacketServer/P2P/P2PLClient.cpp	/^P2PLClient::P2PLClient() {$/;"	f	class:P2PLClient
P2PLClient::P2PLClient	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        P2PLClient();$/;"	p	class:P2PLClient
P2PLClient::SendGamePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void SendGamePacket(P2PPacket packet);$/;"	p	class:P2PLClient
P2PLClient::SendGamePacket	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void SendGamePacket(P2PPacket packet);$/;"	p	class:P2PLClient
P2PLClient::current	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        static P2PLClient current;$/;"	m	class:P2PLClient
P2PLClient::current	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        static P2PLClient current;$/;"	m	class:P2PLClient
P2PLClient::handleCpuServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleCpuServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PLClient
P2PLClient::handleCpuServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleCpuServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PLClient
P2PLClient::handleDataServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleDataServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PLClient
P2PLClient::handleDataServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleDataServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PLClient
P2PLClient::handleGamePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleGamePacket(P2PNode server, P2PPacket packet); \/\/ Game packet pertains to operations within the game$/;"	p	class:P2PLClient
P2PLClient::handleGamePacket	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleGamePacket(P2PNode server, P2PPacket packet); \/\/ Game packet pertains to operations within the game$/;"	p	class:P2PLClient
P2PLClient::handleNodePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleNodePacket(P2PNode server, P2PPacket packet); \/\/ Node-management packet (AKA: X-fer, assign, ect)$/;"	p	class:P2PLClient
P2PLClient::handleNodePacket	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleNodePacket(P2PNode server, P2PPacket packet); \/\/ Node-management packet (AKA: X-fer, assign, ect)$/;"	p	class:P2PLClient
P2PLClient::handleP2PServerDisconnect	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleP2PServerDisconnect(P2PNode server); \/\/ P2P Server disconnects... (Re-connect to Lk-1 server)$/;"	p	class:P2PLClient
P2PLClient::handleP2PServerDisconnect	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleP2PServerDisconnect(P2PNode server); \/\/ P2P Server disconnects... (Re-connect to Lk-1 server)$/;"	p	class:P2PLClient
P2PLClient::handlePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handlePacket(P2PNode server, P2PPacket packet); \/\/ sorts packet$/;"	p	class:P2PLClient
P2PLClient::handlePacket	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handlePacket(P2PNode server, P2PPacket packet); \/\/ sorts packet$/;"	p	class:P2PLClient
P2PLClient::level	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        int level; \/\/ server level (or L), only changed if participating in P2P. *cough* most likely to happen.$/;"	m	class:P2PLClient
P2PLClient::level	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        int level; \/\/ server level (or L), only changed if participating in P2P. *cough* most likely to happen.$/;"	m	class:P2PLClient
P2PLClient::type	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        P2PTYPE type;$/;"	m	class:P2PLClient
P2PLClient::type	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        P2PTYPE type;$/;"	m	class:P2PLClient
P2PLClient::~P2PLClient	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        virtual ~P2PLClient();$/;"	p	class:P2PLClient
P2PLClient::~P2PLClient	src/WebFramework/Network/PacketServer/P2P/P2PLClient.cpp	/^P2PLClient::~P2PLClient() {$/;"	f	class:P2PLClient
P2PLClient::~P2PLClient	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        virtual ~P2PLClient();$/;"	p	class:P2PLClient
P2PLSERVER_H_	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^#define P2PLSERVER_H_$/;"	d
P2PLSERVER_H_	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^#define P2PLSERVER_H_$/;"	d
P2PLServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PLServer();$/;"	p	class:P2PLServer
P2PLServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^class P2PLServer {$/;"	c
P2PLServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.cpp	/^P2PLServer::P2PLServer() {$/;"	f	class:P2PLServer
P2PLServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PLServer();$/;"	p	class:P2PLServer
P2PLServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^class P2PLServer {$/;"	c
P2PLServer::P2PLServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PLServer();$/;"	p	class:P2PLServer
P2PLServer::P2PLServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.cpp	/^P2PLServer::P2PLServer() {$/;"	f	class:P2PLServer
P2PLServer::P2PLServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PLServer();$/;"	p	class:P2PLServer
P2PLServer::assignClient	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignClient(P2PNode player);$/;"	p	class:P2PLServer
P2PLServer::assignClient	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignClient(P2PNode player);$/;"	p	class:P2PLServer
P2PLServer::assignCpuServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignCpuServer(P2PNode player);$/;"	p	class:P2PLServer
P2PLServer::assignCpuServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignCpuServer(P2PNode player);$/;"	p	class:P2PLServer
P2PLServer::assignDataServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignDataServer(P2PNode player);$/;"	p	class:P2PLServer
P2PLServer::assignDataServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignDataServer(P2PNode player);$/;"	p	class:P2PLServer
P2PLServer::assignIRCServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignIRCServer(P2PNode player); \/\/ server that manages IRC chats between players.$/;"	p	class:P2PLServer
P2PLServer::assignIRCServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignIRCServer(P2PNode player); \/\/ server that manages IRC chats between players.$/;"	p	class:P2PLServer
P2PLServer::assignLClient	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignLClient(P2PNode player);$/;"	p	class:P2PLServer
P2PLServer::assignLClient	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignLClient(P2PNode player);$/;"	p	class:P2PLServer
P2PLServer::assignLServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignLServer(P2PNode player); \/\/ will subdivide this server's inner boundary futher.$/;"	p	class:P2PLServer
P2PLServer::assignLServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignLServer(P2PNode player); \/\/ will subdivide this server's inner boundary futher.$/;"	p	class:P2PLServer
P2PLServer::assignStreamServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignStreamServer(P2PNode player); \/\/ Streams high-density audio or video.$/;"	p	class:P2PLServer
P2PLServer::assignStreamServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignStreamServer(P2PNode player); \/\/ Streams high-density audio or video.$/;"	p	class:P2PLServer
P2PLServer::boundaries	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PBoundaries boundaries; \/\/ handles players within these bondaries.$/;"	m	class:P2PLServer
P2PLServer::boundaries	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PBoundaries boundaries; \/\/ handles players within these bondaries.$/;"	m	class:P2PLServer
P2PLServer::clients	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PNode* clients; \/\/ E-Client player, Potential node.$/;"	m	class:P2PLServer
P2PLServer::clients	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PNode* clients; \/\/ E-Client player, Potential node.$/;"	m	class:P2PLServer
P2PLServer::current	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        static P2PLServer current;$/;"	m	class:P2PLServer
P2PLServer::current	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        static P2PLServer current;$/;"	m	class:P2PLServer
P2PLServer::handleCPUPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleCPUPacket(P2PNode player, P2PPacket packet); \/\/ Sim data from CPU server$/;"	p	class:P2PLServer
P2PLServer::handleCPUPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleCPUPacket(P2PNode player, P2PPacket packet); \/\/ Sim data from CPU server$/;"	p	class:P2PLServer
P2PLServer::handleClientDisconnect	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleClientDisconnect(P2PNode player); \/\/ client disconnects$/;"	p	class:P2PLServer
P2PLServer::handleClientDisconnect	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleClientDisconnect(P2PNode player); \/\/ client disconnects$/;"	p	class:P2PLServer
P2PLServer::handleCoServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleCoServerPacket(P2PNode coserver, P2PPacket packet); \/\/ multiple servers managing heavy load?$/;"	p	class:P2PLServer
P2PLServer::handleCoServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleCoServerPacket(P2PNode coserver, P2PPacket packet); \/\/ multiple servers managing heavy load?$/;"	p	class:P2PLServer
P2PLServer::handleConnectPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleConnectPacket(P2PNode player, P2PPacket packet); \/\/ ASSIGN new clients.$/;"	p	class:P2PLServer
P2PLServer::handleConnectPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleConnectPacket(P2PNode player, P2PPacket packet); \/\/ ASSIGN new clients.$/;"	p	class:P2PLServer
P2PLServer::handleDataPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleDataPacket(P2PNode player, P2PPacket packet); \/\/ Compress data from Data server$/;"	p	class:P2PLServer
P2PLServer::handleDataPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleDataPacket(P2PNode player, P2PPacket packet); \/\/ Compress data from Data server$/;"	p	class:P2PLServer
P2PLServer::handleGamePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleGamePacket(P2PNode player, P2PPacket packet); \/\/ certain game packets can be processed here.$/;"	p	class:P2PLServer
P2PLServer::handleGamePacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleGamePacket(P2PNode player, P2PPacket packet); \/\/ certain game packets can be processed here.$/;"	p	class:P2PLServer
P2PLServer::handleIRCPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleIRCPacket(P2PNode player, P2PPacket packet); \/\/ handle IRC packet$/;"	p	class:P2PLServer
P2PLServer::handleIRCPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleIRCPacket(P2PNode player, P2PPacket packet); \/\/ handle IRC packet$/;"	p	class:P2PLServer
P2PLServer::handleMainPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleMainPacket(P2PNode player, P2PPacket packet); \/\/ handles packet from main server *whoa!*$/;"	p	class:P2PLServer
P2PLServer::handleMainPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleMainPacket(P2PNode player, P2PPacket packet); \/\/ handles packet from main server *whoa!*$/;"	p	class:P2PLServer
P2PLServer::handleNewBoundaries	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleNewBoundaries(P2PNode server, P2PPacket packet); \/\/ Get new node boundaries if they exist.$/;"	p	class:P2PLServer
P2PLServer::handleNewBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleNewBoundaries(P2PNode server, P2PPacket packet); \/\/ Get new node boundaries if they exist.$/;"	p	class:P2PLServer
P2PLServer::handlePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handlePacket(P2PNode player, P2PPacket packet); \/\/ first-stop for P2P Server-based packets$/;"	p	class:P2PLServer
P2PLServer::handlePacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handlePacket(P2PNode player, P2PPacket packet); \/\/ first-stop for P2P Server-based packets$/;"	p	class:P2PLServer
P2PLServer::handlePreNodePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handlePreNodePacket(P2PNode server, P2PPacket packet); \/\/ handles server a tier higher then this one, used for distrobutions, ect... Prevents fraud connections$/;"	p	class:P2PLServer
P2PLServer::handlePreNodePacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handlePreNodePacket(P2PNode server, P2PPacket packet); \/\/ handles server a tier higher then this one, used for distrobutions, ect... Prevents fraud connections$/;"	p	class:P2PLServer
P2PLServer::handleStreamPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleStreamPacket(P2PNode player, P2PPacket packet); \/\/ handle Video\/Audio packet$/;"	p	class:P2PLServer
P2PLServer::handleStreamPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleStreamPacket(P2PNode player, P2PPacket packet); \/\/ handle Video\/Audio packet$/;"	p	class:P2PLServer
P2PLServer::handleSubNodeDisconnect	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleSubNodeDisconnect(P2PNode player); \/\/ Lk+1 disconnects$/;"	p	class:P2PLServer
P2PLServer::handleSubNodeDisconnect	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleSubNodeDisconnect(P2PNode player); \/\/ Lk+1 disconnects$/;"	p	class:P2PLServer
P2PLServer::handleSubNodePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleSubNodePacket(P2PNode player, P2PPacket packet); \/\/ handles sub-node's packet data.$/;"	p	class:P2PLServer
P2PLServer::handleSubNodePacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleSubNodePacket(P2PNode player, P2PPacket packet); \/\/ handles sub-node's packet data.$/;"	p	class:P2PLServer
P2PLServer::handleTransfer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleTransfer(P2PNode NewServer, P2PPacket);$/;"	p	class:P2PLServer
P2PLServer::handleTransfer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleTransfer(P2PNode NewServer, P2PPacket);$/;"	p	class:P2PLServer
P2PLServer::level	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        int level; \/\/ server level (or L), only changed if participating in P2P. *cough* most likely to happen.$/;"	m	class:P2PLServer
P2PLServer::level	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        int level; \/\/ server level (or L), only changed if participating in P2P. *cough* most likely to happen.$/;"	m	class:P2PLServer
P2PLServer::neighbors	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PNode* neighbors; \/\/ Neighbors on this L Level. (AKA, boundary partners)$/;"	m	class:P2PLServer
P2PLServer::neighbors	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PNode* neighbors; \/\/ Neighbors on this L Level. (AKA, boundary partners)$/;"	m	class:P2PLServer
P2PLServer::proximityTest	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void proximityTest(P2PNode player, P2PNode farplayer);$/;"	p	class:P2PLServer
P2PLServer::proximityTest	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void proximityTest(P2PNode player, P2PNode farplayer);$/;"	p	class:P2PLServer
P2PLServer::redistributeBoundaries	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void redistributeBoundaries(); \/\/ If there have been changes to boundaries, distribute them.$/;"	p	class:P2PLServer
P2PLServer::redistributeBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void redistributeBoundaries(); \/\/ If there have been changes to boundaries, distribute them.$/;"	p	class:P2PLServer
P2PLServer::sendPlayerTransfer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void sendPlayerTransfer(P2PNode player, P2PNode server);$/;"	p	class:P2PLServer
P2PLServer::sendPlayerTransfer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void sendPlayerTransfer(P2PNode player, P2PNode server);$/;"	p	class:P2PLServer
P2PLServer::subNodes	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PNode* subNodes; \/\/ Sub L Nodes (May come in pairs based on pop. density)$/;"	m	class:P2PLServer
P2PLServer::subNodes	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PNode* subNodes; \/\/ Sub L Nodes (May come in pairs based on pop. density)$/;"	m	class:P2PLServer
P2PLServer::~P2PLServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        virtual ~P2PLServer();$/;"	p	class:P2PLServer
P2PLServer::~P2PLServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.cpp	/^P2PLServer::~P2PLServer() {$/;"	f	class:P2PLServer
P2PLServer::~P2PLServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        virtual ~P2PLServer();$/;"	p	class:P2PLServer
P2PMANAGER_H_	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^#define P2PMANAGER_H_$/;"	d
P2PMANAGER_H_	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^#define P2PMANAGER_H_$/;"	d
P2PManager	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        P2PManager();$/;"	p	class:P2PManager
P2PManager	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^class P2PManager {$/;"	c
P2PManager	src/WebFramework/Network/PacketServer/P2P/P2PManager.cpp	/^P2PManager::P2PManager() {$/;"	f	class:P2PManager
P2PManager	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        P2PManager();$/;"	p	class:P2PManager
P2PManager	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^class P2PManager {$/;"	c
P2PManager::GetP2PPort	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int GetP2PPort(); \/\/ determines if this computer can become a P2P Server. If so, port above -1 will be assigned.$/;"	p	class:P2PManager
P2PManager::GetP2PPort	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int GetP2PPort(); \/\/ determines if this computer can become a P2P Server. If so, port above -1 will be assigned.$/;"	p	class:P2PManager
P2PManager::GlobalMaxSubClients	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int GlobalMaxSubClients; \/\/ Global max # of clients.$/;"	m	class:P2PManager
P2PManager::GlobalMaxSubClients	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int GlobalMaxSubClients; \/\/ Global max # of clients.$/;"	m	class:P2PManager
P2PManager::GlobalMinSubClients	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int GlobalMinSubClients; \/\/ max # of clients before a sub-node is created.$/;"	m	class:P2PManager
P2PManager::GlobalMinSubClients	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int GlobalMinSubClients; \/\/ max # of clients before a sub-node is created.$/;"	m	class:P2PManager
P2PManager::MaxSubNodes	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int MaxSubNodes; \/\/ Max # of sub-nodes to manage.$/;"	m	class:P2PManager
P2PManager::MaxSubNodes	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int MaxSubNodes; \/\/ Max # of sub-nodes to manage.$/;"	m	class:P2PManager
P2PManager::MinSubNodes	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int MinSubNodes; \/\/ Max # of sub-nodes to manage.$/;"	m	class:P2PManager
P2PManager::MinSubNodes	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        int MinSubNodes; \/\/ Max # of sub-nodes to manage.$/;"	m	class:P2PManager
P2PManager::P2PManager	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        P2PManager();$/;"	p	class:P2PManager
P2PManager::P2PManager	src/WebFramework/Network/PacketServer/P2P/P2PManager.cpp	/^P2PManager::P2PManager() {$/;"	f	class:P2PManager
P2PManager::P2PManager	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        P2PManager();$/;"	p	class:P2PManager
P2PManager::connectP2PLServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        P2PLClient connectP2PLServer(P2PNode server);$/;"	p	class:P2PManager
P2PManager::connectP2PLServer	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        P2PLClient connectP2PLServer(P2PNode server);$/;"	p	class:P2PManager
P2PManager::handleP2PPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        void handleP2PPacket(P2PNode player);$/;"	p	class:P2PManager
P2PManager::handleP2PPacket	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        void handleP2PPacket(P2PNode player);$/;"	p	class:P2PManager
P2PManager::~P2PManager	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        virtual ~P2PManager();$/;"	p	class:P2PManager
P2PManager::~P2PManager	src/WebFramework/Network/PacketServer/P2P/P2PManager.cpp	/^P2PManager::~P2PManager() {$/;"	f	class:P2PManager
P2PManager::~P2PManager	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        virtual ~P2PManager();$/;"	p	class:P2PManager
P2PNODECACHE_H_	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^#define P2PNODECACHE_H_$/;"	d
P2PNODECACHE_H_	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^#define P2PNODECACHE_H_$/;"	d
P2PNode	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        P2PNode(P2PNodeType t, char* ip_, int port_);$/;"	p	class:P2PNode
P2PNode	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^class P2PNode {$/;"	c
P2PNode	src/WebFramework/Network/PacketServer/P2P/P2PNode.cpp	/^P2PNode::P2PNode(P2PNodeType t, char* ip_, int port_) {$/;"	f	class:P2PNode
P2PNode	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        P2PNode(P2PNodeType t, char* ip_, int port_);$/;"	p	class:P2PNode
P2PNode	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^class P2PNode {$/;"	c
P2PNode::LServerList	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        P2PNode* LServerList; \/\/list of P2PNodes down the L-Server node line. (this is a client of *)$/;"	m	class:P2PNode
P2PNode::LServerList	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        P2PNode* LServerList; \/\/list of P2PNodes down the L-Server node line. (this is a client of *)$/;"	m	class:P2PNode
P2PNode::P2PNode	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        P2PNode(P2PNodeType t, char* ip_, int port_);$/;"	p	class:P2PNode
P2PNode::P2PNode	src/WebFramework/Network/PacketServer/P2P/P2PNode.cpp	/^P2PNode::P2PNode(P2PNodeType t, char* ip_, int port_) {$/;"	f	class:P2PNode
P2PNode::P2PNode	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        P2PNode(P2PNodeType t, char* ip_, int port_);$/;"	p	class:P2PNode
P2PNode::ip	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        char* ip;$/;"	m	class:P2PNode
P2PNode::ip	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        char* ip;$/;"	m	class:P2PNode
P2PNode::port	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        int port;$/;"	m	class:P2PNode
P2PNode::port	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        int port;$/;"	m	class:P2PNode
P2PNode::type	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        P2PNodeType type;$/;"	m	class:P2PNode
P2PNode::type	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        P2PNodeType type;$/;"	m	class:P2PNode
P2PNode::~P2PNode	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        virtual ~P2PNode();$/;"	p	class:P2PNode
P2PNode::~P2PNode	src/WebFramework/Network/PacketServer/P2P/P2PNode.cpp	/^P2PNode::~P2PNode() {$/;"	f	class:P2PNode
P2PNode::~P2PNode	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        virtual ~P2PNode();$/;"	p	class:P2PNode
P2PNodeCache	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        P2PNodeCache();$/;"	p	class:P2PNodeCache
P2PNodeCache	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^class P2PNodeCache {$/;"	c
P2PNodeCache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.cpp	/^P2PNodeCache::P2PNodeCache() {$/;"	f	class:P2PNodeCache
P2PNodeCache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        P2PNodeCache();$/;"	p	class:P2PNodeCache
P2PNodeCache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^class P2PNodeCache {$/;"	c
P2PNodeCache::P2PNodeCache	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        P2PNodeCache();$/;"	p	class:P2PNodeCache
P2PNodeCache::P2PNodeCache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.cpp	/^P2PNodeCache::P2PNodeCache() {$/;"	f	class:P2PNodeCache
P2PNodeCache::P2PNodeCache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        P2PNodeCache();$/;"	p	class:P2PNodeCache
P2PNodeCache::cache	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        void cache(char* playername, P2PNode* l);$/;"	p	class:P2PNodeCache
P2PNodeCache::cache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.cpp	/^void P2PNodeCache::cache(char* playername, P2PNode* l) {$/;"	f	class:P2PNodeCache
P2PNodeCache::cache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        void cache(char* playername, P2PNode* l);$/;"	p	class:P2PNodeCache
P2PNodeCache::find	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        P2PNode* find(char* playername);$/;"	p	class:P2PNodeCache
P2PNodeCache::find	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.cpp	/^P2PNode* P2PNodeCache::find(char* playername) {$/;"	f	class:P2PNodeCache
P2PNodeCache::find	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        P2PNode* find(char* playername);$/;"	p	class:P2PNodeCache
P2PNodeCache::nodes	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        LinkedList<P2PNode>* nodes();$/;"	p	class:P2PNodeCache
P2PNodeCache::nodes	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        LinkedList<P2PNode>* nodes();$/;"	p	class:P2PNodeCache
P2PNodeCache::~P2PNodeCache	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        virtual ~P2PNodeCache();$/;"	p	class:P2PNodeCache
P2PNodeCache::~P2PNodeCache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.cpp	/^P2PNodeCache::~P2PNodeCache() {$/;"	f	class:P2PNodeCache
P2PNodeCache::~P2PNodeCache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        virtual ~P2PNodeCache();$/;"	p	class:P2PNodeCache
P2PNodeType	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^enum P2PNodeType {Server,Client};$/;"	g
P2PNodeType	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^enum P2PNodeType {Server,Client};$/;"	g
P2PPACKET_H_	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^#define P2PPACKET_H_$/;"	d
P2PPACKET_H_	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^#define P2PPACKET_H_$/;"	d
P2PPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        P2PPacket();$/;"	p	class:P2PPacket
P2PPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^class P2PPacket {$/;"	c
P2PPacket	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        P2PPacket();$/;"	p	class:P2PPacket
P2PPacket	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^class P2PPacket {$/;"	c
P2PPacket::P2PPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        P2PPacket();$/;"	p	class:P2PPacket
P2PPacket::P2PPacket	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        P2PPacket();$/;"	p	class:P2PPacket
P2PPacket::attemptDirect	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        void attemptDirect();$/;"	p	class:P2PPacket
P2PPacket::attemptDirect	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        void attemptDirect();$/;"	p	class:P2PPacket
P2PPacket::data	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        char* data;$/;"	m	class:P2PPacket
P2PPacket::data	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        char* data;$/;"	m	class:P2PPacket
P2PPacket::destination	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        P2PNode destination;$/;"	m	class:P2PPacket
P2PPacket::destination	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        P2PNode destination;$/;"	m	class:P2PPacket
P2PPacket::sender	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        P2PNode sender;$/;"	m	class:P2PPacket
P2PPacket::sender	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        P2PNode sender;$/;"	m	class:P2PPacket
P2PPacket::~P2PPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        virtual ~P2PPacket();$/;"	p	class:P2PPacket
P2PPacket::~P2PPacket	src/WebFramework/Network/PacketServer/P2P/P2PPacket.cpp	/^P2PPacket::~P2PPacket() {$/;"	f	class:P2PPacket
P2PPacket::~P2PPacket	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        virtual ~P2PPacket();$/;"	p	class:P2PPacket
P2PPassagePacket	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        P2PPassagePacket(char* dat) {$/;"	f	class:P2PPassagePacket
P2PPassagePacket	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        P2PPassagePacket(long FROM, long TO, char* dat) {$/;"	f	class:P2PPassagePacket
P2PPassagePacket	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^class P2PPassagePacket : public Packet {$/;"	c
P2PPassagePacket	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        P2PPassagePacket(char* dat) {$/;"	f	class:P2PPassagePacket
P2PPassagePacket	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        P2PPassagePacket(long FROM, long TO, char* dat) {$/;"	f	class:P2PPassagePacket
P2PPassagePacket	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^class P2PPassagePacket : public Packet {$/;"	c
P2PPassagePacket::P2PPassagePacket	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        P2PPassagePacket(char* dat) {$/;"	f	class:P2PPassagePacket
P2PPassagePacket::P2PPassagePacket	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        P2PPassagePacket(long FROM, long TO, char* dat) {$/;"	f	class:P2PPassagePacket
P2PPassagePacket::P2PPassagePacket	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        P2PPassagePacket(char* dat) {$/;"	f	class:P2PPassagePacket
P2PPassagePacket::P2PPassagePacket	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        P2PPassagePacket(long FROM, long TO, char* dat) {$/;"	f	class:P2PPassagePacket
P2PPassagePacket::data	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        char* data;$/;"	m	class:P2PPassagePacket
P2PPassagePacket::data	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        char* data;$/;"	m	class:P2PPassagePacket
P2PPassagePacket::fromPeerID	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        long fromPeerID;$/;"	m	class:P2PPassagePacket
P2PPassagePacket::fromPeerID	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        long fromPeerID;$/;"	m	class:P2PPassagePacket
P2PPassagePacket::toPeerID	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        long toPeerID;$/;"	m	class:P2PPassagePacket
P2PPassagePacket::toPeerID	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        long toPeerID;$/;"	m	class:P2PPassagePacket
P2PPeerAdd	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPeerAdd.hpp	/^class P2PPeerAdd {$/;"	c
P2PPeerAdd	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPeerAdd.hpp	/^class P2PPeerAdd {$/;"	c
P2PPeer_Add_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPeerAdd.hpp	/^#define P2PPeer_Add_H_$/;"	d
P2PPeer_Add_H_	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPeerAdd.hpp	/^#define P2PPeer_Add_H_$/;"	d
P2PREGISTER_SERVER_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^#define P2PREGISTER_SERVER_H_$/;"	d
P2PREGISTER_SERVER_H_	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^#define P2PREGISTER_SERVER_H_$/;"	d
P2PREQUEST_PID_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^#define P2PREQUEST_PID_H_$/;"	d
P2PREQUEST_PID_H_	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^#define P2PREQUEST_PID_H_$/;"	d
P2PRegisterServer	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        P2PRegisterServer(char* data) {$/;"	f	class:P2PRegisterServer
P2PRegisterServer	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^class P2PRegisterServer : public Packet {$/;"	c
P2PRegisterServer	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        P2PRegisterServer(char* data) {$/;"	f	class:P2PRegisterServer
P2PRegisterServer	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^class P2PRegisterServer : public Packet {$/;"	c
P2PRegisterServer::P2PRegisterServer	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        P2PRegisterServer(char* data) {$/;"	f	class:P2PRegisterServer
P2PRegisterServer::P2PRegisterServer	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        P2PRegisterServer(char* data) {$/;"	f	class:P2PRegisterServer
P2PRegisterServer::getServerPeerID	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        long getServerPeerID() {$/;"	f	class:P2PRegisterServer
P2PRegisterServer::getServerPeerID	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        long getServerPeerID() {$/;"	f	class:P2PRegisterServer
P2PRegisterServer::getServerType	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        P2PSERVERTYPE getServerType() {$/;"	f	class:P2PRegisterServer
P2PRegisterServer::getServerType	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        P2PSERVERTYPE getServerType() {$/;"	f	class:P2PRegisterServer
P2PRegisterServer::serverPeerID	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        long serverPeerID;$/;"	m	class:P2PRegisterServer
P2PRegisterServer::serverPeerID	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        long serverPeerID;$/;"	m	class:P2PRegisterServer
P2PRegisterServer::serverType	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        P2PSERVERTYPE serverType;$/;"	m	class:P2PRegisterServer
P2PRegisterServer::serverType	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        P2PSERVERTYPE serverType;$/;"	m	class:P2PRegisterServer
P2PRequestPID	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^        P2PRequestPID(char* iddata) {$/;"	f	class:P2PRequestPID
P2PRequestPID	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^class P2PRequestPID : public Packet {$/;"	c
P2PRequestPID	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^        P2PRequestPID(char* iddata) {$/;"	f	class:P2PRequestPID
P2PRequestPID	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^class P2PRequestPID : public Packet {$/;"	c
P2PRequestPID::P2PRequestPID	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^        P2PRequestPID(char* iddata) {$/;"	f	class:P2PRequestPID
P2PRequestPID::P2PRequestPID	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^        P2PRequestPID(char* iddata) {$/;"	f	class:P2PRequestPID
P2PRequestPID::getIdentifier	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^        char* getIdentifier() {$/;"	f	class:P2PRequestPID
P2PRequestPID::getIdentifier	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^        char* getIdentifier() {$/;"	f	class:P2PRequestPID
P2PRequestPID::identifier	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^        char* identifier;$/;"	m	class:P2PRequestPID
P2PRequestPID::identifier	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^        char* identifier;$/;"	m	class:P2PRequestPID
P2PSERVERTYPE	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^enum P2PSERVERTYPE {P2PST_MAINS, P2PST_CPU, P2PST_GPU, P2PST_DATA};$/;"	g
P2PSERVERTYPE	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^enum P2PSERVERTYPE {P2PST_MAINS, P2PST_CPU, P2PST_GPU, P2PST_DATA};$/;"	g
P2PSTREAMSERVER_H_	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^#define P2PSTREAMSERVER_H_$/;"	d
P2PSTREAMSERVER_H_	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^#define P2PSTREAMSERVER_H_$/;"	d
P2PST_CPU	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^enum P2PSERVERTYPE {P2PST_MAINS, P2PST_CPU, P2PST_GPU, P2PST_DATA};$/;"	e	enum:P2PSERVERTYPE
P2PST_CPU	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^enum P2PSERVERTYPE {P2PST_MAINS, P2PST_CPU, P2PST_GPU, P2PST_DATA};$/;"	e	enum:P2PSERVERTYPE
P2PST_DATA	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^enum P2PSERVERTYPE {P2PST_MAINS, P2PST_CPU, P2PST_GPU, P2PST_DATA};$/;"	e	enum:P2PSERVERTYPE
P2PST_DATA	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^enum P2PSERVERTYPE {P2PST_MAINS, P2PST_CPU, P2PST_GPU, P2PST_DATA};$/;"	e	enum:P2PSERVERTYPE
P2PST_GPU	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^enum P2PSERVERTYPE {P2PST_MAINS, P2PST_CPU, P2PST_GPU, P2PST_DATA};$/;"	e	enum:P2PSERVERTYPE
P2PST_GPU	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^enum P2PSERVERTYPE {P2PST_MAINS, P2PST_CPU, P2PST_GPU, P2PST_DATA};$/;"	e	enum:P2PSERVERTYPE
P2PST_MAINS	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^enum P2PSERVERTYPE {P2PST_MAINS, P2PST_CPU, P2PST_GPU, P2PST_DATA};$/;"	e	enum:P2PSERVERTYPE
P2PST_MAINS	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^enum P2PSERVERTYPE {P2PST_MAINS, P2PST_CPU, P2PST_GPU, P2PST_DATA};$/;"	e	enum:P2PSERVERTYPE
P2PSUBNODE_H_	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^#define P2PSUBNODE_H_$/;"	d
P2PSUBNODE_H_	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^#define P2PSUBNODE_H_$/;"	d
P2PStreamServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        P2PStreamServer();$/;"	p	class:P2PStreamServer
P2PStreamServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^class P2PStreamServer {$/;"	c
P2PStreamServer	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.cpp	/^P2PStreamServer::P2PStreamServer() {$/;"	f	class:P2PStreamServer
P2PStreamServer	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        P2PStreamServer();$/;"	p	class:P2PStreamServer
P2PStreamServer	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^class P2PStreamServer {$/;"	c
P2PStreamServer::P2PStreamServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        P2PStreamServer();$/;"	p	class:P2PStreamServer
P2PStreamServer::P2PStreamServer	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.cpp	/^P2PStreamServer::P2PStreamServer() {$/;"	f	class:P2PStreamServer
P2PStreamServer::P2PStreamServer	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        P2PStreamServer();$/;"	p	class:P2PStreamServer
P2PStreamServer::current	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        static P2PStreamServer current;$/;"	m	class:P2PStreamServer
P2PStreamServer::current	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        static P2PStreamServer current;$/;"	m	class:P2PStreamServer
P2PStreamServer::handleStreamPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        void handleStreamPacket(P2PNode sender, P2PPacket packet);$/;"	p	class:P2PStreamServer
P2PStreamServer::handleStreamPacket	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        void handleStreamPacket(P2PNode sender, P2PPacket packet);$/;"	p	class:P2PStreamServer
P2PStreamServer::sendStreamPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        void sendStreamPacket(P2PNode player, P2PPacket packet);$/;"	p	class:P2PStreamServer
P2PStreamServer::sendStreamPacket	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        void sendStreamPacket(P2PNode player, P2PPacket packet);$/;"	p	class:P2PStreamServer
P2PStreamServer::~P2PStreamServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        virtual ~P2PStreamServer();$/;"	p	class:P2PStreamServer
P2PStreamServer::~P2PStreamServer	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.cpp	/^P2PStreamServer::~P2PStreamServer() {$/;"	f	class:P2PStreamServer
P2PStreamServer::~P2PStreamServer	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        virtual ~P2PStreamServer();$/;"	p	class:P2PStreamServer
P2PTYPE	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^enum P2PTYPE {data,cpu,L,E};$/;"	g
P2PTYPE	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^enum P2PTYPE {data,cpu,L,E};$/;"	g
P2REN	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P2REN /;"	d
P2REN	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2REN);                              \/* Port 2 Resistor Enable *\/$/;"	v
P2REN	src/Emulation/MPU/msp430_declare_consts.h	/^#define P2REN /;"	d
P2REN	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2REN);                              \/* Port 2 Resistor Enable *\/$/;"	v
P2SEL	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P2SEL /;"	d
P2SEL	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2SEL);                              \/* Port 2 Selection *\/$/;"	v
P2SEL	src/Emulation/MPU/msp430_declare_consts.h	/^#define P2SEL /;"	d
P2SEL	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2SEL);                              \/* Port 2 Selection *\/$/;"	v
P2SEL2	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define P2SEL2 /;"	d
P2SEL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2SEL2);                             \/* Port 2 Selection 2 *\/$/;"	v
P2SEL2	src/Emulation/MPU/msp430_declare_consts.h	/^#define P2SEL2 /;"	d
P2SEL2	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P2SEL2);                             \/* Port 2 Selection 2 *\/$/;"	v
P3DIR	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P3DIR);                              \/* Port 3 Direction *\/$/;"	v
P3DIR	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P3DIR);                              \/* Port 3 Direction *\/$/;"	v
P3IN	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P3IN);                               \/* Port 3 Input *\/$/;"	v
P3IN	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P3IN);                               \/* Port 3 Input *\/$/;"	v
P3OUT	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P3OUT);                              \/* Port 3 Output *\/$/;"	v
P3OUT	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P3OUT);                              \/* Port 3 Output *\/$/;"	v
P3REN	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P3REN);                              \/* Port 3 Resistor Enable *\/$/;"	v
P3REN	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P3REN);                              \/* Port 3 Resistor Enable *\/$/;"	v
P3SEL	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P3SEL);                              \/* Port 3 Selection *\/$/;"	v
P3SEL	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P3SEL);                              \/* Port 3 Selection *\/$/;"	v
P3SEL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P3SEL2);                             \/* Port 3 Selection 2 *\/$/;"	v
P3SEL2	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(P3SEL2);                             \/* Port 3 Selection 2 *\/$/;"	v
PACKET_CHANNEL_H_	include/Eternia/WebFramework/Network/PacketChannel.h	/^#define PACKET_CHANNEL_H_$/;"	d
PACKET_CHANNEL_H_	src/WebFramework/Network/PacketChannel.h	/^#define PACKET_CHANNEL_H_$/;"	d
PACKET_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/Packet.hpp	/^#define PACKET_H_$/;"	d
PACKET_H_	src/WebFramework/Network/PacketServer/Packets/Packet.hpp	/^#define PACKET_H_$/;"	d
PARSINGTEST_H_	src/Parsing/test/testParsers.h	/^#define PARSINGTEST_H_$/;"	d
PASSAGE_PACKET_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^#define PASSAGE_PACKET_H_ /;"	d
PASSAGE_PACKET_H_	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^#define PASSAGE_PACKET_H_ /;"	d
PBOOL_	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^enum PTypes {PCHAR_, PINT_, PFLOAT_, PLONG_, PBOOL_};$/;"	e	enum:PTypes
PBOOL_	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^enum PTypes {PCHAR_, PINT_, PFLOAT_, PLONG_, PBOOL_};$/;"	e	enum:PTypes
PC	include/Eternia/Emulation/MPU/msp430_Registers.h	/^#define PC /;"	d
PC	src/Emulation/MPU/msp430_Registers.h	/^#define PC /;"	d
PCC_Equals	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	e	enum:PCondCompare
PCC_Equals	src/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	e	enum:PCondCompare
PCC_Greater	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	e	enum:PCondCompare
PCC_Greater	src/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	e	enum:PCondCompare
PCC_GreaterEq	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	e	enum:PCondCompare
PCC_GreaterEq	src/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	e	enum:PCondCompare
PCC_Less	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	e	enum:PCondCompare
PCC_Less	src/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	e	enum:PCondCompare
PCC_LessEq	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	e	enum:PCondCompare
PCC_LessEq	src/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	e	enum:PCondCompare
PCC_None	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	e	enum:PCondCompare
PCC_None	src/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	e	enum:PCondCompare
PCHAR_	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^enum PTypes {PCHAR_, PINT_, PFLOAT_, PLONG_, PBOOL_};$/;"	e	enum:PTypes
PCHAR_	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^enum PTypes {PCHAR_, PINT_, PFLOAT_, PLONG_, PBOOL_};$/;"	e	enum:PTypes
PCondCompare	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	g
PCondCompare	src/Programming/Visual/VProgramNode.h	/^enum PCondCompare {PCC_None, PCC_Equals, PCC_Greater, PCC_GreaterEq, PCC_Less, PCC_LessEq}; \/\/ NT_Cond$/;"	g
PEType	include/Eternia/Programming/Visual/VProgramError.h	/^enum PEType {PE_None, PE_TypeError1, PE_TypeError2, PE_NoInput};$/;"	g
PEType	src/Programming/Visual/VProgramError.h	/^enum PEType {PE_None, PE_TypeError1, PE_TypeError2, PE_NoInput};$/;"	g
PE_NoInput	include/Eternia/Programming/Visual/VProgramError.h	/^enum PEType {PE_None, PE_TypeError1, PE_TypeError2, PE_NoInput};$/;"	e	enum:PEType
PE_NoInput	src/Programming/Visual/VProgramError.h	/^enum PEType {PE_None, PE_TypeError1, PE_TypeError2, PE_NoInput};$/;"	e	enum:PEType
PE_None	include/Eternia/Programming/Visual/VProgramError.h	/^enum PEType {PE_None, PE_TypeError1, PE_TypeError2, PE_NoInput};$/;"	e	enum:PEType
PE_None	src/Programming/Visual/VProgramError.h	/^enum PEType {PE_None, PE_TypeError1, PE_TypeError2, PE_NoInput};$/;"	e	enum:PEType
PE_TypeError1	include/Eternia/Programming/Visual/VProgramError.h	/^enum PEType {PE_None, PE_TypeError1, PE_TypeError2, PE_NoInput};$/;"	e	enum:PEType
PE_TypeError1	src/Programming/Visual/VProgramError.h	/^enum PEType {PE_None, PE_TypeError1, PE_TypeError2, PE_NoInput};$/;"	e	enum:PEType
PE_TypeError2	include/Eternia/Programming/Visual/VProgramError.h	/^enum PEType {PE_None, PE_TypeError1, PE_TypeError2, PE_NoInput};$/;"	e	enum:PEType
PE_TypeError2	src/Programming/Visual/VProgramError.h	/^enum PEType {PE_None, PE_TypeError1, PE_TypeError2, PE_NoInput};$/;"	e	enum:PEType
PFLOAT_	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^enum PTypes {PCHAR_, PINT_, PFLOAT_, PLONG_, PBOOL_};$/;"	e	enum:PTypes
PFLOAT_	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^enum PTypes {PCHAR_, PINT_, PFLOAT_, PLONG_, PBOOL_};$/;"	e	enum:PTypes
PGEN_THERMOCOUPLE	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^enum POWGEN { PGEN_TURBINE, PGEN_THERMOCOUPLE };$/;"	e	enum:POWGEN
PGEN_THERMOCOUPLE	src/Gamelogic/CoreSystems/Reactor.h	/^enum POWGEN { PGEN_TURBINE, PGEN_THERMOCOUPLE };$/;"	e	enum:POWGEN
PGEN_TURBINE	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^enum POWGEN { PGEN_TURBINE, PGEN_THERMOCOUPLE };$/;"	e	enum:POWGEN
PGEN_TURBINE	src/Gamelogic/CoreSystems/Reactor.h	/^enum POWGEN { PGEN_TURBINE, PGEN_THERMOCOUPLE };$/;"	e	enum:POWGEN
PHASE_Gas	include/Eternia/Engineering/Chemistry/Atom.h	/^enum CHEMPHASE {PHASE_Solid, PHASE_Liquid, PHASE_Gas, PHASE_Plasma};$/;"	e	enum:CHEMPHASE
PHASE_Gas	src/Engineering/Chemistry/Atom.h	/^enum CHEMPHASE {PHASE_Solid, PHASE_Liquid, PHASE_Gas, PHASE_Plasma};$/;"	e	enum:CHEMPHASE
PHASE_Liquid	include/Eternia/Engineering/Chemistry/Atom.h	/^enum CHEMPHASE {PHASE_Solid, PHASE_Liquid, PHASE_Gas, PHASE_Plasma};$/;"	e	enum:CHEMPHASE
PHASE_Liquid	src/Engineering/Chemistry/Atom.h	/^enum CHEMPHASE {PHASE_Solid, PHASE_Liquid, PHASE_Gas, PHASE_Plasma};$/;"	e	enum:CHEMPHASE
PHASE_Plasma	include/Eternia/Engineering/Chemistry/Atom.h	/^enum CHEMPHASE {PHASE_Solid, PHASE_Liquid, PHASE_Gas, PHASE_Plasma};$/;"	e	enum:CHEMPHASE
PHASE_Plasma	src/Engineering/Chemistry/Atom.h	/^enum CHEMPHASE {PHASE_Solid, PHASE_Liquid, PHASE_Gas, PHASE_Plasma};$/;"	e	enum:CHEMPHASE
PHASE_Solid	include/Eternia/Engineering/Chemistry/Atom.h	/^enum CHEMPHASE {PHASE_Solid, PHASE_Liquid, PHASE_Gas, PHASE_Plasma};$/;"	e	enum:CHEMPHASE
PHASE_Solid	src/Engineering/Chemistry/Atom.h	/^enum CHEMPHASE {PHASE_Solid, PHASE_Liquid, PHASE_Gas, PHASE_Plasma};$/;"	e	enum:CHEMPHASE
PHYSMAT_H_	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^#define PHYSMAT_H_$/;"	d
PHYSMAT_H_	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^#define PHYSMAT_H_$/;"	d
PHz	include/Eternia/constants.h	/^        const double PHz = petaHertz;$/;"	m	namespace:physical::unit
PHz	src/constants.h	/^        const double PHz = petaHertz;$/;"	m	namespace:physical::unit
PI	include/Eternia/Math/Functions/Basic.h	/^    const double PI = 3.14159265358979323846264338327950288419716939937510;$/;"	m	namespace:Math
PI	include/Eternia/Math/Functions/FFT.h	/^#define PI /;"	d
PI	src/Math/Functions/Basic.h	/^    const double PI = 3.14159265358979323846264338327950288419716939937510;$/;"	m	namespace:Math
PI	src/Math/Functions/FFT.h	/^#define PI /;"	d
PINT_	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^enum PTypes {PCHAR_, PINT_, PFLOAT_, PLONG_, PBOOL_};$/;"	e	enum:PTypes
PINT_	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^enum PTypes {PCHAR_, PINT_, PFLOAT_, PLONG_, PBOOL_};$/;"	e	enum:PTypes
PIN_H	include/Eternia/Engineering/Electrical/Pin.h	/^#define PIN_H$/;"	d
PIN_H	src/Engineering/Electrical/Pin.h	/^#define PIN_H$/;"	d
PLACE_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define PLACE_VECTOR(/;"	d
PLACE_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define PLACE_VECTOR(/;"	d
PLANET_H_	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^#define PLANET_H_$/;"	d
PLANET_H_	src/Gamelogic/Environment/Planet/Planet.h	/^#define PLANET_H_$/;"	d
PLATFORM_ID	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLONG_	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^enum PTypes {PCHAR_, PINT_, PFLOAT_, PLONG_, PBOOL_};$/;"	e	enum:PTypes
PLONG_	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^enum PTypes {PCHAR_, PINT_, PFLOAT_, PLONG_, PBOOL_};$/;"	e	enum:PTypes
PMathType	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	g
PMathType	src/Programming/Visual/VProgramNode.h	/^enum PMathType {MT_None, MT_Add, MT_Sub, MT_Mul, MT_Div, MT_Mod, MT_Exponent}; \/\/ NT_Math$/;"	g
PMax	include/Eternia/Math/statistics/Probability.h	/^const float PMax = 1; \/\/ 100% Probability$/;"	v
PMax	src/Math/statistics/Probability.h	/^const float PMax = 1; \/\/ 100% Probability$/;"	v
PNJunct_DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
PNJunct_DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
PNodeType	include/Eternia/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	g
PNodeType	src/Programming/Visual/VProgramNode.h	/^enum PNodeType {NT_None, NT_Cond, NT_Input, NT_Output, NT_Set, NT_Math, NT_Dispplay};$/;"	g
PORIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define PORIFG /;"	d
PORIFG	src/Emulation/MPU/msp430g2553.h	/^#define PORIFG /;"	d
PORT1_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define PORT1_VECTOR /;"	d
PORT1_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define PORT1_VECTOR /;"	d
PORT2_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define PORT2_VECTOR /;"	d
PORT2_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define PORT2_VECTOR /;"	d
PORTABLE_ARMOR_H	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^#define PORTABLE_ARMOR_H$/;"	d
PORTABLE_ARMOR_H	src/Gamelogic/Inventory/PortableArmor.h	/^#define PORTABLE_ARMOR_H$/;"	d
POWERPLANT_H	include/Eternia/Gamelogic/Buildings/Power/PowerPlant.h	/^#define POWERPLANT_H$/;"	d
POWERPLANT_H	src/Gamelogic/Buildings/Power/PowerPlant.h	/^#define POWERPLANT_H$/;"	d
POWGEN	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^enum POWGEN { PGEN_TURBINE, PGEN_THERMOCOUPLE };$/;"	g
POWGEN	src/Gamelogic/CoreSystems/Reactor.h	/^enum POWGEN { PGEN_TURBINE, PGEN_THERMOCOUPLE };$/;"	g
PRIORITYQUEUE_H_1	include/Eternia/Data/PriorityQueue.h	/^#define PRIORITYQUEUE_H_1$/;"	d
PRIORITYQUEUE_H_1	src/Data/PriorityQueue.h	/^#define PRIORITYQUEUE_H_1$/;"	d
PROBABILITY_H_	include/Eternia/Math/statistics/Probability.h	/^#define PROBABILITY_H_$/;"	d
PROBABILITY_H_	src/Math/statistics/Probability.h	/^#define PROBABILITY_H_$/;"	d
PROGRAM_ERROR_H_	include/Eternia/Programming/ProgramError.h	/^#define PROGRAM_ERROR_H_$/;"	d
PROGRAM_ERROR_H_	src/Programming/ProgramError.h	/^#define PROGRAM_ERROR_H_$/;"	d
PROGRAM_H_	include/Eternia/Programming/Program.h	/^#define PROGRAM_H_$/;"	d
PROGRAM_H_	src/Programming/Program.h	/^#define PROGRAM_H_$/;"	d
PROGRAM_LIMITATIONS_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^#define PROGRAM_LIMITATIONS_H_$/;"	d
PROGRAM_LIMITATIONS_H_	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^#define PROGRAM_LIMITATIONS_H_$/;"	d
PROGRAM_VARIABLE_H_	include/Eternia/Programming/Visual/VProgramVariable.h	/^#define PROGRAM_VARIABLE_H_$/;"	d
PROGRAM_VARIABLE_H_	src/Programming/Visual/VProgramVariable.h	/^#define PROGRAM_VARIABLE_H_$/;"	d
PTX_Graphical	include/Eternia/Programming/Program.h	/^enum ProgTYPE {PTX_Graphical, PTX_Textual};$/;"	e	enum:ProgTYPE
PTX_Graphical	src/Programming/Program.h	/^enum ProgTYPE {PTX_Graphical, PTX_Textual};$/;"	e	enum:ProgTYPE
PTX_Textual	include/Eternia/Programming/Program.h	/^enum ProgTYPE {PTX_Graphical, PTX_Textual};$/;"	e	enum:ProgTYPE
PTX_Textual	src/Programming/Program.h	/^enum ProgTYPE {PTX_Graphical, PTX_Textual};$/;"	e	enum:ProgTYPE
PTYPE_H_	include/Eternia/Data/Protect/PType.hpp	/^#define PTYPE_H_$/;"	d
PTYPE_H_	src/Data/Protect/PType.hpp	/^#define PTYPE_H_$/;"	d
PType	include/Eternia/Data/Protect/PType.hpp	/^    PType(){$/;"	f	class:PType
PType	include/Eternia/Data/Protect/PType.hpp	/^class PType {$/;"	c
PType	include/Eternia/Serialization/SpecificSerializer.h	/^class PType;$/;"	x
PType	src/Data/Protect/PType.hpp	/^    PType(){$/;"	f	class:PType
PType	src/Data/Protect/PType.hpp	/^class PType {$/;"	c
PType	src/Serialization/SpecificSerializer.h	/^class PType;$/;"	x
PType::PType	include/Eternia/Data/Protect/PType.hpp	/^    PType(){$/;"	f	class:PType
PType::PType	src/Data/Protect/PType.hpp	/^    PType(){$/;"	f	class:PType
PType::bytesize	include/Eternia/Data/Protect/PType.hpp	/^    char bytesize;$/;"	m	class:PType
PType::bytesize	src/Data/Protect/PType.hpp	/^    char bytesize;$/;"	m	class:PType
PType::changed	include/Eternia/Data/Protect/PType.hpp	/^    bool changed;$/;"	m	class:PType
PType::changed	src/Data/Protect/PType.hpp	/^    bool changed;$/;"	m	class:PType
PType::detectAllViolations	include/Eternia/Data/Protect/PType.hpp	/^    static void detectAllViolations(){$/;"	f	class:PType
PType::detectAllViolations	src/Data/Protect/PType.hpp	/^    static void detectAllViolations(){$/;"	f	class:PType
PType::get	include/Eternia/Data/Protect/PType.hpp	/^    T get() {$/;"	f	class:PType
PType::get	src/Data/Protect/PType.hpp	/^    T get() {$/;"	f	class:PType
PType::getBool	include/Eternia/Data/Protect/PType.hpp	/^    bool getBool(){$/;"	f	class:PType
PType::getBool	src/Data/Protect/PType.hpp	/^    bool getBool(){$/;"	f	class:PType
PType::getByteSize	include/Eternia/Data/Protect/PType.hpp	/^    int getByteSize(){$/;"	f	class:PType
PType::getByteSize	src/Data/Protect/PType.hpp	/^    int getByteSize(){$/;"	f	class:PType
PType::getPtr	include/Eternia/Data/Protect/PType.hpp	/^    void* getPtr(){$/;"	f	class:PType
PType::getPtr	src/Data/Protect/PType.hpp	/^    void* getPtr(){$/;"	f	class:PType
PType::honeypot	include/Eternia/Data/Protect/PType.hpp	/^    T honeypot; \/\/ actual value, just resets every change$/;"	m	class:PType
PType::honeypot	src/Data/Protect/PType.hpp	/^    T honeypot; \/\/ actual value, just resets every change$/;"	m	class:PType
PType::init	include/Eternia/Data/Protect/PType.hpp	/^    void init(){$/;"	f	class:PType
PType::init	src/Data/Protect/PType.hpp	/^    void init(){$/;"	f	class:PType
PType::isChanged	include/Eternia/Data/Protect/PType.hpp	/^    bool isChanged(){$/;"	f	class:PType
PType::isChanged	src/Data/Protect/PType.hpp	/^    bool isChanged(){$/;"	f	class:PType
PType::isViolated	include/Eternia/Data/Protect/PType.hpp	/^    bool isViolated(){$/;"	f	class:PType
PType::isViolated	src/Data/Protect/PType.hpp	/^    bool isViolated(){$/;"	f	class:PType
PType::onChanged	include/Eternia/Data/Protect/PType.hpp	/^    void (*onChanged)(T* value);$/;"	m	class:PType
PType::onChanged	src/Data/Protect/PType.hpp	/^    void (*onChanged)(T* value);$/;"	m	class:PType
PType::onHacked	include/Eternia/Data/Protect/PType.hpp	/^    void (*onHacked)(T* value); \/\/ Hacked value detection$/;"	m	class:PType
PType::onHacked	src/Data/Protect/PType.hpp	/^    void (*onHacked)(T* value); \/\/ Hacked value detection$/;"	m	class:PType
PType::operator =	include/Eternia/Data/Protect/PType.hpp	/^    PType<T> operator =(PType<T> v){$/;"	f	class:PType
PType::operator =	include/Eternia/Data/Protect/PType.hpp	/^    PType<T> operator =(T v){$/;"	f	class:PType
PType::operator =	src/Data/Protect/PType.hpp	/^    PType<T> operator =(PType<T> v){$/;"	f	class:PType
PType::operator =	src/Data/Protect/PType.hpp	/^    PType<T> operator =(T v){$/;"	f	class:PType
PType::operator ^	include/Eternia/Data/Protect/PType.hpp	/^    PType<T> operator ^(T v){$/;"	f	class:PType
PType::operator ^	src/Data/Protect/PType.hpp	/^    PType<T> operator ^(T v){$/;"	f	class:PType
PType::printValues	include/Eternia/Data/Protect/PType.hpp	/^    void printValues(){$/;"	f	class:PType
PType::printValues	src/Data/Protect/PType.hpp	/^    void printValues(){$/;"	f	class:PType
PType::testViolate	include/Eternia/Data/Protect/PType.hpp	/^    void testViolate(){$/;"	f	class:PType
PType::testViolate	src/Data/Protect/PType.hpp	/^    void testViolate(){$/;"	f	class:PType
PType::tvalue	include/Eternia/Data/Protect/PType.hpp	/^    T tvalue; \/\/ vector to determine memory hacking$/;"	m	class:PType
PType::tvalue	src/Data/Protect/PType.hpp	/^    T tvalue; \/\/ vector to determine memory hacking$/;"	m	class:PType
PType::value	include/Eternia/Data/Protect/PType.hpp	/^    T value; \/\/ Base value$/;"	m	class:PType
PType::value	src/Data/Protect/PType.hpp	/^    T value; \/\/ Base value$/;"	m	class:PType
PType::vec1	include/Eternia/Data/Protect/PType.hpp	/^    long long *vec1, *vec2;$/;"	m	class:PType
PType::vec1	src/Data/Protect/PType.hpp	/^    long long *vec1, *vec2;$/;"	m	class:PType
PType::vec2	include/Eternia/Data/Protect/PType.hpp	/^    long long *vec1, *vec2;$/;"	m	class:PType
PType::vec2	src/Data/Protect/PType.hpp	/^    long long *vec1, *vec2;$/;"	m	class:PType
PType::~PType	include/Eternia/Data/Protect/PType.hpp	/^    ~PType(){$/;"	f	class:PType
PType::~PType	src/Data/Protect/PType.hpp	/^    ~PType(){$/;"	f	class:PType
PTypes	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^enum PTypes {PCHAR_, PINT_, PFLOAT_, PLONG_, PBOOL_};$/;"	g
PTypes	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^enum PTypes {PCHAR_, PINT_, PFLOAT_, PLONG_, PBOOL_};$/;"	g
PV_None	include/Eternia/Programming/Visual/VProgramVariable.h	/^enum PV_Type {PV_None, PV_Number, PV_String, PV_Object};$/;"	e	enum:PV_Type
PV_None	src/Programming/Visual/VProgramVariable.h	/^enum PV_Type {PV_None, PV_Number, PV_String, PV_Object};$/;"	e	enum:PV_Type
PV_Number	include/Eternia/Programming/Visual/VProgramVariable.h	/^enum PV_Type {PV_None, PV_Number, PV_String, PV_Object};$/;"	e	enum:PV_Type
PV_Number	src/Programming/Visual/VProgramVariable.h	/^enum PV_Type {PV_None, PV_Number, PV_String, PV_Object};$/;"	e	enum:PV_Type
PV_Object	include/Eternia/Programming/Visual/VProgramVariable.h	/^enum PV_Type {PV_None, PV_Number, PV_String, PV_Object};$/;"	e	enum:PV_Type
PV_Object	src/Programming/Visual/VProgramVariable.h	/^enum PV_Type {PV_None, PV_Number, PV_String, PV_Object};$/;"	e	enum:PV_Type
PV_String	include/Eternia/Programming/Visual/VProgramVariable.h	/^enum PV_Type {PV_None, PV_Number, PV_String, PV_Object};$/;"	e	enum:PV_Type
PV_String	src/Programming/Visual/VProgramVariable.h	/^enum PV_Type {PV_None, PV_Number, PV_String, PV_Object};$/;"	e	enum:PV_Type
PV_Type	include/Eternia/Programming/Visual/VProgramVariable.h	/^enum PV_Type {PV_None, PV_Number, PV_String, PV_Object};$/;"	g
PV_Type	src/Programming/Visual/VProgramVariable.h	/^enum PV_Type {PV_None, PV_Number, PV_String, PV_Object};$/;"	g
PWM	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    PWM();$/;"	p	class:PWM
PWM	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^class PWM : public Signal {$/;"	c
PWM	src/Engineering/Electrical/Signal/PWM.cpp	/^PWM::PWM() {$/;"	f	class:PWM
PWM	src/Engineering/Electrical/Signal/PWM.h	/^    PWM();$/;"	p	class:PWM
PWM	src/Engineering/Electrical/Signal/PWM.h	/^class PWM : public Signal {$/;"	c
PWM::PWM	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    PWM();$/;"	p	class:PWM
PWM::PWM	src/Engineering/Electrical/Signal/PWM.cpp	/^PWM::PWM() {$/;"	f	class:PWM
PWM::PWM	src/Engineering/Electrical/Signal/PWM.h	/^    PWM();$/;"	p	class:PWM
PWM::autoTick	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void autoTick(); \/\/ attempts to affix to a planned tick interval automatically$/;"	p	class:PWM
PWM::autoTick	src/Engineering/Electrical/Signal/PWM.cpp	/^void PWM::autoTick() {$/;"	f	class:PWM
PWM::autoTick	src/Engineering/Electrical/Signal/PWM.h	/^    void autoTick(); \/\/ attempts to affix to a planned tick interval automatically$/;"	p	class:PWM
PWM::autoTickfind	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
PWM::autoTickfind	src/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
PWM::count	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
PWM::count	src/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
PWM::duty	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    float duty, tickinterval;$/;"	m	class:PWM
PWM::duty	src/Engineering/Electrical/Signal/PWM.h	/^    float duty, tickinterval;$/;"	m	class:PWM
PWM::frequency	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
PWM::frequency	src/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
PWM::func	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void (*func)(bool);$/;"	m	class:PWM
PWM::func	src/Engineering/Electrical/Signal/PWM.h	/^    void (*func)(bool);$/;"	m	class:PWM
PWM::getDuty	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    float getDuty(); \/\/ duty from 0 to 1$/;"	p	class:PWM
PWM::getDuty	src/Engineering/Electrical/Signal/PWM.cpp	/^float PWM::getDuty() {$/;"	f	class:PWM
PWM::getDuty	src/Engineering/Electrical/Signal/PWM.h	/^    float getDuty(); \/\/ duty from 0 to 1$/;"	p	class:PWM
PWM::getFrequency	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    int getFrequency(); \/\/ set frequency from 1 to 10 MHz$/;"	p	class:PWM
PWM::getFrequency	src/Engineering/Electrical/Signal/PWM.cpp	/^int PWM::getFrequency() {$/;"	f	class:PWM
PWM::getFrequency	src/Engineering/Electrical/Signal/PWM.h	/^    int getFrequency(); \/\/ set frequency from 1 to 10 MHz$/;"	p	class:PWM
PWM::getPWMValue	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    bool getPWMValue(); \/\/ output the PWM value!$/;"	p	class:PWM
PWM::getPWMValue	src/Engineering/Electrical/Signal/PWM.cpp	/^bool PWM::getPWMValue() {$/;"	f	class:PWM
PWM::getPWMValue	src/Engineering/Electrical/Signal/PWM.h	/^    bool getPWMValue(); \/\/ output the PWM value!$/;"	p	class:PWM
PWM::getSlow	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    bool getSlow(); \/\/ is the input tick too slow to saturate the duty?$/;"	p	class:PWM
PWM::getSlow	src/Engineering/Electrical/Signal/PWM.cpp	/^bool PWM::getSlow() {$/;"	f	class:PWM
PWM::getSlow	src/Engineering/Electrical/Signal/PWM.h	/^    bool getSlow(); \/\/ is the input tick too slow to saturate the duty?$/;"	p	class:PWM
PWM::getTickInterval	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    float getTickInterval(); \/\/ how many seconds expected per tick?$/;"	p	class:PWM
PWM::getTickInterval	src/Engineering/Electrical/Signal/PWM.cpp	/^float  PWM::getTickInterval() {$/;"	f	class:PWM
PWM::getTickInterval	src/Engineering/Electrical/Signal/PWM.h	/^    float getTickInterval(); \/\/ how many seconds expected per tick?$/;"	p	class:PWM
PWM::lastClock	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
PWM::lastClock	src/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
PWM::setDuty	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void setDuty(float value); \/\/ duty from 0 to 1$/;"	p	class:PWM
PWM::setDuty	src/Engineering/Electrical/Signal/PWM.cpp	/^void PWM::setDuty(float value) {$/;"	f	class:PWM
PWM::setDuty	src/Engineering/Electrical/Signal/PWM.h	/^    void setDuty(float value); \/\/ duty from 0 to 1$/;"	p	class:PWM
PWM::setFrequency	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void setFrequency(int frequency); \/\/ set frequency from 1 to 10 MHz$/;"	p	class:PWM
PWM::setFrequency	src/Engineering/Electrical/Signal/PWM.cpp	/^void PWM::setFrequency(int freq) {$/;"	f	class:PWM
PWM::setFrequency	src/Engineering/Electrical/Signal/PWM.h	/^    void setFrequency(int frequency); \/\/ set frequency from 1 to 10 MHz$/;"	p	class:PWM
PWM::setPWMEvent	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void setPWMEvent(void (*function)(bool)); \/\/ enable an interrupt-like event$/;"	p	class:PWM
PWM::setPWMEvent	src/Engineering/Electrical/Signal/PWM.cpp	/^void PWM::setPWMEvent(void (*function)(bool)) {$/;"	f	class:PWM
PWM::setPWMEvent	src/Engineering/Electrical/Signal/PWM.h	/^    void setPWMEvent(void (*function)(bool)); \/\/ enable an interrupt-like event$/;"	p	class:PWM
PWM::setTickInterval	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void setTickInterval(float seconds); \/\/ how many seconds expected per tick?$/;"	p	class:PWM
PWM::setTickInterval	src/Engineering/Electrical/Signal/PWM.cpp	/^void PWM::setTickInterval(float seconds) {$/;"	f	class:PWM
PWM::setTickInterval	src/Engineering/Electrical/Signal/PWM.h	/^    void setTickInterval(float seconds); \/\/ how many seconds expected per tick?$/;"	p	class:PWM
PWM::tick	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void tick(); \/\/ manual tick$/;"	p	class:PWM
PWM::tick	src/Engineering/Electrical/Signal/PWM.cpp	/^void PWM::tick() {$/;"	f	class:PWM
PWM::tick	src/Engineering/Electrical/Signal/PWM.h	/^    void tick(); \/\/ manual tick$/;"	p	class:PWM
PWM::tickRes	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
PWM::tickRes	src/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
PWM::tickinterval	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    float duty, tickinterval;$/;"	m	class:PWM
PWM::tickinterval	src/Engineering/Electrical/Signal/PWM.h	/^    float duty, tickinterval;$/;"	m	class:PWM
PWM::value	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    bool value;$/;"	m	class:PWM
PWM::value	src/Engineering/Electrical/Signal/PWM.h	/^    bool value;$/;"	m	class:PWM
PWM_H	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^#define PWM_H$/;"	d
PWM_H	src/Engineering/Electrical/Signal/PWM.h	/^#define PWM_H$/;"	d
P_API	include/Eternia/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	e	enum:APIPermType
P_API	src/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	e	enum:APIPermType
P_DB	include/Eternia/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	e	enum:APIPermType
P_DB	src/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	e	enum:APIPermType
P_GLOBAL	include/Eternia/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	e	enum:APIPermType
P_GLOBAL	src/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	e	enum:APIPermType
P_MOD	include/Eternia/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	e	enum:APIPermType
P_MOD	src/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	e	enum:APIPermType
P_NONE	include/Eternia/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	e	enum:APIPermType
P_NONE	src/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	e	enum:APIPermType
P_USER	include/Eternia/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	e	enum:APIPermType
P_USER	src/API/APIPermission.h	/^enum APIPermType {P_NONE, P_USER, P_GLOBAL, P_MOD, P_DB, P_API};$/;"	e	enum:APIPermType
Pa	include/Eternia/constants.h	/^        const double Pa = Pascal;$/;"	m	namespace:physical::unit
Pa	src/constants.h	/^        const double Pa = Pascal;$/;"	m	namespace:physical::unit
Packet	include/Eternia/WebFramework/Network/PacketServer/Packets/Packet.hpp	/^class Packet {$/;"	c
Packet	src/WebFramework/Network/PacketServer/Packets/Packet.hpp	/^class Packet {$/;"	c
Packet::RAW	include/Eternia/WebFramework/Network/PacketServer/Packets/Packet.hpp	/^        char* RAW;$/;"	m	class:Packet
Packet::RAW	src/WebFramework/Network/PacketServer/Packets/Packet.hpp	/^        char* RAW;$/;"	m	class:Packet
Packet::id	include/Eternia/WebFramework/Network/PacketServer/Packets/Packet.hpp	/^        long id;$/;"	m	class:Packet
Packet::id	src/WebFramework/Network/PacketServer/Packets/Packet.hpp	/^        long id;$/;"	m	class:Packet
PacketChannel	include/Eternia/WebFramework/Network/PacketChannel.h	/^    PacketChannel();$/;"	p	class:PacketChannel
PacketChannel	include/Eternia/WebFramework/Network/PacketChannel.h	/^class PacketChannel{$/;"	c
PacketChannel	src/WebFramework/Network/PacketChannel.cpp	/^PacketChannel::PacketChannel(){$/;"	f	class:PacketChannel
PacketChannel	src/WebFramework/Network/PacketChannel.h	/^    PacketChannel();$/;"	p	class:PacketChannel
PacketChannel	src/WebFramework/Network/PacketChannel.h	/^class PacketChannel{$/;"	c
PacketChannel::PacketChannel	include/Eternia/WebFramework/Network/PacketChannel.h	/^    PacketChannel();$/;"	p	class:PacketChannel
PacketChannel::PacketChannel	src/WebFramework/Network/PacketChannel.cpp	/^PacketChannel::PacketChannel(){$/;"	f	class:PacketChannel
PacketChannel::PacketChannel	src/WebFramework/Network/PacketChannel.h	/^    PacketChannel();$/;"	p	class:PacketChannel
PacketChannel::addRecvPacketData	include/Eternia/WebFramework/Network/PacketChannel.h	/^    void addRecvPacketData(CharString *data); \/\/ received packet data, add to queue$/;"	p	class:PacketChannel
PacketChannel::addRecvPacketData	src/WebFramework/Network/PacketChannel.cpp	/^void PacketChannel::addRecvPacketData(CharString *data){$/;"	f	class:PacketChannel
PacketChannel::addRecvPacketData	src/WebFramework/Network/PacketChannel.h	/^    void addRecvPacketData(CharString *data); \/\/ received packet data, add to queue$/;"	p	class:PacketChannel
PacketChannel::client	include/Eternia/WebFramework/Network/PacketChannel.h	/^    SockClient client;$/;"	m	class:PacketChannel
PacketChannel::client	src/WebFramework/Network/PacketChannel.h	/^    SockClient client;$/;"	m	class:PacketChannel
PacketChannel::packetQ	include/Eternia/WebFramework/Network/PacketChannel.h	/^    Queue packetQ;$/;"	m	class:PacketChannel
PacketChannel::packetQ	src/WebFramework/Network/PacketChannel.h	/^    Queue packetQ;$/;"	m	class:PacketChannel
PacketChannel::recvPacket	include/Eternia/WebFramework/Network/PacketChannel.h	/^    CharString recvPacket(); \/\/ returns null if no new data.$/;"	p	class:PacketChannel
PacketChannel::recvPacket	src/WebFramework/Network/PacketChannel.cpp	/^CharString PacketChannel::recvPacket(){$/;"	f	class:PacketChannel
PacketChannel::recvPacket	src/WebFramework/Network/PacketChannel.h	/^    CharString recvPacket(); \/\/ returns null if no new data.$/;"	p	class:PacketChannel
PacketChannel::recvWaitPacket	include/Eternia/WebFramework/Network/PacketChannel.h	/^    CharString recvWaitPacket(); \/\/ efficiently waits for a new packet. SYNC$/;"	p	class:PacketChannel
PacketChannel::recvWaitPacket	src/WebFramework/Network/PacketChannel.cpp	/^CharString PacketChannel::recvWaitPacket(){$/;"	f	class:PacketChannel
PacketChannel::recvWaitPacket	src/WebFramework/Network/PacketChannel.h	/^    CharString recvWaitPacket(); \/\/ efficiently waits for a new packet. SYNC$/;"	p	class:PacketChannel
PacketChannel::sendPacket	include/Eternia/WebFramework/Network/PacketChannel.h	/^    void sendPacket(CharString data); \/\/ SYNC$/;"	p	class:PacketChannel
PacketChannel::sendPacket	src/WebFramework/Network/PacketChannel.cpp	/^void PacketChannel::sendPacket(CharString data){$/;"	f	class:PacketChannel
PacketChannel::sendPacket	src/WebFramework/Network/PacketChannel.h	/^    void sendPacket(CharString data); \/\/ SYNC$/;"	p	class:PacketChannel
PacketChannel::~PacketChannel	include/Eternia/WebFramework/Network/PacketChannel.h	/^    virtual ~PacketChannel();$/;"	p	class:PacketChannel
PacketChannel::~PacketChannel	src/WebFramework/Network/PacketChannel.cpp	/^PacketChannel::~PacketChannel(){$/;"	f	class:PacketChannel
PacketChannel::~PacketChannel	src/WebFramework/Network/PacketChannel.h	/^    virtual ~PacketChannel();$/;"	p	class:PacketChannel
Palladium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Palladium = new Atom("Palladium", "Pd", 10, 5, 46, 60,45, 12.02,0.0000001, 0.072, 1828.05,3236, 0.244, 4, COLOR_Silver,ELEM_Transition);$/;"	v
Palladium	src/Engineering/Chemistry/elementals.h	/^const Atom Palladium = new Atom("Palladium", "Pd", 10, 5, 46, 60,45, 12.02,0.0000001, 0.072, 1828.05,3236, 0.244, 4, COLOR_Silver,ELEM_Transition);$/;"	v
ParallelSum	include/Eternia/constants.h	/^    double ParallelSum(double* C, int Clen);$/;"	p	namespace:electrical
ParallelSum	src/constants.cpp	/^    double ParallelSum(double *C, int Clen) {$/;"	f	namespace:electrical
ParallelSum	src/constants.h	/^    double ParallelSum(double* C, int Clen);$/;"	p	namespace:electrical
Parent	include/Eternia/Data/FileSystem.h	/^        FileStructureNode *Child,*Parent;$/;"	m	class:FileStructureNode
Parent	include/Eternia/Data/TreeList.h	/^        TreeNode *Parent, *Child;$/;"	m	class:TreeNode
Parent	src/Data/FileSystem.h	/^        FileStructureNode *Child,*Parent;$/;"	m	class:FileStructureNode
Parent	src/Data/TreeList.h	/^        TreeNode *Parent, *Child;$/;"	m	class:TreeNode
Pascal	include/Eternia/constants.h	/^        const double Pascal = Newton\/(meter*meter);$/;"	m	namespace:physical::unit
Pascal	src/constants.h	/^        const double Pascal = Newton\/(meter*meter);$/;"	m	namespace:physical::unit
Pascals	include/Eternia/constants.h	/^        const double Pascals = Pascal;$/;"	m	namespace:physical::unit
Pascals	src/constants.h	/^        const double Pascals = Pascal;$/;"	m	namespace:physical::unit
Pause	include/Eternia/Emulation/MPU/msp430.h	/^        void Pause(); \/\/ pause processor$/;"	p	class:MSP430
Pause	src/Emulation/MPU/msp430.cpp	/^void MSP430::Pause() {$/;"	f	class:MSP430
Pause	src/Emulation/MPU/msp430.h	/^        void Pause(); \/\/ pause processor$/;"	p	class:MSP430
Phosphorus	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Phosphorus = new Atom("Phosphorus", "P", 15, 3, 15, 16,14, 1.82,0.0000001, 0.000236, 317.3,550, 0.769, 5, COLOR_None,ELEM_NonMetal);$/;"	v
Phosphorus	src/Engineering/Chemistry/elementals.h	/^const Atom Phosphorus = new Atom("Phosphorus", "P", 15, 3, 15, 16,14, 1.82,0.0000001, 0.000236, 317.3,550, 0.769, 5, COLOR_None,ELEM_NonMetal);$/;"	v
Photo_DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Photo_DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
PhysicalMaterial	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	PhysicalMaterial();$/;"	p	class:PhysicalMaterial
PhysicalMaterial	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^class PhysicalMaterial{$/;"	c
PhysicalMaterial	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	PhysicalMaterial();$/;"	p	class:PhysicalMaterial
PhysicalMaterial	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^class PhysicalMaterial{$/;"	c
PhysicalMaterial::PhysicalMaterial	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	PhysicalMaterial();$/;"	p	class:PhysicalMaterial
PhysicalMaterial::PhysicalMaterial	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	PhysicalMaterial();$/;"	p	class:PhysicalMaterial
PhysicalMaterial::density	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	float density; \/\/ density of the material (g\/cm3)$/;"	m	class:PhysicalMaterial
PhysicalMaterial::density	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	float density; \/\/ density of the material (g\/cm3)$/;"	m	class:PhysicalMaterial
PhysicalMaterial::electrical_conductivity	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	float electrical_conductivity;$/;"	m	class:PhysicalMaterial
PhysicalMaterial::electrical_conductivity	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	float electrical_conductivity;$/;"	m	class:PhysicalMaterial
PhysicalMaterial::formula	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	char* formula;$/;"	m	class:PhysicalMaterial
PhysicalMaterial::formula	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	char* formula;$/;"	m	class:PhysicalMaterial
PhysicalMaterial::name	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	char* name; \/\/$/;"	m	class:PhysicalMaterial
PhysicalMaterial::name	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	char* name; \/\/$/;"	m	class:PhysicalMaterial
PhysicalMaterial::thermal_conductivity	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	float thermal_conductivity; \/\/ W\/(m.K)$/;"	m	class:PhysicalMaterial
PhysicalMaterial::thermal_conductivity	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	float thermal_conductivity; \/\/ W\/(m.K)$/;"	m	class:PhysicalMaterial
PhysicsEquations	include/Eternia/Engineering/Physics/Equations.h	/^class PhysicsEquations {$/;"	c
PhysicsEquations	src/Engineering/Physics/Equations.h	/^class PhysicsEquations {$/;"	c
PhysicsEquations::getAirPressure	include/Eternia/Engineering/Physics/Equations.h	/^        double getAirPressure(double gravity, double radius, double atmosMass); \/\/ Get P0 at sea level based on information$/;"	p	class:PhysicsEquations
PhysicsEquations::getAirPressure	src/Engineering/Physics/Equations.cpp	/^double PhysicsEquations::getAirPressure(double gravity, double radius, double atmosMass) {$/;"	f	class:PhysicsEquations
PhysicsEquations::getAirPressure	src/Engineering/Physics/Equations.h	/^        double getAirPressure(double gravity, double radius, double atmosMass); \/\/ Get P0 at sea level based on information$/;"	p	class:PhysicsEquations
PhysicsEquations::getGravity	include/Eternia/Engineering/Physics/Equations.h	/^        double getGravity(double mass1, double mass2, double radius); \/\/ Gravity of an object with respect to another object (m\/s**2)$/;"	p	class:PhysicsEquations
PhysicsEquations::getGravity	src/Engineering/Physics/Equations.cpp	/^double PhysicsEquations::getGravity(double mass1, double mass2, double radius) {$/;"	f	class:PhysicsEquations
PhysicsEquations::getGravity	src/Engineering/Physics/Equations.h	/^        double getGravity(double mass1, double mass2, double radius); \/\/ Gravity of an object with respect to another object (m\/s**2)$/;"	p	class:PhysicsEquations
Physics_Equations_h	include/Eternia/Engineering/Physics/Equations.h	/^#define Physics_Equations_h$/;"	d
Physics_Equations_h	src/Engineering/Physics/Equations.h	/^#define Physics_Equations_h$/;"	d
Pilot	include/Eternia/Gamelogic/Ship/Autopilot/Autopilot.h	/^        void Pilot(); \/\/ Pilot this ship$/;"	p	class:Autopilot
Pilot	src/Gamelogic/Ship/Autopilot/Autopilot.h	/^        void Pilot(); \/\/ Pilot this ship$/;"	p	class:Autopilot
Pin	include/Eternia/Engineering/Electrical/Pin.h	/^        Pin(CharString* PinName, PowerValue* value);$/;"	p	class:Pin
Pin	include/Eternia/Engineering/Electrical/Pin.h	/^class Pin {$/;"	c
Pin	src/Engineering/Electrical/Pin.cpp	/^Pin::Pin(CharString* PinName, PowerValue* value) {$/;"	f	class:Pin
Pin	src/Engineering/Electrical/Pin.h	/^        Pin(CharString* PinName, PowerValue* value);$/;"	p	class:Pin
Pin	src/Engineering/Electrical/Pin.h	/^class Pin {$/;"	c
Pin::Pin	include/Eternia/Engineering/Electrical/Pin.h	/^        Pin(CharString* PinName, PowerValue* value);$/;"	p	class:Pin
Pin::Pin	src/Engineering/Electrical/Pin.cpp	/^Pin::Pin(CharString* PinName, PowerValue* value) {$/;"	f	class:Pin
Pin::Pin	src/Engineering/Electrical/Pin.h	/^        Pin(CharString* PinName, PowerValue* value);$/;"	p	class:Pin
Pin::getName	include/Eternia/Engineering/Electrical/Pin.h	/^        CharString* getName();$/;"	p	class:Pin
Pin::getName	src/Engineering/Electrical/Pin.h	/^        CharString* getName();$/;"	p	class:Pin
Pin::getValue	include/Eternia/Engineering/Electrical/Pin.h	/^        PowerValue* getValue();$/;"	p	class:Pin
Pin::getValue	src/Engineering/Electrical/Pin.h	/^        PowerValue* getValue();$/;"	p	class:Pin
Pin::name	include/Eternia/Engineering/Electrical/Pin.h	/^        CharString* name;$/;"	m	class:Pin
Pin::name	src/Engineering/Electrical/Pin.h	/^        CharString* name;$/;"	m	class:Pin
Pin::setValue	include/Eternia/Engineering/Electrical/Pin.h	/^        void setValue(PowerValue* value);$/;"	p	class:Pin
Pin::setValue	src/Engineering/Electrical/Pin.h	/^        void setValue(PowerValue* value);$/;"	p	class:Pin
Pin::val	include/Eternia/Engineering/Electrical/Pin.h	/^        PowerValue* val;$/;"	m	class:Pin
Pin::val	src/Engineering/Electrical/Pin.h	/^        PowerValue* val;$/;"	m	class:Pin
Pin::~Pin	include/Eternia/Engineering/Electrical/Pin.h	/^        virtual ~Pin();$/;"	p	class:Pin
Pin::~Pin	src/Engineering/Electrical/Pin.cpp	/^Pin::~Pin() {}$/;"	f	class:Pin
Pin::~Pin	src/Engineering/Electrical/Pin.h	/^        virtual ~Pin();$/;"	p	class:Pin
Pion	include/Eternia/Engineering/Chemistry/Hadron/Pion.h	/^        Pion();$/;"	p	class:Pion
Pion	include/Eternia/Engineering/Chemistry/Hadron/Pion.h	/^class Pion {$/;"	c
Pion	src/Engineering/Chemistry/Hadron/Pion.h	/^        Pion();$/;"	p	class:Pion
Pion	src/Engineering/Chemistry/Hadron/Pion.h	/^class Pion {$/;"	c
Pion::Pion	include/Eternia/Engineering/Chemistry/Hadron/Pion.h	/^        Pion();$/;"	p	class:Pion
Pion::Pion	src/Engineering/Chemistry/Hadron/Pion.h	/^        Pion();$/;"	p	class:Pion
Pion::~Pion	include/Eternia/Engineering/Chemistry/Hadron/Pion.h	/^        virtual ~Pion();$/;"	p	class:Pion
Pion::~Pion	src/Engineering/Chemistry/Hadron/Pion.h	/^        virtual ~Pion();$/;"	p	class:Pion
Pion_h_	include/Eternia/Engineering/Chemistry/Hadron/Pion.h	/^#define Pion_h_$/;"	d
Pion_h_	src/Engineering/Chemistry/Hadron/Pion.h	/^#define Pion_h_$/;"	d
PlacementNumber	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        PType<int> PlacementNumber; \/\/ Used for rings and earings, each hand can have 5 rings.$/;"	m	class:MountedEquip
PlacementNumber	src/Gamelogic/Avatar/AvatarGear.h	/^        PType<int> PlacementNumber; \/\/ Used for rings and earings, each hand can have 5 rings.$/;"	m	class:MountedEquip
Planet	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Planet(long long seed, long long seed2);$/;"	p	class:Planet
Planet	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^class Planet : public VertexObject {$/;"	c
Planet	src/Gamelogic/Environment/Planet/Planet.cpp	/^Planet::Planet(long long seed, long long seed2) {$/;"	f	class:Planet
Planet	src/Gamelogic/Environment/Planet/Planet.h	/^    Planet(long long seed, long long seed2);$/;"	p	class:Planet
Planet	src/Gamelogic/Environment/Planet/Planet.h	/^class Planet : public VertexObject {$/;"	c
Planet::Planet	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Planet(long long seed, long long seed2);$/;"	p	class:Planet
Planet::Planet	src/Gamelogic/Environment/Planet/Planet.cpp	/^Planet::Planet(long long seed, long long seed2) {$/;"	f	class:Planet
Planet::Planet	src/Gamelogic/Environment/Planet/Planet.h	/^    Planet(long long seed, long long seed2);$/;"	p	class:Planet
Planet::atmosphere	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Atmosphere atmosphere; \/\/ defines planetary atmosphere$/;"	m	class:Planet
Planet::atmosphere	src/Gamelogic/Environment/Planet/Planet.h	/^    Atmosphere atmosphere; \/\/ defines planetary atmosphere$/;"	m	class:Planet
Planet::terrain	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Terrain terrain; \/\/ defines terrain and oceans, ect.$/;"	m	class:Planet
Planet::terrain	src/Gamelogic/Environment/Planet/Planet.h	/^    Terrain terrain; \/\/ defines terrain and oceans, ect.$/;"	m	class:Planet
Planet::~Planet	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    virtual ~Planet();$/;"	p	class:Planet
Planet::~Planet	src/Gamelogic/Environment/Planet/Planet.cpp	/^Planet::~Planet() {$/;"	f	class:Planet
Planet::~Planet	src/Gamelogic/Environment/Planet/Planet.h	/^    virtual ~Planet();$/;"	p	class:Planet
PlanetaryConstants	include/Eternia/constants.h	/^namespace PlanetaryConstants {$/;"	n
PlanetaryConstants	src/constants.h	/^namespace PlanetaryConstants {$/;"	n
PlanetaryConstants::TTBurning	include/Eternia/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
PlanetaryConstants::TTBurning	src/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
PlanetaryConstants::TTForest	include/Eternia/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
PlanetaryConstants::TTForest	src/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
PlanetaryConstants::TTGrassland	include/Eternia/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
PlanetaryConstants::TTGrassland	src/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
PlanetaryConstants::TTMarsh	include/Eternia/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
PlanetaryConstants::TTMarsh	src/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
PlanetaryConstants::TTOcean	include/Eternia/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
PlanetaryConstants::TTOcean	src/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
PlanetaryConstants::TerrainTypes	include/Eternia/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	g	namespace:PlanetaryConstants
PlanetaryConstants::TerrainTypes	src/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	g	namespace:PlanetaryConstants
Platinum	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Platinum = new Atom("Platinum", "Pt", 10, 6, 78, 117,77, 21.46,0.00000011, 0.072, 2041.4,4098, 0.133, 6, COLOR_Gray,ELEM_Transition);$/;"	v
Platinum	src/Engineering/Chemistry/elementals.h	/^const Atom Platinum = new Atom("Platinum", "Pt", 10, 6, 78, 117,77, 21.46,0.00000011, 0.072, 2041.4,4098, 0.133, 6, COLOR_Gray,ELEM_Transition);$/;"	v
Plutonium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Plutonium = new Atom("Plutonium", "Pu", 0, 7, 94, 150,93, 19.84,0.0000015, 0.006, 912.5,3501, UNKNOWN, 6, COLOR_Silver,ELEM_Actinide);$/;"	v
Plutonium	src/Engineering/Chemistry/elementals.h	/^const Atom Plutonium = new Atom("Plutonium", "Pu", 0, 7, 94, 150,93, 19.84,0.0000015, 0.006, 912.5,3501, UNKNOWN, 6, COLOR_Silver,ELEM_Actinide);$/;"	v
PointerType	include/Eternia/Serialization/SpecificSerializer.h	/^        PointerType();$/;"	p	class:PointerType
PointerType	include/Eternia/Serialization/SpecificSerializer.h	/^        PointerType(void* ptr, SSEType);$/;"	p	class:PointerType
PointerType	include/Eternia/Serialization/SpecificSerializer.h	/^class PointerType {$/;"	c
PointerType	src/Serialization/SpecificSerializer.cpp	/^PointerType::PointerType() {}$/;"	f	class:PointerType
PointerType	src/Serialization/SpecificSerializer.cpp	/^PointerType::PointerType(void* ptr, SSEType type) {$/;"	f	class:PointerType
PointerType	src/Serialization/SpecificSerializer.h	/^        PointerType();$/;"	p	class:PointerType
PointerType	src/Serialization/SpecificSerializer.h	/^        PointerType(void* ptr, SSEType);$/;"	p	class:PointerType
PointerType	src/Serialization/SpecificSerializer.h	/^class PointerType {$/;"	c
PointerType::PointerType	include/Eternia/Serialization/SpecificSerializer.h	/^        PointerType();$/;"	p	class:PointerType
PointerType::PointerType	include/Eternia/Serialization/SpecificSerializer.h	/^        PointerType(void* ptr, SSEType);$/;"	p	class:PointerType
PointerType::PointerType	src/Serialization/SpecificSerializer.cpp	/^PointerType::PointerType() {}$/;"	f	class:PointerType
PointerType::PointerType	src/Serialization/SpecificSerializer.cpp	/^PointerType::PointerType(void* ptr, SSEType type) {$/;"	f	class:PointerType
PointerType::PointerType	src/Serialization/SpecificSerializer.h	/^        PointerType();$/;"	p	class:PointerType
PointerType::PointerType	src/Serialization/SpecificSerializer.h	/^        PointerType(void* ptr, SSEType);$/;"	p	class:PointerType
PointerType::classSize	include/Eternia/Serialization/SpecificSerializer.h	/^        int classSize;$/;"	m	class:PointerType
PointerType::classSize	src/Serialization/SpecificSerializer.h	/^        int classSize;$/;"	m	class:PointerType
PointerType::ptr	include/Eternia/Serialization/SpecificSerializer.h	/^        void* ptr;$/;"	m	class:PointerType
PointerType::ptr	src/Serialization/SpecificSerializer.h	/^        void* ptr;$/;"	m	class:PointerType
PointerType::type	include/Eternia/Serialization/SpecificSerializer.h	/^        SSEType type;$/;"	m	class:PointerType
PointerType::type	src/Serialization/SpecificSerializer.h	/^        SSEType type;$/;"	m	class:PointerType
Polonium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Polonium = new Atom("Polonium", "Po", 16, 6, 84, 125,83, 9.32,0.00000043, UNKNOWN, 527,1235, UNKNOWN, 6, COLOR_Silver,ELEM_Metalloid);$/;"	v
Polonium	src/Engineering/Chemistry/elementals.h	/^const Atom Polonium = new Atom("Polonium", "Po", 16, 6, 84, 125,83, 9.32,0.00000043, UNKNOWN, 527,1235, UNKNOWN, 6, COLOR_Silver,ELEM_Metalloid);$/;"	v
PortableArmor	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        PortableArmor();$/;"	p	class:PortableArmor
PortableArmor	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^class PortableArmor {$/;"	c
PortableArmor	src/Gamelogic/Inventory/PortableArmor.h	/^        PortableArmor();$/;"	p	class:PortableArmor
PortableArmor	src/Gamelogic/Inventory/PortableArmor.h	/^class PortableArmor {$/;"	c
PortableArmor::PortableArmor	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        PortableArmor();$/;"	p	class:PortableArmor
PortableArmor::PortableArmor	src/Gamelogic/Inventory/PortableArmor.h	/^        PortableArmor();$/;"	p	class:PortableArmor
PortableArmor::helmet	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip helmet; \/\/ main visor helmet$/;"	m	class:PortableArmor
PortableArmor::helmet	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip helmet; \/\/ main visor helmet$/;"	m	class:PortableArmor
PortableArmor::left_arm	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip left_arm;$/;"	m	class:PortableArmor
PortableArmor::left_arm	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip left_arm;$/;"	m	class:PortableArmor
PortableArmor::left_foot	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip left_foot;$/;"	m	class:PortableArmor
PortableArmor::left_foot	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip left_foot;$/;"	m	class:PortableArmor
PortableArmor::leggings	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip leggings;$/;"	m	class:PortableArmor
PortableArmor::leggings	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip leggings;$/;"	m	class:PortableArmor
PortableArmor::reactor_cooling	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip reactor_cooling; \/\/ Cooling system for reactor$/;"	m	class:PortableArmor
PortableArmor::reactor_cooling	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip reactor_cooling; \/\/ Cooling system for reactor$/;"	m	class:PortableArmor
PortableArmor::reactor_core	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip reactor_core; \/\/ Specific reactor type (fuel, nuclear, anti-matter)$/;"	m	class:PortableArmor
PortableArmor::reactor_core	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip reactor_core; \/\/ Specific reactor type (fuel, nuclear, anti-matter)$/;"	m	class:PortableArmor
PortableArmor::right_arm	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip right_arm;$/;"	m	class:PortableArmor
PortableArmor::right_arm	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip right_arm;$/;"	m	class:PortableArmor
PortableArmor::right_foot	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip right_foot;$/;"	m	class:PortableArmor
PortableArmor::right_foot	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip right_foot;$/;"	m	class:PortableArmor
PortableArmor::torso	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip torso;$/;"	m	class:PortableArmor
PortableArmor::torso	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip torso;$/;"	m	class:PortableArmor
Positron	include/Eternia/Engineering/Chemistry/Hadron/Positron.h	/^        Positron();$/;"	p	class:Positron
Positron	include/Eternia/Engineering/Chemistry/Hadron/Positron.h	/^class Positron {$/;"	c
Positron	src/Engineering/Chemistry/Hadron/Positron.h	/^        Positron();$/;"	p	class:Positron
Positron	src/Engineering/Chemistry/Hadron/Positron.h	/^class Positron {$/;"	c
Positron::Positron	include/Eternia/Engineering/Chemistry/Hadron/Positron.h	/^        Positron();$/;"	p	class:Positron
Positron::Positron	src/Engineering/Chemistry/Hadron/Positron.h	/^        Positron();$/;"	p	class:Positron
Positron::~Positron	include/Eternia/Engineering/Chemistry/Hadron/Positron.h	/^        virtual ~Positron();$/;"	p	class:Positron
Positron::~Positron	src/Engineering/Chemistry/Hadron/Positron.h	/^        virtual ~Positron();$/;"	p	class:Positron
Positron_h_	include/Eternia/Engineering/Chemistry/Hadron/Positron.h	/^#define Positron_h_$/;"	d
Positron_h_	src/Engineering/Chemistry/Hadron/Positron.h	/^#define Positron_h_$/;"	d
Potassium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Potassium = new Atom("Potassium", "K", 1, 4, 19, 20,18, 0.862,0.00000007, 0.1, 336.53,1032, 0.757, 1, COLOR_Silver,ELEM_Alkali);$/;"	v
Potassium	src/Engineering/Chemistry/elementals.h	/^const Atom Potassium = new Atom("Potassium", "K", 1, 4, 19, 20,18, 0.862,0.00000007, 0.1, 336.53,1032, 0.757, 1, COLOR_Silver,ELEM_Alkali);$/;"	v
PotentialGravEnergy	include/Eternia/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
PotentialGravEnergy	src/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
PotentialSpringEnergy	include/Eternia/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
PotentialSpringEnergy	src/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
PowerPlant	include/Eternia/Gamelogic/Buildings/Power/PowerPlant.h	/^    PowerPlant();$/;"	p	class:PowerPlant
PowerPlant	include/Eternia/Gamelogic/Buildings/Power/PowerPlant.h	/^class PowerPlant {$/;"	c
PowerPlant	src/Gamelogic/Buildings/Power/PowerPlant.cpp	/^PowerPlant::PowerPlant() {$/;"	f	class:PowerPlant
PowerPlant	src/Gamelogic/Buildings/Power/PowerPlant.h	/^    PowerPlant();$/;"	p	class:PowerPlant
PowerPlant	src/Gamelogic/Buildings/Power/PowerPlant.h	/^class PowerPlant {$/;"	c
PowerPlant::PowerPlant	include/Eternia/Gamelogic/Buildings/Power/PowerPlant.h	/^    PowerPlant();$/;"	p	class:PowerPlant
PowerPlant::PowerPlant	src/Gamelogic/Buildings/Power/PowerPlant.cpp	/^PowerPlant::PowerPlant() {$/;"	f	class:PowerPlant
PowerPlant::PowerPlant	src/Gamelogic/Buildings/Power/PowerPlant.h	/^    PowerPlant();$/;"	p	class:PowerPlant
PowerPlant::~PowerPlant	include/Eternia/Gamelogic/Buildings/Power/PowerPlant.h	/^    virtual ~PowerPlant();$/;"	p	class:PowerPlant
PowerPlant::~PowerPlant	src/Gamelogic/Buildings/Power/PowerPlant.cpp	/^PowerPlant::~PowerPlant() {$/;"	f	class:PowerPlant
PowerPlant::~PowerPlant	src/Gamelogic/Buildings/Power/PowerPlant.h	/^    virtual ~PowerPlant();$/;"	p	class:PowerPlant
PowerValue	include/Eternia/Engineering/Electrical/PowerValue.h	/^        PowerValue(double Amperes, double Watts, AMPS); \/\/ Set wattage knowning the watts and amps$/;"	p	class:PowerValue
PowerValue	include/Eternia/Engineering/Electrical/PowerValue.h	/^        PowerValue(double Voltage, double Amperes); \/\/ set wattage knowning the voltage and amps$/;"	p	class:PowerValue
PowerValue	include/Eternia/Engineering/Electrical/PowerValue.h	/^        PowerValue(double Voltage, double Watts, VOLTS); \/\/ Set wattage knowning the watts and voltage$/;"	p	class:PowerValue
PowerValue	include/Eternia/Engineering/Electrical/PowerValue.h	/^class PowerValue {$/;"	c
PowerValue	src/Engineering/Electrical/PowerValue.cpp	/^PowerValue::PowerValue(double Amperes, double Watts, AMPS) {$/;"	f	class:PowerValue
PowerValue	src/Engineering/Electrical/PowerValue.cpp	/^PowerValue::PowerValue(double Voltage, double Amperes) {$/;"	f	class:PowerValue
PowerValue	src/Engineering/Electrical/PowerValue.cpp	/^PowerValue::PowerValue(double Voltage, double Watts, VOLTS) {$/;"	f	class:PowerValue
PowerValue	src/Engineering/Electrical/PowerValue.h	/^        PowerValue(double Amperes, double Watts, AMPS); \/\/ Set wattage knowning the watts and amps$/;"	p	class:PowerValue
PowerValue	src/Engineering/Electrical/PowerValue.h	/^        PowerValue(double Voltage, double Amperes); \/\/ set wattage knowning the voltage and amps$/;"	p	class:PowerValue
PowerValue	src/Engineering/Electrical/PowerValue.h	/^        PowerValue(double Voltage, double Watts, VOLTS); \/\/ Set wattage knowning the watts and voltage$/;"	p	class:PowerValue
PowerValue	src/Engineering/Electrical/PowerValue.h	/^class PowerValue {$/;"	c
PowerValue::PowerValue	include/Eternia/Engineering/Electrical/PowerValue.h	/^        PowerValue(double Amperes, double Watts, AMPS); \/\/ Set wattage knowning the watts and amps$/;"	p	class:PowerValue
PowerValue::PowerValue	include/Eternia/Engineering/Electrical/PowerValue.h	/^        PowerValue(double Voltage, double Amperes); \/\/ set wattage knowning the voltage and amps$/;"	p	class:PowerValue
PowerValue::PowerValue	include/Eternia/Engineering/Electrical/PowerValue.h	/^        PowerValue(double Voltage, double Watts, VOLTS); \/\/ Set wattage knowning the watts and voltage$/;"	p	class:PowerValue
PowerValue::PowerValue	src/Engineering/Electrical/PowerValue.cpp	/^PowerValue::PowerValue(double Amperes, double Watts, AMPS) {$/;"	f	class:PowerValue
PowerValue::PowerValue	src/Engineering/Electrical/PowerValue.cpp	/^PowerValue::PowerValue(double Voltage, double Amperes) {$/;"	f	class:PowerValue
PowerValue::PowerValue	src/Engineering/Electrical/PowerValue.cpp	/^PowerValue::PowerValue(double Voltage, double Watts, VOLTS) {$/;"	f	class:PowerValue
PowerValue::PowerValue	src/Engineering/Electrical/PowerValue.h	/^        PowerValue(double Amperes, double Watts, AMPS); \/\/ Set wattage knowning the watts and amps$/;"	p	class:PowerValue
PowerValue::PowerValue	src/Engineering/Electrical/PowerValue.h	/^        PowerValue(double Voltage, double Amperes); \/\/ set wattage knowning the voltage and amps$/;"	p	class:PowerValue
PowerValue::PowerValue	src/Engineering/Electrical/PowerValue.h	/^        PowerValue(double Voltage, double Watts, VOLTS); \/\/ Set wattage knowning the watts and voltage$/;"	p	class:PowerValue
PowerValue::amperage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double amperage; \/\/ Applied amperes$/;"	m	class:PowerValue
PowerValue::amperage	src/Engineering/Electrical/PowerValue.h	/^        double amperage; \/\/ Applied amperes$/;"	m	class:PowerValue
PowerValue::getAmperage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double getAmperage();$/;"	p	class:PowerValue
PowerValue::getAmperage	src/Engineering/Electrical/PowerValue.cpp	/^double PowerValue::getAmperage() {$/;"	f	class:PowerValue
PowerValue::getAmperage	src/Engineering/Electrical/PowerValue.h	/^        double getAmperage();$/;"	p	class:PowerValue
PowerValue::getResistance	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double getResistance(); \/\/ gets the known resistance$/;"	p	class:PowerValue
PowerValue::getResistance	src/Engineering/Electrical/PowerValue.cpp	/^double PowerValue::getResistance() {$/;"	f	class:PowerValue
PowerValue::getResistance	src/Engineering/Electrical/PowerValue.h	/^        double getResistance(); \/\/ gets the known resistance$/;"	p	class:PowerValue
PowerValue::getVoltage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double getVoltage();$/;"	p	class:PowerValue
PowerValue::getVoltage	src/Engineering/Electrical/PowerValue.cpp	/^double PowerValue::getVoltage() {$/;"	f	class:PowerValue
PowerValue::getVoltage	src/Engineering/Electrical/PowerValue.h	/^        double getVoltage();$/;"	p	class:PowerValue
PowerValue::getWatts	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double getWatts();$/;"	p	class:PowerValue
PowerValue::getWatts	src/Engineering/Electrical/PowerValue.cpp	/^double PowerValue::getWatts() {$/;"	f	class:PowerValue
PowerValue::getWatts	src/Engineering/Electrical/PowerValue.h	/^        double getWatts();$/;"	p	class:PowerValue
PowerValue::setAmperage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        void setAmperage(double Amperes);$/;"	p	class:PowerValue
PowerValue::setAmperage	src/Engineering/Electrical/PowerValue.cpp	/^void PowerValue::setAmperage(double Amperes) {$/;"	f	class:PowerValue
PowerValue::setAmperage	src/Engineering/Electrical/PowerValue.h	/^        void setAmperage(double Amperes);$/;"	p	class:PowerValue
PowerValue::setPower	include/Eternia/Engineering/Electrical/PowerValue.h	/^        void setPower(); \/\/ Power Law$/;"	p	class:PowerValue
PowerValue::setPower	src/Engineering/Electrical/PowerValue.cpp	/^void PowerValue::setPower() {$/;"	f	class:PowerValue
PowerValue::setPower	src/Engineering/Electrical/PowerValue.h	/^        void setPower(); \/\/ Power Law$/;"	p	class:PowerValue
PowerValue::setVoltage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        void setVoltage(double Voltage);$/;"	p	class:PowerValue
PowerValue::setVoltage	src/Engineering/Electrical/PowerValue.cpp	/^void PowerValue::setVoltage(double Voltage) {$/;"	f	class:PowerValue
PowerValue::setVoltage	src/Engineering/Electrical/PowerValue.h	/^        void setVoltage(double Voltage);$/;"	p	class:PowerValue
PowerValue::voltage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double voltage; \/\/ Applied voltage$/;"	m	class:PowerValue
PowerValue::voltage	src/Engineering/Electrical/PowerValue.h	/^        double voltage; \/\/ Applied voltage$/;"	m	class:PowerValue
PowerValue::wattage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double wattage; \/\/ Raw wattage in this point on the curcuit. (Auto-assigned)$/;"	m	class:PowerValue
PowerValue::wattage	src/Engineering/Electrical/PowerValue.h	/^        double wattage; \/\/ Raw wattage in this point on the curcuit. (Auto-assigned)$/;"	m	class:PowerValue
PowerValue::~PowerValue	include/Eternia/Engineering/Electrical/PowerValue.h	/^        virtual ~PowerValue();$/;"	p	class:PowerValue
PowerValue::~PowerValue	src/Engineering/Electrical/PowerValue.cpp	/^PowerValue::~PowerValue() {$/;"	f	class:PowerValue
PowerValue::~PowerValue	src/Engineering/Electrical/PowerValue.h	/^        virtual ~PowerValue();$/;"	p	class:PowerValue
PowerValue_h_	include/Eternia/Engineering/Electrical/PowerValue.h	/^#define PowerValue_h_$/;"	d
PowerValue_h_	src/Engineering/Electrical/PowerValue.h	/^#define PowerValue_h_$/;"	d
Praseodymium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Praseodymium = new Atom("Praseodymium", "Pr", 0, 6, 59, 84,58, 6.773,0.0000007, 0.013, 1208,3793, 0.193, 4, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Praseodymium	src/Engineering/Chemistry/elementals.h	/^const Atom Praseodymium = new Atom("Praseodymium", "Pr", 0, 6, 59, 84,58, 6.773,0.0000007, 0.013, 1208,3793, 0.193, 4, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Prev	include/Eternia/Data/Queue.h	/^        QueueNode *Prev, *Next;$/;"	m	class:QueueNode
Prev	src/Data/Queue.h	/^        QueueNode *Prev, *Next;$/;"	m	class:QueueNode
PrevSibling	include/Eternia/Data/FileSystem.h	/^        FileStructureNode *Sibling,*PrevSibling;$/;"	m	class:FileStructureNode
PrevSibling	include/Eternia/Data/TreeList.h	/^        TreeNode *Sibling, *PrevSibling;$/;"	m	class:TreeNode
PrevSibling	src/Data/FileSystem.h	/^        FileStructureNode *Sibling,*PrevSibling;$/;"	m	class:FileStructureNode
PrevSibling	src/Data/TreeList.h	/^        TreeNode *Sibling, *PrevSibling;$/;"	m	class:TreeNode
PrimNULL	include/Eternia/Math/Eval.h	/^enum nxx {PrimNULL = -99999};$/;"	e	enum:nxx
PrimNULL	src/Math/Eval.h	/^enum nxx {PrimNULL = -99999};$/;"	e	enum:nxx
PriorityItem	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem();$/;"	p	class:PriorityItem
PriorityItem	include/Eternia/Data/PriorityQueue.h	/^class PriorityItem {$/;"	c
PriorityItem	src/Data/PriorityQueue.cpp	/^PriorityItem::PriorityItem() {$/;"	f	class:PriorityItem
PriorityItem	src/Data/PriorityQueue.h	/^        PriorityItem();$/;"	p	class:PriorityItem
PriorityItem	src/Data/PriorityQueue.h	/^class PriorityItem {$/;"	c
PriorityItem::PriorityItem	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem();$/;"	p	class:PriorityItem
PriorityItem::PriorityItem	src/Data/PriorityQueue.cpp	/^PriorityItem::PriorityItem() {$/;"	f	class:PriorityItem
PriorityItem::PriorityItem	src/Data/PriorityQueue.h	/^        PriorityItem();$/;"	p	class:PriorityItem
PriorityItem::data	include/Eternia/Data/PriorityQueue.h	/^        void* data;$/;"	m	class:PriorityItem
PriorityItem::data	src/Data/PriorityQueue.h	/^        void* data;$/;"	m	class:PriorityItem
PriorityItem::left	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem *left, *right, *parent; \/\/ node selections.$/;"	m	class:PriorityItem
PriorityItem::left	src/Data/PriorityQueue.h	/^        PriorityItem *left, *right, *parent; \/\/ node selections.$/;"	m	class:PriorityItem
PriorityItem::parent	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem *left, *right, *parent; \/\/ node selections.$/;"	m	class:PriorityItem
PriorityItem::parent	src/Data/PriorityQueue.h	/^        PriorityItem *left, *right, *parent; \/\/ node selections.$/;"	m	class:PriorityItem
PriorityItem::priority	include/Eternia/Data/PriorityQueue.h	/^        unsigned long priority;$/;"	m	class:PriorityItem
PriorityItem::priority	src/Data/PriorityQueue.h	/^        unsigned long priority;$/;"	m	class:PriorityItem
PriorityItem::right	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem *left, *right, *parent; \/\/ node selections.$/;"	m	class:PriorityItem
PriorityItem::right	src/Data/PriorityQueue.h	/^        PriorityItem *left, *right, *parent; \/\/ node selections.$/;"	m	class:PriorityItem
PriorityItem::~PriorityItem	include/Eternia/Data/PriorityQueue.h	/^        virtual ~PriorityItem();$/;"	p	class:PriorityItem
PriorityItem::~PriorityItem	src/Data/PriorityQueue.cpp	/^PriorityItem::~PriorityItem() {$/;"	f	class:PriorityItem
PriorityItem::~PriorityItem	src/Data/PriorityQueue.h	/^        virtual ~PriorityItem();$/;"	p	class:PriorityItem
PriorityQueue	include/Eternia/Data/PriorityQueue.h	/^        PriorityQueue();$/;"	p	class:PriorityQueue
PriorityQueue	include/Eternia/Data/PriorityQueue.h	/^class PriorityQueue {$/;"	c
PriorityQueue	src/Data/PriorityQueue.cpp	/^PriorityQueue::PriorityQueue() {$/;"	f	class:PriorityQueue
PriorityQueue	src/Data/PriorityQueue.h	/^        PriorityQueue();$/;"	p	class:PriorityQueue
PriorityQueue	src/Data/PriorityQueue.h	/^class PriorityQueue {$/;"	c
PriorityQueue::PriorityQueue	include/Eternia/Data/PriorityQueue.h	/^        PriorityQueue();$/;"	p	class:PriorityQueue
PriorityQueue::PriorityQueue	src/Data/PriorityQueue.cpp	/^PriorityQueue::PriorityQueue() {$/;"	f	class:PriorityQueue
PriorityQueue::PriorityQueue	src/Data/PriorityQueue.h	/^        PriorityQueue();$/;"	p	class:PriorityQueue
PriorityQueue::clearAll	include/Eternia/Data/PriorityQueue.h	/^        void clearAll(); \/\/ clear all items$/;"	p	class:PriorityQueue
PriorityQueue::clearAll	src/Data/PriorityQueue.cpp	/^void PriorityQueue::clearAll() {$/;"	f	class:PriorityQueue
PriorityQueue::clearAll	src/Data/PriorityQueue.h	/^        void clearAll(); \/\/ clear all items$/;"	p	class:PriorityQueue
PriorityQueue::dataswap	include/Eternia/Data/PriorityQueue.h	/^        void dataswap(PriorityItem *a, PriorityItem *b); \/\/ swap data between two priority items.$/;"	p	class:PriorityQueue
PriorityQueue::dataswap	src/Data/PriorityQueue.cpp	/^void PriorityQueue::dataswap(PriorityItem *a, PriorityItem *b) {$/;"	f	class:PriorityQueue
PriorityQueue::dataswap	src/Data/PriorityQueue.h	/^        void dataswap(PriorityItem *a, PriorityItem *b); \/\/ swap data between two priority items.$/;"	p	class:PriorityQueue
PriorityQueue::depth	include/Eternia/Data/PriorityQueue.h	/^        int depth(PriorityItem* c, int initial); \/\/ find max depth of item c from c's location.$/;"	p	class:PriorityQueue
PriorityQueue::depth	src/Data/PriorityQueue.cpp	/^int PriorityQueue::depth(PriorityItem* c, int initial) {$/;"	f	class:PriorityQueue
PriorityQueue::depth	src/Data/PriorityQueue.h	/^        int depth(PriorityItem* c, int initial); \/\/ find max depth of item c from c's location.$/;"	p	class:PriorityQueue
PriorityQueue::downheap	include/Eternia/Data/PriorityQueue.h	/^        void downheap(PriorityItem* current);$/;"	p	class:PriorityQueue
PriorityQueue::downheap	src/Data/PriorityQueue.cpp	/^void PriorityQueue::downheap(PriorityItem* current) {$/;"	f	class:PriorityQueue
PriorityQueue::downheap	src/Data/PriorityQueue.h	/^        void downheap(PriorityItem* current);$/;"	p	class:PriorityQueue
PriorityQueue::empty	include/Eternia/Data/PriorityQueue.h	/^        bool empty(); \/\/ returns whether the size is zero, or the head is empty.$/;"	p	class:PriorityQueue
PriorityQueue::empty	src/Data/PriorityQueue.cpp	/^bool PriorityQueue::empty() {$/;"	f	class:PriorityQueue
PriorityQueue::empty	src/Data/PriorityQueue.h	/^        bool empty(); \/\/ returns whether the size is zero, or the head is empty.$/;"	p	class:PriorityQueue
PriorityQueue::findinsertionposition	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem* findinsertionposition(PriorityItem* current); \/\/ finds the correct insertion position.$/;"	p	class:PriorityQueue
PriorityQueue::findinsertionposition	src/Data/PriorityQueue.cpp	/^PriorityItem* PriorityQueue::findinsertionposition(PriorityItem* current) {$/;"	f	class:PriorityQueue
PriorityQueue::findinsertionposition	src/Data/PriorityQueue.h	/^        PriorityItem* findinsertionposition(PriorityItem* current); \/\/ finds the correct insertion position.$/;"	p	class:PriorityQueue
PriorityQueue::findlastinsertionposition	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem* findlastinsertionposition(PriorityItem* current); \/\/ finds the LAST available tree leaf.$/;"	p	class:PriorityQueue
PriorityQueue::findlastinsertionposition	src/Data/PriorityQueue.cpp	/^PriorityItem* PriorityQueue::findlastinsertionposition(PriorityItem* current) {$/;"	f	class:PriorityQueue
PriorityQueue::findlastinsertionposition	src/Data/PriorityQueue.h	/^        PriorityItem* findlastinsertionposition(PriorityItem* current); \/\/ finds the LAST available tree leaf.$/;"	p	class:PriorityQueue
PriorityQueue::fullAtDepth	include/Eternia/Data/PriorityQueue.h	/^        bool fullAtDepth(PriorityItem* c); \/\/ determines if the branch has even left and right bottoms.$/;"	p	class:PriorityQueue
PriorityQueue::fullAtDepth	src/Data/PriorityQueue.cpp	/^bool PriorityQueue::fullAtDepth(PriorityItem* c) {$/;"	f	class:PriorityQueue
PriorityQueue::fullAtDepth	src/Data/PriorityQueue.h	/^        bool fullAtDepth(PriorityItem* c); \/\/ determines if the branch has even left and right bottoms.$/;"	p	class:PriorityQueue
PriorityQueue::getSize	include/Eternia/Data/PriorityQueue.h	/^        int getSize(); \/\/ returns the total size$/;"	p	class:PriorityQueue
PriorityQueue::getSize	src/Data/PriorityQueue.cpp	/^int PriorityQueue::getSize() {$/;"	f	class:PriorityQueue
PriorityQueue::getSize	src/Data/PriorityQueue.h	/^        int getSize(); \/\/ returns the total size$/;"	p	class:PriorityQueue
PriorityQueue::head	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem *head;$/;"	m	class:PriorityQueue
PriorityQueue::head	src/Data/PriorityQueue.h	/^        PriorityItem *head;$/;"	m	class:PriorityQueue
PriorityQueue::insert	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem* insert(unsigned long priority, void* data); \/\/ insert item into list.$/;"	p	class:PriorityQueue
PriorityQueue::insert	src/Data/PriorityQueue.cpp	/^PriorityItem* PriorityQueue::insert(unsigned long priority, void* data) {$/;"	f	class:PriorityQueue
PriorityQueue::insert	src/Data/PriorityQueue.h	/^        PriorityItem* insert(unsigned long priority, void* data); \/\/ insert item into list.$/;"	p	class:PriorityQueue
PriorityQueue::remove	include/Eternia/Data/PriorityQueue.h	/^        void remove(PriorityItem* item); \/\/ remove a specific item$/;"	p	class:PriorityQueue
PriorityQueue::remove	src/Data/PriorityQueue.cpp	/^void PriorityQueue::remove(PriorityItem* item) {$/;"	f	class:PriorityQueue
PriorityQueue::remove	src/Data/PriorityQueue.h	/^        void remove(PriorityItem* item); \/\/ remove a specific item$/;"	p	class:PriorityQueue
PriorityQueue::removeMin	include/Eternia/Data/PriorityQueue.h	/^        void* removeMin(); \/\/ removes the minimum item$/;"	p	class:PriorityQueue
PriorityQueue::removeMin	src/Data/PriorityQueue.cpp	/^void* PriorityQueue::removeMin() {$/;"	f	class:PriorityQueue
PriorityQueue::removeMin	src/Data/PriorityQueue.h	/^        void* removeMin(); \/\/ removes the minimum item$/;"	p	class:PriorityQueue
PriorityQueue::replaceKey	include/Eternia/Data/PriorityQueue.h	/^        bool replaceKey(PriorityItem* current, void* at, unsigned long key); \/\/ replaces a priority via data key.$/;"	p	class:PriorityQueue
PriorityQueue::replaceKey	src/Data/PriorityQueue.cpp	/^bool PriorityQueue::replaceKey(PriorityItem* current, void* at, unsigned long key) {$/;"	f	class:PriorityQueue
PriorityQueue::replaceKey	src/Data/PriorityQueue.h	/^        bool replaceKey(PriorityItem* current, void* at, unsigned long key); \/\/ replaces a priority via data key.$/;"	p	class:PriorityQueue
PriorityQueue::size	include/Eternia/Data/PriorityQueue.h	/^        int size;$/;"	m	class:PriorityQueue
PriorityQueue::size	src/Data/PriorityQueue.h	/^        int size;$/;"	m	class:PriorityQueue
PriorityQueue::top	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem* top(); \/\/ returns the head item.$/;"	p	class:PriorityQueue
PriorityQueue::top	src/Data/PriorityQueue.cpp	/^PriorityItem* PriorityQueue::top() {$/;"	f	class:PriorityQueue
PriorityQueue::top	src/Data/PriorityQueue.h	/^        PriorityItem* top(); \/\/ returns the head item.$/;"	p	class:PriorityQueue
PriorityQueue::upheap	include/Eternia/Data/PriorityQueue.h	/^        void upheap(PriorityItem* current); \/\/ sort through list to make sure that it is sorted (Bottom up)$/;"	p	class:PriorityQueue
PriorityQueue::upheap	src/Data/PriorityQueue.cpp	/^void PriorityQueue::upheap(PriorityItem* current) {$/;"	f	class:PriorityQueue
PriorityQueue::upheap	src/Data/PriorityQueue.h	/^        void upheap(PriorityItem* current); \/\/ sort through list to make sure that it is sorted (Bottom up)$/;"	p	class:PriorityQueue
PriorityQueue::~PriorityQueue	include/Eternia/Data/PriorityQueue.h	/^        virtual ~PriorityQueue();$/;"	p	class:PriorityQueue
PriorityQueue::~PriorityQueue	src/Data/PriorityQueue.cpp	/^PriorityQueue::~PriorityQueue() {$/;"	f	class:PriorityQueue
PriorityQueue::~PriorityQueue	src/Data/PriorityQueue.h	/^        virtual ~PriorityQueue();$/;"	p	class:PriorityQueue
Probability	include/Eternia/Math/statistics/Probability.h	/^class Probability {$/;"	c
Probability	src/Math/statistics/Probability.h	/^class Probability {$/;"	c
ProgTYPE	include/Eternia/Programming/Program.h	/^enum ProgTYPE {PTX_Graphical, PTX_Textual};$/;"	g
ProgTYPE	src/Programming/Program.h	/^enum ProgTYPE {PTX_Graphical, PTX_Textual};$/;"	g
Program	include/Eternia/Programming/Program.h	/^        Program(int inslots, int actionslots, int outslots);$/;"	p	class:Program
Program	include/Eternia/Programming/Program.h	/^class Program {$/;"	c
Program	src/Programming/Program.cpp	/^Program::Program(int inslots, int actionslots, int outslots) {$/;"	f	class:Program
Program	src/Programming/Program.h	/^        Program(int inslots, int actionslots, int outslots);$/;"	p	class:Program
Program	src/Programming/Program.h	/^class Program {$/;"	c
Program::Program	include/Eternia/Programming/Program.h	/^        Program(int inslots, int actionslots, int outslots);$/;"	p	class:Program
Program::Program	src/Programming/Program.cpp	/^Program::Program(int inslots, int actionslots, int outslots) {$/;"	f	class:Program
Program::Program	src/Programming/Program.h	/^        Program(int inslots, int actionslots, int outslots);$/;"	p	class:Program
Program::actions	include/Eternia/Programming/Program.h	/^        VProgramVariable *inputs, *actions;$/;"	m	class:Program
Program::actions	src/Programming/Program.h	/^        VProgramVariable *inputs, *actions;$/;"	m	class:Program
Program::actionslots	include/Eternia/Programming/Program.h	/^        int inslots, actionslots, outslots;$/;"	m	class:Program
Program::actionslots	src/Programming/Program.h	/^        int inslots, actionslots, outslots;$/;"	m	class:Program
Program::compareVars	include/Eternia/Programming/Program.h	/^        bool compareVars(VProgramNode* node);$/;"	p	class:Program
Program::compareVars	src/Programming/Program.h	/^        bool compareVars(VProgramNode* node);$/;"	p	class:Program
Program::compareVars	src/Programming/Visual/VisualProgram.cpp	/^bool Program::compareVars(VProgramNode* node) {$/;"	f	class:Program
Program::display	include/Eternia/Programming/Program.h	/^        void (*display)(VProgramVariable*); \/\/ display to show info. (Either debugger or something else)$/;"	m	class:Program
Program::display	src/Programming/Program.h	/^        void (*display)(VProgramVariable*); \/\/ display to show info. (Either debugger or something else)$/;"	m	class:Program
Program::getVariable	include/Eternia/Programming/Program.h	/^        VProgramVariable* getVariable(int slot, VarTYPE typex);$/;"	p	class:Program
Program::getVariable	src/Programming/Program.h	/^        VProgramVariable* getVariable(int slot, VarTYPE typex);$/;"	p	class:Program
Program::getVariable	src/Programming/Visual/VisualProgram.cpp	/^VProgramVariable* Program::getVariable(int slot, VarTYPE typex) {$/;"	f	class:Program
Program::head	include/Eternia/Programming/Program.h	/^        VProgramNode* head; \/\/ First graphical node$/;"	m	class:Program
Program::head	src/Programming/Program.h	/^        VProgramNode* head; \/\/ First graphical node$/;"	m	class:Program
Program::input	include/Eternia/Programming/Program.h	/^        void input(int slot, VProgramVariable* value); \/\/ sets the value of a variable$/;"	p	class:Program
Program::input	src/Programming/Program.h	/^        void input(int slot, VProgramVariable* value); \/\/ sets the value of a variable$/;"	p	class:Program
Program::input	src/Programming/Visual/VisualProgram.cpp	/^void Program::input(int slot, VProgramVariable* var) {$/;"	f	class:Program
Program::inputs	include/Eternia/Programming/Program.h	/^        VProgramVariable *inputs, *actions;$/;"	m	class:Program
Program::inputs	src/Programming/Program.h	/^        VProgramVariable *inputs, *actions;$/;"	m	class:Program
Program::inslots	include/Eternia/Programming/Program.h	/^        int inslots, actionslots, outslots;$/;"	m	class:Program
Program::inslots	src/Programming/Program.h	/^        int inslots, actionslots, outslots;$/;"	m	class:Program
Program::loadNodes	include/Eternia/Programming/Program.h	/^        void loadNodes(CharString* nodelist); \/\/ Load program nodes$/;"	p	class:Program
Program::loadNodes	src/Programming/Program.h	/^        void loadNodes(CharString* nodelist); \/\/ Load program nodes$/;"	p	class:Program
Program::loadNodes	src/Programming/Visual/VisualProgram.cpp	/^void Program::loadNodes(CharString* nodelist) {$/;"	f	class:Program
Program::locals	include/Eternia/Programming/Program.h	/^        LinkedList<VProgramVariable> locals; \/\/ Local variables for the program.$/;"	m	class:Program
Program::locals	src/Programming/Program.h	/^        LinkedList<VProgramVariable> locals; \/\/ Local variables for the program.$/;"	m	class:Program
Program::loops	include/Eternia/Programming/Program.h	/^        int loops; \/\/ Number of times a conditional has looped.$/;"	m	class:Program
Program::loops	src/Programming/Program.h	/^        int loops; \/\/ Number of times a conditional has looped.$/;"	m	class:Program
Program::nodeidinc	include/Eternia/Programming/Program.h	/^        int nodeidinc; \/\/ increments every time a node is added$/;"	m	class:Program
Program::nodeidinc	src/Programming/Program.h	/^        int nodeidinc; \/\/ increments every time a node is added$/;"	m	class:Program
Program::outputs	include/Eternia/Programming/Program.h	/^        void (*outputs)(VProgramVariable*);$/;"	m	class:Program
Program::outputs	src/Programming/Program.h	/^        void (*outputs)(VProgramVariable*);$/;"	m	class:Program
Program::outslots	include/Eternia/Programming/Program.h	/^        int inslots, actionslots, outslots;$/;"	m	class:Program
Program::outslots	src/Programming/Program.h	/^        int inslots, actionslots, outslots;$/;"	m	class:Program
Program::ptype	include/Eternia/Programming/Program.h	/^        ProgTYPE ptype;$/;"	m	class:Program
Program::ptype	src/Programming/Program.h	/^        ProgTYPE ptype;$/;"	m	class:Program
Program::resetInput	include/Eternia/Programming/Program.h	/^        void resetInput(int slot); \/\/ Reset an input slot$/;"	p	class:Program
Program::resetInput	src/Programming/Program.h	/^        void resetInput(int slot); \/\/ Reset an input slot$/;"	p	class:Program
Program::resetInput	src/Programming/Visual/VisualProgram.cpp	/^void Program::resetInput(int slot) {$/;"	f	class:Program
Program::runs	include/Eternia/Programming/Program.h	/^        int runs; \/\/ number of times this was executed.$/;"	m	class:Program
Program::runs	src/Programming/Program.h	/^        int runs; \/\/ number of times this was executed.$/;"	m	class:Program
Program::setVariable	include/Eternia/Programming/Program.h	/^        VProgramVariable* setVariable(int slot, VarTYPE typex, VProgramVariable* var);$/;"	p	class:Program
Program::setVariable	src/Programming/Program.h	/^        VProgramVariable* setVariable(int slot, VarTYPE typex, VProgramVariable* var);$/;"	p	class:Program
Program::setVariable	src/Programming/Visual/VisualProgram.cpp	/^VProgramVariable* Program::setVariable(int slot, VarTYPE typex, VProgramVariable* var) {$/;"	f	class:Program
Program::tick	include/Eternia/Programming/Program.h	/^        ProgramError* tick(); \/\/ Run program from Head (Or textual)$/;"	p	class:Program
Program::tick	src/Programming/Program.cpp	/^ProgramError* Program::tick() {$/;"	f	class:Program
Program::tick	src/Programming/Program.h	/^        ProgramError* tick(); \/\/ Run program from Head (Or textual)$/;"	p	class:Program
Program::tickGNode	include/Eternia/Programming/Program.h	/^        VProgramError* tickGNode(VProgramNode*,VProgramError*);$/;"	p	class:Program
Program::tickGNode	src/Programming/Program.h	/^        VProgramError* tickGNode(VProgramNode*,VProgramError*);$/;"	p	class:Program
Program::tickGNode	src/Programming/Visual/VisualProgram.cpp	/^VProgramError* Program::tickGNode(VProgramNode* node, VProgramError* error) {$/;"	f	class:Program
ProgramError	include/Eternia/Programming/ProgramError.h	/^        ProgramError();$/;"	p	class:ProgramError
ProgramError	include/Eternia/Programming/ProgramError.h	/^class ProgramError {$/;"	c
ProgramError	src/Programming/ProgramError.cpp	/^ProgramError::ProgramError() {$/;"	f	class:ProgramError
ProgramError	src/Programming/ProgramError.h	/^        ProgramError();$/;"	p	class:ProgramError
ProgramError	src/Programming/ProgramError.h	/^class ProgramError {$/;"	c
ProgramError::ProgramError	include/Eternia/Programming/ProgramError.h	/^        ProgramError();$/;"	p	class:ProgramError
ProgramError::ProgramError	src/Programming/ProgramError.cpp	/^ProgramError::ProgramError() {$/;"	f	class:ProgramError
ProgramError::ProgramError	src/Programming/ProgramError.h	/^        ProgramError();$/;"	p	class:ProgramError
Promethium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Promethium = new Atom("Promethium", "Pm", 0, 6, 61, 88,60, 7.26,0.00000075, 0.015, 1315,3273, UNKNOWN, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Promethium	src/Engineering/Chemistry/elementals.h	/^const Atom Promethium = new Atom("Promethium", "Pm", 0, 6, 61, 88,60, 7.26,0.00000075, 0.015, 1315,3273, UNKNOWN, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Protactinium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Protactinium = new Atom("Protactinium", "Pa", 0, 7, 91, 140,90, 15.37,0.00000018, 0.047, 1841,4300, UNKNOWN, 5, COLOR_Silver,ELEM_Actinide);$/;"	v
Protactinium	src/Engineering/Chemistry/elementals.h	/^const Atom Protactinium = new Atom("Protactinium", "Pa", 0, 7, 91, 140,90, 15.37,0.00000018, 0.047, 1841,4300, UNKNOWN, 5, COLOR_Silver,ELEM_Actinide);$/;"	v
Proton	include/Eternia/Engineering/Chemistry/Hadron/Proton.h	/^        Proton();$/;"	p	class:Proton
Proton	include/Eternia/Engineering/Chemistry/Hadron/Proton.h	/^class Proton: protected Baryon {$/;"	c
Proton	src/Engineering/Chemistry/Hadron/Proton.h	/^        Proton();$/;"	p	class:Proton
Proton	src/Engineering/Chemistry/Hadron/Proton.h	/^class Proton: protected Baryon {$/;"	c
Proton::Proton	include/Eternia/Engineering/Chemistry/Hadron/Proton.h	/^        Proton();$/;"	p	class:Proton
Proton::Proton	src/Engineering/Chemistry/Hadron/Proton.h	/^        Proton();$/;"	p	class:Proton
Proton::~Proton	include/Eternia/Engineering/Chemistry/Hadron/Proton.h	/^        virtual ~Proton();$/;"	p	class:Proton
Proton::~Proton	src/Engineering/Chemistry/Hadron/Proton.h	/^        virtual ~Proton();$/;"	p	class:Proton
Proton_h_	include/Eternia/Engineering/Chemistry/Hadron/Proton.h	/^#define Proton_h_$/;"	d
Proton_h_	src/Engineering/Chemistry/Hadron/Proton.h	/^#define Proton_h_$/;"	d
QUEUE_H_	include/Eternia/Data/Queue.h	/^#define QUEUE_H_$/;"	d
QUEUE_H_	src/Data/Queue.h	/^#define QUEUE_H_$/;"	d
QUICKSORT_H_	include/Eternia/Algorithm/Sorting/QuickSort.h	/^#define QUICKSORT_H_$/;"	d
QUICKSORT_H_	src/Algorithm/Sorting/QuickSort.h	/^#define QUICKSORT_H_$/;"	d
Queue	include/Eternia/Data/Queue.h	/^        Queue();$/;"	p	class:Queue
Queue	include/Eternia/Data/Queue.h	/^class Queue {$/;"	c
Queue	src/Data/Queue.cpp	/^Queue::Queue() {$/;"	f	class:Queue
Queue	src/Data/Queue.h	/^        Queue();$/;"	p	class:Queue
Queue	src/Data/Queue.h	/^class Queue {$/;"	c
Queue::Head	include/Eternia/Data/Queue.h	/^        QueueNode *Head,*Tail;$/;"	m	class:Queue
Queue::Head	src/Data/Queue.h	/^        QueueNode *Head,*Tail;$/;"	m	class:Queue
Queue::Queue	include/Eternia/Data/Queue.h	/^        Queue();$/;"	p	class:Queue
Queue::Queue	src/Data/Queue.cpp	/^Queue::Queue() {$/;"	f	class:Queue
Queue::Queue	src/Data/Queue.h	/^        Queue();$/;"	p	class:Queue
Queue::Size	include/Eternia/Data/Queue.h	/^        int Size;$/;"	m	class:Queue
Queue::Size	src/Data/Queue.h	/^        int Size;$/;"	m	class:Queue
Queue::Tail	include/Eternia/Data/Queue.h	/^        QueueNode *Head,*Tail;$/;"	m	class:Queue
Queue::Tail	src/Data/Queue.h	/^        QueueNode *Head,*Tail;$/;"	m	class:Queue
Queue::empty	include/Eternia/Data/Queue.h	/^        bool empty();$/;"	p	class:Queue
Queue::empty	src/Data/Queue.cpp	/^bool Queue::empty() {$/;"	f	class:Queue
Queue::empty	src/Data/Queue.h	/^        bool empty();$/;"	p	class:Queue
Queue::front	include/Eternia/Data/Queue.h	/^        void* front();$/;"	p	class:Queue
Queue::front	src/Data/Queue.cpp	/^void* Queue::front() {$/;"	f	class:Queue
Queue::front	src/Data/Queue.h	/^        void* front();$/;"	p	class:Queue
Queue::pop	include/Eternia/Data/Queue.h	/^        void* pop();$/;"	p	class:Queue
Queue::pop	src/Data/Queue.cpp	/^void* Queue::pop() {$/;"	f	class:Queue
Queue::pop	src/Data/Queue.h	/^        void* pop();$/;"	p	class:Queue
Queue::push	include/Eternia/Data/Queue.h	/^        void push(void* data);$/;"	p	class:Queue
Queue::push	src/Data/Queue.cpp	/^void Queue::push(void* data) {$/;"	f	class:Queue
Queue::push	src/Data/Queue.h	/^        void push(void* data);$/;"	p	class:Queue
Queue::size	include/Eternia/Data/Queue.h	/^        int size();$/;"	p	class:Queue
Queue::size	src/Data/Queue.cpp	/^int Queue::size() {$/;"	f	class:Queue
Queue::size	src/Data/Queue.h	/^        int size();$/;"	p	class:Queue
Queue::~Queue	include/Eternia/Data/Queue.h	/^        virtual ~Queue();$/;"	p	class:Queue
Queue::~Queue	src/Data/Queue.cpp	/^Queue::~Queue() {$/;"	f	class:Queue
Queue::~Queue	src/Data/Queue.h	/^        virtual ~Queue();$/;"	p	class:Queue
QueueNode	include/Eternia/Data/Queue.h	/^        QueueNode();$/;"	p	class:QueueNode
QueueNode	include/Eternia/Data/Queue.h	/^class QueueNode {$/;"	c
QueueNode	src/Data/Queue.cpp	/^QueueNode::QueueNode() {$/;"	f	class:QueueNode
QueueNode	src/Data/Queue.h	/^        QueueNode();$/;"	p	class:QueueNode
QueueNode	src/Data/Queue.h	/^class QueueNode {$/;"	c
QueueNode::Next	include/Eternia/Data/Queue.h	/^        QueueNode *Prev, *Next;$/;"	m	class:QueueNode
QueueNode::Next	src/Data/Queue.h	/^        QueueNode *Prev, *Next;$/;"	m	class:QueueNode
QueueNode::Prev	include/Eternia/Data/Queue.h	/^        QueueNode *Prev, *Next;$/;"	m	class:QueueNode
QueueNode::Prev	src/Data/Queue.h	/^        QueueNode *Prev, *Next;$/;"	m	class:QueueNode
QueueNode::QueueNode	include/Eternia/Data/Queue.h	/^        QueueNode();$/;"	p	class:QueueNode
QueueNode::QueueNode	src/Data/Queue.cpp	/^QueueNode::QueueNode() {$/;"	f	class:QueueNode
QueueNode::QueueNode	src/Data/Queue.h	/^        QueueNode();$/;"	p	class:QueueNode
QueueNode::data	include/Eternia/Data/Queue.h	/^        void *data;$/;"	m	class:QueueNode
QueueNode::data	src/Data/Queue.h	/^        void *data;$/;"	m	class:QueueNode
QuickSort	include/Eternia/Algorithm/Sorting/QuickSort.h	/^void QuickSort(IntegerList* list, int left, int right);$/;"	p
QuickSort	src/Algorithm/Sorting/QuickSort.cpp	/^void QuickSort(IntegerList* list, int left, int right) {$/;"	f
QuickSort	src/Algorithm/Sorting/QuickSort.h	/^void QuickSort(IntegerList* list, int left, int right);$/;"	p
R	include/Eternia/constants.h	/^        const double R = Rankin;$/;"	m	namespace:physical::unit
R	src/constants.h	/^        const double R = Rankin;$/;"	m	namespace:physical::unit
R0	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R0	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R1	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R1	include/Eternia/Programming/Instruction.h	/^    int R1; \/\/ Opcodes with a req for R1 (in\/out?\/...)$/;"	m	class:Instruction
R1	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R1	src/Programming/Instruction.h	/^    int R1; \/\/ Opcodes with a req for R1 (in\/out?\/...)$/;"	m	class:Instruction
R10	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R10	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R11	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R11	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R12	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R12	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R13	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R13	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R14	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R14	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R15	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R15	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R2	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R2	include/Eternia/Programming/Instruction.h	/^    int R2; \/\/ Opcodes with a req for R2 (in\/out?)$/;"	m	class:Instruction
R2	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R2	src/Programming/Instruction.h	/^    int R2; \/\/ Opcodes with a req for R2 (in\/out?)$/;"	m	class:Instruction
R3	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R3	include/Eternia/Programming/Instruction.h	/^    int R3; \/\/ Opcodes with a req for R3 (in\/out\/...\/?)$/;"	m	class:Instruction
R3	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R3	src/Programming/Instruction.h	/^    int R3; \/\/ Opcodes with a req for R3 (in\/out\/...\/?)$/;"	m	class:Instruction
R4	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R4	include/Eternia/Programming/Instruction.h	/^    int R4; \/\/ Makes no sense to have this fourth variable.$/;"	m	class:Instruction
R4	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R4	src/Programming/Instruction.h	/^    int R4; \/\/ Makes no sense to have this fourth variable.$/;"	m	class:Instruction
R5	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R5	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R6	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R6	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R7	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R7	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R8	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R8	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R9	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
R9	src/Emulation/MPU/msp430.h	/^        unsigned int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;$/;"	m	class:MSP430
RACE_H_	include/Eternia/Gamelogic/Race/Race.h	/^#define RACE_H_$/;"	d
RACE_H_	src/Gamelogic/Race/Race.h	/^#define RACE_H_$/;"	d
RAM	include/Eternia/Engineering/Electrical/IC/RAM.h	/^        RAM(long size); \/\/ defines maximum size of this RAM.$/;"	p	class:RAM
RAM	include/Eternia/Engineering/Electrical/IC/RAM.h	/^class RAM: private IC {$/;"	c
RAM	src/Engineering/Electrical/IC/RAM.cpp	/^RAM::RAM(long IO) {$/;"	f	class:RAM
RAM	src/Engineering/Electrical/IC/RAM.h	/^        RAM(long size); \/\/ defines maximum size of this RAM.$/;"	p	class:RAM
RAM	src/Engineering/Electrical/IC/RAM.h	/^class RAM: private IC {$/;"	c
RAM::RAM	include/Eternia/Engineering/Electrical/IC/RAM.h	/^        RAM(long size); \/\/ defines maximum size of this RAM.$/;"	p	class:RAM
RAM::RAM	src/Engineering/Electrical/IC/RAM.cpp	/^RAM::RAM(long IO) {$/;"	f	class:RAM
RAM::RAM	src/Engineering/Electrical/IC/RAM.h	/^        RAM(long size); \/\/ defines maximum size of this RAM.$/;"	p	class:RAM
RAM::setPower	include/Eternia/Engineering/Electrical/IC/RAM.h	/^        void setPower(PowerValue* value); \/\/ Sets the input power value$/;"	p	class:RAM
RAM::setPower	src/Engineering/Electrical/IC/RAM.h	/^        void setPower(PowerValue* value); \/\/ Sets the input power value$/;"	p	class:RAM
RAM::~RAM	include/Eternia/Engineering/Electrical/IC/RAM.h	/^        virtual ~RAM();$/;"	p	class:RAM
RAM::~RAM	src/Engineering/Electrical/IC/RAM.cpp	/^RAM::~RAM() {$/;"	f	class:RAM
RAM::~RAM	src/Engineering/Electrical/IC/RAM.h	/^        virtual ~RAM();$/;"	p	class:RAM
RAM_REGION	include/Eternia/Emulation/MPU/msp430.h	/^#define RAM_REGION /;"	d
RAM_REGION	src/Emulation/MPU/msp430.h	/^#define RAM_REGION /;"	d
RAM_SIZE	include/Eternia/Emulation/MPU/msp430.h	/^#define RAM_SIZE /;"	d
RAM_SIZE	src/Emulation/MPU/msp430.h	/^#define RAM_SIZE /;"	d
RAW	include/Eternia/WebFramework/Network/PacketServer/Packets/Packet.hpp	/^        char* RAW;$/;"	m	class:Packet
RAW	src/WebFramework/Network/PacketServer/Packets/Packet.hpp	/^        char* RAW;$/;"	m	class:Packet
RC_FILEVERSION	version.h	/^#define RC_FILEVERSION /;"	d
RC_FILEVERSION_STRING	version.h	/^#define RC_FILEVERSION_STRING /;"	d
REACTOR_H_	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^#define REACTOR_H_$/;"	d
REACTOR_H_	src/Gamelogic/CoreSystems/Reactor.h	/^#define REACTOR_H_$/;"	d
REF2_5V	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define REF2_5V /;"	d
REF2_5V	src/Emulation/MPU/msp430g2553.h	/^#define REF2_5V /;"	d
REFBURST	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define REFBURST /;"	d
REFBURST	src/Emulation/MPU/msp430g2553.h	/^#define REFBURST /;"	d
REFON	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define REFON /;"	d
REFON	src/Emulation/MPU/msp430g2553.h	/^#define REFON /;"	d
REFOUT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define REFOUT /;"	d
REFOUT	src/Emulation/MPU/msp430g2553.h	/^#define REFOUT /;"	d
RELATIONS_H_	include/Eternia/Gamelogic/Race/Relations.h	/^#define RELATIONS_H_$/;"	d
RELATIONS_H_	src/Gamelogic/Race/Relations.h	/^#define RELATIONS_H_$/;"	d
RESET_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define RESET_VECTOR /;"	d
RESET_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define RESET_VECTOR /;"	d
RESISTOR_h_	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^#define RESISTOR_h_$/;"	d
RESISTOR_h_	src/Engineering/Electrical/Components/Resistor.h	/^#define RESISTOR_h_$/;"	d
RESTFULSERVER_H_	include/Eternia/WebFramework/Network/RESTFulServer.h	/^#define RESTFULSERVER_H_$/;"	d
RESTFULSERVER_H_	src/WebFramework/Network/RESTFulServer.h	/^#define RESTFULSERVER_H_$/;"	d
RESTFulServer	include/Eternia/WebFramework/Network/RESTFulServer.h	/^        RESTFulServer(int port);$/;"	p	class:RESTFulServer
RESTFulServer	include/Eternia/WebFramework/Network/RESTFulServer.h	/^class RESTFulServer {$/;"	c
RESTFulServer	src/WebFramework/Network/RESTFulServer.h	/^        RESTFulServer(int port);$/;"	p	class:RESTFulServer
RESTFulServer	src/WebFramework/Network/RESTFulServer.h	/^class RESTFulServer {$/;"	c
RESTFulServer::RESTFulServer	include/Eternia/WebFramework/Network/RESTFulServer.h	/^        RESTFulServer(int port);$/;"	p	class:RESTFulServer
RESTFulServer::RESTFulServer	src/WebFramework/Network/RESTFulServer.h	/^        RESTFulServer(int port);$/;"	p	class:RESTFulServer
RESTFulServer::endpoints	include/Eternia/WebFramework/Network/RESTFulServer.h	/^        unordered_list<string,string>* endpoints;$/;"	m	class:RESTFulServer
RESTFulServer::endpoints	src/WebFramework/Network/RESTFulServer.h	/^        unordered_list<string,string>* endpoints;$/;"	m	class:RESTFulServer
RESTFulServer::newEndpoint	include/Eternia/WebFramework/Network/RESTFulServer.h	/^        RESTFulServer* newEndpoint(CharString* url,$/;"	p	class:RESTFulServer
RESTFulServer::newEndpoint	src/WebFramework/Network/RESTFulServer.h	/^        RESTFulServer* newEndpoint(CharString* url,$/;"	p	class:RESTFulServer
RESTFulServer::request	include/Eternia/WebFramework/Network/RESTFulServer.h	/^        void request(); \/\/ HTML Request fron a client$/;"	p	class:RESTFulServer
RESTFulServer::request	src/WebFramework/Network/RESTFulServer.h	/^        void request(); \/\/ HTML Request fron a client$/;"	p	class:RESTFulServer
RESTFulServer::start	include/Eternia/WebFramework/Network/RESTFulServer.h	/^        void start(); \/\/ Start the RESTFul server$/;"	p	class:RESTFulServer
RESTFulServer::start	src/WebFramework/Network/RESTFulServer.h	/^        void start(); \/\/ Start the RESTFul server$/;"	p	class:RESTFulServer
REVISION	version.h	/^#define REVISION /;"	d
ROAD_H_	include/Eternia/Engineering/Civil/Infrastructure/Road.h	/^#define ROAD_H_$/;"	d
ROAD_H_	src/Engineering/Civil/Infrastructure/Road.h	/^#define ROAD_H_$/;"	d
ROTATIONAL_BODY_H_	include/Eternia/Engineering/Physics/Rotational/RotationalBody.h	/^#define ROTATIONAL_BODY_H_$/;"	d
ROTATIONAL_BODY_H_	src/Engineering/Physics/Rotational/RotationalBody.h	/^#define ROTATIONAL_BODY_H_$/;"	d
ROTATIONAL_FUNCS_H_	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^#define ROTATIONAL_FUNCS_H_$/;"	d
ROTATIONAL_FUNCS_H_	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^#define ROTATIONAL_FUNCS_H_$/;"	d
RSEL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define RSEL0 /;"	d
RSEL0	src/Emulation/MPU/msp430g2553.h	/^#define RSEL0 /;"	d
RSEL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define RSEL1 /;"	d
RSEL1	src/Emulation/MPU/msp430g2553.h	/^#define RSEL1 /;"	d
RSEL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define RSEL2 /;"	d
RSEL2	src/Emulation/MPU/msp430g2553.h	/^#define RSEL2 /;"	d
RSEL3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define RSEL3 /;"	d
RSEL3	src/Emulation/MPU/msp430g2553.h	/^#define RSEL3 /;"	d
RSTIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define RSTIFG /;"	d
RSTIFG	src/Emulation/MPU/msp430g2553.h	/^#define RSTIFG /;"	d
Race	include/Eternia/Gamelogic/Race/Race.h	/^class Race{$/;"	c
Race	src/Gamelogic/Race/Race.h	/^class Race{$/;"	c
Race::breathing	include/Eternia/Gamelogic/Race/Race.h	/^	Composite breathing; \/\/ molecule normally used for breathing, humans like o2$/;"	m	class:Race
Race::breathing	src/Gamelogic/Race/Race.h	/^	Composite breathing; \/\/ molecule normally used for breathing, humans like o2$/;"	m	class:Race
Race::emotion	include/Eternia/Gamelogic/Race/Race.h	/^	float emotion; \/\/ amount of emotion, 0=wut, 1=human, 100=crybabies\/revengers$/;"	m	class:Race
Race::emotion	src/Gamelogic/Race/Race.h	/^	float emotion; \/\/ amount of emotion, 0=wut, 1=human, 100=crybabies\/revengers$/;"	m	class:Race
Race::intelligence	include/Eternia/Gamelogic/Race/Race.h	/^	float intelligence; \/\/ Base intelligence level, rated in IQ. Higher IQ = faster research.$/;"	m	class:Race
Race::intelligence	src/Gamelogic/Race/Race.h	/^	float intelligence; \/\/ Base intelligence level, rated in IQ. Higher IQ = faster research.$/;"	m	class:Race
Race::psyche	include/Eternia/Gamelogic/Race/Race.h	/^	float psyche; \/\/ likelihood to go "insane", humans have around 0.001 (.1%)$/;"	m	class:Race
Race::psyche	src/Gamelogic/Race/Race.h	/^	float psyche; \/\/ likelihood to go "insane", humans have around 0.001 (.1%)$/;"	m	class:Race
Race::sleep	include/Eternia/Gamelogic/Race/Race.h	/^	float sleep; \/\/ Ratio to sleep of the day. Humans normally have a 29.1% time sleep for each day. (0.291)$/;"	m	class:Race
Race::sleep	src/Gamelogic/Race/Race.h	/^	float sleep; \/\/ Ratio to sleep of the day. Humans normally have a 29.1% time sleep for each day. (0.291)$/;"	m	class:Race
Race::tempreature	include/Eternia/Gamelogic/Race/Race.h	/^	float tempreature; \/\/ living temperature, in kelvin (Humans like 294.817 kelvin, 71 fahrenheit)$/;"	m	class:Race
Race::tempreature	src/Gamelogic/Race/Race.h	/^	float tempreature; \/\/ living temperature, in kelvin (Humans like 294.817 kelvin, 71 fahrenheit)$/;"	m	class:Race
Race::xenophilia	include/Eternia/Gamelogic/Race/Race.h	/^	float xenophilia; \/\/ -1 = hatred towards other races, 1 = love new races$/;"	m	class:Race
Race::xenophilia	src/Gamelogic/Race/Race.h	/^	float xenophilia; \/\/ -1 = hatred towards other races, 1 = love new races$/;"	m	class:Race
Radium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Radium = new Atom("Radium", "Ra", 2, 7, 88, 138,87, 5.5,0.000001, 0.019, 973,2010, UNKNOWN, 2, COLOR_Silver,ELEM_Alkaline);$/;"	v
Radium	src/Engineering/Chemistry/elementals.h	/^const Atom Radium = new Atom("Radium", "Ra", 2, 7, 88, 138,87, 5.5,0.000001, 0.019, 973,2010, UNKNOWN, 2, COLOR_Silver,ELEM_Alkaline);$/;"	v
Radon	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Radon = new Atom("Radon", "Rn", 18, 6, 86, 136,85, 0.00973,UNKNOWN, 0.00000361, 202,211.3, 0.094, 6, COLOR_None,ELEM_Noble);$/;"	v
Radon	src/Engineering/Chemistry/elementals.h	/^const Atom Radon = new Atom("Radon", "Rn", 18, 6, 86, 136,85, 0.00973,UNKNOWN, 0.00000361, 202,211.3, 0.094, 6, COLOR_None,ELEM_Noble);$/;"	v
Rankin	include/Eternia/constants.h	/^        const double Rankin = 1.8*Kelvins;$/;"	m	namespace:physical::unit
Rankin	src/constants.h	/^        const double Rankin = 1.8*Kelvins;$/;"	m	namespace:physical::unit
Rankins	include/Eternia/constants.h	/^        const double Rankins = Rankin;$/;"	m	namespace:physical::unit
Rankins	src/constants.h	/^        const double Rankins = Rankin;$/;"	m	namespace:physical::unit
Reactor	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	Reactor();$/;"	p	class:Reactor
Reactor	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^class Reactor{$/;"	c
Reactor	src/Gamelogic/CoreSystems/Reactor.h	/^	Reactor();$/;"	p	class:Reactor
Reactor	src/Gamelogic/CoreSystems/Reactor.h	/^class Reactor{$/;"	c
Reactor::Reactor	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	Reactor();$/;"	p	class:Reactor
Reactor::Reactor	src/Gamelogic/CoreSystems/Reactor.h	/^	Reactor();$/;"	p	class:Reactor
Reactor::coreElement	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	Atom coreElement; \/\/ $/;"	m	class:Reactor
Reactor::coreElement	src/Gamelogic/CoreSystems/Reactor.h	/^	Atom coreElement; \/\/ $/;"	m	class:Reactor
Reactor::core_density	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	float core_density; \/\/ $/;"	m	class:Reactor
Reactor::core_density	src/Gamelogic/CoreSystems/Reactor.h	/^	float core_density; \/\/ $/;"	m	class:Reactor
Reactor::icoolant	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	Composite icoolant, ocoolant; \/\/ inner\/outer coolant$/;"	m	class:Reactor
Reactor::icoolant	src/Gamelogic/CoreSystems/Reactor.h	/^	Composite icoolant, ocoolant; \/\/ inner\/outer coolant$/;"	m	class:Reactor
Reactor::ishield	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	Composite ishield, oshield; \/\/ material used to shield the reactor from exposing radiation$/;"	m	class:Reactor
Reactor::ishield	src/Gamelogic/CoreSystems/Reactor.h	/^	Composite ishield, oshield; \/\/ material used to shield the reactor from exposing radiation$/;"	m	class:Reactor
Reactor::ocoolant	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	Composite icoolant, ocoolant; \/\/ inner\/outer coolant$/;"	m	class:Reactor
Reactor::ocoolant	src/Gamelogic/CoreSystems/Reactor.h	/^	Composite icoolant, ocoolant; \/\/ inner\/outer coolant$/;"	m	class:Reactor
Reactor::oshield	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	Composite ishield, oshield; \/\/ material used to shield the reactor from exposing radiation$/;"	m	class:Reactor
Reactor::oshield	src/Gamelogic/CoreSystems/Reactor.h	/^	Composite ishield, oshield; \/\/ material used to shield the reactor from exposing radiation$/;"	m	class:Reactor
Reactor::rod_percent	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	float rod_percent; \/\/ reactor rod$/;"	m	class:Reactor
Reactor::rod_percent	src/Gamelogic/CoreSystems/Reactor.h	/^	float rod_percent; \/\/ reactor rod$/;"	m	class:Reactor
Relations	include/Eternia/Gamelogic/Race/Relations.h	/^class Relations{$/;"	c
Relations	src/Gamelogic/Race/Relations.h	/^class Relations{$/;"	c
Relations::relationLevel	include/Eternia/Gamelogic/Race/Relations.h	/^    float relationLevel; \/\/ 100 = allies, -100 = enemies$/;"	m	class:Relations
Relations::relationLevel	src/Gamelogic/Race/Relations.h	/^    float relationLevel; \/\/ 100 = allies, -100 = enemies$/;"	m	class:Relations
Relations::war	include/Eternia/Gamelogic/Race/Relations.h	/^	bool war; \/\/ are both parties at war? (Some races may consider everybody at war with them, true xenophobes)$/;"	m	class:Relations
Relations::war	src/Gamelogic/Race/Relations.h	/^	bool war; \/\/ are both parties at war? (Some races may consider everybody at war with them, true xenophobes)$/;"	m	class:Relations
Resistor	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        Resistor(double Ohms, double Tolerance, double TempTolerance, PowerValue* MaxPower);$/;"	p	class:Resistor
Resistor	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^class Resistor: private Component {$/;"	c
Resistor	src/Engineering/Electrical/Components/Resistor.h	/^        Resistor(double Ohms, double Tolerance, double TempTolerance, PowerValue* MaxPower);$/;"	p	class:Resistor
Resistor	src/Engineering/Electrical/Components/Resistor.h	/^class Resistor: private Component {$/;"	c
Resistor::Resistor	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        Resistor(double Ohms, double Tolerance, double TempTolerance, PowerValue* MaxPower);$/;"	p	class:Resistor
Resistor::Resistor	src/Engineering/Electrical/Components/Resistor.h	/^        Resistor(double Ohms, double Tolerance, double TempTolerance, PowerValue* MaxPower);$/;"	p	class:Resistor
Resistor::getPower	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        float getPower(); \/\/ returns power in watts. (P=I^2*R)$/;"	p	class:Resistor
Resistor::getPower	src/Engineering/Electrical/Components/Resistor.h	/^        float getPower(); \/\/ returns power in watts. (P=I^2*R)$/;"	p	class:Resistor
Resistor::maxPower	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        PowerValue* maxPower; \/\/ Max power this resistor can handle$/;"	m	class:Resistor
Resistor::maxPower	src/Engineering/Electrical/Components/Resistor.h	/^        PowerValue* maxPower; \/\/ Max power this resistor can handle$/;"	m	class:Resistor
Resistor::ohms	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        double ohms; \/\/ Resistance$/;"	m	class:Resistor
Resistor::ohms	src/Engineering/Electrical/Components/Resistor.h	/^        double ohms; \/\/ Resistance$/;"	m	class:Resistor
Resistor::tempTolerance	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        double tempTolerance; \/\/ if 5% above this point, the resistor will stop working.$/;"	m	class:Resistor
Resistor::tempTolerance	src/Engineering/Electrical/Components/Resistor.h	/^        double tempTolerance; \/\/ if 5% above this point, the resistor will stop working.$/;"	m	class:Resistor
Resistor::tick	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Resistor
Resistor::tick	src/Engineering/Electrical/Components/Resistor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Resistor
Resistor::tolerance	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        double tolerance; \/\/ Percentage tolerance, 0 for none (Gold band)$/;"	m	class:Resistor
Resistor::tolerance	src/Engineering/Electrical/Components/Resistor.h	/^        double tolerance; \/\/ Percentage tolerance, 0 for none (Gold band)$/;"	m	class:Resistor
Resistor::~Resistor	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        virtual ~Resistor();$/;"	p	class:Resistor
Resistor::~Resistor	src/Engineering/Electrical/Components/Resistor.h	/^        virtual ~Resistor();$/;"	p	class:Resistor
Rhenium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Rhenium = new Atom("Rhenium", "Re", 7, 6, 75, 111,74, 21.02,0.00000018, 0.048, 3459,5869, 0.137, 7, COLOR_Gray,ELEM_Transition);$/;"	v
Rhenium	src/Engineering/Chemistry/elementals.h	/^const Atom Rhenium = new Atom("Rhenium", "Re", 7, 6, 75, 111,74, 21.02,0.00000018, 0.048, 3459,5869, 0.137, 7, COLOR_Gray,ELEM_Transition);$/;"	v
Rhodium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Rhodium = new Atom("Rhodium", "Rh", 9, 5, 45, 58,44, 12.41,0.000000043, 0.15, 2237,3968, 0.243, 6, COLOR_Silver,ELEM_Transition);$/;"	v
Rhodium	src/Engineering/Chemistry/elementals.h	/^const Atom Rhodium = new Atom("Rhodium", "Rh", 9, 5, 45, 58,44, 12.41,0.000000043, 0.15, 2237,3968, 0.243, 6, COLOR_Silver,ELEM_Transition);$/;"	v
Road	include/Eternia/Engineering/Civil/Infrastructure/Road.h	/^class Road{$/;"	c
Road	src/Engineering/Civil/Infrastructure/Road.h	/^class Road{$/;"	c
Roentgenium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Roentgenium = new Atom("Roentgenium", "Rg", 11, 7, 111, 165,110, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Transition);$/;"	v
Roentgenium	src/Engineering/Chemistry/elementals.h	/^const Atom Roentgenium = new Atom("Roentgenium", "Rg", 11, 7, 111, 165,110, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Transition);$/;"	v
Root	include/Eternia/Data/FileSystem.h	/^        FileStructureNode *Root, *Current;$/;"	m	class:FileSystem
Root	include/Eternia/Data/TreeList.h	/^        TreeNode *Root;$/;"	m	class:TreeList
Root	src/Data/FileSystem.h	/^        FileStructureNode *Root, *Current;$/;"	m	class:FileSystem
Root	src/Data/TreeList.h	/^        TreeNode *Root;$/;"	m	class:TreeList
RotVelo	include/Eternia/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
RotVelo	src/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
Rotational	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^namespace Rotational {$/;"	n
Rotational	src/Engineering/Physics/Rotational/RotationalFuncs.cpp	/^namespace Rotational {$/;"	n	file:
Rotational	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^namespace Rotational {$/;"	n
Rotational::IBall	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
Rotational::IBall	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
Rotational::ICylinder	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
Rotational::ICylinder	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
Rotational::IDisc	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
Rotational::IDisc	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
Rotational::IRod	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
Rotational::IRod	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
Rotational::ISphere	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
Rotational::ISphere	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	e	enum:Rotational::IType
Rotational::IType	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	g	namespace:Rotational
Rotational::IType	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    enum IType {ISphere, IBall, IRod, IDisc, ICylinder};$/;"	g	namespace:Rotational
Rotational::getAngularMomentum	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    double getAngularMomentum(double I, double angularVelo);$/;"	p	namespace:Rotational
Rotational::getAngularMomentum	src/Engineering/Physics/Rotational/RotationalFuncs.cpp	/^    double getAngularMomentum(double I, double angularVelo) {$/;"	f	namespace:Rotational
Rotational::getAngularMomentum	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    double getAngularMomentum(double I, double angularVelo);$/;"	p	namespace:Rotational
Rotational::getMomentOfIntertia	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    double getMomentOfIntertia(IType inertialType, double M, double r);$/;"	p	namespace:Rotational
Rotational::getMomentOfIntertia	src/Engineering/Physics/Rotational/RotationalFuncs.cpp	/^    double getMomentOfIntertia(IType inertialType, double M, double r) {$/;"	f	namespace:Rotational
Rotational::getMomentOfIntertia	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    double getMomentOfIntertia(IType inertialType, double M, double r);$/;"	p	namespace:Rotational
Rotational::getTorque	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    double getTorque(double radius, double force);$/;"	p	namespace:Rotational
Rotational::getTorque	src/Engineering/Physics/Rotational/RotationalFuncs.cpp	/^    double getTorque(double radius, double force) {$/;"	f	namespace:Rotational
Rotational::getTorque	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    double getTorque(double radius, double force);$/;"	p	namespace:Rotational
RotationalBody	include/Eternia/Engineering/Physics/Rotational/RotationalBody.h	/^        RotationalBody();$/;"	p	class:RotationalBody
RotationalBody	include/Eternia/Engineering/Physics/Rotational/RotationalBody.h	/^class RotationalBody {$/;"	c
RotationalBody	src/Engineering/Physics/Rotational/RotationalBody.h	/^        RotationalBody();$/;"	p	class:RotationalBody
RotationalBody	src/Engineering/Physics/Rotational/RotationalBody.h	/^class RotationalBody {$/;"	c
RotationalBody::RotationalBody	include/Eternia/Engineering/Physics/Rotational/RotationalBody.h	/^        RotationalBody();$/;"	p	class:RotationalBody
RotationalBody::RotationalBody	src/Engineering/Physics/Rotational/RotationalBody.h	/^        RotationalBody();$/;"	p	class:RotationalBody
Rubidium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Rubidium = new Atom("Rubidium", "Rb", 1, 5, 37, 48,36, 1.532,0.00000012, 0.058, 312.46,961, 0.363, 1, COLOR_Silver,ELEM_Alkali);$/;"	v
Rubidium	src/Engineering/Chemistry/elementals.h	/^const Atom Rubidium = new Atom("Rubidium", "Rb", 1, 5, 37, 48,36, 1.532,0.00000012, 0.058, 312.46,961, 0.363, 1, COLOR_Silver,ELEM_Alkali);$/;"	v
Ruthenium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Ruthenium = new Atom("Ruthenium", "Ru", 8, 5, 44, 57,43, 12.37,0.000000071, 0.12, 2607,4423, 0.238, 6, COLOR_Silver,ELEM_Transition);$/;"	v
Ruthenium	src/Engineering/Chemistry/elementals.h	/^const Atom Ruthenium = new Atom("Ruthenium", "Ru", 8, 5, 44, 57,43, 12.37,0.000000071, 0.12, 2607,4423, 0.238, 6, COLOR_Silver,ELEM_Transition);$/;"	v
Rutherford	include/Eternia/constants.h	/^        const double Rutherford = 1000000.0*Becquerels;$/;"	m	namespace:physical::unit
Rutherford	src/constants.h	/^        const double Rutherford = 1000000.0*Becquerels;$/;"	m	namespace:physical::unit
Rutherfordium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Rutherfordium = new Atom("Rutherfordium", "Rf", 4, 7, 104, 157,103, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, 4, COLOR_SlateGray,ELEM_Transition);$/;"	v
Rutherfordium	src/Engineering/Chemistry/elementals.h	/^const Atom Rutherfordium = new Atom("Rutherfordium", "Rf", 4, 7, 104, 157,103, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, 4, COLOR_SlateGray,ELEM_Transition);$/;"	v
Rutherfords	include/Eternia/constants.h	/^        const double Rutherfords = Rutherford;$/;"	m	namespace:physical::unit
Rutherfords	src/constants.h	/^        const double Rutherfords = Rutherford;$/;"	m	namespace:physical::unit
Rydberg	include/Eternia/constants.h	/^        const double Rydberg = 13.6054*eV;$/;"	m	namespace:physical::constant
Rydberg	src/constants.h	/^        const double Rydberg = 13.6054*eV;$/;"	m	namespace:physical::constant
Rydbergs	include/Eternia/constants.h	/^        const double Rydbergs = Rydberg;$/;"	m	namespace:physical::constant
Rydbergs	src/constants.h	/^        const double Rydbergs = Rydberg;$/;"	m	namespace:physical::constant
S	include/Eternia/constants.h	/^        const double S = Siemens;$/;"	m	namespace:physical::unit
S	src/constants.h	/^        const double S = Siemens;$/;"	m	namespace:physical::unit
S11	src/Algorithm/Cryptography/md5.cpp	/^#define S11 /;"	d	file:
S12	src/Algorithm/Cryptography/md5.cpp	/^#define S12 /;"	d	file:
S13	src/Algorithm/Cryptography/md5.cpp	/^#define S13 /;"	d	file:
S14	src/Algorithm/Cryptography/md5.cpp	/^#define S14 /;"	d	file:
S21	src/Algorithm/Cryptography/md5.cpp	/^#define S21 /;"	d	file:
S22	src/Algorithm/Cryptography/md5.cpp	/^#define S22 /;"	d	file:
S23	src/Algorithm/Cryptography/md5.cpp	/^#define S23 /;"	d	file:
S24	src/Algorithm/Cryptography/md5.cpp	/^#define S24 /;"	d	file:
S31	src/Algorithm/Cryptography/md5.cpp	/^#define S31 /;"	d	file:
S32	src/Algorithm/Cryptography/md5.cpp	/^#define S32 /;"	d	file:
S33	src/Algorithm/Cryptography/md5.cpp	/^#define S33 /;"	d	file:
S34	src/Algorithm/Cryptography/md5.cpp	/^#define S34 /;"	d	file:
S41	src/Algorithm/Cryptography/md5.cpp	/^#define S41 /;"	d	file:
S42	src/Algorithm/Cryptography/md5.cpp	/^#define S42 /;"	d	file:
S43	src/Algorithm/Cryptography/md5.cpp	/^#define S43 /;"	d	file:
S44	src/Algorithm/Cryptography/md5.cpp	/^#define S44 /;"	d	file:
SAMPLERDouble	include/Eternia/Math/statistics/statistics.h	/^enum SAMPLERTYPE {SAMPLERDouble, SAMPLERVector, SAMPLERVectorWWeight};$/;"	e	enum:SAMPLERTYPE
SAMPLERDouble	src/Math/statistics/statistics.h	/^enum SAMPLERTYPE {SAMPLERDouble, SAMPLERVector, SAMPLERVectorWWeight};$/;"	e	enum:SAMPLERTYPE
SAMPLERTYPE	include/Eternia/Math/statistics/statistics.h	/^enum SAMPLERTYPE {SAMPLERDouble, SAMPLERVector, SAMPLERVectorWWeight};$/;"	g
SAMPLERTYPE	src/Math/statistics/statistics.h	/^enum SAMPLERTYPE {SAMPLERDouble, SAMPLERVector, SAMPLERVectorWWeight};$/;"	g
SAMPLERVector	include/Eternia/Math/statistics/statistics.h	/^enum SAMPLERTYPE {SAMPLERDouble, SAMPLERVector, SAMPLERVectorWWeight};$/;"	e	enum:SAMPLERTYPE
SAMPLERVector	src/Math/statistics/statistics.h	/^enum SAMPLERTYPE {SAMPLERDouble, SAMPLERVector, SAMPLERVectorWWeight};$/;"	e	enum:SAMPLERTYPE
SAMPLERVectorWWeight	include/Eternia/Math/statistics/statistics.h	/^enum SAMPLERTYPE {SAMPLERDouble, SAMPLERVector, SAMPLERVectorWWeight};$/;"	e	enum:SAMPLERTYPE
SAMPLERVectorWWeight	src/Math/statistics/statistics.h	/^enum SAMPLERTYPE {SAMPLERDouble, SAMPLERVector, SAMPLERVectorWWeight};$/;"	e	enum:SAMPLERTYPE
SAfter	include/Eternia/Data/CharString.h	/^enum SortType {SBefore, SSame, SAfter};$/;"	e	enum:SortType
SAfter	src/Data/CharString.h	/^enum SortType {SBefore, SSame, SAfter};$/;"	e	enum:SortType
SBefore	include/Eternia/Data/CharString.h	/^enum SortType {SBefore, SSame, SAfter};$/;"	e	enum:SortType
SBefore	src/Data/CharString.h	/^enum SortType {SBefore, SSame, SAfter};$/;"	e	enum:SortType
SCCI	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SCCI /;"	d
SCCI	src/Emulation/MPU/msp430g2553.h	/^#define SCCI /;"	d
SCG0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SCG0 /;"	d
SCG0	src/Emulation/MPU/msp430g2553.h	/^#define SCG0 /;"	d
SCG1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SCG1 /;"	d
SCG1	src/Emulation/MPU/msp430g2553.h	/^#define SCG1 /;"	d
SCLIENT_H_	include/Eternia/WebFramework/Network/SockClient.h	/^#define SCLIENT_H_$/;"	d
SCLIENT_H_	src/WebFramework/Network/SockClient.h	/^#define SCLIENT_H_$/;"	d
SCS	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SCS /;"	d
SCS	src/Emulation/MPU/msp430g2553.h	/^#define SCS /;"	d
SECUREDPARSER_H_	include/Eternia/Parsing/SecuredParser.h	/^#define SECUREDPARSER_H_$/;"	d
SECUREDPARSER_H_	src/Parsing/SecuredParser.h	/^#define SECUREDPARSER_H_$/;"	d
SECURED_CPU_DATA_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUData.hpp	/^#define SECURED_CPU_DATA_H_$/;"	d
SECURED_CPU_DATA_H_	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUData.hpp	/^#define SECURED_CPU_DATA_H_$/;"	d
SECURED_CPU_Header_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^#define SECURED_CPU_Header_H_$/;"	d
SECURED_CPU_Header_H_	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^#define SECURED_CPU_Header_H_$/;"	d
SECURED_CPU_INSTRUCTABLES_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^#define SECURED_CPU_INSTRUCTABLES_H_$/;"	d
SECURED_CPU_INSTRUCTABLES_H_	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^#define SECURED_CPU_INSTRUCTABLES_H_$/;"	d
SECURED_GPU_DATA_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^#define SECURED_GPU_DATA_H_$/;"	d
SECURED_GPU_DATA_H_	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^#define SECURED_GPU_DATA_H_$/;"	d
SECURED_GPU_Header_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^#define SECURED_GPU_Header_H_$/;"	d
SECURED_GPU_Header_H_	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^#define SECURED_GPU_Header_H_$/;"	d
SECURED_GPU_INSTRUCTABLES_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^#define SECURED_GPU_INSTRUCTABLES_H_$/;"	d
SECURED_GPU_INSTRUCTABLES_H_	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^#define SECURED_GPU_INSTRUCTABLES_H_$/;"	d
SEGWRT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SEGWRT /;"	d
SEGWRT	src/Emulation/MPU/msp430g2553.h	/^#define SEGWRT /;"	d
SELECTIONSORT_H_	include/Eternia/Algorithm/Sorting/SelectionSort.h	/^#define SELECTIONSORT_H_$/;"	d
SELECTIONSORT_H_	src/Algorithm/Sorting/SelectionSort.h	/^#define SELECTIONSORT_H_$/;"	d
SELM0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SELM0 /;"	d
SELM0	src/Emulation/MPU/msp430g2553.h	/^#define SELM0 /;"	d
SELM1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SELM1 /;"	d
SELM1	src/Emulation/MPU/msp430g2553.h	/^#define SELM1 /;"	d
SELM_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SELM_0 /;"	d
SELM_0	src/Emulation/MPU/msp430g2553.h	/^#define SELM_0 /;"	d
SELM_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SELM_1 /;"	d
SELM_1	src/Emulation/MPU/msp430g2553.h	/^#define SELM_1 /;"	d
SELM_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SELM_2 /;"	d
SELM_2	src/Emulation/MPU/msp430g2553.h	/^#define SELM_2 /;"	d
SELM_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SELM_3 /;"	d
SELM_3	src/Emulation/MPU/msp430g2553.h	/^#define SELM_3 /;"	d
SELS	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SELS /;"	d
SELS	src/Emulation/MPU/msp430g2553.h	/^#define SELS /;"	d
SERIALIZABLE_H_	include/Eternia/Serialization/Serializable.hpp	/^#define SERIALIZABLE_H_$/;"	d
SERIALIZABLE_H_	src/Serialization/Serializable.hpp	/^#define SERIALIZABLE_H_$/;"	d
SFR_16BIT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SFR_16BIT(/;"	d
SFR_16BIT	src/Emulation/MPU/msp430g2553.h	/^#define SFR_16BIT(/;"	d
SFR_8BIT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SFR_8BIT(/;"	d
SFR_8BIT	src/Emulation/MPU/msp430g2553.h	/^#define SFR_8BIT(/;"	d
SHIPHANGAR_H_	include/Eternia/Gamelogic/Ship/ShipHangar.h	/^#define SHIPHANGAR_H_$/;"	d
SHIPHANGAR_H_	src/Gamelogic/Ship/ShipHangar.h	/^#define SHIPHANGAR_H_$/;"	d
SHIP_H_	include/Eternia/Gamelogic/Ship/Ship.h	/^#define SHIP_H_$/;"	d
SHIP_H_	src/Gamelogic/Ship/Ship.h	/^#define SHIP_H_$/;"	d
SHS0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SHS0 /;"	d
SHS0	src/Emulation/MPU/msp430g2553.h	/^#define SHS0 /;"	d
SHS1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SHS1 /;"	d
SHS1	src/Emulation/MPU/msp430g2553.h	/^#define SHS1 /;"	d
SHS_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SHS_0 /;"	d
SHS_0	src/Emulation/MPU/msp430g2553.h	/^#define SHS_0 /;"	d
SHS_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SHS_1 /;"	d
SHS_1	src/Emulation/MPU/msp430g2553.h	/^#define SHS_1 /;"	d
SHS_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SHS_2 /;"	d
SHS_2	src/Emulation/MPU/msp430g2553.h	/^#define SHS_2 /;"	d
SHS_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SHS_3 /;"	d
SHS_3	src/Emulation/MPU/msp430g2553.h	/^#define SHS_3 /;"	d
SIGNAL_H	include/Eternia/Engineering/Electrical/Signal/Signal.h	/^#define SIGNAL_H$/;"	d
SIGNAL_H	src/Engineering/Electrical/Signal/Signal.h	/^#define SIGNAL_H$/;"	d
SIMPLEPARSER_H_	include/Eternia/Parsing/SimpleParser.h	/^#define SIMPLEPARSER_H_$/;"	d
SIMPLEPARSER_H_	src/Parsing/SimpleParser.h	/^#define SIMPLEPARSER_H_$/;"	d
SIMULATE_ID	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIZEOFA	src/Data/CharString.cpp	/^#define SIZEOFA(/;"	d	file:
SKCLASS	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	g
SKCLASS	src/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	g
SK_MACHINE	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_MACHINE	src/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_MAGIC	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_MAGIC	src/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_MELEE	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_MELEE	src/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_NANO	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_NANO	src/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_RIFLE	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_RIFLE	src/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_SWORD	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_SWORD	src/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_UNKNOWN	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SK_UNKNOWN	src/Gamelogic/Avatar/Skills/Skill.h	/^enum SKCLASS {SK_UNKNOWN, SK_MAGIC, SK_SWORD, SK_RIFLE, SK_MELEE, SK_MACHINE, SK_NANO};$/;"	e	enum:SKCLASS
SP	include/Eternia/Emulation/MPU/msp430_Registers.h	/^#define SP /;"	d
SP	src/Emulation/MPU/msp430_Registers.h	/^#define SP /;"	d
SPECIFIC_SERIALIZER_H_	include/Eternia/Serialization/SpecificSerializer.h	/^#define SPECIFIC_SERIALIZER_H_$/;"	d
SPECIFIC_SERIALIZER_H_	src/Serialization/SpecificSerializer.h	/^#define SPECIFIC_SERIALIZER_H_$/;"	d
SPLITRESULT_H_	include/Eternia/Data/SplitResult.h	/^#define SPLITRESULT_H_$/;"	d
SPLITRESULT_H_	src/Data/SplitResult.h	/^#define SPLITRESULT_H_$/;"	d
SR	include/Eternia/Emulation/MPU/msp430_Registers.h	/^#define SR /;"	d
SR	src/Emulation/MPU/msp430_Registers.h	/^#define SR /;"	d
SREF0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SREF0 /;"	d
SREF0	src/Emulation/MPU/msp430g2553.h	/^#define SREF0 /;"	d
SREF1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SREF1 /;"	d
SREF1	src/Emulation/MPU/msp430g2553.h	/^#define SREF1 /;"	d
SREF2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SREF2 /;"	d
SREF2	src/Emulation/MPU/msp430g2553.h	/^#define SREF2 /;"	d
SREF_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SREF_0 /;"	d
SREF_0	src/Emulation/MPU/msp430g2553.h	/^#define SREF_0 /;"	d
SREF_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SREF_1 /;"	d
SREF_1	src/Emulation/MPU/msp430g2553.h	/^#define SREF_1 /;"	d
SREF_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SREF_2 /;"	d
SREF_2	src/Emulation/MPU/msp430g2553.h	/^#define SREF_2 /;"	d
SREF_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SREF_3 /;"	d
SREF_3	src/Emulation/MPU/msp430g2553.h	/^#define SREF_3 /;"	d
SREF_4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SREF_4 /;"	d
SREF_4	src/Emulation/MPU/msp430g2553.h	/^#define SREF_4 /;"	d
SREF_5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SREF_5 /;"	d
SREF_5	src/Emulation/MPU/msp430g2553.h	/^#define SREF_5 /;"	d
SREF_6	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SREF_6 /;"	d
SREF_6	src/Emulation/MPU/msp430g2553.h	/^#define SREF_6 /;"	d
SREF_7	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define SREF_7 /;"	d
SREF_7	src/Emulation/MPU/msp430g2553.h	/^#define SREF_7 /;"	d
SSEType	include/Eternia/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	g
SSEType	src/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	g
SSE_CharArray	include/Eternia/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	e	enum:SSEType
SSE_CharArray	src/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	e	enum:SSEType
SSE_CharString	include/Eternia/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	e	enum:SSEType
SSE_CharString	src/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	e	enum:SSEType
SSE_Int	include/Eternia/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	e	enum:SSEType
SSE_Int	src/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	e	enum:SSEType
SSE_LinkedList	include/Eternia/Serialization/SpecificSerializer.h	/^            SSE_SUBClass, SSE_LinkedList, SSE_SSerializer, SSE_PType=99};$/;"	e	enum:SSEType
SSE_LinkedList	src/Serialization/SpecificSerializer.h	/^            SSE_SUBClass, SSE_LinkedList, SSE_SSerializer, SSE_PType=99};$/;"	e	enum:SSEType
SSE_Long	include/Eternia/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	e	enum:SSEType
SSE_Long	src/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	e	enum:SSEType
SSE_PType	include/Eternia/Serialization/SpecificSerializer.h	/^            SSE_SUBClass, SSE_LinkedList, SSE_SSerializer, SSE_PType=99};$/;"	e	enum:SSEType
SSE_PType	src/Serialization/SpecificSerializer.h	/^            SSE_SUBClass, SSE_LinkedList, SSE_SSerializer, SSE_PType=99};$/;"	e	enum:SSEType
SSE_SSerializer	include/Eternia/Serialization/SpecificSerializer.h	/^            SSE_SUBClass, SSE_LinkedList, SSE_SSerializer, SSE_PType=99};$/;"	e	enum:SSEType
SSE_SSerializer	src/Serialization/SpecificSerializer.h	/^            SSE_SUBClass, SSE_LinkedList, SSE_SSerializer, SSE_PType=99};$/;"	e	enum:SSEType
SSE_SUBClass	include/Eternia/Serialization/SpecificSerializer.h	/^            SSE_SUBClass, SSE_LinkedList, SSE_SSerializer, SSE_PType=99};$/;"	e	enum:SSEType
SSE_SUBClass	src/Serialization/SpecificSerializer.h	/^            SSE_SUBClass, SSE_LinkedList, SSE_SSerializer, SSE_PType=99};$/;"	e	enum:SSEType
SSE_double	include/Eternia/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	e	enum:SSEType
SSE_double	src/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	e	enum:SSEType
SSE_float	include/Eternia/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	e	enum:SSEType
SSE_float	src/Serialization/SpecificSerializer.h	/^enum SSEType {SSE_Int, SSE_CharString, SSE_CharArray, SSE_double, SSE_float, SSE_Long,$/;"	e	enum:SSEType
SS_ICMP	include/Eternia/WebFramework/Network/SocketServer.h	/^enum SocketServerType {SS_TCP, SS_UDP, SS_ICMP};$/;"	e	enum:SocketServerType
SS_ICMP	src/WebFramework/Network/SocketServer.h	/^enum SocketServerType {SS_TCP, SS_UDP, SS_ICMP};$/;"	e	enum:SocketServerType
SS_TCP	include/Eternia/WebFramework/Network/SocketServer.h	/^enum SocketServerType {SS_TCP, SS_UDP, SS_ICMP};$/;"	e	enum:SocketServerType
SS_TCP	src/WebFramework/Network/SocketServer.h	/^enum SocketServerType {SS_TCP, SS_UDP, SS_ICMP};$/;"	e	enum:SocketServerType
SS_UDP	include/Eternia/WebFramework/Network/SocketServer.h	/^enum SocketServerType {SS_TCP, SS_UDP, SS_ICMP};$/;"	e	enum:SocketServerType
SS_UDP	src/WebFramework/Network/SocketServer.h	/^enum SocketServerType {SS_TCP, SS_UDP, SS_ICMP};$/;"	e	enum:SocketServerType
SSame	include/Eternia/Data/CharString.h	/^enum SortType {SBefore, SSame, SAfter};$/;"	e	enum:SortType
SSame	src/Data/CharString.h	/^enum SortType {SBefore, SSame, SAfter};$/;"	e	enum:SortType
STACK_H_	include/Eternia/Data/Stack.h	/^#define STACK_H_$/;"	d
STACK_H_	src/Data/Stack.h	/^#define STACK_H_$/;"	d
STATE	include/Eternia/Engineering/Chemistry/Composite.h	/^enum STATE {solid, liquid, gas, plasma};$/;"	g
STATE	src/Engineering/Chemistry/Composite.h	/^enum STATE {solid, liquid, gas, plasma};$/;"	g
STATUS	version.h	/^#define STATUS /;"	d
STATUS_SHORT	version.h	/^#define STATUS_SHORT /;"	d
STRINGIFY	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
ST_Ballistic	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Ballistic	src/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_BlackDwarf	include/Eternia/Gamelogic/Environment/Space/Star.h	/^enum StarType {ST_RedDwarf, ST_BrownGiant, ST_BlackDwarf, ST_WhiteDwarf, ST_Neutron,$/;"	e	enum:StarType
ST_BlackDwarf	src/Gamelogic/Environment/Space/Star.h	/^enum StarType {ST_RedDwarf, ST_BrownGiant, ST_BlackDwarf, ST_WhiteDwarf, ST_Neutron,$/;"	e	enum:StarType
ST_Blacksmith	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Blacksmith	src/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_BlueGiant	include/Eternia/Gamelogic/Environment/Space/Star.h	/^               ST_RedGiant, ST_BlueGiant, ST_BlueSuperGiant, ST_RedSuperGiant, ST_Sun$/;"	e	enum:StarType
ST_BlueGiant	src/Gamelogic/Environment/Space/Star.h	/^               ST_RedGiant, ST_BlueGiant, ST_BlueSuperGiant, ST_RedSuperGiant, ST_Sun$/;"	e	enum:StarType
ST_BlueSuperGiant	include/Eternia/Gamelogic/Environment/Space/Star.h	/^               ST_RedGiant, ST_BlueGiant, ST_BlueSuperGiant, ST_RedSuperGiant, ST_Sun$/;"	e	enum:StarType
ST_BlueSuperGiant	src/Gamelogic/Environment/Space/Star.h	/^               ST_RedGiant, ST_BlueGiant, ST_BlueSuperGiant, ST_RedSuperGiant, ST_Sun$/;"	e	enum:StarType
ST_Book	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Book	src/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_BrownGiant	include/Eternia/Gamelogic/Environment/Space/Star.h	/^enum StarType {ST_RedDwarf, ST_BrownGiant, ST_BlackDwarf, ST_WhiteDwarf, ST_Neutron,$/;"	e	enum:StarType
ST_BrownGiant	src/Gamelogic/Environment/Space/Star.h	/^enum StarType {ST_RedDwarf, ST_BrownGiant, ST_BlackDwarf, ST_WhiteDwarf, ST_Neutron,$/;"	e	enum:StarType
ST_Buildings	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Buildings	src/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Circuit	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Circuit	src/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Engines	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Engines	src/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Gunnery	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Gunnery	src/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Laser	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Laser	src/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Neutron	include/Eternia/Gamelogic/Environment/Space/Star.h	/^enum StarType {ST_RedDwarf, ST_BrownGiant, ST_BlackDwarf, ST_WhiteDwarf, ST_Neutron,$/;"	e	enum:StarType
ST_Neutron	src/Gamelogic/Environment/Space/Star.h	/^enum StarType {ST_RedDwarf, ST_BrownGiant, ST_BlackDwarf, ST_WhiteDwarf, ST_Neutron,$/;"	e	enum:StarType
ST_RedDwarf	include/Eternia/Gamelogic/Environment/Space/Star.h	/^enum StarType {ST_RedDwarf, ST_BrownGiant, ST_BlackDwarf, ST_WhiteDwarf, ST_Neutron,$/;"	e	enum:StarType
ST_RedDwarf	src/Gamelogic/Environment/Space/Star.h	/^enum StarType {ST_RedDwarf, ST_BrownGiant, ST_BlackDwarf, ST_WhiteDwarf, ST_Neutron,$/;"	e	enum:StarType
ST_RedGiant	include/Eternia/Gamelogic/Environment/Space/Star.h	/^               ST_RedGiant, ST_BlueGiant, ST_BlueSuperGiant, ST_RedSuperGiant, ST_Sun$/;"	e	enum:StarType
ST_RedGiant	src/Gamelogic/Environment/Space/Star.h	/^               ST_RedGiant, ST_BlueGiant, ST_BlueSuperGiant, ST_RedSuperGiant, ST_Sun$/;"	e	enum:StarType
ST_RedSuperGiant	include/Eternia/Gamelogic/Environment/Space/Star.h	/^               ST_RedGiant, ST_BlueGiant, ST_BlueSuperGiant, ST_RedSuperGiant, ST_Sun$/;"	e	enum:StarType
ST_RedSuperGiant	src/Gamelogic/Environment/Space/Star.h	/^               ST_RedGiant, ST_BlueGiant, ST_BlueSuperGiant, ST_RedSuperGiant, ST_Sun$/;"	e	enum:StarType
ST_ShipCore	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_ShipCore	src/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	e	enum:StudyTYPE
ST_Sun	include/Eternia/Gamelogic/Environment/Space/Star.h	/^               ST_RedGiant, ST_BlueGiant, ST_BlueSuperGiant, ST_RedSuperGiant, ST_Sun$/;"	e	enum:StarType
ST_Sun	src/Gamelogic/Environment/Space/Star.h	/^               ST_RedGiant, ST_BlueGiant, ST_BlueSuperGiant, ST_RedSuperGiant, ST_Sun$/;"	e	enum:StarType
ST_WhiteDwarf	include/Eternia/Gamelogic/Environment/Space/Star.h	/^enum StarType {ST_RedDwarf, ST_BrownGiant, ST_BlackDwarf, ST_WhiteDwarf, ST_Neutron,$/;"	e	enum:StarType
ST_WhiteDwarf	src/Gamelogic/Environment/Space/Star.h	/^enum StarType {ST_RedDwarf, ST_BrownGiant, ST_BlackDwarf, ST_WhiteDwarf, ST_Neutron,$/;"	e	enum:StarType
SUPERWEAPON_H_	include/Eternia/Gamelogic/Superweapons/Superweapon.h	/^#define SUPERWEAPON_H_$/;"	d
SUPERWEAPON_H_	src/Gamelogic/Superweapons/Superweapon.h	/^#define SUPERWEAPON_H_$/;"	d
Sales	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        double Income, Trade, Sales;$/;"	m	class:Tax
Sales	src/Gamelogic/Economics/Tax/Tax.h	/^        double Income, Trade, Sales;$/;"	m	class:Tax
Samarium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Samarium = new Atom("Samarium", "Sm", 0, 6, 62, 89,61, 7.52,0.00000094, 0.013, 1345,2067, 0.197, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Samarium	src/Engineering/Chemistry/elementals.h	/^const Atom Samarium = new Atom("Samarium", "Sm", 0, 6, 62, 89,61, 7.52,0.00000094, 0.013, 1345,2067, 0.197, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Scandium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Scandium = new Atom("Scandium", "Sc", 3, 4, 21, 24,20, 2.989,0.00000055, 0.016, 1814,3109, 0.568, 3, COLOR_Silver,ELEM_Transition);$/;"	v
Scandium	src/Engineering/Chemistry/elementals.h	/^const Atom Scandium = new Atom("Scandium", "Sc", 3, 4, 21, 24,20, 2.989,0.00000055, 0.016, 1814,3109, 0.568, 3, COLOR_Silver,ELEM_Transition);$/;"	v
Scanner	include/Eternia/Gamelogic/Ship/Autopilot/Autopilot.h	/^        void Scanner(); \/\/ Scan for ships to avoid. This is based on heading, size.$/;"	p	class:Autopilot
Scanner	src/Gamelogic/Ship/Autopilot/Autopilot.h	/^        void Scanner(); \/\/ Scan for ships to avoid. This is based on heading, size.$/;"	p	class:Autopilot
Schottky_DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Schottky_DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Seaborgium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Seaborgium = new Atom("Seaborgium", "Sg", 6, 7, 106, 157,105, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, 6, COLOR_SlateGray,ELEM_Transition);$/;"	v
Seaborgium	src/Engineering/Chemistry/elementals.h	/^const Atom Seaborgium = new Atom("Seaborgium", "Sg", 6, 7, 106, 157,105, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, 6, COLOR_SlateGray,ELEM_Transition);$/;"	v
SecondTick	include/Eternia/Emulation/SecondTick.h	/^        SecondTick(double Frequency, double SecondTime); \/\/ Assign vars$/;"	p	class:SecondTick
SecondTick	include/Eternia/Emulation/SecondTick.h	/^class SecondTick {$/;"	c
SecondTick	src/Emulation/SecondTick.cpp	/^SecondTick::SecondTick(double Frequency, double SecondTime) {$/;"	f	class:SecondTick
SecondTick	src/Emulation/SecondTick.h	/^        SecondTick(double Frequency, double SecondTime); \/\/ Assign vars$/;"	p	class:SecondTick
SecondTick	src/Emulation/SecondTick.h	/^class SecondTick {$/;"	c
SecondTick::SecondTick	include/Eternia/Emulation/SecondTick.h	/^        SecondTick(double Frequency, double SecondTime); \/\/ Assign vars$/;"	p	class:SecondTick
SecondTick::SecondTick	src/Emulation/SecondTick.cpp	/^SecondTick::SecondTick(double Frequency, double SecondTime) {$/;"	f	class:SecondTick
SecondTick::SecondTick	src/Emulation/SecondTick.h	/^        SecondTick(double Frequency, double SecondTime); \/\/ Assign vars$/;"	p	class:SecondTick
SecondTick::clone	include/Eternia/Emulation/SecondTick.h	/^        SecondTick* clone(); \/\/ clone this$/;"	p	class:SecondTick
SecondTick::clone	src/Emulation/SecondTick.cpp	/^SecondTick* SecondTick::clone() {$/;"	f	class:SecondTick
SecondTick::clone	src/Emulation/SecondTick.h	/^        SecondTick* clone(); \/\/ clone this$/;"	p	class:SecondTick
SecondTick::frequency	include/Eternia/Emulation/SecondTick.h	/^        double frequency;$/;"	m	class:SecondTick
SecondTick::frequency	src/Emulation/SecondTick.h	/^        double frequency;$/;"	m	class:SecondTick
SecondTick::getFrequency	include/Eternia/Emulation/SecondTick.h	/^        double getFrequency(); \/\/ return frequency$/;"	p	class:SecondTick
SecondTick::getFrequency	src/Emulation/SecondTick.cpp	/^double SecondTick::getFrequency() {$/;"	f	class:SecondTick
SecondTick::getFrequency	src/Emulation/SecondTick.h	/^        double getFrequency(); \/\/ return frequency$/;"	p	class:SecondTick
SecondTick::getSecondTime	include/Eternia/Emulation/SecondTick.h	/^        double getSecondTime(); \/\/ return secondTime$/;"	p	class:SecondTick
SecondTick::getSecondTime	src/Emulation/SecondTick.cpp	/^double SecondTick::getSecondTime() {$/;"	f	class:SecondTick
SecondTick::getSecondTime	src/Emulation/SecondTick.h	/^        double getSecondTime(); \/\/ return secondTime$/;"	p	class:SecondTick
SecondTick::getTime	include/Eternia/Emulation/SecondTick.h	/^        double getTime(); \/\/ return tick time expired in microseconds = time\/Freq$/;"	p	class:SecondTick
SecondTick::getTime	src/Emulation/SecondTick.cpp	/^double SecondTick::getTime() {$/;"	f	class:SecondTick
SecondTick::getTime	src/Emulation/SecondTick.h	/^        double getTime(); \/\/ return tick time expired in microseconds = time\/Freq$/;"	p	class:SecondTick
SecondTick::getTrueTime	include/Eternia/Emulation/SecondTick.h	/^        double getTrueTime(); \/\/ return tick time expired in microsends time();$/;"	p	class:SecondTick
SecondTick::getTrueTime	src/Emulation/SecondTick.cpp	/^double SecondTick::getTrueTime() {$/;"	f	class:SecondTick
SecondTick::getTrueTime	src/Emulation/SecondTick.h	/^        double getTrueTime(); \/\/ return tick time expired in microsends time();$/;"	p	class:SecondTick
SecondTick::lastTT	include/Eternia/Emulation/SecondTick.h	/^        double lastTT; \/\/ last time(); used$/;"	m	class:SecondTick
SecondTick::lastTT	src/Emulation/SecondTick.h	/^        double lastTT; \/\/ last time(); used$/;"	m	class:SecondTick
SecondTick::secondTime	include/Eternia/Emulation/SecondTick.h	/^        double secondTime;$/;"	m	class:SecondTick
SecondTick::secondTime	src/Emulation/SecondTick.h	/^        double secondTime;$/;"	m	class:SecondTick
SecondTick::setRealTime	include/Eternia/Emulation/SecondTick.h	/^        void setRealTime(bool use); \/\/ set getTime() to realtime if true$/;"	p	class:SecondTick
SecondTick::setRealTime	src/Emulation/SecondTick.cpp	/^void SecondTick::setRealTime(bool use) {$/;"	f	class:SecondTick
SecondTick::setRealTime	src/Emulation/SecondTick.h	/^        void setRealTime(bool use); \/\/ set getTime() to realtime if true$/;"	p	class:SecondTick
SecondTick::useTrue	include/Eternia/Emulation/SecondTick.h	/^        bool useTrue;$/;"	m	class:SecondTick
SecondTick::useTrue	src/Emulation/SecondTick.h	/^        bool useTrue;$/;"	m	class:SecondTick
SecondTick::~SecondTick	include/Eternia/Emulation/SecondTick.h	/^        virtual ~SecondTick(); \/\/ expire$/;"	p	class:SecondTick
SecondTick::~SecondTick	src/Emulation/SecondTick.cpp	/^SecondTick::~SecondTick() {}$/;"	f	class:SecondTick
SecondTick::~SecondTick	src/Emulation/SecondTick.h	/^        virtual ~SecondTick(); \/\/ expire$/;"	p	class:SecondTick
SecondTick_h_	include/Eternia/Emulation/SecondTick.h	/^#define SecondTick_h_$/;"	d
SecondTick_h_	src/Emulation/SecondTick.h	/^#define SecondTick_h_$/;"	d
SecuredCPUHeader	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^        SecuredCPUHeader(char* in) {$/;"	f	class:SecuredCPUHeader
SecuredCPUHeader	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^class SecuredCPUHeader : private Packet {$/;"	c
SecuredCPUHeader	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^        SecuredCPUHeader(char* in) {$/;"	f	class:SecuredCPUHeader
SecuredCPUHeader	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^class SecuredCPUHeader : private Packet {$/;"	c
SecuredCPUHeader::SecuredCPUHeader	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^        SecuredCPUHeader(char* in) {$/;"	f	class:SecuredCPUHeader
SecuredCPUHeader::SecuredCPUHeader	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^        SecuredCPUHeader(char* in) {$/;"	f	class:SecuredCPUHeader
SecuredCPUHeader::dataPackets	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^        int dataPackets;$/;"	m	class:SecuredCPUHeader
SecuredCPUHeader::dataPackets	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^        int dataPackets;$/;"	m	class:SecuredCPUHeader
SecuredCPUHeader::instructablePackets	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^        int instructablePackets;$/;"	m	class:SecuredCPUHeader
SecuredCPUHeader::instructablePackets	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^        int instructablePackets;$/;"	m	class:SecuredCPUHeader
SecuredCPUInstructables	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        SecuredCPUInstructables(char* packet) { \/\/ pure decrypted packet data taken in$/;"	f	class:SecuredCPUInstructables
SecuredCPUInstructables	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^class SecuredCPUInstructables : private Packet {$/;"	c
SecuredCPUInstructables	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        SecuredCPUInstructables(char* packet) { \/\/ pure decrypted packet data taken in$/;"	f	class:SecuredCPUInstructables
SecuredCPUInstructables	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^class SecuredCPUInstructables : private Packet {$/;"	c
SecuredCPUInstructables::SecuredCPUInstructables	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        SecuredCPUInstructables(char* packet) { \/\/ pure decrypted packet data taken in$/;"	f	class:SecuredCPUInstructables
SecuredCPUInstructables::SecuredCPUInstructables	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        SecuredCPUInstructables(char* packet) { \/\/ pure decrypted packet data taken in$/;"	f	class:SecuredCPUInstructables
SecuredCPUInstructables::ender	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        char ender;$/;"	m	class:SecuredCPUInstructables
SecuredCPUInstructables::ender	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        char ender;$/;"	m	class:SecuredCPUInstructables
SecuredCPUInstructables::instructionNumber	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        int instructionNumber;$/;"	m	class:SecuredCPUInstructables
SecuredCPUInstructables::instructionNumber	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        int instructionNumber;$/;"	m	class:SecuredCPUInstructables
SecuredCPUInstructables::instructions	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        LinkedList<CharString>* instructions;$/;"	m	class:SecuredCPUInstructables
SecuredCPUInstructables::instructions	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        LinkedList<CharString>* instructions;$/;"	m	class:SecuredCPUInstructables
SecuredCPUInstructables::separator	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        char separator;$/;"	m	class:SecuredCPUInstructables
SecuredCPUInstructables::separator	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        char separator;$/;"	m	class:SecuredCPUInstructables
SecuredGPUData	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^        SecuredGPUData(char* direct) {$/;"	f	class:SecuredGPUData
SecuredGPUData	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^class SecuredGPUData : public Packet {$/;"	c
SecuredGPUData	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^        SecuredGPUData(char* direct) {$/;"	f	class:SecuredGPUData
SecuredGPUData	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^class SecuredGPUData : public Packet {$/;"	c
SecuredGPUData::SecuredGPUData	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^        SecuredGPUData(char* direct) {$/;"	f	class:SecuredGPUData
SecuredGPUData::SecuredGPUData	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^        SecuredGPUData(char* direct) {$/;"	f	class:SecuredGPUData
SecuredGPUData::bitlen	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^        int bitlen;$/;"	m	class:SecuredGPUData
SecuredGPUData::bitlen	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^        int bitlen;$/;"	m	class:SecuredGPUData
SecuredGPUData::listlen	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^        int listlen;$/;"	m	class:SecuredGPUData
SecuredGPUData::listlen	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^        int listlen;$/;"	m	class:SecuredGPUData
SecuredGPUHeader	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^        SecuredGPUHeader(char* in) {$/;"	f	class:SecuredGPUHeader
SecuredGPUHeader	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^class SecuredGPUHeader : private Packet {$/;"	c
SecuredGPUHeader	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^        SecuredGPUHeader(char* in) {$/;"	f	class:SecuredGPUHeader
SecuredGPUHeader	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^class SecuredGPUHeader : private Packet {$/;"	c
SecuredGPUHeader::SecuredGPUHeader	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^        SecuredGPUHeader(char* in) {$/;"	f	class:SecuredGPUHeader
SecuredGPUHeader::SecuredGPUHeader	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^        SecuredGPUHeader(char* in) {$/;"	f	class:SecuredGPUHeader
SecuredGPUHeader::dataPackets	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^        int dataPackets;$/;"	m	class:SecuredGPUHeader
SecuredGPUHeader::dataPackets	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^        int dataPackets;$/;"	m	class:SecuredGPUHeader
SecuredGPUHeader::instructablePackets	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^        int instructablePackets;$/;"	m	class:SecuredGPUHeader
SecuredGPUHeader::instructablePackets	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^        int instructablePackets;$/;"	m	class:SecuredGPUHeader
SecuredGPUInstructables	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        SecuredGPUInstructables(char* packet) {$/;"	f	class:SecuredGPUInstructables
SecuredGPUInstructables	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^class SecuredGPUInstructables : private Packet {$/;"	c
SecuredGPUInstructables	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        SecuredGPUInstructables(char* packet) {$/;"	f	class:SecuredGPUInstructables
SecuredGPUInstructables	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^class SecuredGPUInstructables : private Packet {$/;"	c
SecuredGPUInstructables::SecuredGPUInstructables	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        SecuredGPUInstructables(char* packet) {$/;"	f	class:SecuredGPUInstructables
SecuredGPUInstructables::SecuredGPUInstructables	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        SecuredGPUInstructables(char* packet) {$/;"	f	class:SecuredGPUInstructables
SecuredGPUInstructables::ender	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        char ender;$/;"	m	class:SecuredGPUInstructables
SecuredGPUInstructables::ender	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        char ender;$/;"	m	class:SecuredGPUInstructables
SecuredGPUInstructables::instructionNumber	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        int instructionNumber;$/;"	m	class:SecuredGPUInstructables
SecuredGPUInstructables::instructionNumber	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        int instructionNumber;$/;"	m	class:SecuredGPUInstructables
SecuredGPUInstructables::instructions	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        LinkedList<CharString>* instructions;$/;"	m	class:SecuredGPUInstructables
SecuredGPUInstructables::instructions	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        LinkedList<CharString>* instructions;$/;"	m	class:SecuredGPUInstructables
SecuredGPUInstructables::separator	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        char separator;$/;"	m	class:SecuredGPUInstructables
SecuredGPUInstructables::separator	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        char separator;$/;"	m	class:SecuredGPUInstructables
SecuredParser	include/Eternia/Parsing/SecuredParser.h	/^        SecuredParser(CharString* k, CharString* File);$/;"	p	class:SecuredParser
SecuredParser	include/Eternia/Parsing/SecuredParser.h	/^class SecuredParser {$/;"	c
SecuredParser	src/Parsing/SecuredParser.cpp	/^SecuredParser::SecuredParser(CharString* k, CharString* File) {$/;"	f	class:SecuredParser
SecuredParser	src/Parsing/SecuredParser.h	/^        SecuredParser(CharString* k, CharString* File);$/;"	p	class:SecuredParser
SecuredParser	src/Parsing/SecuredParser.h	/^class SecuredParser {$/;"	c
SecuredParser::SecuredParser	include/Eternia/Parsing/SecuredParser.h	/^        SecuredParser(CharString* k, CharString* File);$/;"	p	class:SecuredParser
SecuredParser::SecuredParser	src/Parsing/SecuredParser.cpp	/^SecuredParser::SecuredParser(CharString* k, CharString* File) {$/;"	f	class:SecuredParser
SecuredParser::SecuredParser	src/Parsing/SecuredParser.h	/^        SecuredParser(CharString* k, CharString* File);$/;"	p	class:SecuredParser
SecuredParser::ctx	include/Eternia/Parsing/SecuredParser.h	/^        aes256_context ctx;$/;"	m	class:SecuredParser
SecuredParser::ctx	src/Parsing/SecuredParser.h	/^        aes256_context ctx;$/;"	m	class:SecuredParser
SecuredParser::encodeText	include/Eternia/Parsing/SecuredParser.h	/^        CharString* encodeText(CharString* ss);$/;"	p	class:SecuredParser
SecuredParser::encodeText	src/Parsing/SecuredParser.cpp	/^CharString* SecuredParser::encodeText(CharString* ss) {$/;"	f	class:SecuredParser
SecuredParser::encodeText	src/Parsing/SecuredParser.h	/^        CharString* encodeText(CharString* ss);$/;"	p	class:SecuredParser
SecuredParser::file	include/Eternia/Parsing/SecuredParser.h	/^        CharString* file;$/;"	m	class:SecuredParser
SecuredParser::file	src/Parsing/SecuredParser.h	/^        CharString* file;$/;"	m	class:SecuredParser
SecuredParser::getLines	include/Eternia/Parsing/SecuredParser.h	/^        LinkedList<CharString>* getLines();$/;"	p	class:SecuredParser
SecuredParser::getLines	src/Parsing/SecuredParser.cpp	/^LinkedList<CharString>* SecuredParser::getLines() {$/;"	f	class:SecuredParser
SecuredParser::getLines	src/Parsing/SecuredParser.h	/^        LinkedList<CharString>* getLines();$/;"	p	class:SecuredParser
SecuredParser::getLinesSplit	include/Eternia/Parsing/SecuredParser.h	/^        LinkedList<CharString>* getLinesSplit(char splitter);$/;"	p	class:SecuredParser
SecuredParser::getLinesSplit	src/Parsing/SecuredParser.h	/^        LinkedList<CharString>* getLinesSplit(char splitter);$/;"	p	class:SecuredParser
SecuredParser::getMap	include/Eternia/Parsing/SecuredParser.h	/^        LinkedList<CharString>* getMap(char splitter);$/;"	p	class:SecuredParser
SecuredParser::getMap	src/Parsing/SecuredParser.h	/^        LinkedList<CharString>* getMap(char splitter);$/;"	p	class:SecuredParser
SecuredParser::getText	include/Eternia/Parsing/SecuredParser.h	/^        CharString* getText();$/;"	p	class:SecuredParser
SecuredParser::getText	src/Parsing/SecuredParser.cpp	/^CharString* SecuredParser::getText() {$/;"	f	class:SecuredParser
SecuredParser::getText	src/Parsing/SecuredParser.h	/^        CharString* getText();$/;"	p	class:SecuredParser
SecuredParser::key	include/Eternia/Parsing/SecuredParser.h	/^        uint8_t key[32];$/;"	m	class:SecuredParser
SecuredParser::key	src/Parsing/SecuredParser.h	/^        uint8_t key[32];$/;"	m	class:SecuredParser
SecuredParser::~SecuredParser	include/Eternia/Parsing/SecuredParser.h	/^        virtual ~SecuredParser();$/;"	p	class:SecuredParser
SecuredParser::~SecuredParser	src/Parsing/SecuredParser.cpp	/^SecuredParser::~SecuredParser() {$/;"	f	class:SecuredParser
SecuredParser::~SecuredParser	src/Parsing/SecuredParser.h	/^        virtual ~SecuredParser();$/;"	p	class:SecuredParser
SelectionSort	include/Eternia/Algorithm/Sorting/SelectionSort.h	/^        SelectionSort();$/;"	p	class:SelectionSort
SelectionSort	include/Eternia/Algorithm/Sorting/SelectionSort.h	/^class SelectionSort {$/;"	c
SelectionSort	src/Algorithm/Sorting/SelectionSort.cpp	/^void SelectionSort(int *list, int len) {$/;"	f
SelectionSort	src/Algorithm/Sorting/SelectionSort.h	/^        SelectionSort();$/;"	p	class:SelectionSort
SelectionSort	src/Algorithm/Sorting/SelectionSort.h	/^class SelectionSort {$/;"	c
SelectionSort::SelectionSort	include/Eternia/Algorithm/Sorting/SelectionSort.h	/^        SelectionSort();$/;"	p	class:SelectionSort
SelectionSort::SelectionSort	src/Algorithm/Sorting/SelectionSort.h	/^        SelectionSort();$/;"	p	class:SelectionSort
SelectionSort::~SelectionSort	include/Eternia/Algorithm/Sorting/SelectionSort.h	/^        virtual ~SelectionSort();$/;"	p	class:SelectionSort
SelectionSort::~SelectionSort	src/Algorithm/Sorting/SelectionSort.h	/^        virtual ~SelectionSort();$/;"	p	class:SelectionSort
Selenium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Selenium = new Atom("Selenium", "Se", 16, 4, 34, 45,33, 4.809,UNKNOWN, 0.00052, 453,958, 0.321, 6, COLOR_Gray,ELEM_NonMetal);$/;"	v
Selenium	src/Engineering/Chemistry/elementals.h	/^const Atom Selenium = new Atom("Selenium", "Se", 16, 4, 34, 45,33, 4.809,UNKNOWN, 0.00052, 453,958, 0.321, 6, COLOR_Gray,ELEM_NonMetal);$/;"	v
SendGamePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void SendGamePacket(P2PPacket packet);$/;"	p	class:P2PLClient
SendGamePacket	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void SendGamePacket(P2PPacket packet);$/;"	p	class:P2PLClient
Serializable	include/Eternia/Serialization/Serializable.hpp	/^    Serializable(){}$/;"	f	class:Serializable
Serializable	include/Eternia/Serialization/Serializable.hpp	/^class Serializable{$/;"	c
Serializable	src/Serialization/Serializable.hpp	/^    Serializable(){}$/;"	f	class:Serializable
Serializable	src/Serialization/Serializable.hpp	/^class Serializable{$/;"	c
Serializable::Serializable	include/Eternia/Serialization/Serializable.hpp	/^    Serializable(){}$/;"	f	class:Serializable
Serializable::Serializable	src/Serialization/Serializable.hpp	/^    Serializable(){}$/;"	f	class:Serializable
Serializable::Serialize	include/Eternia/Serialization/Serializable.hpp	/^    virtual char* Serialize(); \/\/ convert value to char*$/;"	p	class:Serializable
Serializable::Serialize	src/Serialization/Serializable.hpp	/^    virtual char* Serialize(); \/\/ convert value to char*$/;"	p	class:Serializable
Serializable::~Serializable	include/Eternia/Serialization/Serializable.hpp	/^    ~Serializable(){}$/;"	f	class:Serializable
Serializable::~Serializable	src/Serialization/Serializable.hpp	/^    ~Serializable(){}$/;"	f	class:Serializable
Serialize	include/Eternia/Serialization/Serializable.hpp	/^    virtual char* Serialize(); \/\/ convert value to char*$/;"	p	class:Serializable
Serialize	src/Serialization/Serializable.hpp	/^    virtual char* Serialize(); \/\/ convert value to char*$/;"	p	class:Serializable
SeriesSum	include/Eternia/constants.h	/^    double SeriesSum(double* C, int Clen);$/;"	p	namespace:electrical
SeriesSum	src/constants.cpp	/^    double SeriesSum(double *C, int Clen) {$/;"	f	namespace:electrical
SeriesSum	src/constants.h	/^    double SeriesSum(double* C, int Clen);$/;"	p	namespace:electrical
Server	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^enum P2PNodeType {Server,Client};$/;"	e	enum:P2PNodeType
Server	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^enum P2PNodeType {Server,Client};$/;"	e	enum:P2PNodeType
Ship	include/Eternia/Gamelogic/Ship/Ship.h	/^        Ship();$/;"	p	class:Ship
Ship	include/Eternia/Gamelogic/Ship/Ship.h	/^class Ship : public VectorBody {$/;"	c
Ship	include/Eternia/Gamelogic/Ship/ShipHangar.h	/^class Ship;$/;"	x
Ship	src/Gamelogic/Ship/Ship.h	/^        Ship();$/;"	p	class:Ship
Ship	src/Gamelogic/Ship/Ship.h	/^class Ship : public VectorBody {$/;"	c
Ship	src/Gamelogic/Ship/ShipHangar.h	/^class Ship;$/;"	x
Ship::Ship	include/Eternia/Gamelogic/Ship/Ship.h	/^        Ship();$/;"	p	class:Ship
Ship::Ship	src/Gamelogic/Ship/Ship.h	/^        Ship();$/;"	p	class:Ship
Ship::heading	include/Eternia/Gamelogic/Ship/Ship.h	/^        vertex heading; \/\/ Heading of the ship$/;"	m	class:Ship
Ship::heading	src/Gamelogic/Ship/Ship.h	/^        vertex heading; \/\/ Heading of the ship$/;"	m	class:Ship
Ship::location	include/Eternia/Gamelogic/Ship/Ship.h	/^        VectorBody location; \/\/ location of this ship, with applied acceleration$/;"	m	class:Ship
Ship::location	src/Gamelogic/Ship/Ship.h	/^        VectorBody location; \/\/ location of this ship, with applied acceleration$/;"	m	class:Ship
Ship::sector	include/Eternia/Gamelogic/Ship/Ship.h	/^        vertex sector; \/\/ Galaxy sector of this ship$/;"	m	class:Ship
Ship::sector	src/Gamelogic/Ship/Ship.h	/^        vertex sector; \/\/ Galaxy sector of this ship$/;"	m	class:Ship
ShipHangar	include/Eternia/Gamelogic/Ship/ShipHangar.h	/^        ShipHangar();$/;"	p	class:ShipHangar
ShipHangar	include/Eternia/Gamelogic/Ship/ShipHangar.h	/^class ShipHangar {$/;"	c
ShipHangar	src/Gamelogic/Ship/ShipHangar.h	/^        ShipHangar();$/;"	p	class:ShipHangar
ShipHangar	src/Gamelogic/Ship/ShipHangar.h	/^class ShipHangar {$/;"	c
ShipHangar::ShipHangar	include/Eternia/Gamelogic/Ship/ShipHangar.h	/^        ShipHangar();$/;"	p	class:ShipHangar
ShipHangar::ShipHangar	src/Gamelogic/Ship/ShipHangar.h	/^        ShipHangar();$/;"	p	class:ShipHangar
ShipHangar::ships	include/Eternia/Gamelogic/Ship/ShipHangar.h	/^        LinkedList<Ship> ships();$/;"	p	class:ShipHangar
ShipHangar::ships	src/Gamelogic/Ship/ShipHangar.h	/^        LinkedList<Ship> ships();$/;"	p	class:ShipHangar
Sibling	include/Eternia/Data/FileSystem.h	/^        FileStructureNode *Sibling,*PrevSibling;$/;"	m	class:FileStructureNode
Sibling	include/Eternia/Data/TreeList.h	/^        TreeNode *Sibling, *PrevSibling;$/;"	m	class:TreeNode
Sibling	src/Data/FileSystem.h	/^        FileStructureNode *Sibling,*PrevSibling;$/;"	m	class:FileStructureNode
Sibling	src/Data/TreeList.h	/^        TreeNode *Sibling, *PrevSibling;$/;"	m	class:TreeNode
Siemens	include/Eternia/constants.h	/^        const double Siemens = mho;$/;"	m	namespace:physical::unit
Siemens	src/constants.h	/^        const double Siemens = mho;$/;"	m	namespace:physical::unit
Sievert	include/Eternia/constants.h	/^            const double Sievert = Gray;$/;"	m	namespace:physical::unit::dose
Sievert	src/constants.h	/^            const double Sievert = Gray;$/;"	m	namespace:physical::unit::dose
Sieverts	include/Eternia/constants.h	/^            const double Sieverts = Sieverts;$/;"	m	namespace:physical::unit::dose
Sieverts	src/constants.h	/^            const double Sieverts = Sieverts;$/;"	m	namespace:physical::unit::dose
Signal	include/Eternia/Engineering/Electrical/Signal/Signal.h	/^        Signal() {}$/;"	f	class:Signal
Signal	include/Eternia/Engineering/Electrical/Signal/Signal.h	/^class Signal {$/;"	c
Signal	src/Engineering/Electrical/Signal/Signal.h	/^        Signal() {}$/;"	f	class:Signal
Signal	src/Engineering/Electrical/Signal/Signal.h	/^class Signal {$/;"	c
Signal::Signal	include/Eternia/Engineering/Electrical/Signal/Signal.h	/^        Signal() {}$/;"	f	class:Signal
Signal::Signal	src/Engineering/Electrical/Signal/Signal.h	/^        Signal() {}$/;"	f	class:Signal
Silicon	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Silicon = new Atom("Silicon", "Si", 14, 3, 14, 14,13, 2.3296,0.001, 0.15, 1687,3538, 0.705, 4, COLOR_Gray,ELEM_Metalloid);$/;"	v
Silicon	src/Engineering/Chemistry/elementals.h	/^const Atom Silicon = new Atom("Silicon", "Si", 14, 3, 14, 14,13, 2.3296,0.001, 0.15, 1687,3538, 0.705, 4, COLOR_Gray,ELEM_Metalloid);$/;"	v
Silver	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Silver = new Atom("Silver", "Ag", 11, 5, 47, 61,46, 10.501,0.000000016, 0.43, 1234.93,2435, 0.235, 2, COLOR_Silver,ELEM_Transition);$/;"	v
Silver	src/Engineering/Chemistry/elementals.h	/^const Atom Silver = new Atom("Silver", "Ag", 11, 5, 47, 61,46, 10.501,0.000000016, 0.43, 1234.93,2435, 0.235, 2, COLOR_Silver,ELEM_Transition);$/;"	v
SimpleParseFile	include/Eternia/Parsing/SimpleParser.h	/^LinkedList<LinkedList<CharString> >* SimpleParseFile(CharString input, char separator); \/\/ take data in line-by-line and parse it$/;"	p
SimpleParseFile	src/Parsing/SimpleParser.cpp	/^LinkedList<LinkedList<CharString>>* SimpleParseFile(CharString filename, char separator) {$/;"	f
SimpleParseFile	src/Parsing/SimpleParser.h	/^LinkedList<LinkedList<CharString> >* SimpleParseFile(CharString input, char separator); \/\/ take data in line-by-line and parse it$/;"	p
SimpleParseLine	src/Parsing/SimpleParser.cpp	/^LinkedList<CharString>* SimpleParseLine(CharString input, char separator) {$/;"	f
Size	include/Eternia/Data/Queue.h	/^        int Size;$/;"	m	class:Queue
Size	include/Eternia/Data/TreeList.h	/^        int Size(); \/\/ total size$/;"	p	class:TreeList
Size	src/Data/Queue.h	/^        int Size;$/;"	m	class:Queue
Size	src/Data/TreeList.h	/^        int Size(); \/\/ total size$/;"	p	class:TreeList
Skill	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^class Skill : public SpecificSerializer {$/;"	c
Skill	src/Gamelogic/Avatar/Skills/Skill.h	/^class Skill : public SpecificSerializer {$/;"	c
Skill::cast	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    void cast();$/;"	p	class:Skill
Skill::cast	src/Gamelogic/Avatar/Skills/Skill.h	/^    void cast();$/;"	p	class:Skill
Skill::castTime	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    double castTime;$/;"	m	class:Skill
Skill::castTime	src/Gamelogic/Avatar/Skills/Skill.h	/^    double castTime;$/;"	m	class:Skill
Skill::classType	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    SKCLASS classType;$/;"	m	class:Skill
Skill::classType	src/Gamelogic/Avatar/Skills/Skill.h	/^    SKCLASS classType;$/;"	m	class:Skill
Skill::cost	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    double cost;$/;"	m	class:Skill
Skill::cost	src/Gamelogic/Avatar/Skills/Skill.h	/^    double cost;$/;"	m	class:Skill
Skill::done	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    void done();$/;"	p	class:Skill
Skill::done	src/Gamelogic/Avatar/Skills/Skill.h	/^    void done();$/;"	p	class:Skill
Skill::name	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    CharString name;$/;"	m	class:Skill
Skill::name	src/Gamelogic/Avatar/Skills/Skill.h	/^    CharString name;$/;"	m	class:Skill
Skill::onTick	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    void onTick();$/;"	p	class:Skill
Skill::onTick	src/Gamelogic/Avatar/Skills/Skill.h	/^    void onTick();$/;"	p	class:Skill
Skill::skillInit	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    void skillInit(CharString name, SKCLASS classType, double cost, double castTime); \/\/ Initialize this skill$/;"	p	class:Skill
Skill::skillInit	src/Gamelogic/Avatar/Skills/Skill.h	/^    void skillInit(CharString name, SKCLASS classType, double cost, double castTime); \/\/ Initialize this skill$/;"	p	class:Skill
SkillSet	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        SkillSet();$/;"	p	class:SkillSet
SkillSet	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^class SkillSet : public SpecificSerializer {$/;"	c
SkillSet	src/Gamelogic/Avatar/SkillSet.cpp	/^SkillSet::SkillSet() {$/;"	f	class:SkillSet
SkillSet	src/Gamelogic/Avatar/SkillSet.h	/^        SkillSet();$/;"	p	class:SkillSet
SkillSet	src/Gamelogic/Avatar/SkillSet.h	/^class SkillSet : public SpecificSerializer {$/;"	c
SkillSet::NanoTech	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> NanoTech; \/\/ Skill with nano technology$/;"	m	class:SkillSet
SkillSet::NanoTech	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> NanoTech; \/\/ Skill with nano technology$/;"	m	class:SkillSet
SkillSet::SkillSet	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        SkillSet();$/;"	p	class:SkillSet
SkillSet::SkillSet	src/Gamelogic/Avatar/SkillSet.cpp	/^SkillSet::SkillSet() {$/;"	f	class:SkillSet
SkillSet::SkillSet	src/Gamelogic/Avatar/SkillSet.h	/^        SkillSet();$/;"	p	class:SkillSet
SkillSet::agility	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> agility; \/\/ Attack Speed \/ Avoid \/ Accuracy \/ Movement Speed$/;"	m	class:SkillSet
SkillSet::agility	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> agility; \/\/ Attack Speed \/ Avoid \/ Accuracy \/ Movement Speed$/;"	m	class:SkillSet
SkillSet::air_piloting	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> air_piloting; \/\/ Pilot Skill$/;"	m	class:SkillSet
SkillSet::air_piloting	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> air_piloting; \/\/ Pilot Skill$/;"	m	class:SkillSet
SkillSet::athletics	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> athletics; \/\/ increases movement speed and carry weight.$/;"	m	class:SkillSet
SkillSet::athletics	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> athletics; \/\/ increases movement speed and carry weight.$/;"	m	class:SkillSet
SkillSet::awareness	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> awareness; \/\/ Keen senses \/ detection \/ timing$/;"	m	class:SkillSet
SkillSet::awareness	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> awareness; \/\/ Keen senses \/ detection \/ timing$/;"	m	class:SkillSet
SkillSet::buisness	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> buisness; \/\/ Company management$/;"	m	class:SkillSet
SkillSet::buisness	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> buisness; \/\/ Company management$/;"	m	class:SkillSet
SkillSet::command	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> command; \/\/ ability to command with prestiege$/;"	m	class:SkillSet
SkillSet::command	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> command; \/\/ ability to command with prestiege$/;"	m	class:SkillSet
SkillSet::constitution	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> constitution; \/\/ Health \/ Defense$/;"	m	class:SkillSet
SkillSet::constitution	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> constitution; \/\/ Health \/ Defense$/;"	m	class:SkillSet
SkillSet::construction	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> construction; \/\/ Creation of the physical world \/ Physics \/ Machining$/;"	m	class:SkillSet
SkillSet::construction	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> construction; \/\/ Creation of the physical world \/ Physics \/ Machining$/;"	m	class:SkillSet
SkillSet::cosmetics	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> cosmetics; \/\/ makeup and hair beautification$/;"	m	class:SkillSet
SkillSet::cosmetics	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> cosmetics; \/\/ makeup and hair beautification$/;"	m	class:SkillSet
SkillSet::destruction	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> destruction; \/\/ Ability to demolish with precision (Buildings or territories)$/;"	m	class:SkillSet
SkillSet::destruction	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> destruction; \/\/ Ability to demolish with precision (Buildings or territories)$/;"	m	class:SkillSet
SkillSet::economics	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> economics; \/\/ Trade$/;"	m	class:SkillSet
SkillSet::economics	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> economics; \/\/ Trade$/;"	m	class:SkillSet
SkillSet::insight	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> insight; \/\/ Intelligence \/ Discovery$/;"	m	class:SkillSet
SkillSet::insight	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> insight; \/\/ Intelligence \/ Discovery$/;"	m	class:SkillSet
SkillSet::intelligence	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> intelligence; \/\/ Research \/ Tech \/ Strategist \/ Crafting \/ Leadership$/;"	m	class:SkillSet
SkillSet::intelligence	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> intelligence; \/\/ Research \/ Tech \/ Strategist \/ Crafting \/ Leadership$/;"	m	class:SkillSet
SkillSet::leadership	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> leadership; \/\/ leadership increases the number of AIs that will follow you.$/;"	m	class:SkillSet
SkillSet::leadership	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> leadership; \/\/ leadership increases the number of AIs that will follow you.$/;"	m	class:SkillSet
SkillSet::luck	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> luck; \/\/ Crafting luck \/ likelihood of mistakes \/ mining luck$/;"	m	class:SkillSet
SkillSet::luck	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> luck; \/\/ Crafting luck \/ likelihood of mistakes \/ mining luck$/;"	m	class:SkillSet
SkillSet::mining	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> mining; \/\/ ability to extract minerals$/;"	m	class:SkillSet
SkillSet::mining	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> mining; \/\/ ability to extract minerals$/;"	m	class:SkillSet
SkillSet::nanites	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> nanites; \/\/ skill with nanites \/ "Magic" \/ Telekinesis \/ Mind-reading \/ ect.$/;"	m	class:SkillSet
SkillSet::nanites	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> nanites; \/\/ skill with nanites \/ "Magic" \/ Telekinesis \/ Mind-reading \/ ect.$/;"	m	class:SkillSet
SkillSet::perception	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> perception; \/\/ Accuracy \/ Intelligence$/;"	m	class:SkillSet
SkillSet::perception	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> perception; \/\/ Accuracy \/ Intelligence$/;"	m	class:SkillSet
SkillSet::physiology	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> physiology; \/\/ Understanding of anatomy and it's applications$/;"	m	class:SkillSet
SkillSet::physiology	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> physiology; \/\/ Understanding of anatomy and it's applications$/;"	m	class:SkillSet
SkillSet::political	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> political; \/\/ ability to command the masses$/;"	m	class:SkillSet
SkillSet::political	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> political; \/\/ ability to command the masses$/;"	m	class:SkillSet
SkillSet::prospecting	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> prospecting; \/\/ ability to scan area$/;"	m	class:SkillSet
SkillSet::prospecting	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> prospecting; \/\/ ability to scan area$/;"	m	class:SkillSet
SkillSet::ranged	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> ranged; \/\/ Ranged weaponry$/;"	m	class:SkillSet
SkillSet::ranged	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> ranged; \/\/ Ranged weaponry$/;"	m	class:SkillSet
SkillSet::shield	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> shield; \/\/ Shielding: better levels mean better resistances$/;"	m	class:SkillSet
SkillSet::shield	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> shield; \/\/ Shielding: better levels mean better resistances$/;"	m	class:SkillSet
SkillSet::space_piloting	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> space_piloting; \/\/ Space piloting skill$/;"	m	class:SkillSet
SkillSet::space_piloting	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> space_piloting; \/\/ Space piloting skill$/;"	m	class:SkillSet
SkillSet::strength	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> strength; \/\/ Attack Strength \/ Carry ability \/ Awe$/;"	m	class:SkillSet
SkillSet::strength	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> strength; \/\/ Attack Strength \/ Carry ability \/ Awe$/;"	m	class:SkillSet
SkillSet::swordsmanship	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> swordsmanship; \/\/ Melee Weaponry$/;"	m	class:SkillSet
SkillSet::swordsmanship	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> swordsmanship; \/\/ Melee Weaponry$/;"	m	class:SkillSet
SkillSet::talker	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> talker; \/\/ persuasion$/;"	m	class:SkillSet
SkillSet::talker	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> talker; \/\/ persuasion$/;"	m	class:SkillSet
SkillSet::technique	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> technique; \/\/ Skill with using "Magic" with nanorobots$/;"	m	class:SkillSet
SkillSet::technique	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> technique; \/\/ Skill with using "Magic" with nanorobots$/;"	m	class:SkillSet
Skill_H_	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^#define Skill_H_$/;"	d
Skill_H_	src/Gamelogic/Avatar/Skills/Skill.h	/^#define Skill_H_$/;"	d
SockClient	include/Eternia/WebFramework/Network/SockClient.h	/^        SockClient();$/;"	p	class:SockClient
SockClient	include/Eternia/WebFramework/Network/SockClient.h	/^class SockClient {$/;"	c
SockClient	src/WebFramework/Network/SockClient.cpp	/^SockClient::SockClient() {$/;"	f	class:SockClient
SockClient	src/WebFramework/Network/SockClient.h	/^        SockClient();$/;"	p	class:SockClient
SockClient	src/WebFramework/Network/SockClient.h	/^class SockClient {$/;"	c
SockClient::ClientSocket	include/Eternia/WebFramework/Network/SockClient.h	/^        SOCKET ClientSocket;$/;"	m	class:SockClient
SockClient::ClientSocket	src/WebFramework/Network/SockClient.h	/^        SOCKET ClientSocket;$/;"	m	class:SockClient
SockClient::SockClient	include/Eternia/WebFramework/Network/SockClient.h	/^        SockClient();$/;"	p	class:SockClient
SockClient::SockClient	src/WebFramework/Network/SockClient.cpp	/^SockClient::SockClient() {$/;"	f	class:SockClient
SockClient::SockClient	src/WebFramework/Network/SockClient.h	/^        SockClient();$/;"	p	class:SockClient
SockClient::_clientHandler	include/Eternia/WebFramework/Network/SockClient.h	/^        void (*_clientHandler)(CharString* dataIn, CharString* dataOut, void* d);$/;"	m	class:SockClient
SockClient::_clientHandler	src/WebFramework/Network/SockClient.h	/^        void (*_clientHandler)(CharString* dataIn, CharString* dataOut, void* d);$/;"	m	class:SockClient
SockClient::address	include/Eternia/WebFramework/Network/SockClient.h	/^        socklen_t address;$/;"	m	class:SockClient
SockClient::address	src/WebFramework/Network/SockClient.h	/^        socklen_t address;$/;"	m	class:SockClient
SockClient::alive	include/Eternia/WebFramework/Network/SockClient.h	/^        bool alive;$/;"	m	class:SockClient
SockClient::alive	src/WebFramework/Network/SockClient.h	/^        bool alive;$/;"	m	class:SockClient
SockClient::cli_addr	include/Eternia/WebFramework/Network/SockClient.h	/^        sockaddr_in cli_addr;$/;"	m	class:SockClient
SockClient::cli_addr	src/WebFramework/Network/SockClient.h	/^        sockaddr_in cli_addr;$/;"	m	class:SockClient
SockClient::clientthread	include/Eternia/WebFramework/Network/SockClient.h	/^        std::thread clientthread;$/;"	m	class:SockClient
SockClient::clientthread	src/WebFramework/Network/SockClient.h	/^        std::thread clientthread;$/;"	m	class:SockClient
SockClient::exVAL	include/Eternia/WebFramework/Network/SockClient.h	/^        void* exVAL;$/;"	m	class:SockClient
SockClient::exVAL	src/WebFramework/Network/SockClient.h	/^        void* exVAL;$/;"	m	class:SockClient
SockClient::sockd	include/Eternia/WebFramework/Network/SockClient.h	/^        int sockd;$/;"	m	class:SockClient
SockClient::sockd	src/WebFramework/Network/SockClient.h	/^        int sockd;$/;"	m	class:SockClient
SocketServer	include/Eternia/WebFramework/Network/SocketServer.h	/^    SocketServer();$/;"	p	class:SocketServer
SocketServer	include/Eternia/WebFramework/Network/SocketServer.h	/^    SocketServer(SocketServerType serverType,$/;"	p	class:SocketServer
SocketServer	include/Eternia/WebFramework/Network/SocketServer.h	/^class SocketServer {$/;"	c
SocketServer	src/WebFramework/Network/SocketServer.cpp	/^SocketServer::SocketServer(){$/;"	f	class:SocketServer
SocketServer	src/WebFramework/Network/SocketServer.cpp	/^SocketServer::SocketServer(SocketServerType serverType,$/;"	f	class:SocketServer
SocketServer	src/WebFramework/Network/SocketServer.h	/^    SocketServer();$/;"	p	class:SocketServer
SocketServer	src/WebFramework/Network/SocketServer.h	/^    SocketServer(SocketServerType serverType,$/;"	p	class:SocketServer
SocketServer	src/WebFramework/Network/SocketServer.h	/^class SocketServer {$/;"	c
SocketServer::Close	include/Eternia/WebFramework/Network/SocketServer.h	/^    void Close();$/;"	p	class:SocketServer
SocketServer::Close	src/WebFramework/Network/SocketServer.cpp	/^void SocketServer::Close() {$/;"	f	class:SocketServer
SocketServer::Close	src/WebFramework/Network/SocketServer.h	/^    void Close();$/;"	p	class:SocketServer
SocketServer::ListenSocket	include/Eternia/WebFramework/Network/SocketServer.h	/^    SOCKET ListenSocket = INVALID_SOCKET;$/;"	m	class:SocketServer
SocketServer::ListenSocket	src/WebFramework/Network/SocketServer.h	/^    SOCKET ListenSocket = INVALID_SOCKET;$/;"	m	class:SocketServer
SocketServer::SocketServer	include/Eternia/WebFramework/Network/SocketServer.h	/^    SocketServer();$/;"	p	class:SocketServer
SocketServer::SocketServer	include/Eternia/WebFramework/Network/SocketServer.h	/^    SocketServer(SocketServerType serverType,$/;"	p	class:SocketServer
SocketServer::SocketServer	src/WebFramework/Network/SocketServer.cpp	/^SocketServer::SocketServer(){$/;"	f	class:SocketServer
SocketServer::SocketServer	src/WebFramework/Network/SocketServer.cpp	/^SocketServer::SocketServer(SocketServerType serverType,$/;"	f	class:SocketServer
SocketServer::SocketServer	src/WebFramework/Network/SocketServer.h	/^    SocketServer();$/;"	p	class:SocketServer
SocketServer::SocketServer	src/WebFramework/Network/SocketServer.h	/^    SocketServer(SocketServerType serverType,$/;"	p	class:SocketServer
SocketServer::_clientHandler	include/Eternia/WebFramework/Network/SocketServer.h	/^    void (*_clientHandler)(CharString* dataIn, CharString* dataOut, void* exVAL); \/\/ Assigned handler for the client$/;"	m	class:SocketServer
SocketServer::_clientHandler	src/WebFramework/Network/SocketServer.h	/^    void (*_clientHandler)(CharString* dataIn, CharString* dataOut, void* exVAL); \/\/ Assigned handler for the client$/;"	m	class:SocketServer
SocketServer::acceptorThread	include/Eternia/WebFramework/Network/SocketServer.h	/^    std::thread acceptorThread;$/;"	m	class:SocketServer
SocketServer::acceptorThread	src/WebFramework/Network/SocketServer.h	/^    std::thread acceptorThread;$/;"	m	class:SocketServer
SocketServer::address	include/Eternia/WebFramework/Network/SocketServer.h	/^    char* address;$/;"	m	class:SocketServer
SocketServer::address	src/WebFramework/Network/SocketServer.h	/^    char* address;$/;"	m	class:SocketServer
SocketServer::bufferSize	include/Eternia/WebFramework/Network/SocketServer.h	/^    int port, bufferSize;$/;"	m	class:SocketServer
SocketServer::bufferSize	src/WebFramework/Network/SocketServer.h	/^    int port, bufferSize;$/;"	m	class:SocketServer
SocketServer::clients	include/Eternia/WebFramework/Network/SocketServer.h	/^    LinkedList<SockClient> clients;$/;"	m	class:SocketServer
SocketServer::clients	src/WebFramework/Network/SocketServer.h	/^    LinkedList<SockClient> clients;$/;"	m	class:SocketServer
SocketServer::clilen	include/Eternia/WebFramework/Network/SocketServer.h	/^    socklen_t clilen;$/;"	m	class:SocketServer
SocketServer::clilen	src/WebFramework/Network/SocketServer.h	/^    socklen_t clilen;$/;"	m	class:SocketServer
SocketServer::dolisten	include/Eternia/WebFramework/Network/SocketServer.h	/^    bool dolisten;$/;"	m	class:SocketServer
SocketServer::dolisten	src/WebFramework/Network/SocketServer.h	/^    bool dolisten;$/;"	m	class:SocketServer
SocketServer::exVAL	include/Eternia/WebFramework/Network/SocketServer.h	/^    void* exVAL;$/;"	m	class:SocketServer
SocketServer::exVAL	src/WebFramework/Network/SocketServer.h	/^    void* exVAL;$/;"	m	class:SocketServer
SocketServer::hints	include/Eternia/WebFramework/Network/SocketServer.h	/^    struct addrinfo hints;$/;"	m	class:SocketServer	typeref:struct:SocketServer::addrinfo
SocketServer::hints	src/WebFramework/Network/SocketServer.h	/^    struct addrinfo hints;$/;"	m	class:SocketServer	typeref:struct:SocketServer::addrinfo
SocketServer::port	include/Eternia/WebFramework/Network/SocketServer.h	/^    int port, bufferSize;$/;"	m	class:SocketServer
SocketServer::port	src/WebFramework/Network/SocketServer.h	/^    int port, bufferSize;$/;"	m	class:SocketServer
SocketServer::result	include/Eternia/WebFramework/Network/SocketServer.h	/^    struct addrinfo *result = NULL;$/;"	m	class:SocketServer	typeref:struct:SocketServer::addrinfo
SocketServer::result	src/WebFramework/Network/SocketServer.h	/^    struct addrinfo *result = NULL;$/;"	m	class:SocketServer	typeref:struct:SocketServer::addrinfo
SocketServer::serv_addr	include/Eternia/WebFramework/Network/SocketServer.h	/^    sockaddr_in serv_addr;$/;"	m	class:SocketServer
SocketServer::serv_addr	src/WebFramework/Network/SocketServer.h	/^    sockaddr_in serv_addr;$/;"	m	class:SocketServer
SocketServer::socketfd	include/Eternia/WebFramework/Network/SocketServer.h	/^    int socketfd;$/;"	m	class:SocketServer
SocketServer::socketfd	src/WebFramework/Network/SocketServer.h	/^    int socketfd;$/;"	m	class:SocketServer
SocketServer::start	include/Eternia/WebFramework/Network/SocketServer.h	/^    void start(); \/\/ Start the server$/;"	p	class:SocketServer
SocketServer::start	src/WebFramework/Network/SocketServer.cpp	/^void SocketServer::start() {$/;"	f	class:SocketServer
SocketServer::start	src/WebFramework/Network/SocketServer.h	/^    void start(); \/\/ Start the server$/;"	p	class:SocketServer
SocketServer::started	include/Eternia/WebFramework/Network/SocketServer.h	/^    bool started;$/;"	m	class:SocketServer
SocketServer::started	src/WebFramework/Network/SocketServer.h	/^    bool started;$/;"	m	class:SocketServer
SocketServer::stype	include/Eternia/WebFramework/Network/SocketServer.h	/^    SocketServerType stype; \/\/ UDP, TCP or ICMP. Changes some of the control logic$/;"	m	class:SocketServer
SocketServer::stype	src/WebFramework/Network/SocketServer.h	/^    SocketServerType stype; \/\/ UDP, TCP or ICMP. Changes some of the control logic$/;"	m	class:SocketServer
SocketServer::tcpConnectionAcceptor	include/Eternia/WebFramework/Network/SocketServer.h	/^    void tcpConnectionAcceptor();$/;"	p	class:SocketServer
SocketServer::tcpConnectionAcceptor	src/WebFramework/Network/SocketServer.cpp	/^void SocketServer::tcpConnectionAcceptor() {$/;"	f	class:SocketServer
SocketServer::tcpConnectionAcceptor	src/WebFramework/Network/SocketServer.h	/^    void tcpConnectionAcceptor();$/;"	p	class:SocketServer
SocketServer::wsaData	include/Eternia/WebFramework/Network/SocketServer.h	/^    WSADATA wsaData;$/;"	m	class:SocketServer
SocketServer::wsaData	src/WebFramework/Network/SocketServer.h	/^    WSADATA wsaData;$/;"	m	class:SocketServer
SocketServerType	include/Eternia/WebFramework/Network/SocketServer.h	/^enum SocketServerType {SS_TCP, SS_UDP, SS_ICMP};$/;"	g
SocketServerType	src/WebFramework/Network/SocketServer.h	/^enum SocketServerType {SS_TCP, SS_UDP, SS_ICMP};$/;"	g
SocketServer_H_	include/Eternia/WebFramework/Network/SocketServer.h	/^#define SocketServer_H_$/;"	d
SocketServer_H_	src/WebFramework/Network/SocketServer.h	/^#define SocketServer_H_$/;"	d
Sodium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Sodium = new Atom("Sodium", "Na", 1, 3, 11, 12,11, 0.971,0.000000047, 0.14, 370.87,1156, 1.228, 1, COLOR_Silver,ELEM_Alkali);$/;"	v
Sodium	src/Engineering/Chemistry/elementals.h	/^const Atom Sodium = new Atom("Sodium", "Na", 1, 3, 11, 12,11, 0.971,0.000000047, 0.14, 370.87,1156, 1.228, 1, COLOR_Silver,ELEM_Alkali);$/;"	v
SortCompare	include/Eternia/Data/CharString.h	/^        SortType SortCompare(CharString str); \/\/ determines if this is "less" then another string. Used for automated sorting.$/;"	p	class:CharString
SortCompare	src/Data/CharString.cpp	/^SortType CharString::SortCompare(CharString str) {$/;"	f	class:CharString
SortCompare	src/Data/CharString.h	/^        SortType SortCompare(CharString str); \/\/ determines if this is "less" then another string. Used for automated sorting.$/;"	p	class:CharString
SortType	include/Eternia/Data/CharString.h	/^enum SortType {SBefore, SSame, SAfter};$/;"	g
SortType	src/Data/CharString.h	/^enum SortType {SBefore, SSame, SAfter};$/;"	g
SourceFileCache	include/Eternia/Data/SecureFileCache.hpp	/^class SourceFileCache {$/;"	c
SourceFileCache	src/Data/SecureFileCache.hpp	/^class SourceFileCache {$/;"	c
SpecificSerializer	include/Eternia/Serialization/SpecificSerializer.h	/^    SpecificSerializer();$/;"	p	class:SpecificSerializer
SpecificSerializer	include/Eternia/Serialization/SpecificSerializer.h	/^class SpecificSerializer {$/;"	c
SpecificSerializer	src/Serialization/SpecificSerializer.cpp	/^SpecificSerializer::SpecificSerializer(){$/;"	f	class:SpecificSerializer
SpecificSerializer	src/Serialization/SpecificSerializer.h	/^    SpecificSerializer();$/;"	p	class:SpecificSerializer
SpecificSerializer	src/Serialization/SpecificSerializer.h	/^class SpecificSerializer {$/;"	c
SpecificSerializer::SpecificSerializer	include/Eternia/Serialization/SpecificSerializer.h	/^    SpecificSerializer();$/;"	p	class:SpecificSerializer
SpecificSerializer::SpecificSerializer	src/Serialization/SpecificSerializer.cpp	/^SpecificSerializer::SpecificSerializer(){$/;"	f	class:SpecificSerializer
SpecificSerializer::SpecificSerializer	src/Serialization/SpecificSerializer.h	/^    SpecificSerializer();$/;"	p	class:SpecificSerializer
SpecificSerializer::addSerial	include/Eternia/Serialization/SpecificSerializer.h	/^    void addSerial(void* ptr, SSEType); \/\/ Use on the class creation$/;"	p	class:SpecificSerializer
SpecificSerializer::addSerial	src/Serialization/SpecificSerializer.cpp	/^void  SpecificSerializer::addSerial(void* ptr, SSEType type) {$/;"	f	class:SpecificSerializer
SpecificSerializer::addSerial	src/Serialization/SpecificSerializer.h	/^    void addSerial(void* ptr, SSEType); \/\/ Use on the class creation$/;"	p	class:SpecificSerializer
SpecificSerializer::addSerialClass	include/Eternia/Serialization/SpecificSerializer.h	/^    void addSerialClass(void* ptr, SSEType type, int classSize);$/;"	p	class:SpecificSerializer
SpecificSerializer::addSerialClass	src/Serialization/SpecificSerializer.cpp	/^void  SpecificSerializer::addSerialClass(void* ptr, SSEType type, int classSize) {$/;"	f	class:SpecificSerializer
SpecificSerializer::addSerialClass	src/Serialization/SpecificSerializer.h	/^    void addSerialClass(void* ptr, SSEType type, int classSize);$/;"	p	class:SpecificSerializer
SpecificSerializer::addresses	include/Eternia/Serialization/SpecificSerializer.h	/^    LinkedList<PointerType> addresses; \/\/ local addresses for this class$/;"	m	class:SpecificSerializer
SpecificSerializer::addresses	src/Serialization/SpecificSerializer.h	/^    LinkedList<PointerType> addresses; \/\/ local addresses for this class$/;"	m	class:SpecificSerializer
SpecificSerializer::checksum	include/Eternia/Serialization/SpecificSerializer.h	/^    uint32_t checksum(); \/\/ XOR. do a checksum, useful for detecting if the class needs to be updated from a server$/;"	p	class:SpecificSerializer
SpecificSerializer::checksum	src/Serialization/SpecificSerializer.cpp	/^uint32_t SpecificSerializer::checksum() {$/;"	f	class:SpecificSerializer
SpecificSerializer::checksum	src/Serialization/SpecificSerializer.h	/^    uint32_t checksum(); \/\/ XOR. do a checksum, useful for detecting if the class needs to be updated from a server$/;"	p	class:SpecificSerializer
SpecificSerializer::checksumCompare	include/Eternia/Serialization/SpecificSerializer.h	/^    bool checksumCompare(uint32_t other_checksum); \/\/ compares the checksum with the current class$/;"	p	class:SpecificSerializer
SpecificSerializer::checksumCompare	src/Serialization/SpecificSerializer.cpp	/^bool SpecificSerializer::checksumCompare(uint32_t other_checksum) {$/;"	f	class:SpecificSerializer
SpecificSerializer::checksumCompare	src/Serialization/SpecificSerializer.h	/^    bool checksumCompare(uint32_t other_checksum); \/\/ compares the checksum with the current class$/;"	p	class:SpecificSerializer
SpecificSerializer::checksumCompareId	include/Eternia/Serialization/SpecificSerializer.h	/^    bool checksumCompareId(int id, uint32_t otherid);$/;"	p	class:SpecificSerializer
SpecificSerializer::checksumCompareId	src/Serialization/SpecificSerializer.cpp	/^bool SpecificSerializer::checksumCompareId(int id, uint32_t other_checksum){$/;"	f	class:SpecificSerializer
SpecificSerializer::checksumCompareId	src/Serialization/SpecificSerializer.h	/^    bool checksumCompareId(int id, uint32_t otherid);$/;"	p	class:SpecificSerializer
SpecificSerializer::checksumId	include/Eternia/Serialization/SpecificSerializer.h	/^    uint32_t checksumId(int id);$/;"	p	class:SpecificSerializer
SpecificSerializer::checksumId	src/Serialization/SpecificSerializer.cpp	/^uint32_t SpecificSerializer::checksumId(int id){$/;"	f	class:SpecificSerializer
SpecificSerializer::checksumId	src/Serialization/SpecificSerializer.h	/^    uint32_t checksumId(int id);$/;"	p	class:SpecificSerializer
SpecificSerializer::clearSerial	include/Eternia/Serialization/SpecificSerializer.h	/^    void clearSerial();$/;"	p	class:SpecificSerializer
SpecificSerializer::clearSerial	src/Serialization/SpecificSerializer.cpp	/^void SpecificSerializer::clearSerial(){$/;"	f	class:SpecificSerializer
SpecificSerializer::clearSerial	src/Serialization/SpecificSerializer.h	/^    void clearSerial();$/;"	p	class:SpecificSerializer
SpecificSerializer::deserialize	include/Eternia/Serialization/SpecificSerializer.h	/^    void deserialize(CharString data); \/\/ converts a byte array into this class$/;"	p	class:SpecificSerializer
SpecificSerializer::deserialize	src/Serialization/SpecificSerializer.cpp	/^void  SpecificSerializer::deserialize(CharString datax) {$/;"	f	class:SpecificSerializer
SpecificSerializer::deserialize	src/Serialization/SpecificSerializer.h	/^    void deserialize(CharString data); \/\/ converts a byte array into this class$/;"	p	class:SpecificSerializer
SpecificSerializer::deserializeId	include/Eternia/Serialization/SpecificSerializer.h	/^    void deserializeId(int id, CharString data);$/;"	p	class:SpecificSerializer
SpecificSerializer::deserializeId	src/Serialization/SpecificSerializer.cpp	/^void SpecificSerializer::deserializeId(int id, CharString datax){$/;"	f	class:SpecificSerializer
SpecificSerializer::deserializeId	src/Serialization/SpecificSerializer.h	/^    void deserializeId(int id, CharString data);$/;"	p	class:SpecificSerializer
SpecificSerializer::getClassSize	include/Eternia/Serialization/SpecificSerializer.h	/^    int getClassSize(); \/\/ get the size of all of the combined addresses with data types$/;"	p	class:SpecificSerializer
SpecificSerializer::getClassSize	src/Serialization/SpecificSerializer.cpp	/^int SpecificSerializer::getClassSize() {$/;"	f	class:SpecificSerializer
SpecificSerializer::getClassSize	src/Serialization/SpecificSerializer.h	/^    int getClassSize(); \/\/ get the size of all of the combined addresses with data types$/;"	p	class:SpecificSerializer
SpecificSerializer::serialize	include/Eternia/Serialization/SpecificSerializer.h	/^    CharString serialize(); \/\/ converts this class into a byte stream, enforce the use of size.$/;"	p	class:SpecificSerializer
SpecificSerializer::serialize	src/Serialization/SpecificSerializer.cpp	/^CharString SpecificSerializer::serialize() {$/;"	f	class:SpecificSerializer
SpecificSerializer::serialize	src/Serialization/SpecificSerializer.h	/^    CharString serialize(); \/\/ converts this class into a byte stream, enforce the use of size.$/;"	p	class:SpecificSerializer
SpecificSerializer::serializeId	include/Eternia/Serialization/SpecificSerializer.h	/^    CharString serializeId(int id);$/;"	p	class:SpecificSerializer
SpecificSerializer::serializeId	src/Serialization/SpecificSerializer.cpp	/^CharString SpecificSerializer::serializeId(int id){$/;"	f	class:SpecificSerializer
SpecificSerializer::serializeId	src/Serialization/SpecificSerializer.h	/^    CharString serializeId(int id);$/;"	p	class:SpecificSerializer
SpecificSerializer::~SpecificSerializer	include/Eternia/Serialization/SpecificSerializer.h	/^    virtual ~SpecificSerializer();$/;"	p	class:SpecificSerializer
SpecificSerializer::~SpecificSerializer	src/Serialization/SpecificSerializer.cpp	/^SpecificSerializer::~SpecificSerializer(){$/;"	f	class:SpecificSerializer
SpecificSerializer::~SpecificSerializer	src/Serialization/SpecificSerializer.h	/^    virtual ~SpecificSerializer();$/;"	p	class:SpecificSerializer
SplitResult	include/Eternia/Data/CharString.h	/^    class SplitResult;$/;"	x
SplitResult	include/Eternia/Data/SplitResult.h	/^        SplitResult();$/;"	p	class:SplitResult
SplitResult	include/Eternia/Data/SplitResult.h	/^class SplitResult {$/;"	c
SplitResult	src/Data/CharString.h	/^    class SplitResult;$/;"	x
SplitResult	src/Data/SplitResult.cpp	/^SplitResult::SplitResult() {$/;"	f	class:SplitResult
SplitResult	src/Data/SplitResult.h	/^        SplitResult();$/;"	p	class:SplitResult
SplitResult	src/Data/SplitResult.h	/^class SplitResult {$/;"	c
SplitResult::SplitResult	include/Eternia/Data/SplitResult.h	/^        SplitResult();$/;"	p	class:SplitResult
SplitResult::SplitResult	src/Data/SplitResult.cpp	/^SplitResult::SplitResult() {$/;"	f	class:SplitResult
SplitResult::SplitResult	src/Data/SplitResult.h	/^        SplitResult();$/;"	p	class:SplitResult
SplitResult::add	include/Eternia/Data/SplitResult.h	/^        void add(char* str, int strLen);$/;"	p	class:SplitResult
SplitResult::add	src/Data/SplitResult.cpp	/^void SplitResult::add(char* str, int strLen) {$/;"	f	class:SplitResult
SplitResult::add	src/Data/SplitResult.h	/^        void add(char* str, int strLen);$/;"	p	class:SplitResult
SplitResult::clear	include/Eternia/Data/SplitResult.h	/^        void clear(); \/\/ used when a ridiculous number of splitresults will be required$/;"	p	class:SplitResult
SplitResult::clear	src/Data/SplitResult.cpp	/^void SplitResult::clear() {$/;"	f	class:SplitResult
SplitResult::clear	src/Data/SplitResult.h	/^        void clear(); \/\/ used when a ridiculous number of splitresults will be required$/;"	p	class:SplitResult
SplitResult::get	include/Eternia/Data/SplitResult.h	/^        char* get(int i);$/;"	p	class:SplitResult
SplitResult::get	src/Data/SplitResult.cpp	/^char* SplitResult::get(int i) {$/;"	f	class:SplitResult
SplitResult::get	src/Data/SplitResult.h	/^        char* get(int i);$/;"	p	class:SplitResult
SplitResult::getCS	include/Eternia/Data/SplitResult.h	/^        CharString getCS(int i);$/;"	p	class:SplitResult
SplitResult::getCS	src/Data/SplitResult.cpp	/^CharString SplitResult::getCS(int i) {$/;"	f	class:SplitResult
SplitResult::getCS	src/Data/SplitResult.h	/^        CharString getCS(int i);$/;"	p	class:SplitResult
SplitResult::getLen	include/Eternia/Data/SplitResult.h	/^        const int getLen(int i);$/;"	p	class:SplitResult
SplitResult::getLen	src/Data/SplitResult.cpp	/^const int SplitResult::getLen(int i) {$/;"	f	class:SplitResult
SplitResult::getLen	src/Data/SplitResult.h	/^        const int getLen(int i);$/;"	p	class:SplitResult
SplitResult::getSize	include/Eternia/Data/SplitResult.h	/^        int getSize();$/;"	p	class:SplitResult
SplitResult::getSize	src/Data/SplitResult.cpp	/^int SplitResult::getSize() {$/;"	f	class:SplitResult
SplitResult::getSize	src/Data/SplitResult.h	/^        int getSize();$/;"	p	class:SplitResult
SplitResult::listStr	include/Eternia/Data/SplitResult.h	/^        LinkedList<CharString> listStr;$/;"	m	class:SplitResult
SplitResult::listStr	src/Data/SplitResult.h	/^        LinkedList<CharString> listStr;$/;"	m	class:SplitResult
SplitResult::~SplitResult	include/Eternia/Data/SplitResult.h	/^        virtual ~SplitResult();$/;"	p	class:SplitResult
SplitResult::~SplitResult	src/Data/SplitResult.cpp	/^SplitResult::~SplitResult() {}$/;"	f	class:SplitResult
SplitResult::~SplitResult	src/Data/SplitResult.h	/^        virtual ~SplitResult();$/;"	p	class:SplitResult
Stabistor_DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Stabistor_DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Stack	include/Eternia/Data/Stack.h	/^        Stack();$/;"	p	class:Stack
Stack	include/Eternia/Data/Stack.h	/^class Stack {$/;"	c
Stack	src/Data/Stack.cpp	/^Stack::Stack() {$/;"	f	class:Stack
Stack	src/Data/Stack.h	/^        Stack();$/;"	p	class:Stack
Stack	src/Data/Stack.h	/^class Stack {$/;"	c
Stack::Head	include/Eternia/Data/Stack.h	/^        ValueNode* Head;$/;"	m	class:Stack
Stack::Head	src/Data/Stack.h	/^        ValueNode* Head;$/;"	m	class:Stack
Stack::Stack	include/Eternia/Data/Stack.h	/^        Stack();$/;"	p	class:Stack
Stack::Stack	src/Data/Stack.cpp	/^Stack::Stack() {$/;"	f	class:Stack
Stack::Stack	src/Data/Stack.h	/^        Stack();$/;"	p	class:Stack
Stack::poll	include/Eternia/Data/Stack.h	/^        int poll(); \/\/ pull from front of list, do not remove$/;"	p	class:Stack
Stack::poll	src/Data/Stack.cpp	/^int Stack::poll() {$/;"	f	class:Stack
Stack::poll	src/Data/Stack.h	/^        int poll(); \/\/ pull from front of list, do not remove$/;"	p	class:Stack
Stack::pop	include/Eternia/Data/Stack.h	/^        int pop(); \/\/ pull from front of list, removed it$/;"	p	class:Stack
Stack::pop	src/Data/Stack.cpp	/^int Stack::pop() {$/;"	f	class:Stack
Stack::pop	src/Data/Stack.h	/^        int pop(); \/\/ pull from front of list, removed it$/;"	p	class:Stack
Stack::push	include/Eternia/Data/Stack.h	/^        void push(int value); \/\/ push to front of list$/;"	p	class:Stack
Stack::push	src/Data/Stack.cpp	/^void Stack::push(int input) {$/;"	f	class:Stack
Stack::push	src/Data/Stack.h	/^        void push(int value); \/\/ push to front of list$/;"	p	class:Stack
Stack::size	include/Eternia/Data/Stack.h	/^        int size;$/;"	m	class:Stack
Stack::size	src/Data/Stack.h	/^        int size;$/;"	m	class:Stack
Stack::~Stack	include/Eternia/Data/Stack.h	/^        virtual ~Stack();$/;"	p	class:Stack
Stack::~Stack	src/Data/Stack.cpp	/^Stack::~Stack() {$/;"	f	class:Stack
Stack::~Stack	src/Data/Stack.h	/^        virtual ~Stack();$/;"	p	class:Stack
Star	include/Eternia/Gamelogic/Environment/Space/Star.h	/^        Star();$/;"	p	class:Star
Star	include/Eternia/Gamelogic/Environment/Space/Star.h	/^class Star {$/;"	c
Star	src/Gamelogic/Environment/Space/Star.h	/^        Star();$/;"	p	class:Star
Star	src/Gamelogic/Environment/Space/Star.h	/^class Star {$/;"	c
Star::Star	include/Eternia/Gamelogic/Environment/Space/Star.h	/^        Star();$/;"	p	class:Star
Star::Star	src/Gamelogic/Environment/Space/Star.h	/^        Star();$/;"	p	class:Star
Star::radius	include/Eternia/Gamelogic/Environment/Space/Star.h	/^        double radius, weight;$/;"	m	class:Star
Star::radius	src/Gamelogic/Environment/Space/Star.h	/^        double radius, weight;$/;"	m	class:Star
Star::weight	include/Eternia/Gamelogic/Environment/Space/Star.h	/^        double radius, weight;$/;"	m	class:Star
Star::weight	src/Gamelogic/Environment/Space/Star.h	/^        double radius, weight;$/;"	m	class:Star
StarType	include/Eternia/Gamelogic/Environment/Space/Star.h	/^enum StarType {ST_RedDwarf, ST_BrownGiant, ST_BlackDwarf, ST_WhiteDwarf, ST_Neutron,$/;"	g
StarType	src/Gamelogic/Environment/Space/Star.h	/^enum StarType {ST_RedDwarf, ST_BrownGiant, ST_BlackDwarf, ST_WhiteDwarf, ST_Neutron,$/;"	g
Star_H_	include/Eternia/Gamelogic/Environment/Space/Star.h	/^#define Star_H_$/;"	d
Star_H_	src/Gamelogic/Environment/Space/Star.h	/^#define Star_H_$/;"	d
Start	include/Eternia/Programming/EfficiencyTimer.h	/^        void Start();$/;"	p	class:EfficiencyTimer
Start	src/Programming/EfficiencyTimer.cpp	/^void EfficiencyTimer::Start() {$/;"	f	class:EfficiencyTimer
Start	src/Programming/EfficiencyTimer.h	/^        void Start();$/;"	p	class:EfficiencyTimer
Statistics	include/Eternia/Math/statistics/statistics.h	/^        Statistics();$/;"	p	class:Statistics
Statistics	include/Eternia/Math/statistics/statistics.h	/^class Statistics {$/;"	c
Statistics	src/Math/statistics/statistics.h	/^        Statistics();$/;"	p	class:Statistics
Statistics	src/Math/statistics/statistics.h	/^class Statistics {$/;"	c
Statistics::Statistics	include/Eternia/Math/statistics/statistics.h	/^        Statistics();$/;"	p	class:Statistics
Statistics::Statistics	src/Math/statistics/statistics.h	/^        Statistics();$/;"	p	class:Statistics
Statistics::dList	include/Eternia/Math/statistics/statistics.h	/^        DoubleList dList();$/;"	p	class:Statistics
Statistics::dList	src/Math/statistics/statistics.h	/^        DoubleList dList();$/;"	p	class:Statistics
Statistics::getDeviation	include/Eternia/Math/statistics/statistics.h	/^        double getDeviation(); \/\/ determines the standard deviation of the points sqrt(variance)$/;"	p	class:Statistics
Statistics::getDeviation	src/Math/statistics/statistics.h	/^        double getDeviation(); \/\/ determines the standard deviation of the points sqrt(variance)$/;"	p	class:Statistics
Statistics::getIQR	include/Eternia/Math/statistics/statistics.h	/^        double getIQR(); \/\/ returns the Inter-Quartile range$/;"	p	class:Statistics
Statistics::getIQR	src/Math/statistics/statistics.h	/^        double getIQR(); \/\/ returns the Inter-Quartile range$/;"	p	class:Statistics
Statistics::getMean	include/Eternia/Math/statistics/statistics.h	/^        double getMean(); \/\/ used to get the average of a list of Doubles$/;"	p	class:Statistics
Statistics::getMean	src/Math/statistics/statistics.h	/^        double getMean(); \/\/ used to get the average of a list of Doubles$/;"	p	class:Statistics
Statistics::getMeanVector	include/Eternia/Math/statistics/statistics.h	/^        vertex* getMeanVector(); \/\/ returns the average vertex, sample with the weight to act as a center of mass$/;"	p	class:Statistics
Statistics::getMeanVector	src/Math/statistics/statistics.h	/^        vertex* getMeanVector(); \/\/ returns the average vertex, sample with the weight to act as a center of mass$/;"	p	class:Statistics
Statistics::getMedian	include/Eternia/Math/statistics/statistics.h	/^        vertex* getMedian(); \/\/ get the number is in the "Middle"$/;"	p	class:Statistics
Statistics::getMedian	src/Math/statistics/statistics.h	/^        vertex* getMedian(); \/\/ get the number is in the "Middle"$/;"	p	class:Statistics
Statistics::getMedianVector	include/Eternia/Math/statistics/statistics.h	/^        vertex* getMedianVector(); \/\/ returns vertex that is in the "Middle" of all of the vertexs$/;"	p	class:Statistics
Statistics::getMedianVector	src/Math/statistics/statistics.h	/^        vertex* getMedianVector(); \/\/ returns vertex that is in the "Middle" of all of the vertexs$/;"	p	class:Statistics
Statistics::getMode	include/Eternia/Math/statistics/statistics.h	/^        vertex* getMode(); \/\/ returns the number that occurs the most times$/;"	p	class:Statistics
Statistics::getMode	src/Math/statistics/statistics.h	/^        vertex* getMode(); \/\/ returns the number that occurs the most times$/;"	p	class:Statistics
Statistics::getModeVector	include/Eternia/Math/statistics/statistics.h	/^        vertex* getModeVector(); \/\/ returns the vertex with most occurences$/;"	p	class:Statistics
Statistics::getModeVector	src/Math/statistics/statistics.h	/^        vertex* getModeVector(); \/\/ returns the vertex with most occurences$/;"	p	class:Statistics
Statistics::getQuartile	include/Eternia/Math/statistics/statistics.h	/^        double getQuartile(int quartile); \/\/ returns the quarter*quartile (ie: 1\/4*2 = second quarter of the data)$/;"	p	class:Statistics
Statistics::getQuartile	src/Math/statistics/statistics.h	/^        double getQuartile(int quartile); \/\/ returns the quarter*quartile (ie: 1\/4*2 = second quarter of the data)$/;"	p	class:Statistics
Statistics::getRange	include/Eternia/Math/statistics/statistics.h	/^        double getRange(); \/\/ determines that maximum possible data value$/;"	p	class:Statistics
Statistics::getRange	src/Math/statistics/statistics.h	/^        double getRange(); \/\/ determines that maximum possible data value$/;"	p	class:Statistics
Statistics::getRangeVector	include/Eternia/Math/statistics/statistics.h	/^        double getRangeVector(); \/\/ determines the largest vertex (from origin)$/;"	p	class:Statistics
Statistics::getRangeVector	src/Math/statistics/statistics.h	/^        double getRangeVector(); \/\/ determines the largest vertex (from origin)$/;"	p	class:Statistics
Statistics::getVariance	include/Eternia/Math/statistics/statistics.h	/^        double getVariance(); \/\/ determines the variance of the values sum[(i-mean)^2]$/;"	p	class:Statistics
Statistics::getVariance	src/Math/statistics/statistics.h	/^        double getVariance(); \/\/ determines the variance of the values sum[(i-mean)^2]$/;"	p	class:Statistics
Statistics::sampleDouble	include/Eternia/Math/statistics/statistics.h	/^        void sampleDouble(double number); \/\/ adds a double$/;"	p	class:Statistics
Statistics::sampleDouble	src/Math/statistics/statistics.h	/^        void sampleDouble(double number); \/\/ adds a double$/;"	p	class:Statistics
Statistics::sampleVector	include/Eternia/Math/statistics/statistics.h	/^        void sampleVector(vertex* v); \/\/ add a vertex$/;"	p	class:Statistics
Statistics::sampleVector	src/Math/statistics/statistics.h	/^        void sampleVector(vertex* v); \/\/ add a vertex$/;"	p	class:Statistics
Statistics::sampleVectorWithWeight	include/Eternia/Math/statistics/statistics.h	/^        void sampleVectorWithWeight(vertex* v, double weight); \/\/ adds a vertex with a weight (trails)$/;"	p	class:Statistics
Statistics::sampleVectorWithWeight	src/Math/statistics/statistics.h	/^        void sampleVectorWithWeight(vertex* v, double weight); \/\/ adds a vertex with a weight (trails)$/;"	p	class:Statistics
Statistics::type	include/Eternia/Math/statistics/statistics.h	/^        SAMPLERTYPE type;$/;"	m	class:Statistics
Statistics::type	src/Math/statistics/statistics.h	/^        SAMPLERTYPE type;$/;"	m	class:Statistics
Statistics_h	include/Eternia/Math/statistics/statistics.h	/^#define Statistics_h$/;"	d
Statistics_h	src/Math/statistics/statistics.h	/^#define Statistics_h$/;"	d
Stock	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^	Stock(BaseStock original, long paid, long units);$/;"	p	class:Stock
Stock	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^class Stock {$/;"	c
Stock	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^class Stock;$/;"	x
Stock	src/Gamelogic/Economics/StockMarket/Stock.h	/^	Stock(BaseStock original, long paid, long units);$/;"	p	class:Stock
Stock	src/Gamelogic/Economics/StockMarket/Stock.h	/^class Stock {$/;"	c
Stock	src/Gamelogic/Economics/StockMarket/Stock.h	/^class Stock;$/;"	x
Stock::Stock	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^	Stock(BaseStock original, long paid, long units);$/;"	p	class:Stock
Stock::Stock	src/Gamelogic/Economics/StockMarket/Stock.h	/^	Stock(BaseStock original, long paid, long units);$/;"	p	class:Stock
Stock::originalStock	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^	BaseStock originalStock;$/;"	m	class:Stock
Stock::originalStock	src/Gamelogic/Economics/StockMarket/Stock.h	/^	BaseStock originalStock;$/;"	m	class:Stock
Stock::paidPrice	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^	long paidPrice, units;$/;"	m	class:Stock
Stock::paidPrice	src/Gamelogic/Economics/StockMarket/Stock.h	/^	long paidPrice, units;$/;"	m	class:Stock
Stock::units	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^	long paidPrice, units;$/;"	m	class:Stock
Stock::units	src/Gamelogic/Economics/StockMarket/Stock.h	/^	long paidPrice, units;$/;"	m	class:Stock
StockMarket	include/Eternia/Gamelogic/Economics/StockMarket/StockMarket.h	/^	StockMarket();$/;"	p	class:StockMarket
StockMarket	include/Eternia/Gamelogic/Economics/StockMarket/StockMarket.h	/^class StockMarket{$/;"	c
StockMarket	src/Gamelogic/Economics/StockMarket/StockMarket.h	/^	StockMarket();$/;"	p	class:StockMarket
StockMarket	src/Gamelogic/Economics/StockMarket/StockMarket.h	/^class StockMarket{$/;"	c
StockMarket::StockMarket	include/Eternia/Gamelogic/Economics/StockMarket/StockMarket.h	/^	StockMarket();$/;"	p	class:StockMarket
StockMarket::StockMarket	src/Gamelogic/Economics/StockMarket/StockMarket.h	/^	StockMarket();$/;"	p	class:StockMarket
Stock_h	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^#define Stock_h$/;"	d
Stock_h	src/Gamelogic/Economics/StockMarket/Stock.h	/^#define Stock_h$/;"	d
StopAndReport	include/Eternia/Programming/EfficiencyTimer.h	/^        void StopAndReport(double DataDone);$/;"	p	class:EfficiencyTimer
StopAndReport	src/Programming/EfficiencyTimer.cpp	/^void EfficiencyTimer::StopAndReport(double workDone) {$/;"	f	class:EfficiencyTimer
StopAndReport	src/Programming/EfficiencyTimer.h	/^        void StopAndReport(double DataDone);$/;"	p	class:EfficiencyTimer
Store_h	include/Eternia/Gamelogic/Economics/Trading/Store.h	/^#define Store_h$/;"	d
Store_h	src/Gamelogic/Economics/Trading/Store.h	/^#define Store_h$/;"	d
Strontium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Strontium = new Atom("Strontium", "Sr", 2, 5, 38, 50,37, 2.64,0.00000013, 0.035, 1050,1655, 0.301, 2, COLOR_Silver,ELEM_Alkaline);$/;"	v
Strontium	src/Engineering/Chemistry/elementals.h	/^const Atom Strontium = new Atom("Strontium", "Sr", 2, 5, 38, 50,37, 2.64,0.00000013, 0.035, 1050,1655, 0.301, 2, COLOR_Silver,ELEM_Alkaline);$/;"	v
StudyTYPE	include/Eternia/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	g
StudyTYPE	src/Gamelogic/Avatar/Avatar.h	/^enum StudyTYPE {ST_Book, ST_Circuit, ST_Blacksmith, ST_Gunnery, ST_Ballistic, ST_Laser, ST_Engines, ST_Buildings, ST_ShipCore};$/;"	g
Sulfur	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Sulfur = new Atom("Sulfur", "S", 16, 3, 16, 16,15, 2.067,1E+015, 0.000205, 388.36,717.87, 0.71, 6, COLOR_Yellow,ELEM_NonMetal);$/;"	v
Sulfur	src/Engineering/Chemistry/elementals.h	/^const Atom Sulfur = new Atom("Sulfur", "S", 16, 3, 16, 16,15, 2.067,1E+015, 0.000205, 388.36,717.87, 0.71, 6, COLOR_Yellow,ELEM_NonMetal);$/;"	v
Superweapon	include/Eternia/Gamelogic/Superweapons/Superweapon.h	/^        Superweapon();$/;"	p	class:Superweapon
Superweapon	include/Eternia/Gamelogic/Superweapons/Superweapon.h	/^class Superweapon {$/;"	c
Superweapon	src/Gamelogic/Superweapons/Superweapon.h	/^        Superweapon();$/;"	p	class:Superweapon
Superweapon	src/Gamelogic/Superweapons/Superweapon.h	/^class Superweapon {$/;"	c
Superweapon::Superweapon	include/Eternia/Gamelogic/Superweapons/Superweapon.h	/^        Superweapon();$/;"	p	class:Superweapon
Superweapon::Superweapon	src/Gamelogic/Superweapons/Superweapon.h	/^        Superweapon();$/;"	p	class:Superweapon
T	include/Eternia/constants.h	/^        const double T = Tesla;$/;"	m	namespace:physical::unit
T	src/constants.h	/^        const double T = Tesla;$/;"	m	namespace:physical::unit
T0_up	include/Eternia/Emulation/MPU/msp430.h	/^        bool paused, T0_up, T1_up;$/;"	m	class:MSP430
T0_up	src/Emulation/MPU/msp430.h	/^        bool paused, T0_up, T1_up;$/;"	m	class:MSP430
T1_up	include/Eternia/Emulation/MPU/msp430.h	/^        bool paused, T0_up, T1_up;$/;"	m	class:MSP430
T1_up	src/Emulation/MPU/msp430.h	/^        bool paused, T0_up, T1_up;$/;"	m	class:MSP430
TA0CCR0	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CCR0 /;"	d
TA0CCR0	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CCR0);                           \/* Timer0_A3 Capture\/Compare 0 *\/$/;"	v
TA0CCR0	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CCR0 /;"	d
TA0CCR0	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CCR0);                           \/* Timer0_A3 Capture\/Compare 0 *\/$/;"	v
TA0CCR1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CCR1 /;"	d
TA0CCR1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CCR1);                           \/* Timer0_A3 Capture\/Compare 1 *\/$/;"	v
TA0CCR1	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CCR1 /;"	d
TA0CCR1	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CCR1);                           \/* Timer0_A3 Capture\/Compare 1 *\/$/;"	v
TA0CCR2	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CCR2 /;"	d
TA0CCR2	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CCR2);                           \/* Timer0_A3 Capture\/Compare 2 *\/$/;"	v
TA0CCR2	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CCR2 /;"	d
TA0CCR2	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CCR2);                           \/* Timer0_A3 Capture\/Compare 2 *\/$/;"	v
TA0CCTL0	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CCTL0 /;"	d
TA0CCTL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CCTL0);                          \/* Timer0_A3 Capture\/Compare Control 0 *\/$/;"	v
TA0CCTL0	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CCTL0 /;"	d
TA0CCTL0	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CCTL0);                          \/* Timer0_A3 Capture\/Compare Control 0 *\/$/;"	v
TA0CCTL1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CCTL1 /;"	d
TA0CCTL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CCTL1);                          \/* Timer0_A3 Capture\/Compare Control 1 *\/$/;"	v
TA0CCTL1	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CCTL1 /;"	d
TA0CCTL1	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CCTL1);                          \/* Timer0_A3 Capture\/Compare Control 1 *\/$/;"	v
TA0CCTL2	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CCTL2 /;"	d
TA0CCTL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CCTL2);                          \/* Timer0_A3 Capture\/Compare Control 2 *\/$/;"	v
TA0CCTL2	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CCTL2 /;"	d
TA0CCTL2	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CCTL2);                          \/* Timer0_A3 Capture\/Compare Control 2 *\/$/;"	v
TA0CTL	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CTL /;"	d
TA0CTL	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CTL);                            \/* Timer0_A3 Control *\/$/;"	v
TA0CTL	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA0CTL /;"	d
TA0CTL	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0CTL);                            \/* Timer0_A3 Control *\/$/;"	v
TA0IV	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA0IV /;"	d
TA0IV	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0IV);                             \/* Timer0_A3 Interrupt Vector Word *\/$/;"	v
TA0IV	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA0IV /;"	d
TA0IV	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0IV);                             \/* Timer0_A3 Interrupt Vector Word *\/$/;"	v
TA0IV_6	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TA0IV_6 /;"	d
TA0IV_6	src/Emulation/MPU/msp430g2553.h	/^#define TA0IV_6 /;"	d
TA0IV_8	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TA0IV_8 /;"	d
TA0IV_8	src/Emulation/MPU/msp430g2553.h	/^#define TA0IV_8 /;"	d
TA0IV_NONE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TA0IV_NONE /;"	d
TA0IV_NONE	src/Emulation/MPU/msp430g2553.h	/^#define TA0IV_NONE /;"	d
TA0IV_TACCR1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TA0IV_TACCR1 /;"	d
TA0IV_TACCR1	src/Emulation/MPU/msp430g2553.h	/^#define TA0IV_TACCR1 /;"	d
TA0IV_TACCR2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TA0IV_TACCR2 /;"	d
TA0IV_TACCR2	src/Emulation/MPU/msp430g2553.h	/^#define TA0IV_TACCR2 /;"	d
TA0IV_TAIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TA0IV_TAIFG /;"	d
TA0IV_TAIFG	src/Emulation/MPU/msp430g2553.h	/^#define TA0IV_TAIFG /;"	d
TA0R	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA0R /;"	d
TA0R	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0R);                              \/* Timer0_A3 *\/$/;"	v
TA0R	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA0R /;"	d
TA0R	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA0R);                              \/* Timer0_A3 *\/$/;"	v
TA1CCR0	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CCR0 /;"	d
TA1CCR0	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CCR0);                           \/* Timer1_A3 Capture\/Compare 0 *\/$/;"	v
TA1CCR0	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CCR0 /;"	d
TA1CCR0	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CCR0);                           \/* Timer1_A3 Capture\/Compare 0 *\/$/;"	v
TA1CCR1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CCR1 /;"	d
TA1CCR1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CCR1);                           \/* Timer1_A3 Capture\/Compare 1 *\/$/;"	v
TA1CCR1	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CCR1 /;"	d
TA1CCR1	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CCR1);                           \/* Timer1_A3 Capture\/Compare 1 *\/$/;"	v
TA1CCR2	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CCR2 /;"	d
TA1CCR2	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CCR2);                           \/* Timer1_A3 Capture\/Compare 2 *\/$/;"	v
TA1CCR2	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CCR2 /;"	d
TA1CCR2	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CCR2);                           \/* Timer1_A3 Capture\/Compare 2 *\/$/;"	v
TA1CCTL0	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CCTL0 /;"	d
TA1CCTL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CCTL0);                          \/* Timer1_A3 Capture\/Compare Control 0 *\/$/;"	v
TA1CCTL0	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CCTL0 /;"	d
TA1CCTL0	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CCTL0);                          \/* Timer1_A3 Capture\/Compare Control 0 *\/$/;"	v
TA1CCTL1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CCTL1 /;"	d
TA1CCTL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CCTL1);                          \/* Timer1_A3 Capture\/Compare Control 1 *\/$/;"	v
TA1CCTL1	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CCTL1 /;"	d
TA1CCTL1	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CCTL1);                          \/* Timer1_A3 Capture\/Compare Control 1 *\/$/;"	v
TA1CCTL2	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CCTL2 /;"	d
TA1CCTL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CCTL2);                          \/* Timer1_A3 Capture\/Compare Control 2 *\/$/;"	v
TA1CCTL2	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CCTL2 /;"	d
TA1CCTL2	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CCTL2);                          \/* Timer1_A3 Capture\/Compare Control 2 *\/$/;"	v
TA1CTL	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CTL /;"	d
TA1CTL	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CTL);                            \/* Timer1_A3 Control *\/$/;"	v
TA1CTL	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA1CTL /;"	d
TA1CTL	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1CTL);                            \/* Timer1_A3 Control *\/$/;"	v
TA1IV	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA1IV /;"	d
TA1IV	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1IV);                             \/* Timer1_A3 Interrupt Vector Word *\/$/;"	v
TA1IV	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA1IV /;"	d
TA1IV	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1IV);                             \/* Timer1_A3 Interrupt Vector Word *\/$/;"	v
TA1IV_NONE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TA1IV_NONE /;"	d
TA1IV_NONE	src/Emulation/MPU/msp430g2553.h	/^#define TA1IV_NONE /;"	d
TA1IV_TACCR1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TA1IV_TACCR1 /;"	d
TA1IV_TACCR1	src/Emulation/MPU/msp430g2553.h	/^#define TA1IV_TACCR1 /;"	d
TA1IV_TACCR2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TA1IV_TACCR2 /;"	d
TA1IV_TACCR2	src/Emulation/MPU/msp430g2553.h	/^#define TA1IV_TACCR2 /;"	d
TA1IV_TAIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TA1IV_TAIFG /;"	d
TA1IV_TAIFG	src/Emulation/MPU/msp430g2553.h	/^#define TA1IV_TAIFG /;"	d
TA1R	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define TA1R /;"	d
TA1R	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1R);                              \/* Timer1_A3 *\/$/;"	v
TA1R	src/Emulation/MPU/msp430_declare_consts.h	/^#define TA1R /;"	d
TA1R	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(TA1R);                              \/* Timer1_A3 *\/$/;"	v
TACCR0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACCR0 /;"	d
TACCR0	src/Emulation/MPU/msp430g2553.h	/^#define TACCR0 /;"	d
TACCR0_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACCR0_ /;"	d
TACCR0_	src/Emulation/MPU/msp430g2553.h	/^#define TACCR0_ /;"	d
TACCR1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACCR1 /;"	d
TACCR1	src/Emulation/MPU/msp430g2553.h	/^#define TACCR1 /;"	d
TACCR1_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACCR1_ /;"	d
TACCR1_	src/Emulation/MPU/msp430g2553.h	/^#define TACCR1_ /;"	d
TACCR2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACCR2 /;"	d
TACCR2	src/Emulation/MPU/msp430g2553.h	/^#define TACCR2 /;"	d
TACCR2_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACCR2_ /;"	d
TACCR2_	src/Emulation/MPU/msp430g2553.h	/^#define TACCR2_ /;"	d
TACCTL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACCTL0 /;"	d
TACCTL0	src/Emulation/MPU/msp430g2553.h	/^#define TACCTL0 /;"	d
TACCTL0_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACCTL0_ /;"	d
TACCTL0_	src/Emulation/MPU/msp430g2553.h	/^#define TACCTL0_ /;"	d
TACCTL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACCTL1 /;"	d
TACCTL1	src/Emulation/MPU/msp430g2553.h	/^#define TACCTL1 /;"	d
TACCTL1_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACCTL1_ /;"	d
TACCTL1_	src/Emulation/MPU/msp430g2553.h	/^#define TACCTL1_ /;"	d
TACCTL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACCTL2 /;"	d
TACCTL2	src/Emulation/MPU/msp430g2553.h	/^#define TACCTL2 /;"	d
TACCTL2_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACCTL2_ /;"	d
TACCTL2_	src/Emulation/MPU/msp430g2553.h	/^#define TACCTL2_ /;"	d
TACLR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACLR /;"	d
TACLR	src/Emulation/MPU/msp430g2553.h	/^#define TACLR /;"	d
TACTL	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACTL /;"	d
TACTL	src/Emulation/MPU/msp430g2553.h	/^#define TACTL /;"	d
TACTL_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TACTL_ /;"	d
TACTL_	src/Emulation/MPU/msp430g2553.h	/^#define TACTL_ /;"	d
TAG_a	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_a	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_abbr	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_abbr	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_address	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_address	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_applet	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_applet	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_article	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_article	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_aside	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_aside	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_audio	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_audio	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_b	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_b	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_base	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_base	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_basefont	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_basefont	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_bdi	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_bdi	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_bdo	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_bdo	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_big	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_big	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_blockquote	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_blockquote	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_body	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_body	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_br	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_br	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_button	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_button	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_canvas	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_canvas	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_caption	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_caption	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_center	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_center	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_cite	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_cite	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_code	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_code	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_col	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_col	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_colgroup	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_colgroup	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_command	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_command	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_datalist	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_datalist	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_dd	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_dd	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_del	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_del	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_details	include/Eternia/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAG_details	src/Parsing/HTMLTags.h	/^enum HTMLTagType {TAG_a, TAG_abbr, TAG_applet, TAG_address, TAG_article, TAG_aside, TAG_audio, TAG_b, TAG_base, TAG_basefont, TAG_bdi, TAG_bdo, TAG_big, TAG_blockquote, TAG_body, TAG_br, TAG_button, TAG_canvas, TAG_caption, TAG_center, TAG_cite, TAG_code, TAG_col, TAG_colgroup, TAG_command, TAG_datalist, TAG_dd, TAG_del, TAG_details};$/;"	e	enum:HTMLTagType
TAIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TAIE /;"	d
TAIE	src/Emulation/MPU/msp430g2553.h	/^#define TAIE /;"	d
TAIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TAIFG /;"	d
TAIFG	src/Emulation/MPU/msp430g2553.h	/^#define TAIFG /;"	d
TAIV	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TAIV /;"	d
TAIV	src/Emulation/MPU/msp430g2553.h	/^#define TAIV /;"	d
TAIV_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TAIV_ /;"	d
TAIV_	src/Emulation/MPU/msp430g2553.h	/^#define TAIV_ /;"	d
TAR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TAR /;"	d
TAR	src/Emulation/MPU/msp430g2553.h	/^#define TAR /;"	d
TARGET_OS_OSX	include/Eternia/WebFramework/Network/SocketServer.h	/^        #define TARGET_OS_OSX /;"	d
TARGET_OS_OSX	src/WebFramework/Network/SocketServer.h	/^        #define TARGET_OS_OSX /;"	d
TAR_	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TAR_ /;"	d
TAR_	src/Emulation/MPU/msp430g2553.h	/^#define TAR_ /;"	d
TASSEL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TASSEL0 /;"	d
TASSEL0	src/Emulation/MPU/msp430g2553.h	/^#define TASSEL0 /;"	d
TASSEL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TASSEL1 /;"	d
TASSEL1	src/Emulation/MPU/msp430g2553.h	/^#define TASSEL1 /;"	d
TASSEL_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TASSEL_0 /;"	d
TASSEL_0	src/Emulation/MPU/msp430g2553.h	/^#define TASSEL_0 /;"	d
TASSEL_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TASSEL_1 /;"	d
TASSEL_1	src/Emulation/MPU/msp430g2553.h	/^#define TASSEL_1 /;"	d
TASSEL_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TASSEL_2 /;"	d
TASSEL_2	src/Emulation/MPU/msp430g2553.h	/^#define TASSEL_2 /;"	d
TASSEL_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TASSEL_3 /;"	d
TASSEL_3	src/Emulation/MPU/msp430g2553.h	/^#define TASSEL_3 /;"	d
TEMPLATE_H_	include/Eternia/WebFramework/Templates/Template.h	/^#define TEMPLATE_H_$/;"	d
TEMPLATE_H_	src/WebFramework/Templates/Template.h	/^#define TEMPLATE_H_$/;"	d
TESTABSTRACTDB_H_INCLUDED	src/Data/test/testAbstractDB.h	/^#define TESTABSTRACTDB_H_INCLUDED$/;"	d
TESTEXHASH_H_	src/Algorithm/Cryptography/test/testExHash.hpp	/^#define TESTEXHASH_H_$/;"	d
TEST_PTYPE_H_	src/Data/test/testPType.h	/^#define TEST_PTYPE_H_$/;"	d
TEnergy	include/Eternia/Engineering/Physics/Work.h	/^        double mass, TEnergy; \/\/ stored mass (Since mass doesn't normally change)$/;"	m	class:Work
TEnergy	src/Engineering/Physics/Work.h	/^        double mass, TEnergy; \/\/ stored mass (Since mass doesn't normally change)$/;"	m	class:Work
THERMALDYNAMICS_H_	include/Eternia/Engineering/Physics/ThermalDynamics/ThermalDynamics.h	/^#define THERMALDYNAMICS_H_$/;"	d
THERMALDYNAMICS_H_	src/Engineering/Physics/ThermalDynamics/ThermalDynamics.h	/^#define THERMALDYNAMICS_H_$/;"	d
THz	include/Eternia/constants.h	/^        const double THz = teraHertz;$/;"	m	namespace:physical::unit
THz	src/constants.h	/^        const double THz = teraHertz;$/;"	m	namespace:physical::unit
TID_DEF	src/Serialization/SpecificSerializer.cpp	/^    #define TID_DEF(/;"	d	file:
TID_SET	src/Serialization/SpecificSerializer.cpp	/^    #define TID_SET(/;"	d	file:
TIMER0_A0_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TIMER0_A0_VECTOR /;"	d
TIMER0_A0_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define TIMER0_A0_VECTOR /;"	d
TIMER0_A1_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TIMER0_A1_VECTOR /;"	d
TIMER0_A1_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define TIMER0_A1_VECTOR /;"	d
TIMER1_A0_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TIMER1_A0_VECTOR /;"	d
TIMER1_A0_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define TIMER1_A0_VECTOR /;"	d
TIMER1_A1_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define TIMER1_A1_VECTOR /;"	d
TIMER1_A1_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define TIMER1_A1_VECTOR /;"	d
TIME_PROFILER_H_	include/Eternia/Data/TimeProfiler.h	/^#define TIME_PROFILER_H_$/;"	d
TIME_PROFILER_H_	src/Data/TimeProfiler.h	/^#define TIME_PROFILER_H_$/;"	d
TRANSISTOR_h_	include/Eternia/Engineering/Electrical/Components/Transistor.h	/^#define TRANSISTOR_h_$/;"	d
TRANSISTOR_h_	src/Engineering/Electrical/Components/Transistor.h	/^#define TRANSISTOR_h_$/;"	d
TRDeductables	include/Eternia/Gamelogic/Economics/Tax/TaxRefund.h	/^enum TRDeductables {};$/;"	g
TRDeductables	src/Gamelogic/Economics/Tax/TaxRefund.h	/^enum TRDeductables {};$/;"	g
TREELIST_H_	include/Eternia/Data/TreeList.h	/^#define TREELIST_H_$/;"	d
TREELIST_H_	src/Data/TreeList.h	/^#define TREELIST_H_$/;"	d
TTBurning	include/Eternia/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
TTBurning	src/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
TTForest	include/Eternia/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
TTForest	src/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
TTGrassland	include/Eternia/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
TTGrassland	src/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
TTMarsh	include/Eternia/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
TTMarsh	src/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
TTOcean	include/Eternia/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
TTOcean	src/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	e	enum:PlanetaryConstants::TerrainTypes
TURRET_H_	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^#define TURRET_H_$/;"	d
TURRET_H_	src/Gamelogic/CoreSystems/Turret.h	/^#define TURRET_H_$/;"	d
TURT_BEAM	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	TURT_BEAM, TURT_PULSE, \/\/ Energy-based$/;"	e	enum:TUR_TYPE
TURT_BEAM	src/Gamelogic/CoreSystems/Turret.h	/^	TURT_BEAM, TURT_PULSE, \/\/ Energy-based$/;"	e	enum:TUR_TYPE
TURT_CANNON	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	TURT_MG, TURT_CANNON, TURT_FLAK, TURT_NUKE, \/\/ Ballistic-based$/;"	e	enum:TUR_TYPE
TURT_CANNON	src/Gamelogic/CoreSystems/Turret.h	/^	TURT_MG, TURT_CANNON, TURT_FLAK, TURT_NUKE, \/\/ Ballistic-based$/;"	e	enum:TUR_TYPE
TURT_FLAK	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	TURT_MG, TURT_CANNON, TURT_FLAK, TURT_NUKE, \/\/ Ballistic-based$/;"	e	enum:TUR_TYPE
TURT_FLAK	src/Gamelogic/CoreSystems/Turret.h	/^	TURT_MG, TURT_CANNON, TURT_FLAK, TURT_NUKE, \/\/ Ballistic-based$/;"	e	enum:TUR_TYPE
TURT_MG	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	TURT_MG, TURT_CANNON, TURT_FLAK, TURT_NUKE, \/\/ Ballistic-based$/;"	e	enum:TUR_TYPE
TURT_MG	src/Gamelogic/CoreSystems/Turret.h	/^	TURT_MG, TURT_CANNON, TURT_FLAK, TURT_NUKE, \/\/ Ballistic-based$/;"	e	enum:TUR_TYPE
TURT_NUKE	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	TURT_MG, TURT_CANNON, TURT_FLAK, TURT_NUKE, \/\/ Ballistic-based$/;"	e	enum:TUR_TYPE
TURT_NUKE	src/Gamelogic/CoreSystems/Turret.h	/^	TURT_MG, TURT_CANNON, TURT_FLAK, TURT_NUKE, \/\/ Ballistic-based$/;"	e	enum:TUR_TYPE
TURT_PULSE	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	TURT_BEAM, TURT_PULSE, \/\/ Energy-based$/;"	e	enum:TUR_TYPE
TURT_PULSE	src/Gamelogic/CoreSystems/Turret.h	/^	TURT_BEAM, TURT_PULSE, \/\/ Energy-based$/;"	e	enum:TUR_TYPE
TURT_RAILGUN	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	TURT_RAILGUN \/\/ Hybrid$/;"	e	enum:TUR_TYPE
TURT_RAILGUN	src/Gamelogic/CoreSystems/Turret.h	/^	TURT_RAILGUN \/\/ Hybrid$/;"	e	enum:TUR_TYPE
TUR_TYPE	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^enum TUR_TYPE {$/;"	g
TUR_TYPE	src/Gamelogic/CoreSystems/Turret.h	/^enum TUR_TYPE {$/;"	g
Tail	include/Eternia/Data/DoubleList.h	/^        DoubleNode *Tail;$/;"	m	class:DoubleList
Tail	include/Eternia/Data/IntegerList.h	/^        IntegerNode *Head, *Tail, *CNext;$/;"	m	class:IntegerList
Tail	include/Eternia/Data/Queue.h	/^        QueueNode *Head,*Tail;$/;"	m	class:Queue
Tail	src/Data/DoubleList.h	/^        DoubleNode *Tail;$/;"	m	class:DoubleList
Tail	src/Data/IntegerList.h	/^        IntegerNode *Head, *Tail, *CNext;$/;"	m	class:IntegerList
Tail	src/Data/Queue.h	/^        QueueNode *Head,*Tail;$/;"	m	class:Queue
Tantalium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Tantalium = new Atom("Tantalium", "Ta", 5, 6, 73, 108,72, 16.654,0.00000013, 0.057, 3290,5731, 0.14, 5, COLOR_Gray,ELEM_Transition);$/;"	v
Tantalium	src/Engineering/Chemistry/elementals.h	/^const Atom Tantalium = new Atom("Tantalium", "Ta", 5, 6, 73, 108,72, 16.654,0.00000013, 0.057, 3290,5731, 0.14, 5, COLOR_Gray,ELEM_Transition);$/;"	v
Tax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        Tax(double incomeTax, double tradeTax, double salesTax);$/;"	p	class:Tax
Tax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^class Tax {$/;"	c
Tax	src/Gamelogic/Economics/Tax/Tax.cpp	/^Tax::Tax(double incomeTax, double tradeTax, double salesTax) {$/;"	f	class:Tax
Tax	src/Gamelogic/Economics/Tax/Tax.h	/^        Tax(double incomeTax, double tradeTax, double salesTax);$/;"	p	class:Tax
Tax	src/Gamelogic/Economics/Tax/Tax.h	/^class Tax {$/;"	c
Tax::Income	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        double Income, Trade, Sales;$/;"	m	class:Tax
Tax::Income	src/Gamelogic/Economics/Tax/Tax.h	/^        double Income, Trade, Sales;$/;"	m	class:Tax
Tax::Sales	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        double Income, Trade, Sales;$/;"	m	class:Tax
Tax::Sales	src/Gamelogic/Economics/Tax/Tax.h	/^        double Income, Trade, Sales;$/;"	m	class:Tax
Tax::Tax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        Tax(double incomeTax, double tradeTax, double salesTax);$/;"	p	class:Tax
Tax::Tax	src/Gamelogic/Economics/Tax/Tax.cpp	/^Tax::Tax(double incomeTax, double tradeTax, double salesTax) {$/;"	f	class:Tax
Tax::Tax	src/Gamelogic/Economics/Tax/Tax.h	/^        Tax(double incomeTax, double tradeTax, double salesTax);$/;"	p	class:Tax
Tax::Trade	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        double Income, Trade, Sales;$/;"	m	class:Tax
Tax::Trade	src/Gamelogic/Economics/Tax/Tax.h	/^        double Income, Trade, Sales;$/;"	m	class:Tax
Tax::getIncomeTax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        double getIncomeTax();$/;"	p	class:Tax
Tax::getIncomeTax	src/Gamelogic/Economics/Tax/Tax.cpp	/^double Tax::getIncomeTax() {$/;"	f	class:Tax
Tax::getIncomeTax	src/Gamelogic/Economics/Tax/Tax.h	/^        double getIncomeTax();$/;"	p	class:Tax
Tax::getSalesTax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        double getSalesTax();$/;"	p	class:Tax
Tax::getSalesTax	src/Gamelogic/Economics/Tax/Tax.cpp	/^double Tax::getSalesTax() {$/;"	f	class:Tax
Tax::getSalesTax	src/Gamelogic/Economics/Tax/Tax.h	/^        double getSalesTax();$/;"	p	class:Tax
Tax::getTradeTax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        double getTradeTax();$/;"	p	class:Tax
Tax::getTradeTax	src/Gamelogic/Economics/Tax/Tax.cpp	/^double Tax::getTradeTax() {$/;"	f	class:Tax
Tax::getTradeTax	src/Gamelogic/Economics/Tax/Tax.h	/^        double getTradeTax();$/;"	p	class:Tax
Tax::setIncomeTax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        void setIncomeTax(double percent);$/;"	p	class:Tax
Tax::setIncomeTax	src/Gamelogic/Economics/Tax/Tax.cpp	/^void Tax::setIncomeTax(double percent) {$/;"	f	class:Tax
Tax::setIncomeTax	src/Gamelogic/Economics/Tax/Tax.h	/^        void setIncomeTax(double percent);$/;"	p	class:Tax
Tax::setSalesTax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        void setSalesTax(double percent);$/;"	p	class:Tax
Tax::setSalesTax	src/Gamelogic/Economics/Tax/Tax.cpp	/^void Tax::setSalesTax(double percent) {$/;"	f	class:Tax
Tax::setSalesTax	src/Gamelogic/Economics/Tax/Tax.h	/^        void setSalesTax(double percent);$/;"	p	class:Tax
Tax::setTradeTax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        void setTradeTax(double percent);$/;"	p	class:Tax
Tax::setTradeTax	src/Gamelogic/Economics/Tax/Tax.cpp	/^void Tax::setTradeTax(double percent) {$/;"	f	class:Tax
Tax::setTradeTax	src/Gamelogic/Economics/Tax/Tax.h	/^        void setTradeTax(double percent);$/;"	p	class:Tax
TaxRefund	include/Eternia/Gamelogic/Economics/Tax/TaxRefund.h	/^	TaxRefund(TRDeductables deductables, double value);$/;"	p	class:TaxRefund
TaxRefund	include/Eternia/Gamelogic/Economics/Tax/TaxRefund.h	/^class TaxRefund{$/;"	c
TaxRefund	src/Gamelogic/Economics/Tax/TaxRefund.h	/^	TaxRefund(TRDeductables deductables, double value);$/;"	p	class:TaxRefund
TaxRefund	src/Gamelogic/Economics/Tax/TaxRefund.h	/^class TaxRefund{$/;"	c
TaxRefund::TaxRefund	include/Eternia/Gamelogic/Economics/Tax/TaxRefund.h	/^	TaxRefund(TRDeductables deductables, double value);$/;"	p	class:TaxRefund
TaxRefund::TaxRefund	src/Gamelogic/Economics/Tax/TaxRefund.h	/^	TaxRefund(TRDeductables deductables, double value);$/;"	p	class:TaxRefund
TaxRefund_h	include/Eternia/Gamelogic/Economics/Tax/TaxRefund.h	/^#define TaxRefund_h$/;"	d
TaxRefund_h	src/Gamelogic/Economics/Tax/TaxRefund.h	/^#define TaxRefund_h$/;"	d
Tax_h	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^#define Tax_h$/;"	d
Tax_h	src/Gamelogic/Economics/Tax/Tax.h	/^#define Tax_h$/;"	d
Technetium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Technetium = new Atom("Technetium", "Tc", 7, 5, 43, 55,42, 11.5,0.0000002, 0.051, 2430,4538, UNKNOWN, 7, COLOR_Silver,ELEM_Transition);$/;"	v
Technetium	src/Engineering/Chemistry/elementals.h	/^const Atom Technetium = new Atom("Technetium", "Tc", 7, 5, 43, 55,42, 11.5,0.0000002, 0.051, 2430,4538, UNKNOWN, 7, COLOR_Silver,ELEM_Transition);$/;"	v
Tellurium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Tellurium = new Atom("Tellurium", "Te", 16, 5, 52, 76,51, 6.232,0.0001, 0.003, 722.66,1261, 0.202, 6, COLOR_Silver,ELEM_Metalloid);$/;"	v
Tellurium	src/Engineering/Chemistry/elementals.h	/^const Atom Tellurium = new Atom("Tellurium", "Te", 16, 5, 52, 76,51, 6.232,0.0001, 0.003, 722.66,1261, 0.202, 6, COLOR_Silver,ELEM_Metalloid);$/;"	v
Template	include/Eternia/WebFramework/Templates/Template.h	/^        Template();$/;"	p	class:Template
Template	include/Eternia/WebFramework/Templates/Template.h	/^        Template(CharString fileloc); \/\/ pre-loads a template file$/;"	p	class:Template
Template	include/Eternia/WebFramework/Templates/Template.h	/^class Template {$/;"	c
Template	src/WebFramework/Templates/Template.cpp	/^Template::Template(){}$/;"	f	class:Template
Template	src/WebFramework/Templates/Template.cpp	/^Template::Template(CharString fileloc){$/;"	f	class:Template
Template	src/WebFramework/Templates/Template.h	/^        Template();$/;"	p	class:Template
Template	src/WebFramework/Templates/Template.h	/^        Template(CharString fileloc); \/\/ pre-loads a template file$/;"	p	class:Template
Template	src/WebFramework/Templates/Template.h	/^class Template {$/;"	c
Template::Template	include/Eternia/WebFramework/Templates/Template.h	/^        Template();$/;"	p	class:Template
Template::Template	include/Eternia/WebFramework/Templates/Template.h	/^        Template(CharString fileloc); \/\/ pre-loads a template file$/;"	p	class:Template
Template::Template	src/WebFramework/Templates/Template.cpp	/^Template::Template(){}$/;"	f	class:Template
Template::Template	src/WebFramework/Templates/Template.cpp	/^Template::Template(CharString fileloc){$/;"	f	class:Template
Template::Template	src/WebFramework/Templates/Template.h	/^        Template();$/;"	p	class:Template
Template::Template	src/WebFramework/Templates/Template.h	/^        Template(CharString fileloc); \/\/ pre-loads a template file$/;"	p	class:Template
Template::addDefaultDefinitions	include/Eternia/WebFramework/Templates/Template.h	/^        void addDefaultDefinitions(); \/\/ must be called to have default definitions like {date}, {page}$/;"	p	class:Template
Template::addDefaultDefinitions	src/WebFramework/Templates/Template.cpp	/^void Template::addDefaultDefinitions(){$/;"	f	class:Template
Template::addDefaultDefinitions	src/WebFramework/Templates/Template.h	/^        void addDefaultDefinitions(); \/\/ must be called to have default definitions like {date}, {page}$/;"	p	class:Template
Template::addRegexDefinition	include/Eternia/WebFramework/Templates/Template.h	/^        void addRegexDefinition(CharString toreplace, CharString replacer); \/\/ Add a regex definition, occurs every single time during a render$/;"	p	class:Template
Template::addRegexDefinition	src/WebFramework/Templates/Template.cpp	/^void Template::addRegexDefinition(CharString toreplace, CharString replacer){$/;"	f	class:Template
Template::addRegexDefinition	src/WebFramework/Templates/Template.h	/^        void addRegexDefinition(CharString toreplace, CharString replacer); \/\/ Add a regex definition, occurs every single time during a render$/;"	p	class:Template
Template::addReplacingDefinition	include/Eternia/WebFramework/Templates/Template.h	/^        void addReplacingDefinition(CharString toreplace, CharString replacer); \/\/ Add a replacing definition, occurs every single time during a render$/;"	p	class:Template
Template::addReplacingDefinition	src/WebFramework/Templates/Template.cpp	/^void Template::addReplacingDefinition(CharString toreplace, CharString replacer){$/;"	f	class:Template
Template::addReplacingDefinition	src/WebFramework/Templates/Template.h	/^        void addReplacingDefinition(CharString toreplace, CharString replacer); \/\/ Add a replacing definition, occurs every single time during a render$/;"	p	class:Template
Template::render	include/Eternia/WebFramework/Templates/Template.h	/^        CharString render(); \/\/ Finalizes the template for usage$/;"	p	class:Template
Template::render	src/WebFramework/Templates/Template.cpp	/^CharString Template::render(){$/;"	f	class:Template
Template::render	src/WebFramework/Templates/Template.h	/^        CharString render(); \/\/ Finalizes the template for usage$/;"	p	class:Template
Template::templateList	include/Eternia/WebFramework/Templates/Template.h	/^        LinkedList<TemplateDefinition> templateList;$/;"	m	class:Template
Template::templateList	src/WebFramework/Templates/Template.h	/^        LinkedList<TemplateDefinition> templateList;$/;"	m	class:Template
Template::~Template	include/Eternia/WebFramework/Templates/Template.h	/^        virtual ~Template();$/;"	p	class:Template
Template::~Template	src/WebFramework/Templates/Template.cpp	/^Template::~Template(){}$/;"	f	class:Template
Template::~Template	src/WebFramework/Templates/Template.h	/^        virtual ~Template();$/;"	p	class:Template
TemplateDefinition	include/Eternia/WebFramework/Templates/Template.h	/^class TemplateDefinition {$/;"	c
TemplateDefinition	include/Eternia/WebFramework/Templates/Template.h	/^class TemplateDefinition;$/;"	x
TemplateDefinition	src/WebFramework/Templates/Template.h	/^class TemplateDefinition {$/;"	c
TemplateDefinition	src/WebFramework/Templates/Template.h	/^class TemplateDefinition;$/;"	x
TemplateDefinition::regex	include/Eternia/WebFramework/Templates/Template.h	/^        bool regex; \/\/ is regex or not?$/;"	m	class:TemplateDefinition
TemplateDefinition::regex	src/WebFramework/Templates/Template.h	/^        bool regex; \/\/ is regex or not?$/;"	m	class:TemplateDefinition
TemplateDefinition::replacer	include/Eternia/WebFramework/Templates/Template.h	/^        CharString* replacer;$/;"	m	class:TemplateDefinition
TemplateDefinition::replacer	src/WebFramework/Templates/Template.h	/^        CharString* replacer;$/;"	m	class:TemplateDefinition
TemplateDefinition::toreplace	include/Eternia/WebFramework/Templates/Template.h	/^        CharString toreplace;$/;"	m	class:TemplateDefinition
TemplateDefinition::toreplace	src/WebFramework/Templates/Template.h	/^        CharString toreplace;$/;"	m	class:TemplateDefinition
Terbium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Terbium = new Atom("Terbium", "Tb", 0, 6, 65, 97,64, 8.229,0.0000012, 0.011, 1629,3503, 0.182, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Terbium	src/Engineering/Chemistry/elementals.h	/^const Atom Terbium = new Atom("Terbium", "Tb", 0, 6, 65, 97,64, 8.229,0.0000012, 0.011, 1629,3503, 0.182, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Terrain	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Terrain();$/;"	p	class:Terrain
Terrain	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Terrain(long long seed, long long seed2);$/;"	p	class:Terrain
Terrain	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^class Terrain {$/;"	c
Terrain	src/Gamelogic/Environment/Planet/Planet.h	/^    Terrain();$/;"	p	class:Terrain
Terrain	src/Gamelogic/Environment/Planet/Planet.h	/^    Terrain(long long seed, long long seed2);$/;"	p	class:Terrain
Terrain	src/Gamelogic/Environment/Planet/Planet.h	/^class Terrain {$/;"	c
Terrain	src/Gamelogic/Environment/Planet/Planet_Terrain.cpp	/^ Terrain::Terrain(long long seed, long long seed2) {$/;"	f	class:Terrain
Terrain	src/Gamelogic/Environment/Planet/Planet_Terrain.cpp	/^Terrain::Terrain() {}$/;"	f	class:Terrain
Terrain::Terrain	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Terrain();$/;"	p	class:Terrain
Terrain::Terrain	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Terrain(long long seed, long long seed2);$/;"	p	class:Terrain
Terrain::Terrain	src/Gamelogic/Environment/Planet/Planet.h	/^    Terrain();$/;"	p	class:Terrain
Terrain::Terrain	src/Gamelogic/Environment/Planet/Planet.h	/^    Terrain(long long seed, long long seed2);$/;"	p	class:Terrain
Terrain::Terrain	src/Gamelogic/Environment/Planet/Planet_Terrain.cpp	/^ Terrain::Terrain(long long seed, long long seed2) {$/;"	f	class:Terrain
Terrain::Terrain	src/Gamelogic/Environment/Planet/Planet_Terrain.cpp	/^Terrain::Terrain() {}$/;"	f	class:Terrain
Terrain::eccentricity	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    int eccentricity; \/\/ how flat is the terrain?$/;"	m	class:Terrain
Terrain::eccentricity	src/Gamelogic/Environment/Planet/Planet.h	/^    int eccentricity; \/\/ how flat is the terrain?$/;"	m	class:Terrain
Terrain::genRand	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    int genRand(double phi, double theta);$/;"	p	class:Terrain
Terrain::genRand	src/Gamelogic/Environment/Planet/Planet.h	/^    int genRand(double phi, double theta);$/;"	p	class:Terrain
Terrain::genRand	src/Gamelogic/Environment/Planet/Planet_Terrain.cpp	/^int Terrain::genRand(double phi, double theta){$/;"	f	class:Terrain
Terrain::generate	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    void generate(int MIPLevel, double radius, vertex cameraloc);$/;"	p	class:Terrain
Terrain::generate	src/Gamelogic/Environment/Planet/Planet.h	/^    void generate(int MIPLevel, double radius, vertex cameraloc);$/;"	p	class:Terrain
Terrain::generate	src/Gamelogic/Environment/Planet/Planet_Terrain.cpp	/^void Terrain::generate(int MIPLevel, double radius, vertex cameraloc) {$/;"	f	class:Terrain
Terrain::generateFace	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    void generateFace(double rho, double phi, double theta, double delta, int suppress, vertex cameraloc);$/;"	p	class:Terrain
Terrain::generateFace	src/Gamelogic/Environment/Planet/Planet.h	/^    void generateFace(double rho, double phi, double theta, double delta, int suppress, vertex cameraloc);$/;"	p	class:Terrain
Terrain::generateFace	src/Gamelogic/Environment/Planet/Planet_Terrain.cpp	/^void Terrain::generateFace(double rho, double phi, double theta, double delta, int suppress, vertex cameraloc){$/;"	f	class:Terrain
Terrain::generateRegion	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    void generateRegion(int MIPLevel, double rho, double phi, double theta, double delta, int suppress, vertex cameraloc);$/;"	p	class:Terrain
Terrain::generateRegion	src/Gamelogic/Environment/Planet/Planet.h	/^    void generateRegion(int MIPLevel, double rho, double phi, double theta, double delta, int suppress, vertex cameraloc);$/;"	p	class:Terrain
Terrain::generateRegion	src/Gamelogic/Environment/Planet/Planet_Terrain.cpp	/^void Terrain::generateRegion(int MIPLevel, double rho, double phi, double theta, double delta, int suppress, vertex cameraloc){$/;"	f	class:Terrain
Terrain::radius	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    unsigned int radius;$/;"	m	class:Terrain
Terrain::radius	src/Gamelogic/Environment/Planet/Planet.h	/^    unsigned int radius;$/;"	m	class:Terrain
Terrain::seed	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2; \/\/ seed for planet. (Randomly generated, or loaded from server)$/;"	m	class:Terrain
Terrain::seed	src/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2; \/\/ seed for planet. (Randomly generated, or loaded from server)$/;"	m	class:Terrain
Terrain::seed2	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2; \/\/ seed for planet. (Randomly generated, or loaded from server)$/;"	m	class:Terrain
Terrain::seed2	src/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2; \/\/ seed for planet. (Randomly generated, or loaded from server)$/;"	m	class:Terrain
Terrain::verticies	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    LinkedList<vertex> verticies;$/;"	m	class:Terrain
Terrain::verticies	src/Gamelogic/Environment/Planet/Planet.h	/^    LinkedList<vertex> verticies;$/;"	m	class:Terrain
TerrainTypes	include/Eternia/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	g	namespace:PlanetaryConstants
TerrainTypes	src/constants.h	/^    enum TerrainTypes {TTOcean, TTGrassland, TTMarsh, TTForest, TTBurning};$/;"	g	namespace:PlanetaryConstants
Tesla	include/Eternia/constants.h	/^        const double Tesla = Weber\/(meter*meter);$/;"	m	namespace:physical::unit
Tesla	src/constants.h	/^        const double Tesla = Weber\/(meter*meter);$/;"	m	namespace:physical::unit
Teslas	include/Eternia/constants.h	/^        const double Teslas = Tesla;$/;"	m	namespace:physical::unit
Teslas	src/constants.h	/^        const double Teslas = Tesla;$/;"	m	namespace:physical::unit
TestStructure	src/Data/test/testDataStructures.cpp	/^        TestStructure() {$/;"	f	class:TestStructure
TestStructure	src/Data/test/testDataStructures.cpp	/^class TestStructure {$/;"	c	file:
TestStructure::TestStructure	src/Data/test/testDataStructures.cpp	/^        TestStructure() {$/;"	f	class:TestStructure
TestStructure::dataValue	src/Data/test/testDataStructures.cpp	/^        int dataValue;$/;"	m	class:TestStructure	file:
Thallium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Thallium = new Atom("Thallium", "Tl", 13, 6, 81, 123,80, 11.85,0.00000015, 0.046, 577,1746, 0.129, 3, COLOR_Silver,ELEM_Poor);$/;"	v
Thallium	src/Engineering/Chemistry/elementals.h	/^const Atom Thallium = new Atom("Thallium", "Tl", 13, 6, 81, 123,80, 11.85,0.00000015, 0.046, 577,1746, 0.129, 3, COLOR_Silver,ELEM_Poor);$/;"	v
ThermalDynamics	include/Eternia/Engineering/Physics/ThermalDynamics/ThermalDynamics.h	/^        ThermalDynamics();$/;"	p	class:ThermalDynamics
ThermalDynamics	include/Eternia/Engineering/Physics/ThermalDynamics/ThermalDynamics.h	/^class ThermalDynamics {$/;"	c
ThermalDynamics	src/Engineering/Physics/ThermalDynamics/ThermalDynamics.cpp	/^ThermalDynamics::ThermalDynamics() {$/;"	f	class:ThermalDynamics
ThermalDynamics	src/Engineering/Physics/ThermalDynamics/ThermalDynamics.h	/^        ThermalDynamics();$/;"	p	class:ThermalDynamics
ThermalDynamics	src/Engineering/Physics/ThermalDynamics/ThermalDynamics.h	/^class ThermalDynamics {$/;"	c
ThermalDynamics::ThermalDynamics	include/Eternia/Engineering/Physics/ThermalDynamics/ThermalDynamics.h	/^        ThermalDynamics();$/;"	p	class:ThermalDynamics
ThermalDynamics::ThermalDynamics	src/Engineering/Physics/ThermalDynamics/ThermalDynamics.cpp	/^ThermalDynamics::ThermalDynamics() {$/;"	f	class:ThermalDynamics
ThermalDynamics::ThermalDynamics	src/Engineering/Physics/ThermalDynamics/ThermalDynamics.h	/^        ThermalDynamics();$/;"	p	class:ThermalDynamics
ThermalDynamics::~ThermalDynamics	include/Eternia/Engineering/Physics/ThermalDynamics/ThermalDynamics.h	/^        virtual ~ThermalDynamics();$/;"	p	class:ThermalDynamics
ThermalDynamics::~ThermalDynamics	src/Engineering/Physics/ThermalDynamics/ThermalDynamics.cpp	/^ThermalDynamics::~ThermalDynamics() {$/;"	f	class:ThermalDynamics
ThermalDynamics::~ThermalDynamics	src/Engineering/Physics/ThermalDynamics/ThermalDynamics.h	/^        virtual ~ThermalDynamics();$/;"	p	class:ThermalDynamics
Thermal_DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Thermal_DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Thorium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Thorium = new Atom("Thorium", "Th", 0, 7, 90, 142,89, 11.72,0.00000015, 0.054, 2115,5061, 0.113, 4, COLOR_Silver,ELEM_Actinide);$/;"	v
Thorium	src/Engineering/Chemistry/elementals.h	/^const Atom Thorium = new Atom("Thorium", "Th", 0, 7, 90, 142,89, 11.72,0.00000015, 0.054, 2115,5061, 0.113, 4, COLOR_Silver,ELEM_Actinide);$/;"	v
Thulmium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Thulmium = new Atom("Thulmium", "Tm", 0, 6, 69, 103,68, 9.321,0.0000007, 0.017, 1818,2223, 0.16, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Thulmium	src/Engineering/Chemistry/elementals.h	/^const Atom Thulmium = new Atom("Thulmium", "Tm", 0, 6, 69, 103,68, 9.321,0.0000007, 0.017, 1818,2223, 0.16, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
TimeProfiler	include/Eternia/Data/TimeProfiler.h	/^    TimeProfiler();$/;"	p	class:TimeProfiler
TimeProfiler	include/Eternia/Data/TimeProfiler.h	/^class TimeProfiler{$/;"	c
TimeProfiler	src/Data/TimeProfiler.cpp	/^TimeProfiler::TimeProfiler(){}$/;"	f	class:TimeProfiler
TimeProfiler	src/Data/TimeProfiler.h	/^    TimeProfiler();$/;"	p	class:TimeProfiler
TimeProfiler	src/Data/TimeProfiler.h	/^class TimeProfiler{$/;"	c
TimeProfiler::TimeProfiler	include/Eternia/Data/TimeProfiler.h	/^    TimeProfiler();$/;"	p	class:TimeProfiler
TimeProfiler::TimeProfiler	src/Data/TimeProfiler.cpp	/^TimeProfiler::TimeProfiler(){}$/;"	f	class:TimeProfiler
TimeProfiler::TimeProfiler	src/Data/TimeProfiler.h	/^    TimeProfiler();$/;"	p	class:TimeProfiler
TimeProfiler::beginProfile	include/Eternia/Data/TimeProfiler.h	/^    void beginProfile(); \/\/ begin a profiling session$/;"	p	class:TimeProfiler
TimeProfiler::beginProfile	src/Data/TimeProfiler.cpp	/^void TimeProfiler::beginProfile(){$/;"	f	class:TimeProfiler
TimeProfiler::beginProfile	src/Data/TimeProfiler.h	/^    void beginProfile(); \/\/ begin a profiling session$/;"	p	class:TimeProfiler
TimeProfiler::endProfile	include/Eternia/Data/TimeProfiler.h	/^    void endProfile(); \/\/ end the profiler, do tallies$/;"	p	class:TimeProfiler
TimeProfiler::endProfile	src/Data/TimeProfiler.cpp	/^void TimeProfiler::endProfile(){$/;"	f	class:TimeProfiler
TimeProfiler::endProfile	src/Data/TimeProfiler.h	/^    void endProfile(); \/\/ end the profiler, do tallies$/;"	p	class:TimeProfiler
TimeProfiler::items	include/Eternia/Data/TimeProfiler.h	/^    LinkedList<CharString> items;$/;"	m	class:TimeProfiler
TimeProfiler::items	src/Data/TimeProfiler.h	/^    LinkedList<CharString> items;$/;"	m	class:TimeProfiler
TimeProfiler::printProfiles	include/Eternia/Data/TimeProfiler.h	/^    void printProfiles(); \/\/ prints out all profiles onto console.$/;"	p	class:TimeProfiler
TimeProfiler::printProfiles	src/Data/TimeProfiler.cpp	/^void TimeProfiler::printProfiles(){$/;"	f	class:TimeProfiler
TimeProfiler::printProfiles	src/Data/TimeProfiler.h	/^    void printProfiles(); \/\/ prints out all profiles onto console.$/;"	p	class:TimeProfiler
TimeProfiler::profileItem	include/Eternia/Data/TimeProfiler.h	/^    void profileItem(CharString name);$/;"	p	class:TimeProfiler
TimeProfiler::profileItem	src/Data/TimeProfiler.cpp	/^void TimeProfiler::profileItem(CharString name){$/;"	f	class:TimeProfiler
TimeProfiler::profileItem	src/Data/TimeProfiler.h	/^    void profileItem(CharString name);$/;"	p	class:TimeProfiler
TimeProfiler::profilemap	include/Eternia/Data/TimeProfiler.h	/^    HashMap<CyclicList<long>> profilemap;$/;"	m	class:TimeProfiler
TimeProfiler::profilemap	src/Data/TimeProfiler.h	/^    HashMap<CyclicList<long>> profilemap;$/;"	m	class:TimeProfiler
TimeProfiler::startTime	include/Eternia/Data/TimeProfiler.h	/^    long startTime; \/\/ time used when taking a delta$/;"	m	class:TimeProfiler
TimeProfiler::startTime	src/Data/TimeProfiler.h	/^    long startTime; \/\/ time used when taking a delta$/;"	m	class:TimeProfiler
TimeProfiler::~TimeProfiler	include/Eternia/Data/TimeProfiler.h	/^    virtual ~TimeProfiler();$/;"	p	class:TimeProfiler
TimeProfiler::~TimeProfiler	src/Data/TimeProfiler.cpp	/^TimeProfiler::~TimeProfiler(){}$/;"	f	class:TimeProfiler
TimeProfiler::~TimeProfiler	src/Data/TimeProfiler.h	/^    virtual ~TimeProfiler();$/;"	p	class:TimeProfiler
TimeSample	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^class TimeSample {$/;"	c
TimeSample	src/Engineering/Electrical/Signal/TimeSignal.h	/^class TimeSample {$/;"	c
TimeSample::time	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    float time; \/\/ time displacement in seconds.$/;"	m	class:TimeSample
TimeSample::time	src/Engineering/Electrical/Signal/TimeSignal.h	/^    float time; \/\/ time displacement in seconds.$/;"	m	class:TimeSample
TimeSample::value	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    float value;$/;"	m	class:TimeSample
TimeSample::value	src/Engineering/Electrical/Signal/TimeSignal.h	/^    float value;$/;"	m	class:TimeSample
TimeSignal	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    TimeSignal();$/;"	p	class:TimeSignal
TimeSignal	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^class TimeSignal {$/;"	c
TimeSignal	src/Engineering/Electrical/Signal/TimeSignal.h	/^    TimeSignal();$/;"	p	class:TimeSignal
TimeSignal	src/Engineering/Electrical/Signal/TimeSignal.h	/^class TimeSignal {$/;"	c
TimeSignal::FFT	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    FreqSignal FFT(); \/\/ outputs the frequency domain, useful to apply filters$/;"	p	class:TimeSignal
TimeSignal::FFT	src/Engineering/Electrical/Signal/TimeSignal.h	/^    FreqSignal FFT(); \/\/ outputs the frequency domain, useful to apply filters$/;"	p	class:TimeSignal
TimeSignal::TimeSignal	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    TimeSignal();$/;"	p	class:TimeSignal
TimeSignal::TimeSignal	src/Engineering/Electrical/Signal/TimeSignal.h	/^    TimeSignal();$/;"	p	class:TimeSignal
TimeSignal::amplify	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void amplify(float value);$/;"	p	class:TimeSignal
TimeSignal::amplify	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void amplify(float value);$/;"	p	class:TimeSignal
TimeSignal::clearSamples	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void clearSamples();$/;"	p	class:TimeSignal
TimeSignal::clearSamples	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void clearSamples();$/;"	p	class:TimeSignal
TimeSignal::sampleAnalog	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleAnalog(float value); \/\/ sample an analog signal (-1f -> 1f)$/;"	p	class:TimeSignal
TimeSignal::sampleAnalog	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleAnalog(float value, float time); \/\/ sample an analog signal (-1f -> 1f)$/;"	p	class:TimeSignal
TimeSignal::sampleAnalog	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleAnalog(float value); \/\/ sample an analog signal (-1f -> 1f)$/;"	p	class:TimeSignal
TimeSignal::sampleAnalog	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleAnalog(float value, float time); \/\/ sample an analog signal (-1f -> 1f)$/;"	p	class:TimeSignal
TimeSignal::sampleDigital	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleDigital(boolean value); \/\/ sample a digital signal (0->1f)$/;"	p	class:TimeSignal
TimeSignal::sampleDigital	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleDigital(boolean value, float time); \/\/ sample a digital signal (0->1f)$/;"	p	class:TimeSignal
TimeSignal::sampleDigital	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleDigital(boolean value); \/\/ sample a digital signal (0->1f)$/;"	p	class:TimeSignal
TimeSignal::sampleDigital	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleDigital(boolean value, float time); \/\/ sample a digital signal (0->1f)$/;"	p	class:TimeSignal
TimeSignal::samples	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    LinkedList<Sample> samples;$/;"	m	class:TimeSignal
TimeSignal::samples	src/Engineering/Electrical/Signal/TimeSignal.h	/^    LinkedList<Sample> samples;$/;"	m	class:TimeSignal
TimeSignal::startSample	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void startSample(); \/\/ sets up time offset$/;"	p	class:TimeSignal
TimeSignal::startSample	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void startSample(); \/\/ sets up time offset$/;"	p	class:TimeSignal
TimeSignal::~TimeSignal	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    virtual ~TimeSignal();$/;"	p	class:TimeSignal
TimeSignal::~TimeSignal	src/Engineering/Electrical/Signal/TimeSignal.h	/^    virtual ~TimeSignal();$/;"	p	class:TimeSignal
TimeSignal_H_	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^#define TimeSignal_H_$/;"	d
TimeSignal_H_	src/Engineering/Electrical/Signal/TimeSignal.h	/^#define TimeSignal_H_$/;"	d
Tin	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Tin = new Atom("Tin", "Sn", 14, 5, 50, 69,49, 7.287,0.00000011, 0.067, 505.08,2875, 0.228, 4, COLOR_Silver,ELEM_Poor);$/;"	v
Tin	src/Engineering/Chemistry/elementals.h	/^const Atom Tin = new Atom("Tin", "Sn", 14, 5, 50, 69,49, 7.287,0.00000011, 0.067, 505.08,2875, 0.228, 4, COLOR_Silver,ELEM_Poor);$/;"	v
Titanium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Titanium = new Atom("Titanium", "Ti", 4, 4, 22, 26,21, 4.54,0.0000004, 0.022, 1941,3560, 0.523, 4, COLOR_Silver,ELEM_Transition);$/;"	v
Titanium	src/Engineering/Chemistry/elementals.h	/^const Atom Titanium = new Atom("Titanium", "Ti", 4, 4, 22, 26,21, 4.54,0.0000004, 0.022, 1941,3560, 0.523, 4, COLOR_Silver,ELEM_Transition);$/;"	v
Torr	include/Eternia/constants.h	/^        const double Torr = 133.3224*Pascals;$/;"	m	namespace:physical::unit
Torr	src/constants.h	/^        const double Torr = 133.3224*Pascals;$/;"	m	namespace:physical::unit
Trade	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        double Income, Trade, Sales;$/;"	m	class:Tax
Trade	src/Gamelogic/Economics/Tax/Tax.h	/^        double Income, Trade, Sales;$/;"	m	class:Tax
TradingHub_h	include/Eternia/Gamelogic/Economics/Trading/TradingHub.h	/^#define TradingHub_h$/;"	d
TradingHub_h	src/Gamelogic/Economics/Trading/TradingHub.h	/^#define TradingHub_h$/;"	d
Transistor	include/Eternia/Engineering/Electrical/Components/Transistor.h	/^        Transistor();$/;"	p	class:Transistor
Transistor	include/Eternia/Engineering/Electrical/Components/Transistor.h	/^class Transistor : private Component {$/;"	c
Transistor	src/Engineering/Electrical/Components/Transistor.h	/^        Transistor();$/;"	p	class:Transistor
Transistor	src/Engineering/Electrical/Components/Transistor.h	/^class Transistor : private Component {$/;"	c
Transistor::Transistor	include/Eternia/Engineering/Electrical/Components/Transistor.h	/^        Transistor();$/;"	p	class:Transistor
Transistor::Transistor	src/Engineering/Electrical/Components/Transistor.h	/^        Transistor();$/;"	p	class:Transistor
Transistor::pinD	include/Eternia/Engineering/Electrical/Components/Transistor.h	/^        PowerValue* pinD; \/\/ Drain pin$/;"	m	class:Transistor
Transistor::pinD	src/Engineering/Electrical/Components/Transistor.h	/^        PowerValue* pinD; \/\/ Drain pin$/;"	m	class:Transistor
Transistor::pinG	include/Eternia/Engineering/Electrical/Components/Transistor.h	/^        PowerValue* pinG; \/\/ Gate Pin$/;"	m	class:Transistor
Transistor::pinG	src/Engineering/Electrical/Components/Transistor.h	/^        PowerValue* pinG; \/\/ Gate Pin$/;"	m	class:Transistor
Transistor::tick	include/Eternia/Engineering/Electrical/Components/Transistor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Transistor
Transistor::tick	src/Engineering/Electrical/Components/Transistor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Transistor
Transistor::~Transistor	include/Eternia/Engineering/Electrical/Components/Transistor.h	/^        virtual ~Transistor();$/;"	p	class:Transistor
Transistor::~Transistor	src/Engineering/Electrical/Components/Transistor.h	/^        virtual ~Transistor();$/;"	p	class:Transistor
Tree	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        Tree(); \/\/ <-- generates random seed and depth level$/;"	p	class:Tree
Tree	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        Tree(int seed, int level);$/;"	p	class:Tree
Tree	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^class Tree {$/;"	c
Tree	src/Gamelogic/Environment/Object/Tree.h	/^        Tree(); \/\/ <-- generates random seed and depth level$/;"	p	class:Tree
Tree	src/Gamelogic/Environment/Object/Tree.h	/^        Tree(int seed, int level);$/;"	p	class:Tree
Tree	src/Gamelogic/Environment/Object/Tree.h	/^class Tree {$/;"	c
Tree::Tree	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        Tree(); \/\/ <-- generates random seed and depth level$/;"	p	class:Tree
Tree::Tree	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        Tree(int seed, int level);$/;"	p	class:Tree
Tree::Tree	src/Gamelogic/Environment/Object/Tree.h	/^        Tree(); \/\/ <-- generates random seed and depth level$/;"	p	class:Tree
Tree::Tree	src/Gamelogic/Environment/Object/Tree.h	/^        Tree(int seed, int level);$/;"	p	class:Tree
Tree::angle	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        vertex* angle;$/;"	m	class:Tree
Tree::angle	src/Gamelogic/Environment/Object/Tree.h	/^        vertex* angle;$/;"	m	class:Tree
Tree::limbs	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        LinkedList<TreeLimb> *limbs; \/\/ list of consecutive limbs$/;"	m	class:Tree
Tree::limbs	src/Gamelogic/Environment/Object/Tree.h	/^        LinkedList<TreeLimb> *limbs; \/\/ list of consecutive limbs$/;"	m	class:Tree
Tree::location	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        vertex* location; \/\/ location on the current world$/;"	m	class:Tree
Tree::location	src/Gamelogic/Environment/Object/Tree.h	/^        vertex* location; \/\/ location on the current world$/;"	m	class:Tree
Tree::seed	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        int seed;$/;"	m	class:Tree
Tree::seed	src/Gamelogic/Environment/Object/Tree.h	/^        int seed;$/;"	m	class:Tree
TreeBranch	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        TreeBranch(int seed); \/\/ <-- branch grown from the seed$/;"	p	class:TreeBranch
TreeBranch	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^class TreeBranch {$/;"	c
TreeBranch	src/Gamelogic/Environment/Object/Tree.h	/^        TreeBranch(int seed); \/\/ <-- branch grown from the seed$/;"	p	class:TreeBranch
TreeBranch	src/Gamelogic/Environment/Object/Tree.h	/^class TreeBranch {$/;"	c
TreeBranch::TreeBranch	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        TreeBranch(int seed); \/\/ <-- branch grown from the seed$/;"	p	class:TreeBranch
TreeBranch::TreeBranch	src/Gamelogic/Environment/Object/Tree.h	/^        TreeBranch(int seed); \/\/ <-- branch grown from the seed$/;"	p	class:TreeBranch
TreeBranch::angle	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        vertex* angle; \/\/ angle on the branch from the base$/;"	m	class:TreeBranch
TreeBranch::angle	src/Gamelogic/Environment/Object/Tree.h	/^        vertex* angle; \/\/ angle on the branch from the base$/;"	m	class:TreeBranch
TreeBranch::childBranch	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        TreeBranch *childBranch;$/;"	m	class:TreeBranch
TreeBranch::childBranch	src/Gamelogic/Environment/Object/Tree.h	/^        TreeBranch *childBranch;$/;"	m	class:TreeBranch
TreeBranch::offset	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        double offset = 0.0; \/\/ offset along the limb (or parent branch)$/;"	m	class:TreeBranch
TreeBranch::offset	src/Gamelogic/Environment/Object/Tree.h	/^        double offset = 0.0; \/\/ offset along the limb (or parent branch)$/;"	m	class:TreeBranch
TreeLimb	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        TreeLimb(int seed); \/\/ <-- seed given from tree, planted here$/;"	p	class:TreeLimb
TreeLimb	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^class TreeLimb {$/;"	c
TreeLimb	src/Gamelogic/Environment/Object/Tree.h	/^        TreeLimb(int seed); \/\/ <-- seed given from tree, planted here$/;"	p	class:TreeLimb
TreeLimb	src/Gamelogic/Environment/Object/Tree.h	/^class TreeLimb {$/;"	c
TreeLimb::TreeLimb	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        TreeLimb(int seed); \/\/ <-- seed given from tree, planted here$/;"	p	class:TreeLimb
TreeLimb::TreeLimb	src/Gamelogic/Environment/Object/Tree.h	/^        TreeLimb(int seed); \/\/ <-- seed given from tree, planted here$/;"	p	class:TreeLimb
TreeLimb::angle	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        vertex* angle; \/\/ angle on the limb from the base$/;"	m	class:TreeLimb
TreeLimb::angle	src/Gamelogic/Environment/Object/Tree.h	/^        vertex* angle; \/\/ angle on the limb from the base$/;"	m	class:TreeLimb
TreeLimb::branches	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        LinkedList<TreeBranch> *branches; \/\/ list of consecutive branches$/;"	m	class:TreeLimb
TreeLimb::branches	src/Gamelogic/Environment/Object/Tree.h	/^        LinkedList<TreeBranch> *branches; \/\/ list of consecutive branches$/;"	m	class:TreeLimb
TreeLimb::offset	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        double offset = 0.0; \/\/ offset from the bark base$/;"	m	class:TreeLimb
TreeLimb::offset	src/Gamelogic/Environment/Object/Tree.h	/^        double offset = 0.0; \/\/ offset from the bark base$/;"	m	class:TreeLimb
TreeList	include/Eternia/Data/TreeList.h	/^        TreeList();$/;"	p	class:TreeList
TreeList	include/Eternia/Data/TreeList.h	/^class TreeList {$/;"	c
TreeList	src/Data/TreeList.cpp	/^TreeList::TreeList() {}$/;"	f	class:TreeList
TreeList	src/Data/TreeList.h	/^        TreeList();$/;"	p	class:TreeList
TreeList	src/Data/TreeList.h	/^class TreeList {$/;"	c
TreeList::Empty	include/Eternia/Data/TreeList.h	/^        bool Empty(); \/\/ is Empty?$/;"	p	class:TreeList
TreeList::Empty	src/Data/TreeList.h	/^        bool Empty(); \/\/ is Empty?$/;"	p	class:TreeList
TreeList::Height	include/Eternia/Data/TreeList.h	/^        int Height(); \/\/ maximum depth$/;"	p	class:TreeList
TreeList::Height	src/Data/TreeList.h	/^        int Height(); \/\/ maximum depth$/;"	p	class:TreeList
TreeList::Root	include/Eternia/Data/TreeList.h	/^        TreeNode *Root;$/;"	m	class:TreeList
TreeList::Root	src/Data/TreeList.h	/^        TreeNode *Root;$/;"	m	class:TreeList
TreeList::Size	include/Eternia/Data/TreeList.h	/^        int Size(); \/\/ total size$/;"	p	class:TreeList
TreeList::Size	src/Data/TreeList.h	/^        int Size(); \/\/ total size$/;"	p	class:TreeList
TreeList::TreeList	include/Eternia/Data/TreeList.h	/^        TreeList();$/;"	p	class:TreeList
TreeList::TreeList	src/Data/TreeList.cpp	/^TreeList::TreeList() {}$/;"	f	class:TreeList
TreeList::TreeList	src/Data/TreeList.h	/^        TreeList();$/;"	p	class:TreeList
TreeNode	include/Eternia/Data/TreeList.h	/^class TreeNode {$/;"	c
TreeNode	src/Data/TreeList.h	/^class TreeNode {$/;"	c
TreeNode::Child	include/Eternia/Data/TreeList.h	/^        TreeNode *Parent, *Child;$/;"	m	class:TreeNode
TreeNode::Child	src/Data/TreeList.h	/^        TreeNode *Parent, *Child;$/;"	m	class:TreeNode
TreeNode::Depth	include/Eternia/Data/TreeList.h	/^        int Depth(); \/\/ how far in is this node?$/;"	p	class:TreeNode
TreeNode::Depth	src/Data/TreeList.h	/^        int Depth(); \/\/ how far in is this node?$/;"	p	class:TreeNode
TreeNode::Parent	include/Eternia/Data/TreeList.h	/^        TreeNode *Parent, *Child;$/;"	m	class:TreeNode
TreeNode::Parent	src/Data/TreeList.h	/^        TreeNode *Parent, *Child;$/;"	m	class:TreeNode
TreeNode::PrevSibling	include/Eternia/Data/TreeList.h	/^        TreeNode *Sibling, *PrevSibling;$/;"	m	class:TreeNode
TreeNode::PrevSibling	src/Data/TreeList.h	/^        TreeNode *Sibling, *PrevSibling;$/;"	m	class:TreeNode
TreeNode::Sibling	include/Eternia/Data/TreeList.h	/^        TreeNode *Sibling, *PrevSibling;$/;"	m	class:TreeNode
TreeNode::Sibling	src/Data/TreeList.h	/^        TreeNode *Sibling, *PrevSibling;$/;"	m	class:TreeNode
TreeNode::data	include/Eternia/Data/TreeList.h	/^        void* data;$/;"	m	class:TreeNode
TreeNode::data	src/Data/TreeList.h	/^        void* data;$/;"	m	class:TreeNode
TreeNode::isLeaf	include/Eternia/Data/TreeList.h	/^        bool isLeaf(); \/\/ is leaf (end) node?$/;"	p	class:TreeNode
TreeNode::isLeaf	src/Data/TreeList.h	/^        bool isLeaf(); \/\/ is leaf (end) node?$/;"	p	class:TreeNode
TreeNode::isRoot	include/Eternia/Data/TreeList.h	/^        bool isRoot(); \/\/ is top node?$/;"	p	class:TreeNode
TreeNode::isRoot	src/Data/TreeList.h	/^        bool isRoot(); \/\/ is top node?$/;"	p	class:TreeNode
Tungsten	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Tungsten = new Atom("Tungsten", "W", 6, 6, 74, 110,73, 19.25,0.00000005, 0.17, 3695,5828, 0.132, 6, COLOR_Gray,ELEM_Transition);$/;"	v
Tungsten	src/Engineering/Chemistry/elementals.h	/^const Atom Tungsten = new Atom("Tungsten", "W", 6, 6, 74, 110,73, 19.25,0.00000005, 0.17, 3695,5828, 0.132, 6, COLOR_Gray,ELEM_Transition);$/;"	v
Tunnel_DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Tunnel_DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Turret	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	Turret();$/;"	p	class:Turret
Turret	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^class Turret{$/;"	c
Turret	src/Gamelogic/CoreSystems/Turret.h	/^	Turret();$/;"	p	class:Turret
Turret	src/Gamelogic/CoreSystems/Turret.h	/^class Turret{$/;"	c
Turret::Turret	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	Turret();$/;"	p	class:Turret
Turret::Turret	src/Gamelogic/CoreSystems/Turret.h	/^	Turret();$/;"	p	class:Turret
Turret::mass	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	float mass; \/\/ total mass of the turret in kilograms$/;"	m	class:Turret
Turret::mass	src/Gamelogic/CoreSystems/Turret.h	/^	float mass; \/\/ total mass of the turret in kilograms$/;"	m	class:Turret
Turret::turret_class	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	int turret_class; \/\/ class of the weapon, more or less just used for identifying it's ship fitting.$/;"	m	class:Turret
Turret::turret_class	src/Gamelogic/CoreSystems/Turret.h	/^	int turret_class; \/\/ class of the weapon, more or less just used for identifying it's ship fitting.$/;"	m	class:Turret
Type	include/Eternia/Engineering/Chemistry/Composite.h	/^        STATE Type;$/;"	m	class:Composite
Type	src/Engineering/Chemistry/Composite.h	/^        STATE Type;$/;"	m	class:Composite
UBUNTU_VERSION_STYLE	version.h	/^#define UBUNTU_VERSION_STYLE /;"	d
UC0IE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UC0IE /;"	d
UC0IE	src/Emulation/MPU/msp430g2553.h	/^#define UC0IE /;"	d
UC0IFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UC0IFG /;"	d
UC0IFG	src/Emulation/MPU/msp430g2553.h	/^#define UC0IFG /;"	d
UC7BIT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UC7BIT /;"	d
UC7BIT	src/Emulation/MPU/msp430g2553.h	/^#define UC7BIT /;"	d
UCA0ABCTL	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0ABCTL /;"	d
UCA0ABCTL	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0ABCTL);                          \/* USCI A0 LIN Control *\/$/;"	v
UCA0ABCTL	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0ABCTL /;"	d
UCA0ABCTL	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0ABCTL);                          \/* USCI A0 LIN Control *\/$/;"	v
UCA0BR0	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0BR0 /;"	d
UCA0BR0	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0BR0);                            \/* USCI A0 Baud Rate 0 *\/$/;"	v
UCA0BR0	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0BR0 /;"	d
UCA0BR0	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0BR0);                            \/* USCI A0 Baud Rate 0 *\/$/;"	v
UCA0BR1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0BR1 /;"	d
UCA0BR1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0BR1);                            \/* USCI A0 Baud Rate 1 *\/$/;"	v
UCA0BR1	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0BR1 /;"	d
UCA0BR1	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0BR1);                            \/* USCI A0 Baud Rate 1 *\/$/;"	v
UCA0CTL0	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0CTL0 /;"	d
UCA0CTL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0CTL0);                           \/* USCI A0 Control Register 0 *\/$/;"	v
UCA0CTL0	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0CTL0 /;"	d
UCA0CTL0	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0CTL0);                           \/* USCI A0 Control Register 0 *\/$/;"	v
UCA0CTL1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0CTL1 /;"	d
UCA0CTL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0CTL1);                           \/* USCI A0 Control Register 1 *\/$/;"	v
UCA0CTL1	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0CTL1 /;"	d
UCA0CTL1	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0CTL1);                           \/* USCI A0 Control Register 1 *\/$/;"	v
UCA0IRRCTL	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0IRRCTL /;"	d
UCA0IRRCTL	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0IRRCTL);                         \/* USCI A0 IrDA Receive Control *\/$/;"	v
UCA0IRRCTL	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0IRRCTL /;"	d
UCA0IRRCTL	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0IRRCTL);                         \/* USCI A0 IrDA Receive Control *\/$/;"	v
UCA0IRTCTL	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0IRTCTL /;"	d
UCA0IRTCTL	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0IRTCTL);                         \/* USCI A0 IrDA Transmit Control *\/$/;"	v
UCA0IRTCTL	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0IRTCTL /;"	d
UCA0IRTCTL	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0IRTCTL);                         \/* USCI A0 IrDA Transmit Control *\/$/;"	v
UCA0MCTL	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0MCTL /;"	d
UCA0MCTL	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0MCTL);                           \/* USCI A0 Modulation Control *\/$/;"	v
UCA0MCTL	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0MCTL /;"	d
UCA0MCTL	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0MCTL);                           \/* USCI A0 Modulation Control *\/$/;"	v
UCA0RXBUF	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0RXBUF /;"	d
UCA0RXBUF	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0RXBUF);                          \/* USCI A0 Receive Buffer *\/$/;"	v
UCA0RXBUF	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0RXBUF /;"	d
UCA0RXBUF	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0RXBUF);                          \/* USCI A0 Receive Buffer *\/$/;"	v
UCA0RXIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCA0RXIE /;"	d
UCA0RXIE	src/Emulation/MPU/msp430g2553.h	/^#define UCA0RXIE /;"	d
UCA0RXIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCA0RXIFG /;"	d
UCA0RXIFG	src/Emulation/MPU/msp430g2553.h	/^#define UCA0RXIFG /;"	d
UCA0STAT	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0STAT /;"	d
UCA0STAT	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0STAT);                           \/* USCI A0 Status Register *\/$/;"	v
UCA0STAT	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0STAT /;"	d
UCA0STAT	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0STAT);                           \/* USCI A0 Status Register *\/$/;"	v
UCA0TXBUF	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0TXBUF /;"	d
UCA0TXBUF	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0TXBUF);                          \/* USCI A0 Transmit Buffer *\/$/;"	v
UCA0TXBUF	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCA0TXBUF /;"	d
UCA0TXBUF	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCA0TXBUF);                          \/* USCI A0 Transmit Buffer *\/$/;"	v
UCA0TXIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCA0TXIE /;"	d
UCA0TXIE	src/Emulation/MPU/msp430g2553.h	/^#define UCA0TXIE /;"	d
UCA0TXIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCA0TXIFG /;"	d
UCA0TXIFG	src/Emulation/MPU/msp430g2553.h	/^#define UCA0TXIFG /;"	d
UCA10	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCA10 /;"	d
UCA10	src/Emulation/MPU/msp430g2553.h	/^#define UCA10 /;"	d
UCABDEN	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCABDEN /;"	d
UCABDEN	src/Emulation/MPU/msp430g2553.h	/^#define UCABDEN /;"	d
UCADDR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCADDR /;"	d
UCADDR	src/Emulation/MPU/msp430g2553.h	/^#define UCADDR /;"	d
UCALIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCALIE /;"	d
UCALIE	src/Emulation/MPU/msp430g2553.h	/^#define UCALIE /;"	d
UCALIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCALIFG /;"	d
UCALIFG	src/Emulation/MPU/msp430g2553.h	/^#define UCALIFG /;"	d
UCB0BR0	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0BR0 /;"	d
UCB0BR0	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0BR0);                            \/* USCI B0 Baud Rate 0 *\/$/;"	v
UCB0BR0	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0BR0 /;"	d
UCB0BR0	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0BR0);                            \/* USCI B0 Baud Rate 0 *\/$/;"	v
UCB0BR1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0BR1 /;"	d
UCB0BR1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0BR1);                            \/* USCI B0 Baud Rate 1 *\/$/;"	v
UCB0BR1	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0BR1 /;"	d
UCB0BR1	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0BR1);                            \/* USCI B0 Baud Rate 1 *\/$/;"	v
UCB0CTL0	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0CTL0 /;"	d
UCB0CTL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0CTL0);                           \/* USCI B0 Control Register 0 *\/$/;"	v
UCB0CTL0	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0CTL0 /;"	d
UCB0CTL0	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0CTL0);                           \/* USCI B0 Control Register 0 *\/$/;"	v
UCB0CTL1	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0CTL1 /;"	d
UCB0CTL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0CTL1);                           \/* USCI B0 Control Register 1 *\/$/;"	v
UCB0CTL1	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0CTL1 /;"	d
UCB0CTL1	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0CTL1);                           \/* USCI B0 Control Register 1 *\/$/;"	v
UCB0I2CIE	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0I2CIE /;"	d
UCB0I2CIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0I2CIE);                          \/* USCI B0 I2C Interrupt Enable Register *\/$/;"	v
UCB0I2CIE	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0I2CIE /;"	d
UCB0I2CIE	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0I2CIE);                          \/* USCI B0 I2C Interrupt Enable Register *\/$/;"	v
UCB0I2COA	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0I2COA /;"	d
UCB0I2COA	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(UCB0I2COA);                         \/* USCI B0 I2C Own Address *\/$/;"	v
UCB0I2COA	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0I2COA /;"	d
UCB0I2COA	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(UCB0I2COA);                         \/* USCI B0 I2C Own Address *\/$/;"	v
UCB0I2CSA	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0I2CSA /;"	d
UCB0I2CSA	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(UCB0I2CSA);                         \/* USCI B0 I2C Slave Address *\/$/;"	v
UCB0I2CSA	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0I2CSA /;"	d
UCB0I2CSA	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(UCB0I2CSA);                         \/* USCI B0 I2C Slave Address *\/$/;"	v
UCB0RXBUF	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0RXBUF /;"	d
UCB0RXBUF	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0RXBUF);                          \/* USCI B0 Receive Buffer *\/$/;"	v
UCB0RXBUF	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0RXBUF /;"	d
UCB0RXBUF	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0RXBUF);                          \/* USCI B0 Receive Buffer *\/$/;"	v
UCB0RXIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCB0RXIE /;"	d
UCB0RXIE	src/Emulation/MPU/msp430g2553.h	/^#define UCB0RXIE /;"	d
UCB0RXIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCB0RXIFG /;"	d
UCB0RXIFG	src/Emulation/MPU/msp430g2553.h	/^#define UCB0RXIFG /;"	d
UCB0STAT	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0STAT /;"	d
UCB0STAT	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0STAT);                           \/* USCI B0 Status Register *\/$/;"	v
UCB0STAT	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0STAT /;"	d
UCB0STAT	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0STAT);                           \/* USCI B0 Status Register *\/$/;"	v
UCB0TXBUF	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0TXBUF /;"	d
UCB0TXBUF	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0TXBUF);                          \/* USCI B0 Transmit Buffer *\/$/;"	v
UCB0TXBUF	src/Emulation/MPU/msp430_declare_consts.h	/^#define UCB0TXBUF /;"	d
UCB0TXBUF	src/Emulation/MPU/msp430g2553.h	/^SFR_8BIT(UCB0TXBUF);                          \/* USCI B0 Transmit Buffer *\/$/;"	v
UCB0TXIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCB0TXIE /;"	d
UCB0TXIE	src/Emulation/MPU/msp430g2553.h	/^#define UCB0TXIE /;"	d
UCB0TXIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCB0TXIFG /;"	d
UCB0TXIFG	src/Emulation/MPU/msp430g2553.h	/^#define UCB0TXIFG /;"	d
UCBBUSY	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBBUSY /;"	d
UCBBUSY	src/Emulation/MPU/msp430g2553.h	/^#define UCBBUSY /;"	d
UCBRF0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF0 /;"	d
UCBRF0	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF0 /;"	d
UCBRF1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF1 /;"	d
UCBRF1	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF1 /;"	d
UCBRF2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF2 /;"	d
UCBRF2	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF2 /;"	d
UCBRF3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF3 /;"	d
UCBRF3	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF3 /;"	d
UCBRF_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_0 /;"	d
UCBRF_0	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_0 /;"	d
UCBRF_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_1 /;"	d
UCBRF_1	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_1 /;"	d
UCBRF_10	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_10 /;"	d
UCBRF_10	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_10 /;"	d
UCBRF_11	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_11 /;"	d
UCBRF_11	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_11 /;"	d
UCBRF_12	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_12 /;"	d
UCBRF_12	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_12 /;"	d
UCBRF_13	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_13 /;"	d
UCBRF_13	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_13 /;"	d
UCBRF_14	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_14 /;"	d
UCBRF_14	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_14 /;"	d
UCBRF_15	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_15 /;"	d
UCBRF_15	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_15 /;"	d
UCBRF_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_2 /;"	d
UCBRF_2	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_2 /;"	d
UCBRF_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_3 /;"	d
UCBRF_3	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_3 /;"	d
UCBRF_4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_4 /;"	d
UCBRF_4	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_4 /;"	d
UCBRF_5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_5 /;"	d
UCBRF_5	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_5 /;"	d
UCBRF_6	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_6 /;"	d
UCBRF_6	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_6 /;"	d
UCBRF_7	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_7 /;"	d
UCBRF_7	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_7 /;"	d
UCBRF_8	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_8 /;"	d
UCBRF_8	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_8 /;"	d
UCBRF_9	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRF_9 /;"	d
UCBRF_9	src/Emulation/MPU/msp430g2553.h	/^#define UCBRF_9 /;"	d
UCBRK	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRK /;"	d
UCBRK	src/Emulation/MPU/msp430g2553.h	/^#define UCBRK /;"	d
UCBRKIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRKIE /;"	d
UCBRKIE	src/Emulation/MPU/msp430g2553.h	/^#define UCBRKIE /;"	d
UCBRS0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRS0 /;"	d
UCBRS0	src/Emulation/MPU/msp430g2553.h	/^#define UCBRS0 /;"	d
UCBRS1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRS1 /;"	d
UCBRS1	src/Emulation/MPU/msp430g2553.h	/^#define UCBRS1 /;"	d
UCBRS2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRS2 /;"	d
UCBRS2	src/Emulation/MPU/msp430g2553.h	/^#define UCBRS2 /;"	d
UCBRS_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRS_0 /;"	d
UCBRS_0	src/Emulation/MPU/msp430g2553.h	/^#define UCBRS_0 /;"	d
UCBRS_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRS_1 /;"	d
UCBRS_1	src/Emulation/MPU/msp430g2553.h	/^#define UCBRS_1 /;"	d
UCBRS_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRS_2 /;"	d
UCBRS_2	src/Emulation/MPU/msp430g2553.h	/^#define UCBRS_2 /;"	d
UCBRS_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRS_3 /;"	d
UCBRS_3	src/Emulation/MPU/msp430g2553.h	/^#define UCBRS_3 /;"	d
UCBRS_4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRS_4 /;"	d
UCBRS_4	src/Emulation/MPU/msp430g2553.h	/^#define UCBRS_4 /;"	d
UCBRS_5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRS_5 /;"	d
UCBRS_5	src/Emulation/MPU/msp430g2553.h	/^#define UCBRS_5 /;"	d
UCBRS_6	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRS_6 /;"	d
UCBRS_6	src/Emulation/MPU/msp430g2553.h	/^#define UCBRS_6 /;"	d
UCBRS_7	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBRS_7 /;"	d
UCBRS_7	src/Emulation/MPU/msp430g2553.h	/^#define UCBRS_7 /;"	d
UCBTOE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBTOE /;"	d
UCBTOE	src/Emulation/MPU/msp430g2553.h	/^#define UCBTOE /;"	d
UCBUSY	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCBUSY /;"	d
UCBUSY	src/Emulation/MPU/msp430g2553.h	/^#define UCBUSY /;"	d
UCCKPH	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCCKPH /;"	d
UCCKPH	src/Emulation/MPU/msp430g2553.h	/^#define UCCKPH /;"	d
UCCKPL	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCCKPL /;"	d
UCCKPL	src/Emulation/MPU/msp430g2553.h	/^#define UCCKPL /;"	d
UCDELIM0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCDELIM0 /;"	d
UCDELIM0	src/Emulation/MPU/msp430g2553.h	/^#define UCDELIM0 /;"	d
UCDELIM1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCDELIM1 /;"	d
UCDELIM1	src/Emulation/MPU/msp430g2553.h	/^#define UCDELIM1 /;"	d
UCDORM	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCDORM /;"	d
UCDORM	src/Emulation/MPU/msp430g2553.h	/^#define UCDORM /;"	d
UCFE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCFE /;"	d
UCFE	src/Emulation/MPU/msp430g2553.h	/^#define UCFE /;"	d
UCGC	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCGC /;"	d
UCGC	src/Emulation/MPU/msp430g2553.h	/^#define UCGC /;"	d
UCGCEN	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCGCEN /;"	d
UCGCEN	src/Emulation/MPU/msp430g2553.h	/^#define UCGCEN /;"	d
UCIDLE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIDLE /;"	d
UCIDLE	src/Emulation/MPU/msp430g2553.h	/^#define UCIDLE /;"	d
UCIREN	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIREN /;"	d
UCIREN	src/Emulation/MPU/msp430g2553.h	/^#define UCIREN /;"	d
UCIRRXFE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFE /;"	d
UCIRRXFE	src/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFE /;"	d
UCIRRXFL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFL0 /;"	d
UCIRRXFL0	src/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFL0 /;"	d
UCIRRXFL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFL1 /;"	d
UCIRRXFL1	src/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFL1 /;"	d
UCIRRXFL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFL2 /;"	d
UCIRRXFL2	src/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFL2 /;"	d
UCIRRXFL3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFL3 /;"	d
UCIRRXFL3	src/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFL3 /;"	d
UCIRRXFL4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFL4 /;"	d
UCIRRXFL4	src/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFL4 /;"	d
UCIRRXFL5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFL5 /;"	d
UCIRRXFL5	src/Emulation/MPU/msp430g2553.h	/^#define UCIRRXFL5 /;"	d
UCIRRXPL	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRRXPL /;"	d
UCIRRXPL	src/Emulation/MPU/msp430g2553.h	/^#define UCIRRXPL /;"	d
UCIRTXCLK	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRTXCLK /;"	d
UCIRTXCLK	src/Emulation/MPU/msp430g2553.h	/^#define UCIRTXCLK /;"	d
UCIRTXPL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRTXPL0 /;"	d
UCIRTXPL0	src/Emulation/MPU/msp430g2553.h	/^#define UCIRTXPL0 /;"	d
UCIRTXPL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRTXPL1 /;"	d
UCIRTXPL1	src/Emulation/MPU/msp430g2553.h	/^#define UCIRTXPL1 /;"	d
UCIRTXPL2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRTXPL2 /;"	d
UCIRTXPL2	src/Emulation/MPU/msp430g2553.h	/^#define UCIRTXPL2 /;"	d
UCIRTXPL3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRTXPL3 /;"	d
UCIRTXPL3	src/Emulation/MPU/msp430g2553.h	/^#define UCIRTXPL3 /;"	d
UCIRTXPL4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRTXPL4 /;"	d
UCIRTXPL4	src/Emulation/MPU/msp430g2553.h	/^#define UCIRTXPL4 /;"	d
UCIRTXPL5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCIRTXPL5 /;"	d
UCIRTXPL5	src/Emulation/MPU/msp430g2553.h	/^#define UCIRTXPL5 /;"	d
UCLISTEN	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCLISTEN /;"	d
UCLISTEN	src/Emulation/MPU/msp430g2553.h	/^#define UCLISTEN /;"	d
UCMM	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCMM /;"	d
UCMM	src/Emulation/MPU/msp430g2553.h	/^#define UCMM /;"	d
UCMODE0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCMODE0 /;"	d
UCMODE0	src/Emulation/MPU/msp430g2553.h	/^#define UCMODE0 /;"	d
UCMODE1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCMODE1 /;"	d
UCMODE1	src/Emulation/MPU/msp430g2553.h	/^#define UCMODE1 /;"	d
UCMODE_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCMODE_0 /;"	d
UCMODE_0	src/Emulation/MPU/msp430g2553.h	/^#define UCMODE_0 /;"	d
UCMODE_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCMODE_1 /;"	d
UCMODE_1	src/Emulation/MPU/msp430g2553.h	/^#define UCMODE_1 /;"	d
UCMODE_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCMODE_2 /;"	d
UCMODE_2	src/Emulation/MPU/msp430g2553.h	/^#define UCMODE_2 /;"	d
UCMODE_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCMODE_3 /;"	d
UCMODE_3	src/Emulation/MPU/msp430g2553.h	/^#define UCMODE_3 /;"	d
UCMSB	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCMSB /;"	d
UCMSB	src/Emulation/MPU/msp430g2553.h	/^#define UCMSB /;"	d
UCMST	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCMST /;"	d
UCMST	src/Emulation/MPU/msp430g2553.h	/^#define UCMST /;"	d
UCNACKIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCNACKIE /;"	d
UCNACKIE	src/Emulation/MPU/msp430g2553.h	/^#define UCNACKIE /;"	d
UCNACKIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCNACKIFG /;"	d
UCNACKIFG	src/Emulation/MPU/msp430g2553.h	/^#define UCNACKIFG /;"	d
UCOA0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCOA0 /;"	d
UCOA0	src/Emulation/MPU/msp430g2553.h	/^#define UCOA0 /;"	d
UCOA1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCOA1 /;"	d
UCOA1	src/Emulation/MPU/msp430g2553.h	/^#define UCOA1 /;"	d
UCOA2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCOA2 /;"	d
UCOA2	src/Emulation/MPU/msp430g2553.h	/^#define UCOA2 /;"	d
UCOA3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCOA3 /;"	d
UCOA3	src/Emulation/MPU/msp430g2553.h	/^#define UCOA3 /;"	d
UCOA4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCOA4 /;"	d
UCOA4	src/Emulation/MPU/msp430g2553.h	/^#define UCOA4 /;"	d
UCOA5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCOA5 /;"	d
UCOA5	src/Emulation/MPU/msp430g2553.h	/^#define UCOA5 /;"	d
UCOA6	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCOA6 /;"	d
UCOA6	src/Emulation/MPU/msp430g2553.h	/^#define UCOA6 /;"	d
UCOA7	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCOA7 /;"	d
UCOA7	src/Emulation/MPU/msp430g2553.h	/^#define UCOA7 /;"	d
UCOA8	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCOA8 /;"	d
UCOA8	src/Emulation/MPU/msp430g2553.h	/^#define UCOA8 /;"	d
UCOA9	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCOA9 /;"	d
UCOA9	src/Emulation/MPU/msp430g2553.h	/^#define UCOA9 /;"	d
UCOE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCOE /;"	d
UCOE	src/Emulation/MPU/msp430g2553.h	/^#define UCOE /;"	d
UCOS16	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCOS16 /;"	d
UCOS16	src/Emulation/MPU/msp430g2553.h	/^#define UCOS16 /;"	d
UCPAR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCPAR /;"	d
UCPAR	src/Emulation/MPU/msp430g2553.h	/^#define UCPAR /;"	d
UCPE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCPE /;"	d
UCPE	src/Emulation/MPU/msp430g2553.h	/^#define UCPE /;"	d
UCPEN	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCPEN /;"	d
UCPEN	src/Emulation/MPU/msp430g2553.h	/^#define UCPEN /;"	d
UCRXEIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCRXEIE /;"	d
UCRXEIE	src/Emulation/MPU/msp430g2553.h	/^#define UCRXEIE /;"	d
UCRXERR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCRXERR /;"	d
UCRXERR	src/Emulation/MPU/msp430g2553.h	/^#define UCRXERR /;"	d
UCSA0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSA0 /;"	d
UCSA0	src/Emulation/MPU/msp430g2553.h	/^#define UCSA0 /;"	d
UCSA1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSA1 /;"	d
UCSA1	src/Emulation/MPU/msp430g2553.h	/^#define UCSA1 /;"	d
UCSA2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSA2 /;"	d
UCSA2	src/Emulation/MPU/msp430g2553.h	/^#define UCSA2 /;"	d
UCSA3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSA3 /;"	d
UCSA3	src/Emulation/MPU/msp430g2553.h	/^#define UCSA3 /;"	d
UCSA4	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSA4 /;"	d
UCSA4	src/Emulation/MPU/msp430g2553.h	/^#define UCSA4 /;"	d
UCSA5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSA5 /;"	d
UCSA5	src/Emulation/MPU/msp430g2553.h	/^#define UCSA5 /;"	d
UCSA6	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSA6 /;"	d
UCSA6	src/Emulation/MPU/msp430g2553.h	/^#define UCSA6 /;"	d
UCSA7	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSA7 /;"	d
UCSA7	src/Emulation/MPU/msp430g2553.h	/^#define UCSA7 /;"	d
UCSA8	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSA8 /;"	d
UCSA8	src/Emulation/MPU/msp430g2553.h	/^#define UCSA8 /;"	d
UCSA9	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSA9 /;"	d
UCSA9	src/Emulation/MPU/msp430g2553.h	/^#define UCSA9 /;"	d
UCSCLLOW	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSCLLOW /;"	d
UCSCLLOW	src/Emulation/MPU/msp430g2553.h	/^#define UCSCLLOW /;"	d
UCSLA10	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSLA10 /;"	d
UCSLA10	src/Emulation/MPU/msp430g2553.h	/^#define UCSLA10 /;"	d
UCSPB	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSPB /;"	d
UCSPB	src/Emulation/MPU/msp430g2553.h	/^#define UCSPB /;"	d
UCSSEL0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSSEL0 /;"	d
UCSSEL0	src/Emulation/MPU/msp430g2553.h	/^#define UCSSEL0 /;"	d
UCSSEL1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSSEL1 /;"	d
UCSSEL1	src/Emulation/MPU/msp430g2553.h	/^#define UCSSEL1 /;"	d
UCSSEL_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSSEL_0 /;"	d
UCSSEL_0	src/Emulation/MPU/msp430g2553.h	/^#define UCSSEL_0 /;"	d
UCSSEL_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSSEL_1 /;"	d
UCSSEL_1	src/Emulation/MPU/msp430g2553.h	/^#define UCSSEL_1 /;"	d
UCSSEL_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSSEL_2 /;"	d
UCSSEL_2	src/Emulation/MPU/msp430g2553.h	/^#define UCSSEL_2 /;"	d
UCSSEL_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSSEL_3 /;"	d
UCSSEL_3	src/Emulation/MPU/msp430g2553.h	/^#define UCSSEL_3 /;"	d
UCSTOE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSTOE /;"	d
UCSTOE	src/Emulation/MPU/msp430g2553.h	/^#define UCSTOE /;"	d
UCSTPIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSTPIE /;"	d
UCSTPIE	src/Emulation/MPU/msp430g2553.h	/^#define UCSTPIE /;"	d
UCSTPIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSTPIFG /;"	d
UCSTPIFG	src/Emulation/MPU/msp430g2553.h	/^#define UCSTPIFG /;"	d
UCSTTIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSTTIE /;"	d
UCSTTIE	src/Emulation/MPU/msp430g2553.h	/^#define UCSTTIE /;"	d
UCSTTIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSTTIFG /;"	d
UCSTTIFG	src/Emulation/MPU/msp430g2553.h	/^#define UCSTTIFG /;"	d
UCSWRST	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSWRST /;"	d
UCSWRST	src/Emulation/MPU/msp430g2553.h	/^#define UCSWRST /;"	d
UCSYNC	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCSYNC /;"	d
UCSYNC	src/Emulation/MPU/msp430g2553.h	/^#define UCSYNC /;"	d
UCTR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCTR /;"	d
UCTR	src/Emulation/MPU/msp430g2553.h	/^#define UCTR /;"	d
UCTXADDR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCTXADDR /;"	d
UCTXADDR	src/Emulation/MPU/msp430g2553.h	/^#define UCTXADDR /;"	d
UCTXBRK	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCTXBRK /;"	d
UCTXBRK	src/Emulation/MPU/msp430g2553.h	/^#define UCTXBRK /;"	d
UCTXNACK	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCTXNACK /;"	d
UCTXNACK	src/Emulation/MPU/msp430g2553.h	/^#define UCTXNACK /;"	d
UCTXSTP	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCTXSTP /;"	d
UCTXSTP	src/Emulation/MPU/msp430g2553.h	/^#define UCTXSTP /;"	d
UCTXSTT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define UCTXSTT /;"	d
UCTXSTT	src/Emulation/MPU/msp430g2553.h	/^#define UCTXSTT /;"	d
UInt512	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512() {$/;"	f	class:UInt512
UInt512	include/Eternia/Data/SpecialTypes.hpp	/^class UInt512 {$/;"	c
UInt512	src/Data/SpecialTypes.hpp	/^        UInt512() {$/;"	f	class:UInt512
UInt512	src/Data/SpecialTypes.hpp	/^class UInt512 {$/;"	c
UInt512::UInt512	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512() {$/;"	f	class:UInt512
UInt512::UInt512	src/Data/SpecialTypes.hpp	/^        UInt512() {$/;"	f	class:UInt512
UInt512::operator +	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator +(UInt512 v) {$/;"	f	class:UInt512
UInt512::operator +	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator +(long v) {$/;"	f	class:UInt512
UInt512::operator +	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator +(uint64_t v) {$/;"	f	class:UInt512
UInt512::operator +	src/Data/SpecialTypes.hpp	/^        UInt512 operator +(UInt512 v) {$/;"	f	class:UInt512
UInt512::operator +	src/Data/SpecialTypes.hpp	/^        UInt512 operator +(long v) {$/;"	f	class:UInt512
UInt512::operator +	src/Data/SpecialTypes.hpp	/^        UInt512 operator +(uint64_t v) {$/;"	f	class:UInt512
UInt512::operator +=	include/Eternia/Data/SpecialTypes.hpp	/^        void operator +=(UInt512 v) {$/;"	f	class:UInt512
UInt512::operator +=	src/Data/SpecialTypes.hpp	/^        void operator +=(UInt512 v) {$/;"	f	class:UInt512
UInt512::operator <<	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator <<(int v) {$/;"	f	class:UInt512
UInt512::operator <<	src/Data/SpecialTypes.hpp	/^        UInt512 operator <<(int v) {$/;"	f	class:UInt512
UInt512::operator =	include/Eternia/Data/SpecialTypes.hpp	/^        void operator =(int v) {$/;"	f	class:UInt512
UInt512::operator =	src/Data/SpecialTypes.hpp	/^        void operator =(int v) {$/;"	f	class:UInt512
UInt512::operator ^	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator ^(UInt512 v) {$/;"	f	class:UInt512
UInt512::operator ^	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator ^(uint64_t v) {$/;"	f	class:UInt512
UInt512::operator ^	src/Data/SpecialTypes.hpp	/^        UInt512 operator ^(UInt512 v) {$/;"	f	class:UInt512
UInt512::operator ^	src/Data/SpecialTypes.hpp	/^        UInt512 operator ^(uint64_t v) {$/;"	f	class:UInt512
UInt512::operator ^=	include/Eternia/Data/SpecialTypes.hpp	/^        void operator ^=(UInt512 v) {$/;"	f	class:UInt512
UInt512::operator ^=	src/Data/SpecialTypes.hpp	/^        void operator ^=(UInt512 v) {$/;"	f	class:UInt512
UInt512::operator |	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator |(uint64_t v) {$/;"	f	class:UInt512
UInt512::operator |	src/Data/SpecialTypes.hpp	/^        UInt512 operator |(uint64_t v) {$/;"	f	class:UInt512
UInt512::set	include/Eternia/Data/SpecialTypes.hpp	/^        void set(unsigned int v, unsigned char offset) {$/;"	f	class:UInt512
UInt512::set	src/Data/SpecialTypes.hpp	/^        void set(unsigned int v, unsigned char offset) {$/;"	f	class:UInt512
UInt512::val	include/Eternia/Data/SpecialTypes.hpp	/^        uint64_t val[16]; \/\/ 512 bits$/;"	m	class:UInt512
UInt512::val	src/Data/SpecialTypes.hpp	/^        uint64_t val[16]; \/\/ 512 bits$/;"	m	class:UInt512
UNKNOWN	include/Eternia/constants.h	/^#define UNKNOWN /;"	d
UNKNOWN	src/constants.h	/^#define UNKNOWN /;"	d
URL_END_H_	include/Eternia/WebFramework/Encoding/UrlEncoding.h	/^#define URL_END_H_$/;"	d
URL_END_H_	src/WebFramework/Encoding/UrlEncoding.h	/^#define URL_END_H_$/;"	d
US	include/Eternia/constants.h	/^        namespace US { \/\/ short$/;"	n	namespace:physical::unit
US	include/Eternia/constants.h	/^        namespace US {$/;"	n	namespace:physical::unit
US	src/constants.h	/^        namespace US { \/\/ short$/;"	n	namespace:physical::unit
US	src/constants.h	/^        namespace US {$/;"	n	namespace:physical::unit
USCIAB0RX_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define USCIAB0RX_VECTOR /;"	d
USCIAB0RX_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define USCIAB0RX_VECTOR /;"	d
USCIAB0TX_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define USCIAB0TX_VECTOR /;"	d
USCIAB0TX_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define USCIAB0TX_VECTOR /;"	d
Ununoctium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Ununoctium = new Atom("Ununoctium", "Uuo", 18, 7, 118,  ,117, UNKNOWN,UNKNOWN, UNKNOWN, 250,252, UNKNOWN, UNKNOWN, COLOR_None,ELEM_Noble);$/;"	v
Ununoctium	src/Engineering/Chemistry/elementals.h	/^const Atom Ununoctium = new Atom("Ununoctium", "Uuo", 18, 7, 118,  ,117, UNKNOWN,UNKNOWN, UNKNOWN, 250,252, UNKNOWN, UNKNOWN, COLOR_None,ELEM_Noble);$/;"	v
Ununpentium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Ununpentium = new Atom("Ununpentium", "Uup", 15, 7, 115,  ,114, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Poor);$/;"	v
Ununpentium	src/Engineering/Chemistry/elementals.h	/^const Atom Ununpentium = new Atom("Ununpentium", "Uup", 15, 7, 115,  ,114, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Poor);$/;"	v
Ununseptium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Ununseptium = new Atom("Ununseptium", "Uup", 17, 7, 117,  ,116, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Halogen);$/;"	v
Ununseptium	src/Engineering/Chemistry/elementals.h	/^const Atom Ununseptium = new Atom("Ununseptium", "Uup", 17, 7, 117,  ,116, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Halogen);$/;"	v
Ununtrium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Ununtrium = new Atom("Ununtrium", "Uut", 13, 7, 113,  ,112, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Poor);$/;"	v
Ununtrium	src/Engineering/Chemistry/elementals.h	/^const Atom Ununtrium = new Atom("Ununtrium", "Uut", 13, 7, 113,  ,112, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN,UNKNOWN, UNKNOWN, UNKNOWN, COLOR_SlateGray,ELEM_Poor);$/;"	v
UpQuark	include/Eternia/Engineering/Chemistry/Hadron/Quarks/UpQuark.h	/^class UpQuark {$/;"	c
UpQuark	src/Engineering/Chemistry/Hadron/Quarks/UpQuark.h	/^class UpQuark {$/;"	c
UpQuark_h_	include/Eternia/Engineering/Chemistry/Hadron/Quarks/UpQuark.h	/^#define UpQuark_h_$/;"	d
UpQuark_h_	src/Engineering/Chemistry/Hadron/Quarks/UpQuark.h	/^#define UpQuark_h_$/;"	d
Up_AntiQuark	include/Eternia/Engineering/Chemistry/Hadron/Quarks/Up_AntiQuark.h	/^class Up_AntiQuark {$/;"	c
Up_AntiQuark	src/Engineering/Chemistry/Hadron/Quarks/Up_AntiQuark.h	/^class Up_AntiQuark {$/;"	c
Up_AntiQuark_h_	include/Eternia/Engineering/Chemistry/Hadron/Quarks/Up_AntiQuark.h	/^#define Up_AntiQuark_h_$/;"	d
Up_AntiQuark_h_	src/Engineering/Chemistry/Hadron/Quarks/Up_AntiQuark.h	/^#define Up_AntiQuark_h_$/;"	d
Uranium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Uranium = new Atom("Uranium", "U", 0, 7, 92, 146,91, 18.95,0.00000028, 0.027, 1405.3,4404, 0.116, 6, COLOR_Silver,ELEM_Actinide);$/;"	v
Uranium	src/Engineering/Chemistry/elementals.h	/^const Atom Uranium = new Atom("Uranium", "U", 0, 7, 92, 146,91, 18.95,0.00000028, 0.027, 1405.3,4404, 0.116, 6, COLOR_Silver,ELEM_Actinide);$/;"	v
UrlEncoding	include/Eternia/WebFramework/Encoding/UrlEncoding.h	/^        UrlEncoding();$/;"	p	class:UrlEncoding
UrlEncoding	include/Eternia/WebFramework/Encoding/UrlEncoding.h	/^class UrlEncoding {$/;"	c
UrlEncoding	src/WebFramework/Encoding/UrlEncoding.h	/^        UrlEncoding();$/;"	p	class:UrlEncoding
UrlEncoding	src/WebFramework/Encoding/UrlEncoding.h	/^class UrlEncoding {$/;"	c
UrlEncoding::UrlEncoding	include/Eternia/WebFramework/Encoding/UrlEncoding.h	/^        UrlEncoding();$/;"	p	class:UrlEncoding
UrlEncoding::UrlEncoding	src/WebFramework/Encoding/UrlEncoding.h	/^        UrlEncoding();$/;"	p	class:UrlEncoding
UrlEncoding::decodeUrl	include/Eternia/WebFramework/Encoding/UrlEncoding.h	/^        static CharString decodeUrl(CharString url);$/;"	p	class:UrlEncoding
UrlEncoding::decodeUrl	src/WebFramework/Encoding/UrlEncoding.h	/^        static CharString decodeUrl(CharString url);$/;"	p	class:UrlEncoding
UrlEncoding::encodeUrl	include/Eternia/WebFramework/Encoding/UrlEncoding.h	/^        static CharString encodeUrl(CharString url);$/;"	p	class:UrlEncoding
UrlEncoding::encodeUrl	src/WebFramework/Encoding/UrlEncoding.h	/^        static CharString encodeUrl(CharString url);$/;"	p	class:UrlEncoding
V	include/Eternia/constants.h	/^        const double V = Volt;$/;"	m	namespace:physical::unit
V	src/constants.h	/^        const double V = Volt;$/;"	m	namespace:physical::unit
VAT_IN	include/Eternia/Programming/Visual/VProgramNode.h	/^enum VarTYPE {VAT_None, VAT_IN, VAT_LOCAL}; \/\/ select a variable channel$/;"	e	enum:VarTYPE
VAT_IN	src/Programming/Visual/VProgramNode.h	/^enum VarTYPE {VAT_None, VAT_IN, VAT_LOCAL}; \/\/ select a variable channel$/;"	e	enum:VarTYPE
VAT_LOCAL	include/Eternia/Programming/Visual/VProgramNode.h	/^enum VarTYPE {VAT_None, VAT_IN, VAT_LOCAL}; \/\/ select a variable channel$/;"	e	enum:VarTYPE
VAT_LOCAL	src/Programming/Visual/VProgramNode.h	/^enum VarTYPE {VAT_None, VAT_IN, VAT_LOCAL}; \/\/ select a variable channel$/;"	e	enum:VarTYPE
VAT_None	include/Eternia/Programming/Visual/VProgramNode.h	/^enum VarTYPE {VAT_None, VAT_IN, VAT_LOCAL}; \/\/ select a variable channel$/;"	e	enum:VarTYPE
VAT_None	src/Programming/Visual/VProgramNode.h	/^enum VarTYPE {VAT_None, VAT_IN, VAT_LOCAL}; \/\/ select a variable channel$/;"	e	enum:VarTYPE
VECOP_DEC	include/Eternia/Math/struct/vertex.h	/^    VECOP_DEC(*);$/;"	m	class:vertex
VECOP_DEC	include/Eternia/Math/struct/vertex.h	/^#define VECOP_DEC(/;"	d
VECOP_DEC	src/Math/struct/vertex.h	/^    VECOP_DEC(*);$/;"	m	class:vertex
VECOP_DEC	src/Math/struct/vertex.h	/^#define VECOP_DEC(/;"	d
VECOP_DEC_COMP	include/Eternia/Math/struct/vertex.h	/^    VECOP_DEC_COMP(==);$/;"	m	class:vertex
VECOP_DEC_COMP	include/Eternia/Math/struct/vertex.h	/^#define VECOP_DEC_COMP(/;"	d
VECOP_DEC_COMP	src/Math/struct/vertex.h	/^    VECOP_DEC_COMP(==);$/;"	m	class:vertex
VECOP_DEC_COMP	src/Math/struct/vertex.h	/^#define VECOP_DEC_COMP(/;"	d
VECOP_DEC_EQ	include/Eternia/Math/struct/vertex.h	/^    VECOP_DEC_EQ(*=);$/;"	m	class:vertex
VECOP_DEC_EQ	include/Eternia/Math/struct/vertex.h	/^#define VECOP_DEC_EQ(/;"	d
VECOP_DEC_EQ	src/Math/struct/vertex.h	/^    VECOP_DEC_EQ(*=);$/;"	m	class:vertex
VECOP_DEC_EQ	src/Math/struct/vertex.h	/^#define VECOP_DEC_EQ(/;"	d
VECOP_IMP	src/Math/struct/vertex.cpp	/^#define VECOP_IMP(/;"	d	file:
VECOP_IMP_COMP	src/Math/struct/vertex.cpp	/^#define VECOP_IMP_COMP(/;"	d	file:
VECOP_IMP_EQ	src/Math/struct/vertex.cpp	/^#define VECOP_IMP_EQ(/;"	d	file:
VECSPACE_PROPERTY	include/Eternia/Math/struct/VectorSpace.h	/^enum VECSPACE_PROPERTY {VS_0, VS_R1, VS_R2, VS_R3, VS_Rn};$/;"	g
VECSPACE_PROPERTY	src/Math/struct/VectorSpace.h	/^enum VECSPACE_PROPERTY {VS_0, VS_R1, VS_R2, VS_R3, VS_Rn};$/;"	g
VECTORSPACE_H_	include/Eternia/Math/struct/VectorSpace.h	/^#define VECTORSPACE_H_$/;"	d
VECTORSPACE_H_	src/Math/struct/VectorSpace.h	/^#define VECTORSPACE_H_$/;"	d
VECTOR_H_	include/Eternia/Math/struct/vertex.h	/^#define VECTOR_H_$/;"	d
VECTOR_H_	src/Math/struct/vertex.h	/^#define VECTOR_H_$/;"	d
VECTOR_NAME	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define VECTOR_NAME(/;"	d
VECTOR_NAME	src/Emulation/MPU/msp430g2553.h	/^#define VECTOR_NAME(/;"	d
VERSION_H	version.h	/^#define VERSION_H$/;"	d
VIEW_H_	include/Eternia/Design/View.h	/^#define VIEW_H_$/;"	d
VIEW_H_	src/Design/View.h	/^#define VIEW_H_$/;"	d
VOID_SW_H_	include/Eternia/Gamelogic/Superweapons/MegaCannon/MegaCannon.h	/^#define VOID_SW_H_$/;"	d
VOID_SW_H_	include/Eternia/Gamelogic/Superweapons/Void/Void.h	/^#define VOID_SW_H_$/;"	d
VOID_SW_H_	src/Gamelogic/Superweapons/MegaCannon/MegaCannon.h	/^#define VOID_SW_H_$/;"	d
VOID_SW_H_	src/Gamelogic/Superweapons/Void/Void.h	/^#define VOID_SW_H_$/;"	d
VOIPPACKET_H_	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^#define VOIPPACKET_H_$/;"	d
VOIPPACKET_H_	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^#define VOIPPACKET_H_$/;"	d
VOLTS	include/Eternia/Engineering/Electrical/PowerValue.h	/^#define VOLTS /;"	d
VOLTS	src/Engineering/Electrical/PowerValue.h	/^#define VOLTS /;"	d
VOXEL_GEOM_H	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^#define VOXEL_GEOM_H$/;"	d
VOXEL_GEOM_H	src/Gamelogic/Voxel/VoxelGeom.h	/^#define VOXEL_GEOM_H$/;"	d
VPROGRAM_ERROR_H_	include/Eternia/Programming/Visual/VProgramError.h	/^#define VPROGRAM_ERROR_H_$/;"	d
VPROGRAM_ERROR_H_	src/Programming/Visual/VProgramError.h	/^#define VPROGRAM_ERROR_H_$/;"	d
VPROGRAM_NODES_H_	include/Eternia/Programming/Visual/VProgramNode.h	/^#define VPROGRAM_NODES_H_$/;"	d
VPROGRAM_NODES_H_	src/Programming/Visual/VProgramNode.h	/^#define VPROGRAM_NODES_H_$/;"	d
VProgramError	include/Eternia/Programming/Visual/VProgramError.h	/^        VProgramError(PEType t, int node);$/;"	p	class:VProgramError
VProgramError	include/Eternia/Programming/Visual/VProgramError.h	/^class VProgramError : public ProgramError {$/;"	c
VProgramError	src/Programming/Visual/VProgramError.cpp	/^VProgramError::VProgramError(PEType t, int node) {$/;"	f	class:VProgramError
VProgramError	src/Programming/Visual/VProgramError.h	/^        VProgramError(PEType t, int node);$/;"	p	class:VProgramError
VProgramError	src/Programming/Visual/VProgramError.h	/^class VProgramError : public ProgramError {$/;"	c
VProgramError::VProgramError	include/Eternia/Programming/Visual/VProgramError.h	/^        VProgramError(PEType t, int node);$/;"	p	class:VProgramError
VProgramError::VProgramError	src/Programming/Visual/VProgramError.cpp	/^VProgramError::VProgramError(PEType t, int node) {$/;"	f	class:VProgramError
VProgramError::VProgramError	src/Programming/Visual/VProgramError.h	/^        VProgramError(PEType t, int node);$/;"	p	class:VProgramError
VProgramError::nodeid	include/Eternia/Programming/Visual/VProgramError.h	/^        int nodeid; \/\/ node which caused the error$/;"	m	class:VProgramError
VProgramError::nodeid	src/Programming/Visual/VProgramError.h	/^        int nodeid; \/\/ node which caused the error$/;"	m	class:VProgramError
VProgramError::type	include/Eternia/Programming/Visual/VProgramError.h	/^        PEType type;$/;"	m	class:VProgramError
VProgramError::type	src/Programming/Visual/VProgramError.h	/^        PEType type;$/;"	m	class:VProgramError
VProgramNode	include/Eternia/Programming/Visual/VProgramNode.h	/^        VProgramNode();$/;"	p	class:VProgramNode
VProgramNode	include/Eternia/Programming/Visual/VProgramNode.h	/^        VProgramNode(CharString* val);$/;"	p	class:VProgramNode
VProgramNode	include/Eternia/Programming/Visual/VProgramNode.h	/^class VProgramNode {$/;"	c
VProgramNode	src/Programming/Visual/VProgramNode.h	/^        VProgramNode();$/;"	p	class:VProgramNode
VProgramNode	src/Programming/Visual/VProgramNode.h	/^        VProgramNode(CharString* val);$/;"	p	class:VProgramNode
VProgramNode	src/Programming/Visual/VProgramNode.h	/^class VProgramNode {$/;"	c
VProgramNode::VProgramNode	include/Eternia/Programming/Visual/VProgramNode.h	/^        VProgramNode();$/;"	p	class:VProgramNode
VProgramNode::VProgramNode	include/Eternia/Programming/Visual/VProgramNode.h	/^        VProgramNode(CharString* val);$/;"	p	class:VProgramNode
VProgramNode::VProgramNode	src/Programming/Visual/VProgramNode.h	/^        VProgramNode();$/;"	p	class:VProgramNode
VProgramNode::VProgramNode	src/Programming/Visual/VProgramNode.h	/^        VProgramNode(CharString* val);$/;"	p	class:VProgramNode
VProgramNode::const_loops	include/Eternia/Programming/Visual/VProgramNode.h	/^        int const_loops; \/\/ number of times to loop if conditional$/;"	m	class:VProgramNode
VProgramNode::const_loops	src/Programming/Visual/VProgramNode.h	/^        int const_loops; \/\/ number of times to loop if conditional$/;"	m	class:VProgramNode
VProgramNode::ctype	include/Eternia/Programming/Visual/VProgramNode.h	/^        PCondCompare ctype; \/\/ Comparison type, for if\/else statements$/;"	m	class:VProgramNode
VProgramNode::ctype	src/Programming/Visual/VProgramNode.h	/^        PCondCompare ctype; \/\/ Comparison type, for if\/else statements$/;"	m	class:VProgramNode
VProgramNode::elsenode	include/Eternia/Programming/Visual/VProgramNode.h	/^        VProgramNode* elsenode; \/\/ else next node (conditional)$/;"	m	class:VProgramNode
VProgramNode::elsenode	src/Programming/Visual/VProgramNode.h	/^        VProgramNode* elsenode; \/\/ else next node (conditional)$/;"	m	class:VProgramNode
VProgramNode::ifnode	include/Eternia/Programming/Visual/VProgramNode.h	/^        VProgramNode* ifnode; \/\/ next node if not conditional$/;"	m	class:VProgramNode
VProgramNode::ifnode	src/Programming/Visual/VProgramNode.h	/^        VProgramNode* ifnode; \/\/ next node if not conditional$/;"	m	class:VProgramNode
VProgramNode::mtype	include/Eternia/Programming/Visual/VProgramNode.h	/^        PMathType mtype; \/\/ type of math to perform$/;"	m	class:VProgramNode
VProgramNode::mtype	src/Programming/Visual/VProgramNode.h	/^        PMathType mtype; \/\/ type of math to perform$/;"	m	class:VProgramNode
VProgramNode::nodeid	include/Eternia/Programming/Visual/VProgramNode.h	/^        int nodeid; \/\/ node id, useful for error debugging$/;"	m	class:VProgramNode
VProgramNode::nodeid	src/Programming/Visual/VProgramNode.h	/^        int nodeid; \/\/ node id, useful for error debugging$/;"	m	class:VProgramNode
VProgramNode::repeating	include/Eternia/Programming/Visual/VProgramNode.h	/^        bool repeating; \/\/ is this node repeating? (like a for loop, conditional)$/;"	m	class:VProgramNode
VProgramNode::repeating	src/Programming/Visual/VProgramNode.h	/^        bool repeating; \/\/ is this node repeating? (like a for loop, conditional)$/;"	m	class:VProgramNode
VProgramNode::slot	include/Eternia/Programming/Visual/VProgramNode.h	/^        int slot; \/\/ slot for input\/output$/;"	m	class:VProgramNode
VProgramNode::slot	src/Programming/Visual/VProgramNode.h	/^        int slot; \/\/ slot for input\/output$/;"	m	class:VProgramNode
VProgramNode::tickNode	include/Eternia/Programming/Visual/VProgramNode.h	/^        void tickNode(); \/\/ tick this node and perform the given functions.$/;"	p	class:VProgramNode
VProgramNode::tickNode	src/Programming/Visual/VProgramNode.h	/^        void tickNode(); \/\/ tick this node and perform the given functions.$/;"	p	class:VProgramNode
VProgramNode::type	include/Eternia/Programming/Visual/VProgramNode.h	/^        PNodeType type; \/\/ type of node, conditional$/;"	m	class:VProgramNode
VProgramNode::type	src/Programming/Visual/VProgramNode.h	/^        PNodeType type; \/\/ type of node, conditional$/;"	m	class:VProgramNode
VProgramNode::var1	include/Eternia/Programming/Visual/VProgramNode.h	/^        int var1, var2, var3; \/\/ slot locations for vars$/;"	m	class:VProgramNode
VProgramNode::var1	src/Programming/Visual/VProgramNode.h	/^        int var1, var2, var3; \/\/ slot locations for vars$/;"	m	class:VProgramNode
VProgramNode::var1slot	include/Eternia/Programming/Visual/VProgramNode.h	/^        VarTYPE var1slot, var2slot, var3slot;$/;"	m	class:VProgramNode
VProgramNode::var1slot	src/Programming/Visual/VProgramNode.h	/^        VarTYPE var1slot, var2slot, var3slot;$/;"	m	class:VProgramNode
VProgramNode::var2	include/Eternia/Programming/Visual/VProgramNode.h	/^        int var1, var2, var3; \/\/ slot locations for vars$/;"	m	class:VProgramNode
VProgramNode::var2	src/Programming/Visual/VProgramNode.h	/^        int var1, var2, var3; \/\/ slot locations for vars$/;"	m	class:VProgramNode
VProgramNode::var2slot	include/Eternia/Programming/Visual/VProgramNode.h	/^        VarTYPE var1slot, var2slot, var3slot;$/;"	m	class:VProgramNode
VProgramNode::var2slot	src/Programming/Visual/VProgramNode.h	/^        VarTYPE var1slot, var2slot, var3slot;$/;"	m	class:VProgramNode
VProgramNode::var3	include/Eternia/Programming/Visual/VProgramNode.h	/^        int var1, var2, var3; \/\/ slot locations for vars$/;"	m	class:VProgramNode
VProgramNode::var3	src/Programming/Visual/VProgramNode.h	/^        int var1, var2, var3; \/\/ slot locations for vars$/;"	m	class:VProgramNode
VProgramNode::var3slot	include/Eternia/Programming/Visual/VProgramNode.h	/^        VarTYPE var1slot, var2slot, var3slot;$/;"	m	class:VProgramNode
VProgramNode::var3slot	src/Programming/Visual/VProgramNode.h	/^        VarTYPE var1slot, var2slot, var3slot;$/;"	m	class:VProgramNode
VProgramVariable	include/Eternia/Programming/Visual/VProgramVariable.h	/^        VProgramVariable();$/;"	p	class:VProgramVariable
VProgramVariable	include/Eternia/Programming/Visual/VProgramVariable.h	/^class VProgramVariable {$/;"	c
VProgramVariable	src/Programming/Visual/VProgramVariable.cpp	/^VProgramVariable::VProgramVariable() {$/;"	f	class:VProgramVariable
VProgramVariable	src/Programming/Visual/VProgramVariable.h	/^        VProgramVariable();$/;"	p	class:VProgramVariable
VProgramVariable	src/Programming/Visual/VProgramVariable.h	/^class VProgramVariable {$/;"	c
VProgramVariable::VProgramVariable	include/Eternia/Programming/Visual/VProgramVariable.h	/^        VProgramVariable();$/;"	p	class:VProgramVariable
VProgramVariable::VProgramVariable	src/Programming/Visual/VProgramVariable.cpp	/^VProgramVariable::VProgramVariable() {$/;"	f	class:VProgramVariable
VProgramVariable::VProgramVariable	src/Programming/Visual/VProgramVariable.h	/^        VProgramVariable();$/;"	p	class:VProgramVariable
VProgramVariable::name	include/Eternia/Programming/Visual/VProgramVariable.h	/^        CharString name; \/\/ name of the variable$/;"	m	class:VProgramVariable
VProgramVariable::name	src/Programming/Visual/VProgramVariable.h	/^        CharString name; \/\/ name of the variable$/;"	m	class:VProgramVariable
VProgramVariable::number	include/Eternia/Programming/Visual/VProgramVariable.h	/^        double number;$/;"	m	class:VProgramVariable
VProgramVariable::number	src/Programming/Visual/VProgramVariable.h	/^        double number;$/;"	m	class:VProgramVariable
VProgramVariable::object	include/Eternia/Programming/Visual/VProgramVariable.h	/^        void* object; \/\/ object set as a variable$/;"	m	class:VProgramVariable
VProgramVariable::object	src/Programming/Visual/VProgramVariable.h	/^        void* object; \/\/ object set as a variable$/;"	m	class:VProgramVariable
VProgramVariable::string	include/Eternia/Programming/Visual/VProgramVariable.h	/^        CharString string; \/\/ string value of this variable$/;"	m	class:VProgramVariable
VProgramVariable::string	src/Programming/Visual/VProgramVariable.h	/^        CharString string; \/\/ string value of this variable$/;"	m	class:VProgramVariable
VProgramVariable::type	include/Eternia/Programming/Visual/VProgramVariable.h	/^        PV_Type type;$/;"	m	class:VProgramVariable
VProgramVariable::type	src/Programming/Visual/VProgramVariable.h	/^        PV_Type type;$/;"	m	class:VProgramVariable
VS_0	include/Eternia/Math/struct/VectorSpace.h	/^enum VECSPACE_PROPERTY {VS_0, VS_R1, VS_R2, VS_R3, VS_Rn};$/;"	e	enum:VECSPACE_PROPERTY
VS_0	src/Math/struct/VectorSpace.h	/^enum VECSPACE_PROPERTY {VS_0, VS_R1, VS_R2, VS_R3, VS_Rn};$/;"	e	enum:VECSPACE_PROPERTY
VS_R1	include/Eternia/Math/struct/VectorSpace.h	/^enum VECSPACE_PROPERTY {VS_0, VS_R1, VS_R2, VS_R3, VS_Rn};$/;"	e	enum:VECSPACE_PROPERTY
VS_R1	src/Math/struct/VectorSpace.h	/^enum VECSPACE_PROPERTY {VS_0, VS_R1, VS_R2, VS_R3, VS_Rn};$/;"	e	enum:VECSPACE_PROPERTY
VS_R2	include/Eternia/Math/struct/VectorSpace.h	/^enum VECSPACE_PROPERTY {VS_0, VS_R1, VS_R2, VS_R3, VS_Rn};$/;"	e	enum:VECSPACE_PROPERTY
VS_R2	src/Math/struct/VectorSpace.h	/^enum VECSPACE_PROPERTY {VS_0, VS_R1, VS_R2, VS_R3, VS_Rn};$/;"	e	enum:VECSPACE_PROPERTY
VS_R3	include/Eternia/Math/struct/VectorSpace.h	/^enum VECSPACE_PROPERTY {VS_0, VS_R1, VS_R2, VS_R3, VS_Rn};$/;"	e	enum:VECSPACE_PROPERTY
VS_R3	src/Math/struct/VectorSpace.h	/^enum VECSPACE_PROPERTY {VS_0, VS_R1, VS_R2, VS_R3, VS_Rn};$/;"	e	enum:VECSPACE_PROPERTY
VS_Rn	include/Eternia/Math/struct/VectorSpace.h	/^enum VECSPACE_PROPERTY {VS_0, VS_R1, VS_R2, VS_R3, VS_Rn};$/;"	e	enum:VECSPACE_PROPERTY
VS_Rn	src/Math/struct/VectorSpace.h	/^enum VECSPACE_PROPERTY {VS_0, VS_R1, VS_R2, VS_R3, VS_Rn};$/;"	e	enum:VECSPACE_PROPERTY
V_molar	include/Eternia/constants.h	/^        const double V_molar = 2.897756e-3*meter*Kelvins;$/;"	m	namespace:physical::constant
V_molar	src/constants.h	/^        const double V_molar = 2.897756e-3*meter*Kelvins;$/;"	m	namespace:physical::constant
ValueNode	include/Eternia/Data/Stack.h	/^class ValueNode {$/;"	c
ValueNode	src/Data/Stack.h	/^class ValueNode {$/;"	c
ValueNode::Next	include/Eternia/Data/Stack.h	/^        ValueNode* Next; \/\/ Node linker$/;"	m	class:ValueNode
ValueNode::Next	src/Data/Stack.h	/^        ValueNode* Next; \/\/ Node linker$/;"	m	class:ValueNode
ValueNode::data	include/Eternia/Data/Stack.h	/^        int data;$/;"	m	class:ValueNode
ValueNode::data	src/Data/Stack.h	/^        int data;$/;"	m	class:ValueNode
Vanadium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Vanadium = new Atom("Vanadium", "V", 5, 4, 23, 28,22, 6.11,0.0000002, 0.031, 2183,3680, 0.489, 5, COLOR_Silver,ELEM_Transition);$/;"	v
Vanadium	src/Engineering/Chemistry/elementals.h	/^const Atom Vanadium = new Atom("Vanadium", "V", 5, 4, 23, 28,22, 6.11,0.0000002, 0.031, 2183,3680, 0.489, 5, COLOR_Silver,ELEM_Transition);$/;"	v
VarTYPE	include/Eternia/Programming/Visual/VProgramNode.h	/^enum VarTYPE {VAT_None, VAT_IN, VAT_LOCAL}; \/\/ select a variable channel$/;"	g
VarTYPE	src/Programming/Visual/VProgramNode.h	/^enum VarTYPE {VAT_None, VAT_IN, VAT_LOCAL}; \/\/ select a variable channel$/;"	g
Varicap_DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Varicap_DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
VectorSpace	include/Eternia/Math/struct/VectorSpace.h	/^        VectorSpace();$/;"	p	class:VectorSpace
VectorSpace	include/Eternia/Math/struct/VectorSpace.h	/^        VectorSpace(VECSPACE_PROPERTY _property);$/;"	p	class:VectorSpace
VectorSpace	include/Eternia/Math/struct/VectorSpace.h	/^        VectorSpace(VECSPACE_PROPERTY _property, int N_Dimensions); \/\/ define VS_Rn's exact number of dimensions.$/;"	p	class:VectorSpace
VectorSpace	include/Eternia/Math/struct/VectorSpace.h	/^        VectorSpace(double** matrix, int m, int n);$/;"	p	class:VectorSpace
VectorSpace	include/Eternia/Math/struct/VectorSpace.h	/^class VectorSpace : public Matrix {$/;"	c
VectorSpace	src/Math/struct/VectorSpace.cpp	/^VectorSpace::VectorSpace() {}$/;"	f	class:VectorSpace
VectorSpace	src/Math/struct/VectorSpace.cpp	/^VectorSpace::VectorSpace(VECSPACE_PROPERTY _property) {$/;"	f	class:VectorSpace
VectorSpace	src/Math/struct/VectorSpace.cpp	/^VectorSpace::VectorSpace(VECSPACE_PROPERTY _property, int N_Dimensions) {$/;"	f	class:VectorSpace
VectorSpace	src/Math/struct/VectorSpace.cpp	/^VectorSpace::VectorSpace(double **values_, int _m, int _n) {$/;"	f	class:VectorSpace
VectorSpace	src/Math/struct/VectorSpace.h	/^        VectorSpace();$/;"	p	class:VectorSpace
VectorSpace	src/Math/struct/VectorSpace.h	/^        VectorSpace(VECSPACE_PROPERTY _property);$/;"	p	class:VectorSpace
VectorSpace	src/Math/struct/VectorSpace.h	/^        VectorSpace(VECSPACE_PROPERTY _property, int N_Dimensions); \/\/ define VS_Rn's exact number of dimensions.$/;"	p	class:VectorSpace
VectorSpace	src/Math/struct/VectorSpace.h	/^        VectorSpace(double** matrix, int m, int n);$/;"	p	class:VectorSpace
VectorSpace	src/Math/struct/VectorSpace.h	/^class VectorSpace : public Matrix {$/;"	c
VectorSpace::VectorSpace	include/Eternia/Math/struct/VectorSpace.h	/^        VectorSpace();$/;"	p	class:VectorSpace
VectorSpace::VectorSpace	include/Eternia/Math/struct/VectorSpace.h	/^        VectorSpace(VECSPACE_PROPERTY _property);$/;"	p	class:VectorSpace
VectorSpace::VectorSpace	include/Eternia/Math/struct/VectorSpace.h	/^        VectorSpace(VECSPACE_PROPERTY _property, int N_Dimensions); \/\/ define VS_Rn's exact number of dimensions.$/;"	p	class:VectorSpace
VectorSpace::VectorSpace	include/Eternia/Math/struct/VectorSpace.h	/^        VectorSpace(double** matrix, int m, int n);$/;"	p	class:VectorSpace
VectorSpace::VectorSpace	src/Math/struct/VectorSpace.cpp	/^VectorSpace::VectorSpace() {}$/;"	f	class:VectorSpace
VectorSpace::VectorSpace	src/Math/struct/VectorSpace.cpp	/^VectorSpace::VectorSpace(VECSPACE_PROPERTY _property) {$/;"	f	class:VectorSpace
VectorSpace::VectorSpace	src/Math/struct/VectorSpace.cpp	/^VectorSpace::VectorSpace(VECSPACE_PROPERTY _property, int N_Dimensions) {$/;"	f	class:VectorSpace
VectorSpace::VectorSpace	src/Math/struct/VectorSpace.cpp	/^VectorSpace::VectorSpace(double **values_, int _m, int _n) {$/;"	f	class:VectorSpace
VectorSpace::VectorSpace	src/Math/struct/VectorSpace.h	/^        VectorSpace();$/;"	p	class:VectorSpace
VectorSpace::VectorSpace	src/Math/struct/VectorSpace.h	/^        VectorSpace(VECSPACE_PROPERTY _property);$/;"	p	class:VectorSpace
VectorSpace::VectorSpace	src/Math/struct/VectorSpace.h	/^        VectorSpace(VECSPACE_PROPERTY _property, int N_Dimensions); \/\/ define VS_Rn's exact number of dimensions.$/;"	p	class:VectorSpace
VectorSpace::VectorSpace	src/Math/struct/VectorSpace.h	/^        VectorSpace(double** matrix, int m, int n);$/;"	p	class:VectorSpace
VectorSpace::addVector	include/Eternia/Math/struct/VectorSpace.h	/^        void addVector(vertex* v); \/\/ adds vertex to rows.$/;"	p	class:VectorSpace
VectorSpace::addVector	src/Math/struct/VectorSpace.h	/^        void addVector(vertex* v); \/\/ adds vertex to rows.$/;"	p	class:VectorSpace
VectorSpace::clone	include/Eternia/Math/struct/VectorSpace.h	/^        virtual VectorSpace* clone();$/;"	p	class:VectorSpace
VectorSpace::clone	src/Math/struct/VectorSpace.cpp	/^VectorSpace* VectorSpace::clone() {$/;"	f	class:VectorSpace
VectorSpace::clone	src/Math/struct/VectorSpace.h	/^        virtual VectorSpace* clone();$/;"	p	class:VectorSpace
VectorSpace::dim	include/Eternia/Math/struct/VectorSpace.h	/^        int dim;$/;"	m	class:VectorSpace
VectorSpace::dim	src/Math/struct/VectorSpace.h	/^        int dim;$/;"	m	class:VectorSpace
VectorSpace::dimension	include/Eternia/Math/struct/VectorSpace.h	/^        int dimension(); \/\/ returns the dimension of the vertex space.$/;"	p	class:VectorSpace
VectorSpace::dimension	src/Math/struct/VectorSpace.cpp	/^int VectorSpace::dimension() {$/;"	f	class:VectorSpace
VectorSpace::dimension	src/Math/struct/VectorSpace.h	/^        int dimension(); \/\/ returns the dimension of the vertex space.$/;"	p	class:VectorSpace
VectorSpace::hasInfiniteDimensions	include/Eternia/Math/struct/VectorSpace.h	/^        bool hasInfiniteDimensions(); \/\/ has infinite dimensions (or Rn)$/;"	p	class:VectorSpace
VectorSpace::hasInfiniteDimensions	src/Math/struct/VectorSpace.cpp	/^bool VectorSpace::hasInfiniteDimensions() {$/;"	f	class:VectorSpace
VectorSpace::hasInfiniteDimensions	src/Math/struct/VectorSpace.h	/^        bool hasInfiniteDimensions(); \/\/ has infinite dimensions (or Rn)$/;"	p	class:VectorSpace
VectorSpace::innerProduct	include/Eternia/Math/struct/VectorSpace.h	/^        double innerProduct(VectorSpace* V); \/\/ inner dot product. <u,v> = U(1,1)*V(1,1) + U(2,1)*V(2,1) + ... U(n)*V(n)$/;"	p	class:VectorSpace
VectorSpace::innerProduct	src/Math/struct/VectorSpace.cpp	/^double VectorSpace::innerProduct(VectorSpace* V) {$/;"	f	class:VectorSpace
VectorSpace::innerProduct	src/Math/struct/VectorSpace.h	/^        double innerProduct(VectorSpace* V); \/\/ inner dot product. <u,v> = U(1,1)*V(1,1) + U(2,1)*V(2,1) + ... U(n)*V(n)$/;"	p	class:VectorSpace
VectorSpace::isBasis	include/Eternia/Math/struct/VectorSpace.h	/^        bool isBasis(VectorSpace* W); \/\/ returns whether the VectorSpace is a Basis of Rn$/;"	p	class:VectorSpace
VectorSpace::isBasis	src/Math/struct/VectorSpace.cpp	/^bool VectorSpace::isBasis(VectorSpace* W) {$/;"	f	class:VectorSpace
VectorSpace::isBasis	src/Math/struct/VectorSpace.h	/^        bool isBasis(VectorSpace* W); \/\/ returns whether the VectorSpace is a Basis of Rn$/;"	p	class:VectorSpace
VectorSpace::isIndependent	include/Eternia/Math/struct/VectorSpace.h	/^        bool isIndependent(); \/\/ returns true if the vertex space is dependent of equations.$/;"	p	class:VectorSpace
VectorSpace::isIndependent	src/Math/struct/VectorSpace.cpp	/^bool VectorSpace::isIndependent() {$/;"	f	class:VectorSpace
VectorSpace::isIndependent	src/Math/struct/VectorSpace.h	/^        bool isIndependent(); \/\/ returns true if the vertex space is dependent of equations.$/;"	p	class:VectorSpace
VectorSpace::isSubSpace	include/Eternia/Math/struct/VectorSpace.h	/^        bool isSubSpace(VectorSpace* V); \/\/ returns whether this is a subspace of V$/;"	p	class:VectorSpace
VectorSpace::isSubSpace	src/Math/struct/VectorSpace.h	/^        bool isSubSpace(VectorSpace* V); \/\/ returns whether this is a subspace of V$/;"	p	class:VectorSpace
VectorSpace::nullity	include/Eternia/Math/struct/VectorSpace.h	/^        VectorSpace* nullity(); \/\/ returns the N(A), or nullity space. Should return B = span(A)$/;"	p	class:VectorSpace
VectorSpace::nullity	src/Math/struct/VectorSpace.cpp	/^VectorSpace* VectorSpace::nullity() {$/;"	f	class:VectorSpace
VectorSpace::nullity	src/Math/struct/VectorSpace.h	/^        VectorSpace* nullity(); \/\/ returns the N(A), or nullity space. Should return B = span(A)$/;"	p	class:VectorSpace
VectorSpace::property	include/Eternia/Math/struct/VectorSpace.h	/^        VECSPACE_PROPERTY property;$/;"	m	class:VectorSpace
VectorSpace::property	src/Math/struct/VectorSpace.h	/^        VECSPACE_PROPERTY property;$/;"	m	class:VectorSpace
VectorSpace::spans	include/Eternia/Math/struct/VectorSpace.h	/^        bool spans(VectorSpace* W); \/\/ returns whether this spans W$/;"	p	class:VectorSpace
VectorSpace::spans	src/Math/struct/VectorSpace.cpp	/^bool VectorSpace::spans(VectorSpace* W) {$/;"	f	class:VectorSpace
VectorSpace::spans	src/Math/struct/VectorSpace.h	/^        bool spans(VectorSpace* W); \/\/ returns whether this spans W$/;"	p	class:VectorSpace
Vertex	include/Eternia/Algorithm/Pathing/DijkstraPath.hpp	/^class Vertex;$/;"	x
Vertex	src/Algorithm/Pathing/DijkstraPath.hpp	/^class Vertex;$/;"	x
VertexObject	include/Eternia/Math/struct/vertex.h	/^    VertexObject();$/;"	p	class:VertexObject
VertexObject	include/Eternia/Math/struct/vertex.h	/^    VertexObject(double x,double y,double z);$/;"	p	class:VertexObject
VertexObject	include/Eternia/Math/struct/vertex.h	/^class VertexObject : public vertex{$/;"	c
VertexObject	src/Engineering/Physics/test/testGravity.h	/^    class VertexObject;$/;"	x
VertexObject	src/Math/struct/vertex.cpp	/^VertexObject::VertexObject() {$/;"	f	class:VertexObject
VertexObject	src/Math/struct/vertex.cpp	/^VertexObject::VertexObject(double _x,double _y,double _z) {$/;"	f	class:VertexObject
VertexObject	src/Math/struct/vertex.h	/^    VertexObject();$/;"	p	class:VertexObject
VertexObject	src/Math/struct/vertex.h	/^    VertexObject(double x,double y,double z);$/;"	p	class:VertexObject
VertexObject	src/Math/struct/vertex.h	/^class VertexObject : public vertex{$/;"	c
VertexObject::VertexObject	include/Eternia/Math/struct/vertex.h	/^    VertexObject();$/;"	p	class:VertexObject
VertexObject::VertexObject	include/Eternia/Math/struct/vertex.h	/^    VertexObject(double x,double y,double z);$/;"	p	class:VertexObject
VertexObject::VertexObject	src/Math/struct/vertex.cpp	/^VertexObject::VertexObject() {$/;"	f	class:VertexObject
VertexObject::VertexObject	src/Math/struct/vertex.cpp	/^VertexObject::VertexObject(double _x,double _y,double _z) {$/;"	f	class:VertexObject
VertexObject::VertexObject	src/Math/struct/vertex.h	/^    VertexObject();$/;"	p	class:VertexObject
VertexObject::VertexObject	src/Math/struct/vertex.h	/^    VertexObject(double x,double y,double z);$/;"	p	class:VertexObject
VertexObject::acceleration	include/Eternia/Math/struct/vertex.h	/^    vertex velocity, acceleration;$/;"	m	class:VertexObject
VertexObject::acceleration	src/Math/struct/vertex.h	/^    vertex velocity, acceleration;$/;"	m	class:VertexObject
VertexObject::dimension	include/Eternia/Math/struct/vertex.h	/^    double dimension, mass;$/;"	m	class:VertexObject
VertexObject::dimension	src/Math/struct/vertex.h	/^    double dimension, mass;$/;"	m	class:VertexObject
VertexObject::getGravity	include/Eternia/Math/struct/vertex.h	/^    double getGravity(VertexObject body, double height);$/;"	p	class:VertexObject
VertexObject::getGravity	src/Math/struct/vertex.cpp	/^double VertexObject::getGravity(VertexObject body, double distance){$/;"	f	class:VertexObject
VertexObject::getGravity	src/Math/struct/vertex.h	/^    double getGravity(VertexObject body, double height);$/;"	p	class:VertexObject
VertexObject::gravitate	include/Eternia/Math/struct/vertex.h	/^    double gravitate(VertexObject body,  double time);$/;"	p	class:VertexObject
VertexObject::gravitate	src/Math/struct/vertex.cpp	/^double VertexObject::gravitate(VertexObject body, double seconds) {$/;"	f	class:VertexObject
VertexObject::gravitate	src/Math/struct/vertex.h	/^    double gravitate(VertexObject body,  double time);$/;"	p	class:VertexObject
VertexObject::mass	include/Eternia/Math/struct/vertex.h	/^    double dimension, mass;$/;"	m	class:VertexObject
VertexObject::mass	src/Math/struct/vertex.h	/^    double dimension, mass;$/;"	m	class:VertexObject
VertexObject::setStableOrbit	include/Eternia/Math/struct/vertex.h	/^    void setStableOrbit(VertexObject body, double eccentricity, bool CCW_orbit);$/;"	p	class:VertexObject
VertexObject::setStableOrbit	src/Math/struct/vertex.cpp	/^void VertexObject::setStableOrbit(VertexObject body, double eccentricity, bool CCW_orbit){$/;"	f	class:VertexObject
VertexObject::setStableOrbit	src/Math/struct/vertex.h	/^    void setStableOrbit(VertexObject body, double eccentricity, bool CCW_orbit);$/;"	p	class:VertexObject
VertexObject::simSecond	include/Eternia/Math/struct/vertex.h	/^    void simSecond();$/;"	p	class:VertexObject
VertexObject::simSecond	src/Math/struct/vertex.cpp	/^void VertexObject::simSecond() {$/;"	f	class:VertexObject
VertexObject::simSecond	src/Math/struct/vertex.h	/^    void simSecond();$/;"	p	class:VertexObject
VertexObject::thrust	include/Eternia/Math/struct/vertex.h	/^    void thrust(VertexObject thrust); \/\/ applies force$/;"	p	class:VertexObject
VertexObject::thrust	src/Math/struct/vertex.cpp	/^void VertexObject::thrust(VertexObject thrust) {$/;"	f	class:VertexObject
VertexObject::thrust	src/Math/struct/vertex.h	/^    void thrust(VertexObject thrust); \/\/ applies force$/;"	p	class:VertexObject
VertexObject::tick	include/Eternia/Math/struct/vertex.h	/^    void tick(double second); \/\/ tick for acceleration and velocity$/;"	p	class:VertexObject
VertexObject::tick	src/Math/struct/vertex.cpp	/^void VertexObject::tick(double second){$/;"	f	class:VertexObject
VertexObject::tick	src/Math/struct/vertex.h	/^    void tick(double second); \/\/ tick for acceleration and velocity$/;"	p	class:VertexObject
VertexObject::velocity	include/Eternia/Math/struct/vertex.h	/^    vertex velocity, acceleration;$/;"	m	class:VertexObject
VertexObject::velocity	src/Math/struct/vertex.h	/^    vertex velocity, acceleration;$/;"	m	class:VertexObject
VertexObject::~VertexObject	include/Eternia/Math/struct/vertex.h	/^    virtual ~VertexObject();$/;"	p	class:VertexObject
VertexObject::~VertexObject	src/Math/struct/vertex.cpp	/^VertexObject::~VertexObject() {  }$/;"	f	class:VertexObject
VertexObject::~VertexObject	src/Math/struct/vertex.h	/^    virtual ~VertexObject();$/;"	p	class:VertexObject
View	include/Eternia/Design/View.h	/^        View();$/;"	p	class:View
View	include/Eternia/Design/View.h	/^class View {$/;"	c
View	src/Design/View.h	/^        View();$/;"	p	class:View
View	src/Design/View.h	/^class View {$/;"	c
View::View	include/Eternia/Design/View.h	/^        View();$/;"	p	class:View
View::View	src/Design/View.h	/^        View();$/;"	p	class:View
View::addLayout	include/Eternia/Design/View.h	/^        void addLayout(Layout* layout);$/;"	p	class:View
View::addLayout	src/Design/View.h	/^        void addLayout(Layout* layout);$/;"	p	class:View
View::layout	include/Eternia/Design/View.h	/^        LinkedList<Layout> *layout;$/;"	m	class:View
View::layout	src/Design/View.h	/^        LinkedList<Layout> *layout;$/;"	m	class:View
View::~View	include/Eternia/Design/View.h	/^        ~View();$/;"	p	class:View
View::~View	src/Design/View.h	/^        ~View();$/;"	p	class:View
Void	include/Eternia/Gamelogic/Superweapons/MegaCannon/MegaCannon.h	/^        Void();$/;"	p	class:Void
Void	include/Eternia/Gamelogic/Superweapons/MegaCannon/MegaCannon.h	/^class Void : public Superweapon {$/;"	c
Void	include/Eternia/Gamelogic/Superweapons/Void/Void.h	/^        Void();$/;"	p	class:Void
Void	include/Eternia/Gamelogic/Superweapons/Void/Void.h	/^class Void : public Superweapon {$/;"	c
Void	src/Gamelogic/Superweapons/MegaCannon/MegaCannon.h	/^        Void();$/;"	p	class:Void
Void	src/Gamelogic/Superweapons/MegaCannon/MegaCannon.h	/^class Void : public Superweapon {$/;"	c
Void	src/Gamelogic/Superweapons/Void/Void.h	/^        Void();$/;"	p	class:Void
Void	src/Gamelogic/Superweapons/Void/Void.h	/^class Void : public Superweapon {$/;"	c
Void::Void	include/Eternia/Gamelogic/Superweapons/MegaCannon/MegaCannon.h	/^        Void();$/;"	p	class:Void
Void::Void	include/Eternia/Gamelogic/Superweapons/Void/Void.h	/^        Void();$/;"	p	class:Void
Void::Void	src/Gamelogic/Superweapons/MegaCannon/MegaCannon.h	/^        Void();$/;"	p	class:Void
Void::Void	src/Gamelogic/Superweapons/Void/Void.h	/^        Void();$/;"	p	class:Void
VoipPacket	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        VoipPacket(char* data) {$/;"	f	class:VoipPacket
VoipPacket	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        VoipPacket(long FromID, long ToID, char* data) {$/;"	f	class:VoipPacket
VoipPacket	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^class VoipPacket : public Packet {$/;"	c
VoipPacket	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        VoipPacket(char* data) {$/;"	f	class:VoipPacket
VoipPacket	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        VoipPacket(long FromID, long ToID, char* data) {$/;"	f	class:VoipPacket
VoipPacket	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^class VoipPacket : public Packet {$/;"	c
VoipPacket::VoipPacket	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        VoipPacket(char* data) {$/;"	f	class:VoipPacket
VoipPacket::VoipPacket	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        VoipPacket(long FromID, long ToID, char* data) {$/;"	f	class:VoipPacket
VoipPacket::VoipPacket	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        VoipPacket(char* data) {$/;"	f	class:VoipPacket
VoipPacket::VoipPacket	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        VoipPacket(long FromID, long ToID, char* data) {$/;"	f	class:VoipPacket
VoipPacket::dat	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        char* dat;$/;"	m	class:VoipPacket
VoipPacket::dat	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        char* dat;$/;"	m	class:VoipPacket
VoipPacket::fromID	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        long fromID;$/;"	m	class:VoipPacket
VoipPacket::fromID	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        long fromID;$/;"	m	class:VoipPacket
VoipPacket::getRAW	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        char* getRAW();$/;"	p	class:VoipPacket
VoipPacket::getRAW	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        char* getRAW();$/;"	p	class:VoipPacket
VoipPacket::toID	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        long toID;$/;"	m	class:VoipPacket
VoipPacket::toID	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        long toID;$/;"	m	class:VoipPacket
Volt	include/Eternia/constants.h	/^        const double Volt = Watt\/Ampere;$/;"	m	namespace:physical::unit
Volt	src/constants.h	/^        const double Volt = Watt\/Ampere;$/;"	m	namespace:physical::unit
Volts	include/Eternia/constants.h	/^        const double Volts = Volt;$/;"	m	namespace:physical::unit
Volts	src/constants.h	/^        const double Volts = Volt;$/;"	m	namespace:physical::unit
VoxelGeom	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    VoxelGeom(char layers, CharString filemap, bool useMemMap);$/;"	p	class:VoxelGeom
VoxelGeom	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^class VoxelGeom{$/;"	c
VoxelGeom	src/Gamelogic/Voxel/VoxelGeom.h	/^    VoxelGeom(char layers, CharString filemap, bool useMemMap);$/;"	p	class:VoxelGeom
VoxelGeom	src/Gamelogic/Voxel/VoxelGeom.h	/^class VoxelGeom{$/;"	c
VoxelGeom::VoxelGeom	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    VoxelGeom(char layers, CharString filemap, bool useMemMap);$/;"	p	class:VoxelGeom
VoxelGeom::VoxelGeom	src/Gamelogic/Voxel/VoxelGeom.h	/^    VoxelGeom(char layers, CharString filemap, bool useMemMap);$/;"	p	class:VoxelGeom
VoxelGeom::blocks	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    Block ***blocks;$/;"	m	class:VoxelGeom
VoxelGeom::blocks	src/Gamelogic/Voxel/VoxelGeom.h	/^    Block ***blocks;$/;"	m	class:VoxelGeom
VoxelGeom::flush	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    void flush();$/;"	p	class:VoxelGeom
VoxelGeom::flush	src/Gamelogic/Voxel/VoxelGeom.h	/^    void flush();$/;"	p	class:VoxelGeom
VoxelGeom::getBlock	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    Block* getBlock(int x, int y, int z, int layers);$/;"	p	class:VoxelGeom
VoxelGeom::getBlock	src/Gamelogic/Voxel/VoxelGeom.h	/^    Block* getBlock(int x, int y, int z, int layers);$/;"	p	class:VoxelGeom
VoxelGeom::layers	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    char layers;$/;"	m	class:VoxelGeom
VoxelGeom::layers	src/Gamelogic/Voxel/VoxelGeom.h	/^    char layers;$/;"	m	class:VoxelGeom
VoxelGeom::memmap	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    CharString memmap;$/;"	m	class:VoxelGeom
VoxelGeom::memmap	src/Gamelogic/Voxel/VoxelGeom.h	/^    CharString memmap;$/;"	m	class:VoxelGeom
VoxelGeom::memoryThread	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    void memoryThread();$/;"	p	class:VoxelGeom
VoxelGeom::memoryThread	src/Gamelogic/Voxel/VoxelGeom.h	/^    void memoryThread();$/;"	p	class:VoxelGeom
VoxelGeom::setBlock	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    void setBlock(int x, int y, int z, Block* block);$/;"	p	class:VoxelGeom
VoxelGeom::setBlock	src/Gamelogic/Voxel/VoxelGeom.h	/^    void setBlock(int x, int y, int z, Block* block);$/;"	p	class:VoxelGeom
VoxelGeom::sizex	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    int sizex;$/;"	m	class:VoxelGeom
VoxelGeom::sizex	src/Gamelogic/Voxel/VoxelGeom.h	/^    int sizex;$/;"	m	class:VoxelGeom
VoxelGeom::sizey	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    int sizey;$/;"	m	class:VoxelGeom
VoxelGeom::sizey	src/Gamelogic/Voxel/VoxelGeom.h	/^    int sizey;$/;"	m	class:VoxelGeom
VoxelGeom::useMemMap	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    bool useMemMap;$/;"	m	class:VoxelGeom
VoxelGeom::useMemMap	src/Gamelogic/Voxel/VoxelGeom.h	/^    bool useMemMap;$/;"	m	class:VoxelGeom
W	include/Eternia/constants.h	/^        const double W = Watt;$/;"	m	namespace:physical::unit
W	src/constants.h	/^        const double W = Watt;$/;"	m	namespace:physical::unit
WAIT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WAIT /;"	d
WAIT	src/Emulation/MPU/msp430g2553.h	/^#define WAIT /;"	d
WARPARTYType	include/Eternia/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	g
WARPARTYType	src/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	g
WARParty_H_	include/Eternia/Gamelogic/Social/War/WarParty.h	/^#define WARParty_H_$/;"	d
WARParty_H_	src/Gamelogic/Social/War/WarParty.h	/^#define WARParty_H_$/;"	d
WAR_H_	include/Eternia/Gamelogic/Social/War/War.h	/^#define WAR_H_$/;"	d
WAR_H_	src/Gamelogic/Social/War/War.h	/^#define WAR_H_$/;"	d
WDTCNTCL	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDTCNTCL /;"	d
WDTCNTCL	src/Emulation/MPU/msp430g2553.h	/^#define WDTCNTCL /;"	d
WDTCTL	include/Eternia/Emulation/MPU/msp430_declare_consts.h	/^#define WDTCTL /;"	d
WDTCTL	include/Eternia/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(WDTCTL);                            \/* Watchdog Timer Control *\/$/;"	v
WDTCTL	src/Emulation/MPU/msp430_declare_consts.h	/^#define WDTCTL /;"	d
WDTCTL	src/Emulation/MPU/msp430g2553.h	/^SFR_16BIT(WDTCTL);                            \/* Watchdog Timer Control *\/$/;"	v
WDTHOLD	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDTHOLD /;"	d
WDTHOLD	src/Emulation/MPU/msp430g2553.h	/^#define WDTHOLD /;"	d
WDTIE	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDTIE /;"	d
WDTIE	src/Emulation/MPU/msp430g2553.h	/^#define WDTIE /;"	d
WDTIFG	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDTIFG /;"	d
WDTIFG	src/Emulation/MPU/msp430g2553.h	/^#define WDTIFG /;"	d
WDTIS0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDTIS0 /;"	d
WDTIS0	src/Emulation/MPU/msp430g2553.h	/^#define WDTIS0 /;"	d
WDTIS1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDTIS1 /;"	d
WDTIS1	src/Emulation/MPU/msp430g2553.h	/^#define WDTIS1 /;"	d
WDTNMI	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDTNMI /;"	d
WDTNMI	src/Emulation/MPU/msp430g2553.h	/^#define WDTNMI /;"	d
WDTNMIES	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDTNMIES /;"	d
WDTNMIES	src/Emulation/MPU/msp430g2553.h	/^#define WDTNMIES /;"	d
WDTPW	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDTPW /;"	d
WDTPW	src/Emulation/MPU/msp430g2553.h	/^#define WDTPW /;"	d
WDTSSEL	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDTSSEL /;"	d
WDTSSEL	src/Emulation/MPU/msp430g2553.h	/^#define WDTSSEL /;"	d
WDTTMSEL	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDTTMSEL /;"	d
WDTTMSEL	src/Emulation/MPU/msp430g2553.h	/^#define WDTTMSEL /;"	d
WDT_ADLY_1000	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_ADLY_1000 /;"	d
WDT_ADLY_1000	src/Emulation/MPU/msp430g2553.h	/^#define WDT_ADLY_1000 /;"	d
WDT_ADLY_16	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_ADLY_16 /;"	d
WDT_ADLY_16	src/Emulation/MPU/msp430g2553.h	/^#define WDT_ADLY_16 /;"	d
WDT_ADLY_1_9	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_ADLY_1_9 /;"	d
WDT_ADLY_1_9	src/Emulation/MPU/msp430g2553.h	/^#define WDT_ADLY_1_9 /;"	d
WDT_ADLY_250	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_ADLY_250 /;"	d
WDT_ADLY_250	src/Emulation/MPU/msp430g2553.h	/^#define WDT_ADLY_250 /;"	d
WDT_ARST_1000	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_ARST_1000 /;"	d
WDT_ARST_1000	src/Emulation/MPU/msp430g2553.h	/^#define WDT_ARST_1000 /;"	d
WDT_ARST_16	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_ARST_16 /;"	d
WDT_ARST_16	src/Emulation/MPU/msp430g2553.h	/^#define WDT_ARST_16 /;"	d
WDT_ARST_1_9	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_ARST_1_9 /;"	d
WDT_ARST_1_9	src/Emulation/MPU/msp430g2553.h	/^#define WDT_ARST_1_9 /;"	d
WDT_ARST_250	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_ARST_250 /;"	d
WDT_ARST_250	src/Emulation/MPU/msp430g2553.h	/^#define WDT_ARST_250 /;"	d
WDT_MDLY_0_064	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_MDLY_0_064 /;"	d
WDT_MDLY_0_064	src/Emulation/MPU/msp430g2553.h	/^#define WDT_MDLY_0_064 /;"	d
WDT_MDLY_0_5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_MDLY_0_5 /;"	d
WDT_MDLY_0_5	src/Emulation/MPU/msp430g2553.h	/^#define WDT_MDLY_0_5 /;"	d
WDT_MDLY_32	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_MDLY_32 /;"	d
WDT_MDLY_32	src/Emulation/MPU/msp430g2553.h	/^#define WDT_MDLY_32 /;"	d
WDT_MDLY_8	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_MDLY_8 /;"	d
WDT_MDLY_8	src/Emulation/MPU/msp430g2553.h	/^#define WDT_MDLY_8 /;"	d
WDT_MRST_0_064	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_MRST_0_064 /;"	d
WDT_MRST_0_064	src/Emulation/MPU/msp430g2553.h	/^#define WDT_MRST_0_064 /;"	d
WDT_MRST_0_5	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_MRST_0_5 /;"	d
WDT_MRST_0_5	src/Emulation/MPU/msp430g2553.h	/^#define WDT_MRST_0_5 /;"	d
WDT_MRST_32	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_MRST_32 /;"	d
WDT_MRST_32	src/Emulation/MPU/msp430g2553.h	/^#define WDT_MRST_32 /;"	d
WDT_MRST_8	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_MRST_8 /;"	d
WDT_MRST_8	src/Emulation/MPU/msp430g2553.h	/^#define WDT_MRST_8 /;"	d
WDT_VECTOR	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WDT_VECTOR /;"	d
WDT_VECTOR	src/Emulation/MPU/msp430g2553.h	/^#define WDT_VECTOR /;"	d
WHITENOISE_H_	include/Eternia/Audio/Generate/WhiteNoise.h	/^#define WHITENOISE_H_$/;"	d
WHITENOISE_H_	src/Audio/Generate/WhiteNoise.h	/^#define WHITENOISE_H_$/;"	d
WINDOWSXX	include/Eternia/WebFramework/Network/SockClient.h	/^#define WINDOWSXX$/;"	d
WINDOWSXX	include/Eternia/WebFramework/Network/SocketServer.h	/^   #define WINDOWSXX$/;"	d
WINDOWSXX	src/WebFramework/Network/SockClient.h	/^#define WINDOWSXX$/;"	d
WINDOWSXX	src/WebFramework/Network/SocketServer.h	/^   #define WINDOWSXX$/;"	d
WPT_Alliance	include/Eternia/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Alliance	src/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Colony	include/Eternia/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Colony	src/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Faction	include/Eternia/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Faction	src/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Government	include/Eternia/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Government	src/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_None	include/Eternia/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_None	src/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Planet	include/Eternia/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Planet	src/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Player	include/Eternia/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Player	src/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Race	include/Eternia/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WPT_Race	src/Gamelogic/Social/War/WarParty.h	/^enum WARPARTYType {WPT_None, WPT_Player, WPT_Colony, WPT_Government, WPT_Alliance, WPT_Planet, WPT_Race, WPT_Faction};$/;"	e	enum:WARPARTYType
WRT	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define WRT /;"	d
WRT	src/Emulation/MPU/msp430g2553.h	/^#define WRT /;"	d
War	include/Eternia/Gamelogic/Social/War/War.h	/^        War();$/;"	p	class:War
War	include/Eternia/Gamelogic/Social/War/War.h	/^class War {$/;"	c
War	src/Gamelogic/Social/War/War.h	/^        War();$/;"	p	class:War
War	src/Gamelogic/Social/War/War.h	/^class War {$/;"	c
War::War	include/Eternia/Gamelogic/Social/War/War.h	/^        War();$/;"	p	class:War
War::War	src/Gamelogic/Social/War/War.h	/^        War();$/;"	p	class:War
War::addParty	include/Eternia/Gamelogic/Social/War/War.h	/^        void addParty();$/;"	p	class:War
War::addParty	src/Gamelogic/Social/War/War.h	/^        void addParty();$/;"	p	class:War
WarParty	include/Eternia/Gamelogic/Social/War/WarParty.h	/^        WarParty();$/;"	p	class:WarParty
WarParty	include/Eternia/Gamelogic/Social/War/WarParty.h	/^class WarParty {$/;"	c
WarParty	src/Gamelogic/Social/War/WarParty.h	/^        WarParty();$/;"	p	class:WarParty
WarParty	src/Gamelogic/Social/War/WarParty.h	/^class WarParty {$/;"	c
WarParty::WarParty	include/Eternia/Gamelogic/Social/War/WarParty.h	/^        WarParty();$/;"	p	class:WarParty
WarParty::WarParty	src/Gamelogic/Social/War/WarParty.h	/^        WarParty();$/;"	p	class:WarParty
WarParty::faction	include/Eternia/Gamelogic/Social/War/WarParty.h	/^        WARPARTYType faction;$/;"	m	class:WarParty
WarParty::faction	src/Gamelogic/Social/War/WarParty.h	/^        WARPARTYType faction;$/;"	m	class:WarParty
Watt	include/Eternia/constants.h	/^        const double Watt = Joule\/second;$/;"	m	namespace:physical::unit
Watt	src/constants.h	/^        const double Watt = Joule\/second;$/;"	m	namespace:physical::unit
Watts	include/Eternia/constants.h	/^        const double Watts = Watt;$/;"	m	namespace:physical::unit
Watts	src/constants.h	/^        const double Watts = Watt;$/;"	m	namespace:physical::unit
Wb	include/Eternia/constants.h	/^        const double Wb = Weber;$/;"	m	namespace:physical::unit
Wb	src/constants.h	/^        const double Wb = Weber;$/;"	m	namespace:physical::unit
Weber	include/Eternia/constants.h	/^        const double Weber = Volt*second;$/;"	m	namespace:physical::unit
Weber	src/constants.h	/^        const double Weber = Volt*second;$/;"	m	namespace:physical::unit
Webers	include/Eternia/constants.h	/^        const double Webers = Weber;$/;"	m	namespace:physical::unit
Webers	src/constants.h	/^        const double Webers = Weber;$/;"	m	namespace:physical::unit
WhiteNoise	include/Eternia/Audio/Generate/WhiteNoise.h	/^        WhiteNoise();$/;"	p	class:WhiteNoise
WhiteNoise	include/Eternia/Audio/Generate/WhiteNoise.h	/^class WhiteNoise {$/;"	c
WhiteNoise	src/Audio/Generate/WhiteNoise.h	/^        WhiteNoise();$/;"	p	class:WhiteNoise
WhiteNoise	src/Audio/Generate/WhiteNoise.h	/^class WhiteNoise {$/;"	c
WhiteNoise::WhiteNoise	include/Eternia/Audio/Generate/WhiteNoise.h	/^        WhiteNoise();$/;"	p	class:WhiteNoise
WhiteNoise::WhiteNoise	src/Audio/Generate/WhiteNoise.h	/^        WhiteNoise();$/;"	p	class:WhiteNoise
WindowsDriver_h	include/Eternia/Driver/LinuxDriver.h	/^#define WindowsDriver_h$/;"	d
WindowsDriver_h	include/Eternia/Driver/OSXDriver.h	/^#define WindowsDriver_h$/;"	d
WindowsDriver_h	include/Eternia/Driver/WinDriver.h	/^#define WindowsDriver_h$/;"	d
WindowsDriver_h	src/Driver/LinuxDriver.h	/^#define WindowsDriver_h$/;"	d
WindowsDriver_h	src/Driver/OSXDriver.h	/^#define WindowsDriver_h$/;"	d
WindowsDriver_h	src/Driver/WinDriver.h	/^#define WindowsDriver_h$/;"	d
Wire	include/Eternia/Engineering/Electrical/Wire.h	/^        Wire(Component* A, Component* B, double Resistance);$/;"	p	class:Wire
Wire	include/Eternia/Engineering/Electrical/Wire.h	/^class Wire {$/;"	c
Wire	src/Engineering/Electrical/Wire.h	/^        Wire(Component* A, Component* B, double Resistance);$/;"	p	class:Wire
Wire	src/Engineering/Electrical/Wire.h	/^class Wire {$/;"	c
Wire::Wire	include/Eternia/Engineering/Electrical/Wire.h	/^        Wire(Component* A, Component* B, double Resistance);$/;"	p	class:Wire
Wire::Wire	src/Engineering/Electrical/Wire.h	/^        Wire(Component* A, Component* B, double Resistance);$/;"	p	class:Wire
Wire::comp_a	include/Eternia/Engineering/Electrical/Wire.h	/^        Component* comp_a; \/\/ First component$/;"	m	class:Wire
Wire::comp_a	src/Engineering/Electrical/Wire.h	/^        Component* comp_a; \/\/ First component$/;"	m	class:Wire
Wire::comp_b	include/Eternia/Engineering/Electrical/Wire.h	/^        Component* comp_b; \/\/ Second component$/;"	m	class:Wire
Wire::comp_b	src/Engineering/Electrical/Wire.h	/^        Component* comp_b; \/\/ Second component$/;"	m	class:Wire
Wire::resist	include/Eternia/Engineering/Electrical/Wire.h	/^        double resist; \/\/ Resistivity of this wire$/;"	m	class:Wire
Wire::resist	src/Engineering/Electrical/Wire.h	/^        double resist; \/\/ Resistivity of this wire$/;"	m	class:Wire
Wire::~Wire	include/Eternia/Engineering/Electrical/Wire.h	/^        virtual ~Wire();$/;"	p	class:Wire
Wire::~Wire	src/Engineering/Electrical/Wire.h	/^        virtual ~Wire();$/;"	p	class:Wire
Wire_h_	include/Eternia/Engineering/Electrical/Wire.h	/^#define Wire_h_$/;"	d
Wire_h_	src/Engineering/Electrical/Wire.h	/^#define Wire_h_$/;"	d
Work	include/Eternia/Engineering/Physics/Work.h	/^        Work(double Mass);$/;"	p	class:Work
Work	include/Eternia/Engineering/Physics/Work.h	/^class Work {$/;"	c
Work	src/Engineering/Physics/Work.cpp	/^Work::Work(double Mass) {$/;"	f	class:Work
Work	src/Engineering/Physics/Work.h	/^        Work(double Mass);$/;"	p	class:Work
Work	src/Engineering/Physics/Work.h	/^class Work {$/;"	c
Work::TEnergy	include/Eternia/Engineering/Physics/Work.h	/^        double mass, TEnergy; \/\/ stored mass (Since mass doesn't normally change)$/;"	m	class:Work
Work::TEnergy	src/Engineering/Physics/Work.h	/^        double mass, TEnergy; \/\/ stored mass (Since mass doesn't normally change)$/;"	m	class:Work
Work::Work	include/Eternia/Engineering/Physics/Work.h	/^        Work(double Mass);$/;"	p	class:Work
Work::Work	src/Engineering/Physics/Work.cpp	/^Work::Work(double Mass) {$/;"	f	class:Work
Work::Work	src/Engineering/Physics/Work.h	/^        Work(double Mass);$/;"	p	class:Work
Work::compute	include/Eternia/Engineering/Physics/Work.h	/^        double compute(); \/\/ Compute the energy of the system$/;"	p	class:Work
Work::compute	src/Engineering/Physics/Work.cpp	/^double Work::compute() {$/;"	f	class:Work
Work::compute	src/Engineering/Physics/Work.h	/^        double compute(); \/\/ Compute the energy of the system$/;"	p	class:Work
Work::getTotalWatts	include/Eternia/Engineering/Physics/Work.h	/^        double getTotalWatts(double time); \/\/ divides joules by time$/;"	p	class:Work
Work::getTotalWatts	src/Engineering/Physics/Work.cpp	/^double Work::getTotalWatts(double time) {$/;"	f	class:Work
Work::getTotalWatts	src/Engineering/Physics/Work.h	/^        double getTotalWatts(double time); \/\/ divides joules by time$/;"	p	class:Work
Work::listOfTypes	include/Eternia/Engineering/Physics/Work.h	/^        LinkedList<EnergyValue>* listOfTypes;$/;"	m	class:Work
Work::listOfTypes	src/Engineering/Physics/Work.h	/^        LinkedList<EnergyValue>* listOfTypes;$/;"	m	class:Work
Work::mass	include/Eternia/Engineering/Physics/Work.h	/^        double mass, TEnergy; \/\/ stored mass (Since mass doesn't normally change)$/;"	m	class:Work
Work::mass	src/Engineering/Physics/Work.h	/^        double mass, TEnergy; \/\/ stored mass (Since mass doesn't normally change)$/;"	m	class:Work
Work_h	include/Eternia/Engineering/Physics/Work.h	/^#define Work_h$/;"	d
Work_h	src/Engineering/Physics/Work.h	/^#define Work_h$/;"	d
XCAP0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XCAP0 /;"	d
XCAP0	src/Emulation/MPU/msp430g2553.h	/^#define XCAP0 /;"	d
XCAP1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XCAP1 /;"	d
XCAP1	src/Emulation/MPU/msp430g2553.h	/^#define XCAP1 /;"	d
XCAP_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XCAP_0 /;"	d
XCAP_0	src/Emulation/MPU/msp430g2553.h	/^#define XCAP_0 /;"	d
XCAP_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XCAP_1 /;"	d
XCAP_1	src/Emulation/MPU/msp430g2553.h	/^#define XCAP_1 /;"	d
XCAP_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XCAP_2 /;"	d
XCAP_2	src/Emulation/MPU/msp430g2553.h	/^#define XCAP_2 /;"	d
XCAP_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XCAP_3 /;"	d
XCAP_3	src/Emulation/MPU/msp430g2553.h	/^#define XCAP_3 /;"	d
XT2OF	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XT2OF /;"	d
XT2OF	src/Emulation/MPU/msp430g2553.h	/^#define XT2OF /;"	d
XT2OFF	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XT2OFF /;"	d
XT2OFF	src/Emulation/MPU/msp430g2553.h	/^#define XT2OFF /;"	d
XT2S0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XT2S0 /;"	d
XT2S0	src/Emulation/MPU/msp430g2553.h	/^#define XT2S0 /;"	d
XT2S1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XT2S1 /;"	d
XT2S1	src/Emulation/MPU/msp430g2553.h	/^#define XT2S1 /;"	d
XT2S_0	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XT2S_0 /;"	d
XT2S_0	src/Emulation/MPU/msp430g2553.h	/^#define XT2S_0 /;"	d
XT2S_1	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XT2S_1 /;"	d
XT2S_1	src/Emulation/MPU/msp430g2553.h	/^#define XT2S_1 /;"	d
XT2S_2	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XT2S_2 /;"	d
XT2S_2	src/Emulation/MPU/msp430g2553.h	/^#define XT2S_2 /;"	d
XT2S_3	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XT2S_3 /;"	d
XT2S_3	src/Emulation/MPU/msp430g2553.h	/^#define XT2S_3 /;"	d
XTS	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define XTS /;"	d
XTS	src/Emulation/MPU/msp430g2553.h	/^#define XTS /;"	d
Xenon	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Xenon = new Atom("Xenon", "Xe", 18, 5, 54, 77,53, 0.005887,UNKNOWN, 0.00000565, 161.4,165.03, 0.158, 6, COLOR_None,ELEM_Noble);$/;"	v
Xenon	src/Engineering/Chemistry/elementals.h	/^const Atom Xenon = new Atom("Xenon", "Xe", 18, 5, 54, 77,53, 0.005887,UNKNOWN, 0.00000565, 161.4,165.03, 0.158, 6, COLOR_None,ELEM_Noble);$/;"	v
Xunit	include/Eternia/constants.h	/^        const double Xunit = 1.00202e-13*meters;$/;"	m	namespace:physical::unit
Xunit	src/constants.h	/^        const double Xunit = 1.00202e-13*meters;$/;"	m	namespace:physical::unit
Xunits	include/Eternia/constants.h	/^        const double Xunits = Xunit;$/;"	m	namespace:physical::unit
Xunits	src/constants.h	/^        const double Xunits = Xunit;$/;"	m	namespace:physical::unit
YEAR	version.h	/^#define YEAR /;"	d
YHz	include/Eternia/constants.h	/^        const double YHz = yottaHertz;$/;"	m	namespace:physical::unit
YHz	src/constants.h	/^        const double YHz = yottaHertz;$/;"	m	namespace:physical::unit
Ytterbium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Ytterbium = new Atom("Ytterbium", "Yb", 0, 6, 70, 104,69, 6.965,0.00000028, 0.039, 1097,1469, 0.155, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Ytterbium	src/Engineering/Chemistry/elementals.h	/^const Atom Ytterbium = new Atom("Ytterbium", "Yb", 0, 6, 70, 104,69, 6.965,0.00000028, 0.039, 1097,1469, 0.155, 3, COLOR_Silver,ELEM_Lanthanide);$/;"	v
Yttrium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Yttrium = new Atom("Yttrium", "Y", 3, 5, 39, 50,38, 4.469,0.00000056, 0.017, 1799,3609, 0.298, 3, COLOR_Silver,ELEM_Transition);$/;"	v
Yttrium	src/Engineering/Chemistry/elementals.h	/^const Atom Yttrium = new Atom("Yttrium", "Y", 3, 5, 39, 50,38, 4.469,0.00000056, 0.017, 1799,3609, 0.298, 3, COLOR_Silver,ELEM_Transition);$/;"	v
ZHz	include/Eternia/constants.h	/^        const double ZHz = zettaHertz;$/;"	m	namespace:physical::unit
ZHz	src/constants.h	/^        const double ZHz = zettaHertz;$/;"	m	namespace:physical::unit
Zener_DIODE	include/Eternia/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Zener_DIODE	src/Engineering/Electrical/Components/Diode.h	/^enum DIODETYPE {DIODE, Zener_DIODE, Avalanche_DIODE, LIghtEmitting_DIODE, PNJunct_DIODE, Laser_DIODE, Schottky_DIODE, Photo_DIODE, Tunnel_DIODE, Varicap_DIODE, Gunn_DIODE, Thermal_DIODE, Stabistor_DIODE};$/;"	e	enum:DIODETYPE
Zinc	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Zinc = new Atom("Zinc", "Zn", 12, 4, 30, 35,29, 7.134,0.000000059, 0.12, 692.88,1180, 0.388, 2, COLOR_SlateGray,ELEM_Transition);$/;"	v
Zinc	src/Engineering/Chemistry/elementals.h	/^const Atom Zinc = new Atom("Zinc", "Zn", 12, 4, 30, 35,29, 7.134,0.000000059, 0.12, 692.88,1180, 0.388, 2, COLOR_SlateGray,ELEM_Transition);$/;"	v
Zirconium	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom Zirconium = new Atom("Zirconium", "Zr", 4, 5, 40, 51,39, 6.506,0.00000042, 0.023, 2128,4682, 0.278, 4, COLOR_Silver,ELEM_Transition);$/;"	v
Zirconium	src/Engineering/Chemistry/elementals.h	/^const Atom Zirconium = new Atom("Zirconium", "Zr", 4, 5, 40, 51,39, 6.506,0.00000042, 0.023, 2128,4682, 0.278, 4, COLOR_Silver,ELEM_Transition);$/;"	v
_BIC_SR	include/Eternia/Emulation/MPU/in430.h	/^#define _BIC_SR(/;"	d
_BIC_SR	src/Emulation/MPU/in430.h	/^#define _BIC_SR(/;"	d
_BIC_SR_IRQ	include/Eternia/Emulation/MPU/in430.h	/^#define _BIC_SR_IRQ(/;"	d
_BIC_SR_IRQ	src/Emulation/MPU/in430.h	/^#define _BIC_SR_IRQ(/;"	d
_BIS_SR	include/Eternia/Emulation/MPU/in430.h	/^#define _BIS_SR(/;"	d
_BIS_SR	src/Emulation/MPU/in430.h	/^#define _BIS_SR(/;"	d
_BIS_SR_IRQ	include/Eternia/Emulation/MPU/in430.h	/^#define _BIS_SR_IRQ(/;"	d
_BIS_SR_IRQ	src/Emulation/MPU/in430.h	/^#define _BIS_SR_IRQ(/;"	d
_C	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define _C /;"	d
_C	src/Emulation/MPU/msp430g2553.h	/^#define _C /;"	d
_COMPT	include/Eternia/Data/Protect/PType.hpp	/^#define _COMPT(/;"	d
_COMPT	src/Data/Protect/PType.hpp	/^#define _COMPT(/;"	d
_CRT_SECURE_NO_WARNINGS	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d
_CRT_SECURE_NO_WARNINGS	src/Data/AbstractDatabase/AbstractDB.h	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d
_DBG	include/Eternia/Data/Protect/PType.hpp	/^#define _DBG(/;"	d
_DBG	src/Data/Protect/PType.hpp	/^#define _DBG(/;"	d
_DBGSSE	include/Eternia/Serialization/SpecificSerializer.h	/^    #define _DBGSSE(/;"	d
_DBGSSE	src/Serialization/SpecificSerializer.h	/^    #define _DBGSSE(/;"	d
_DINT	include/Eternia/Emulation/MPU/in430.h	/^#define _DINT(/;"	d
_DINT	src/Emulation/MPU/in430.h	/^#define _DINT(/;"	d
_EINT	include/Eternia/Emulation/MPU/in430.h	/^#define _EINT(/;"	d
_EINT	src/Emulation/MPU/in430.h	/^#define _EINT(/;"	d
_ICAST	include/Eternia/Data/Protect/PType.hpp	/^#define _ICAST(/;"	d
_ICAST	src/Data/Protect/PType.hpp	/^#define _ICAST(/;"	d
_N	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define _N /;"	d
_N	src/Emulation/MPU/msp430g2553.h	/^#define _N /;"	d
_NOP	include/Eternia/Emulation/MPU/in430.h	/^#define _NOP(/;"	d
_NOP	src/Emulation/MPU/in430.h	/^#define _NOP(/;"	d
_SWAP_BYTES	include/Eternia/Emulation/MPU/in430.h	/^#define _SWAP_BYTES(/;"	d
_SWAP_BYTES	src/Emulation/MPU/in430.h	/^#define _SWAP_BYTES(/;"	d
_Size	include/Eternia/Data/DoubleList.h	/^        double _Size;$/;"	m	class:DoubleList
_Size	include/Eternia/Data/IntegerList.h	/^        int _Size;$/;"	m	class:IntegerList
_Size	src/Data/DoubleList.h	/^        double _Size;$/;"	m	class:DoubleList
_Size	src/Data/IntegerList.h	/^        int _Size;$/;"	m	class:IntegerList
_TCAST	include/Eternia/Data/Protect/PType.hpp	/^#define _TCAST(/;"	d
_TCAST	src/Data/Protect/PType.hpp	/^#define _TCAST(/;"	d
_TtoI	include/Eternia/Data/Protect/PType.hpp	/^#define _TtoI(/;"	d
_TtoI	src/Data/Protect/PType.hpp	/^#define _TtoI(/;"	d
_V	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define _V /;"	d
_V	src/Emulation/MPU/msp430g2553.h	/^#define _V /;"	d
_WIN32_WINNT	include/Eternia/WebFramework/Network/SocketServer.h	/^   #define _WIN32_WINNT /;"	d
_WIN32_WINNT	src/WebFramework/Network/SocketServer.h	/^   #define _WIN32_WINNT /;"	d
_XOR	include/Eternia/Data/Protect/PType.hpp	/^#define _XOR(/;"	d
_XOR	src/Data/Protect/PType.hpp	/^#define _XOR(/;"	d
_XORp	include/Eternia/Data/Protect/PType.hpp	/^#define _XORp(/;"	d
_XORp	src/Data/Protect/PType.hpp	/^#define _XORp(/;"	d
_Z	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define _Z /;"	d
_Z	src/Emulation/MPU/msp430g2553.h	/^#define _Z /;"	d
__IN430_H	include/Eternia/Emulation/MPU/in430.h	/^#define __IN430_H$/;"	d
__IN430_H	src/Emulation/MPU/in430.h	/^#define __IN430_H$/;"	d
__MSP430G2553	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define __MSP430G2553$/;"	d
__MSP430G2553	src/Emulation/MPU/msp430g2553.h	/^#define __MSP430G2553$/;"	d
__MSP430_HAS_ADC10__	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_ADC10__ /;"	d
__MSP430_HAS_ADC10__	src/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_ADC10__ /;"	d
__MSP430_HAS_BC2__	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_BC2__ /;"	d
__MSP430_HAS_BC2__	src/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_BC2__ /;"	d
__MSP430_HAS_CAPLUS__	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_CAPLUS__ /;"	d
__MSP430_HAS_CAPLUS__	src/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_CAPLUS__ /;"	d
__MSP430_HAS_FLASH2__	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_FLASH2__ /;"	d
__MSP430_HAS_FLASH2__	src/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_FLASH2__ /;"	d
__MSP430_HAS_PORT1_R__	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_PORT1_R__ /;"	d
__MSP430_HAS_PORT1_R__	src/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_PORT1_R__ /;"	d
__MSP430_HAS_PORT2_R__	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_PORT2_R__ /;"	d
__MSP430_HAS_PORT2_R__	src/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_PORT2_R__ /;"	d
__MSP430_HAS_PORT3_R__	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_PORT3_R__ /;"	d
__MSP430_HAS_PORT3_R__	src/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_PORT3_R__ /;"	d
__MSP430_HAS_T1A3__	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_T1A3__ /;"	d
__MSP430_HAS_T1A3__	src/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_T1A3__ /;"	d
__MSP430_HAS_TA3__	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_TA3__ /;"	d
__MSP430_HAS_TA3__	src/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_TA3__ /;"	d
__MSP430_HAS_USCI__	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_USCI__ /;"	d
__MSP430_HAS_USCI__	src/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_USCI__ /;"	d
__MSP430_HAS_WDT__	include/Eternia/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_WDT__ /;"	d
__MSP430_HAS_WDT__	src/Emulation/MPU/msp430g2553.h	/^#define __MSP430_HAS_WDT__ /;"	d
__anon10::~(	include/Eternia/Engineering/Chemistry/Hadron/Meson.h	/^        virtual ~();$/;"	m	class:__anon10
__anon11::~(	include/Eternia/Engineering/Chemistry/Hadron/Baryon.h	/^        virtual ~();$/;"	m	class:__anon11
__anon12::tick	include/Eternia/Engineering/Electrical/Components/Rectifier.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:__anon12
__anon12::~(	include/Eternia/Engineering/Electrical/Components/Rectifier.h	/^        virtual ~();$/;"	m	class:__anon12
__anon1::deckey	src/Algorithm/Cryptography/Aes256.h	/^    uint8_t deckey[32];$/;"	m	struct:__anon1
__anon1::enckey	src/Algorithm/Cryptography/Aes256.h	/^    uint8_t enckey[32];$/;"	m	struct:__anon1
__anon1::key	src/Algorithm/Cryptography/Aes256.h	/^    uint8_t key[32];$/;"	m	struct:__anon1
__anon3::index	src/Algorithm/Compression/BasicCompressor.h	/^    int index;$/;"	m	struct:__anon3
__anon3::match	src/Algorithm/Compression/BasicCompressor.h	/^    char* match;$/;"	m	struct:__anon3
__anon3::matchindex	src/Algorithm/Compression/BasicCompressor.h	/^    int matchindex; \/\/ index in the list of matched code.$/;"	m	struct:__anon3
__anon3::matchlen	src/Algorithm/Compression/BasicCompressor.h	/^    char matchlen;$/;"	m	struct:__anon3
__anon3::position	src/Algorithm/Compression/BasicCompressor.h	/^    int position;$/;"	m	struct:__anon3
__anon3::symbol	src/Algorithm/Compression/BasicCompressor.h	/^    char* symbol;$/;"	m	struct:__anon3
__anon4::~(	src/Engineering/Chemistry/Hadron/Meson.h	/^        virtual ~();$/;"	m	class:__anon4
__anon5::~(	src/Engineering/Chemistry/Hadron/Baryon.h	/^        virtual ~();$/;"	m	class:__anon5
__anon6::tick	src/Engineering/Electrical/Components/Rectifier.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:__anon6
__anon6::~(	src/Engineering/Electrical/Components/Rectifier.h	/^        virtual ~();$/;"	m	class:__anon6
__anon7::deckey	include/Eternia/Algorithm/Cryptography/Aes256.h	/^    uint8_t deckey[32];$/;"	m	struct:__anon7
__anon7::enckey	include/Eternia/Algorithm/Cryptography/Aes256.h	/^    uint8_t enckey[32];$/;"	m	struct:__anon7
__anon7::key	include/Eternia/Algorithm/Cryptography/Aes256.h	/^    uint8_t key[32];$/;"	m	struct:__anon7
__anon9::index	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    int index;$/;"	m	struct:__anon9
__anon9::match	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    char* match;$/;"	m	struct:__anon9
__anon9::matchindex	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    int matchindex; \/\/ index in the list of matched code.$/;"	m	struct:__anon9
__anon9::matchlen	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    char matchlen;$/;"	m	struct:__anon9
__anon9::position	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    int position;$/;"	m	struct:__anon9
__anon9::symbol	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    char* symbol;$/;"	m	struct:__anon9
__bic_SR_register	include/Eternia/Emulation/MPU/in430.h	/^#define __bic_SR_register(/;"	d
__bic_SR_register	src/Emulation/MPU/in430.h	/^#define __bic_SR_register(/;"	d
__bic_SR_register_on_exit	include/Eternia/Emulation/MPU/in430.h	/^#define __bic_SR_register_on_exit(/;"	d
__bic_SR_register_on_exit	src/Emulation/MPU/in430.h	/^#define __bic_SR_register_on_exit(/;"	d
__bis_SR_register	include/Eternia/Emulation/MPU/in430.h	/^#define __bis_SR_register(/;"	d
__bis_SR_register	src/Emulation/MPU/in430.h	/^#define __bis_SR_register(/;"	d
__bis_SR_register_on_exit	include/Eternia/Emulation/MPU/in430.h	/^#define __bis_SR_register_on_exit(/;"	d
__bis_SR_register_on_exit	src/Emulation/MPU/in430.h	/^#define __bis_SR_register_on_exit(/;"	d
__disable_interrupt	include/Eternia/Emulation/MPU/in430.h	/^#define __disable_interrupt(/;"	d
__disable_interrupt	src/Emulation/MPU/in430.h	/^#define __disable_interrupt(/;"	d
__enable_interrupt	include/Eternia/Emulation/MPU/in430.h	/^#define __enable_interrupt(/;"	d
__enable_interrupt	src/Emulation/MPU/in430.h	/^#define __enable_interrupt(/;"	d
__get_SR_register	include/Eternia/Emulation/MPU/in430.h	/^#define __get_SR_register(/;"	d
__get_SR_register	src/Emulation/MPU/in430.h	/^#define __get_SR_register(/;"	d
__get_SR_register_on_exit	include/Eternia/Emulation/MPU/in430.h	/^#define __get_SR_register_on_exit(/;"	d
__get_SR_register_on_exit	src/Emulation/MPU/in430.h	/^#define __get_SR_register_on_exit(/;"	d
__no_operation	include/Eternia/Emulation/MPU/in430.h	/^#define __no_operation(/;"	d
__no_operation	src/Emulation/MPU/in430.h	/^#define __no_operation(/;"	d
__swap_bytes	include/Eternia/Emulation/MPU/in430.h	/^#define __swap_bytes(/;"	d
__swap_bytes	src/Emulation/MPU/in430.h	/^#define __swap_bytes(/;"	d
_bic_SR_register	include/Eternia/Emulation/MPU/in430.h	/^unsigned short _bic_SR_register(unsigned short mask);$/;"	p
_bic_SR_register	src/Emulation/MPU/in430.h	/^unsigned short _bic_SR_register(unsigned short mask);$/;"	p
_bic_SR_register_on_exit	include/Eternia/Emulation/MPU/in430.h	/^unsigned short _bic_SR_register_on_exit(unsigned short mask);$/;"	p
_bic_SR_register_on_exit	src/Emulation/MPU/in430.h	/^unsigned short _bic_SR_register_on_exit(unsigned short mask);$/;"	p
_bis_SR_register	include/Eternia/Emulation/MPU/in430.h	/^unsigned short _bis_SR_register(unsigned short mask);$/;"	p
_bis_SR_register	src/Emulation/MPU/in430.h	/^unsigned short _bis_SR_register(unsigned short mask);$/;"	p
_bis_SR_register_on_exit	include/Eternia/Emulation/MPU/in430.h	/^unsigned short _bis_SR_register_on_exit(unsigned short mask);$/;"	p
_bis_SR_register_on_exit	src/Emulation/MPU/in430.h	/^unsigned short _bis_SR_register_on_exit(unsigned short mask);$/;"	p
_clientHandler	include/Eternia/WebFramework/Network/SockClient.h	/^        void (*_clientHandler)(CharString* dataIn, CharString* dataOut, void* d);$/;"	m	class:SockClient
_clientHandler	include/Eternia/WebFramework/Network/SocketServer.h	/^    void (*_clientHandler)(CharString* dataIn, CharString* dataOut, void* exVAL); \/\/ Assigned handler for the client$/;"	m	class:SocketServer
_clientHandler	src/WebFramework/Network/SockClient.h	/^        void (*_clientHandler)(CharString* dataIn, CharString* dataOut, void* d);$/;"	m	class:SockClient
_clientHandler	src/WebFramework/Network/SocketServer.h	/^    void (*_clientHandler)(CharString* dataIn, CharString* dataOut, void* exVAL); \/\/ Assigned handler for the client$/;"	m	class:SocketServer
_disable_interrupts	include/Eternia/Emulation/MPU/in430.h	/^void _disable_interrupts(void);$/;"	p
_disable_interrupts	src/Emulation/MPU/in430.h	/^void _disable_interrupts(void);$/;"	p
_draw	include/Eternia/Design/LayoutObject.h	/^        public void _draw();                    \/\/ pre-draw event$/;"	p	class:LayoutObject
_draw	src/Design/LayoutObject.h	/^        public void _draw();                    \/\/ pre-draw event$/;"	p	class:LayoutObject
_enable_interrupts	include/Eternia/Emulation/MPU/in430.h	/^void _enable_interrupts(void);$/;"	p
_enable_interrupts	src/Emulation/MPU/in430.h	/^void _enable_interrupts(void);$/;"	p
_getV	include/Eternia/Data/Protect/PType.hpp	/^#define _getV(/;"	d
_getV	src/Data/Protect/PType.hpp	/^#define _getV(/;"	d
_get_SR_register	include/Eternia/Emulation/MPU/in430.h	/^unsigned short _get_SR_register(void);$/;"	p
_get_SR_register	src/Emulation/MPU/in430.h	/^unsigned short _get_SR_register(void);$/;"	p
_get_SR_register_on_exit	include/Eternia/Emulation/MPU/in430.h	/^unsigned short _get_SR_register_on_exit(void);$/;"	p
_get_SR_register_on_exit	src/Emulation/MPU/in430.h	/^unsigned short _get_SR_register_on_exit(void);$/;"	p
_h_	include/Eternia/Engineering/Electrical/Components/Rectifier.h	/^#define _h_$/;"	d
_h_	src/Engineering/Electrical/Components/Rectifier.h	/^#define _h_$/;"	d
_m	include/Eternia/Emulation/MPU/msp430.h	/^#define _m(/;"	d
_m	src/Emulation/MPU/msp430.h	/^#define _m(/;"	d
_m16	include/Eternia/Emulation/MPU/msp430.h	/^#define _m16(/;"	d
_m16	src/Emulation/MPU/msp430.h	/^#define _m16(/;"	d
_mem	include/Eternia/Emulation/MPU/msp430.h	/^#define _mem(/;"	d
_mem	src/Emulation/MPU/msp430.h	/^#define _mem(/;"	d
_mem_2	include/Eternia/Emulation/MPU/msp430.h	/^#define _mem_2(/;"	d
_mem_2	src/Emulation/MPU/msp430.h	/^#define _mem_2(/;"	d
_never_executed	include/Eternia/Emulation/MPU/in430.h	/^void _never_executed(void);$/;"	p
_never_executed	src/Emulation/MPU/in430.h	/^void _never_executed(void);$/;"	p
_nop	include/Eternia/Emulation/MPU/in430.h	/^void _nop(void);$/;"	p
_nop	src/Emulation/MPU/in430.h	/^void _nop(void);$/;"	p
_remove	src/Data/PriorityQueue.cpp	/^void _remove(PriorityQueue* queue, PriorityItem* item) {$/;"	f
_setTo16Value1	include/Eternia/Emulation/MPU/msp430.h	/^#define _setTo16Value1(/;"	d
_setTo16Value1	src/Emulation/MPU/msp430.h	/^#define _setTo16Value1(/;"	d
_setTo16Value2	include/Eternia/Emulation/MPU/msp430.h	/^#define _setTo16Value2(/;"	d
_setTo16Value2	src/Emulation/MPU/msp430.h	/^#define _setTo16Value2(/;"	d
_size	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    int _size;$/;"	m	class:ConcurrentLinkedList
_size	include/Eternia/Data/LinkedList.hpp	/^    int _size;$/;"	m	class:LinkedList
_size	include/Eternia/Data/LinkedListT.h	/^        int _size;$/;"	m	class:LinkedListT
_size	src/Data/ConcurrentLinkedList.hpp	/^    int _size;$/;"	m	class:ConcurrentLinkedList
_size	src/Data/LinkedList.hpp	/^    int _size;$/;"	m	class:LinkedList
_size	src/Data/LinkedListT.h	/^        int _size;$/;"	m	class:LinkedListT
_storeV	include/Eternia/Data/Protect/PType.hpp	/^#define _storeV(/;"	d
_storeV	src/Data/Protect/PType.hpp	/^#define _storeV(/;"	d
_swap_bytes	include/Eternia/Emulation/MPU/in430.h	/^unsigned short _swap_bytes(unsigned short src);$/;"	p
_swap_bytes	src/Emulation/MPU/in430.h	/^unsigned short _swap_bytes(unsigned short src);$/;"	p
a	include/Eternia/Data/BitMap.h	/^        unsigned char a;$/;"	m	class:bmbit
a	include/Eternia/Data/Graph.h	/^        GVertex *a, *b;$/;"	m	class:GEdge
a	include/Eternia/Engineering/Chemistry/Composite.h	/^	Atom *a, *b;$/;"	m	class:AtomBond
a	include/Eternia/constants.h	/^        const double a = are;$/;"	m	namespace:physical::unit
a	src/Data/BitMap.h	/^        unsigned char a;$/;"	m	class:bmbit
a	src/Data/Graph.h	/^        GVertex *a, *b;$/;"	m	class:GEdge
a	src/Engineering/Chemistry/Composite.h	/^	Atom *a, *b;$/;"	m	class:AtomBond
a	src/constants.h	/^        const double a = are;$/;"	m	namespace:physical::unit
a1	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^        VertexObject a1, b1; \/\/ two objects to collide.$/;"	m	class:Collision1D
a1	src/Engineering/Physics/Kinematics/Collision1D.h	/^        VertexObject a1, b1; \/\/ two objects to collide.$/;"	m	class:Collision1D
a_0	include/Eternia/constants.h	/^        const double a_0 = 0.529177249e-10*meters;$/;"	m	namespace:physical::constant
a_0	src/constants.h	/^        const double a_0 = 0.529177249e-10*meters;$/;"	m	namespace:physical::constant
abdomen	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP head, torso, abdomen;$/;"	m	class:AvatarHealth
abdomen	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP head, torso, abdomen;$/;"	m	class:AvatarHealth
abs	include/Eternia/Math/Functions/Basic.h	/^    double abs(double a); \/\/ flips value if negative to positive$/;"	p	namespace:Math
abs	src/Math/Functions/Basic.cpp	/^    double abs(double a) {$/;"	f	namespace:Math
abs	src/Math/Functions/Basic.h	/^    double abs(double a); \/\/ flips value if negative to positive$/;"	p	namespace:Math
acceleration	include/Eternia/Math/struct/vertex.h	/^    vertex velocity, acceleration;$/;"	m	class:VertexObject
acceleration	src/Math/struct/vertex.h	/^    vertex velocity, acceleration;$/;"	m	class:VertexObject
acceptorThread	include/Eternia/WebFramework/Network/SocketServer.h	/^    std::thread acceptorThread;$/;"	m	class:SocketServer
acceptorThread	src/WebFramework/Network/SocketServer.h	/^    std::thread acceptorThread;$/;"	m	class:SocketServer
accountATTRIBUTE	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^enum accountATTRIBUTE {ACCATT_Account, ACCATT_Credit, ACCATT_Loan};$/;"	g
accountATTRIBUTE	src/Gamelogic/Economics/Banking/Account.h	/^enum accountATTRIBUTE {ACCATT_Account, ACCATT_Credit, ACCATT_Loan};$/;"	g
accounts	include/Eternia/Gamelogic/Economics/Banking/Banking.h	/^        LinkedList<Account> accounts; \/\/ list of loaded accounts$/;"	m	class:Banking
accounts	src/Gamelogic/Economics/Banking/Banking.h	/^        LinkedList<Account> accounts; \/\/ list of loaded accounts$/;"	m	class:Banking
acos	include/Eternia/Math/Functions/Trig.h	/^    double acos(double);$/;"	p	namespace:Math
acos	src/Math/Functions/Trig.cpp	/^    double acos(double x) {$/;"	f	namespace:Math
acos	src/Math/Functions/Trig.h	/^    double acos(double);$/;"	p	namespace:Math
acre	include/Eternia/constants.h	/^        const double acre = 4.0*roods;$/;"	m	namespace:physical::unit
acre	src/constants.h	/^        const double acre = 4.0*roods;$/;"	m	namespace:physical::unit
acres	include/Eternia/constants.h	/^        const double acres = acre;$/;"	m	namespace:physical::unit
acres	src/constants.h	/^        const double acres = acre;$/;"	m	namespace:physical::unit
act	include/Eternia/Gamelogic/Avatar/Mood.h	/^        void act(); \/\/ act out this mood (Very strong moods [>7] will do random things)$/;"	p	class:Mood
act	src/Gamelogic/Avatar/Mood.cpp	/^void Mood::act() {}$/;"	f	class:Mood
act	src/Gamelogic/Avatar/Mood.h	/^        void act(); \/\/ act out this mood (Very strong moods [>7] will do random things)$/;"	p	class:Mood
actions	include/Eternia/Programming/Program.h	/^        VProgramVariable *inputs, *actions;$/;"	m	class:Program
actions	src/Programming/Program.h	/^        VProgramVariable *inputs, *actions;$/;"	m	class:Program
actionslots	include/Eternia/Programming/Program.h	/^        int inslots, actionslots, outslots;$/;"	m	class:Program
actionslots	src/Programming/Program.h	/^        int inslots, actionslots, outslots;$/;"	m	class:Program
add	include/Eternia/Audio/AudioBuffer.h	/^    void add(float value);$/;"	p	class:AudioBuffer
add	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    void add(T*){$/;"	f	class:ConcurrentLinkedList
add	include/Eternia/Data/CyclicList.hpp	/^    void add(T item){$/;"	f	class:CyclicList
add	include/Eternia/Data/FileCache.hpp	/^        long add(T* data) {$/;"	f	class:FileCache
add	include/Eternia/Data/HashMap.hpp	/^        void add(CharString key, T* data) {$/;"	f	class:HashMap
add	include/Eternia/Data/HashMap.hpp	/^        void add(HTEntry<T>* entry) {$/;"	f	class:HTEntry
add	include/Eternia/Data/HashTable.h	/^        void add(HTEntry* entry); \/\/ add to the list.$/;"	p	class:HTEntry
add	include/Eternia/Data/HashTable.h	/^        void add(HTEntry* entry);$/;"	p	class:HashTable
add	include/Eternia/Data/LinkedList.hpp	/^    void add(T cc) {$/;"	f	class:LinkedList
add	include/Eternia/Data/LinkedList.hpp	/^    void add(T* cc) {$/;"	f	class:LinkedList
add	include/Eternia/Data/LinkedListT.h	/^        void add(void *cc);$/;"	p	class:LinkedListT
add	include/Eternia/Data/LinkedMap.h	/^        void add(char* key, char* data);$/;"	p	class:LinkedMap
add	include/Eternia/Data/SplitResult.h	/^        void add(char* str, int strLen);$/;"	p	class:SplitResult
add	include/Eternia/Math/struct/Matrix.h	/^    void add(Matrix* matrix); \/\/ add another matrix to this one.$/;"	p	class:Matrix
add	src/Audio/AudioBuffer.h	/^    void add(float value);$/;"	p	class:AudioBuffer
add	src/Data/ConcurrentLinkedList.hpp	/^    void add(T*){$/;"	f	class:ConcurrentLinkedList
add	src/Data/CyclicList.hpp	/^    void add(T item){$/;"	f	class:CyclicList
add	src/Data/FileCache.hpp	/^        long add(T* data) {$/;"	f	class:FileCache
add	src/Data/HashMap.hpp	/^        void add(CharString key, T* data) {$/;"	f	class:HashMap
add	src/Data/HashMap.hpp	/^        void add(HTEntry<T>* entry) {$/;"	f	class:HTEntry
add	src/Data/HashTable.cpp	/^void HTEntry::add(HTEntry* entry) {$/;"	f	class:HTEntry
add	src/Data/HashTable.cpp	/^void HashTable::add(HTEntry* entry) {$/;"	f	class:HashTable
add	src/Data/HashTable.h	/^        void add(HTEntry* entry); \/\/ add to the list.$/;"	p	class:HTEntry
add	src/Data/HashTable.h	/^        void add(HTEntry* entry);$/;"	p	class:HashTable
add	src/Data/LinkedList.hpp	/^    void add(T cc) {$/;"	f	class:LinkedList
add	src/Data/LinkedList.hpp	/^    void add(T* cc) {$/;"	f	class:LinkedList
add	src/Data/LinkedListT.cpp	/^void LinkedListT::add(void *cc) {$/;"	f	class:LinkedListT
add	src/Data/LinkedListT.h	/^        void add(void *cc);$/;"	p	class:LinkedListT
add	src/Data/LinkedMap.cpp	/^void LinkedMap::add(char* key,char* cc) {$/;"	f	class:LinkedMap
add	src/Data/LinkedMap.h	/^        void add(char* key, char* data);$/;"	p	class:LinkedMap
add	src/Data/SplitResult.cpp	/^void SplitResult::add(char* str, int strLen) {$/;"	f	class:SplitResult
add	src/Data/SplitResult.h	/^        void add(char* str, int strLen);$/;"	p	class:SplitResult
add	src/Math/struct/Matrix.cpp	/^void Matrix::add(Matrix* matrix) {$/;"	f	class:Matrix
add	src/Math/struct/Matrix.h	/^    void add(Matrix* matrix); \/\/ add another matrix to this one.$/;"	p	class:Matrix
addBack	include/Eternia/Data/DoubleList.h	/^        void addBack(double a);$/;"	p	class:DoubleList
addBack	include/Eternia/Data/IntegerList.h	/^        void addBack(int a);$/;"	p	class:IntegerList
addBack	src/Data/DoubleList.cpp	/^void DoubleList::addBack(double input) {$/;"	f	class:DoubleList
addBack	src/Data/DoubleList.h	/^        void addBack(double a);$/;"	p	class:DoubleList
addBack	src/Data/IntegerList.cpp	/^void IntegerList::addBack(int input) {$/;"	f	class:IntegerList
addBack	src/Data/IntegerList.h	/^        void addBack(int a);$/;"	p	class:IntegerList
addChild	include/Eternia/Design/LayoutObject.h	/^        public void addChild(LayoutObject* child);      \/\/ add a child$/;"	p	class:LayoutObject
addChild	src/Design/LayoutObject.h	/^        public void addChild(LayoutObject* child);      \/\/ add a child$/;"	p	class:LayoutObject
addClass	include/Eternia/API/APIMod.h	/^	virtual void addClass(int size); \/\/ add a class for use by scripts$/;"	p	class:APIMod
addClass	src/API/APIMod.cpp	/^void APIMod::addClass(int size){$/;"	f	class:APIMod
addClass	src/API/APIMod.h	/^	virtual void addClass(int size); \/\/ add a class for use by scripts$/;"	p	class:APIMod
addComponent	include/Eternia/Engineering/Electrical/Circuit.h	/^        void addComponent(Component* component); \/\/ add a component to the circuit$/;"	p	class:Circuit
addComponent	src/Engineering/Electrical/Circuit.h	/^        void addComponent(Component* component); \/\/ add a component to the circuit$/;"	p	class:Circuit
addDefaultDefinitions	include/Eternia/WebFramework/Templates/Template.h	/^        void addDefaultDefinitions(); \/\/ must be called to have default definitions like {date}, {page}$/;"	p	class:Template
addDefaultDefinitions	src/WebFramework/Templates/Template.cpp	/^void Template::addDefaultDefinitions(){$/;"	f	class:Template
addDefaultDefinitions	src/WebFramework/Templates/Template.h	/^        void addDefaultDefinitions(); \/\/ must be called to have default definitions like {date}, {page}$/;"	p	class:Template
addDirectory	include/Eternia/Data/FileSystem.h	/^        void addDirectory(CharString location); \/\/ add directory to system$/;"	p	class:FileSystem
addDirectory	src/Data/FileSystem.cpp	/^void FileSystem::addDirectory(CharString location) {$/;"	f	class:FileSystem
addDirectory	src/Data/FileSystem.h	/^        void addDirectory(CharString location); \/\/ add directory to system$/;"	p	class:FileSystem
addDisease	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void addDisease(Disease* d); \/\/ diseases act like debuffs, but for long-periods$/;"	p	class:Avatar
addDisease	src/Gamelogic/Avatar/Avatar.cpp	/^void Avatar::addDisease(Disease* d) {$/;"	f	class:Avatar
addDisease	src/Gamelogic/Avatar/Avatar.h	/^        void addDisease(Disease* d); \/\/ diseases act like debuffs, but for long-periods$/;"	p	class:Avatar
addEvent	include/Eternia/Data/Events/EventHandler.h	/^        void addEvent(EventHandle *event, int priority); \/\/ add Event, the priority is set by lowest value$/;"	p	class:EventHandler
addEvent	src/Data/Events/EventHandler.cpp	/^void EventHandler::addEvent(EventHandle *event, int priority) {$/;"	f	class:EventHandler
addEvent	src/Data/Events/EventHandler.h	/^        void addEvent(EventHandle *event, int priority); \/\/ add Event, the priority is set by lowest value$/;"	p	class:EventHandler
addEventHandler	include/Eternia/API/APIEventRegistry.h	/^    bool addEventHandler(CharString name, EventHandler* handler); \/\/ add a new event handler, return ID$/;"	p	class:APIEventRegistry
addEventHandler	src/API/APIEventRegistry.cpp	/^bool APIEventRegistry::addEventHandler(CharString name, EventHandler* handler){$/;"	f	class:APIEventRegistry
addEventHandler	src/API/APIEventRegistry.h	/^    bool addEventHandler(CharString name, EventHandler* handler); \/\/ add a new event handler, return ID$/;"	p	class:APIEventRegistry
addField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void addField(AbstractDBField* field); \/\/ add a field (insert data into file and change all rows)$/;"	p	class:AbstractDBTable
addField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void addField(AbstractDBField* field);$/;"	p	class:AbstractDBRow
addField	src/Data/AbstractDatabase/AbstractDB.h	/^        void addField(AbstractDBField* field); \/\/ add a field (insert data into file and change all rows)$/;"	p	class:AbstractDBTable
addField	src/Data/AbstractDatabase/AbstractDB.h	/^        void addField(AbstractDBField* field);$/;"	p	class:AbstractDBRow
addField	src/Data/AbstractDatabase/AbstractDBRow.cpp	/^void AbstractDBRow::addField(AbstractDBField* field) {$/;"	f	class:AbstractDBRow
addField	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^void AbstractDBTable::addField(AbstractDBField* field) {$/;"	f	class:AbstractDBTable
addFile	include/Eternia/Data/FileSystem.h	/^        void addFile(CharString location); \/\/ add file (touch) to system$/;"	p	class:FileSystem
addFile	src/Data/FileSystem.cpp	/^void FileSystem::addFile(CharString location) {$/;"	f	class:FileSystem
addFile	src/Data/FileSystem.h	/^        void addFile(CharString location); \/\/ add file (touch) to system$/;"	p	class:FileSystem
addFront	include/Eternia/Data/DoubleList.h	/^        void addFront(double a);$/;"	p	class:DoubleList
addFront	include/Eternia/Data/IntegerList.h	/^        void addFront(int a);$/;"	p	class:IntegerList
addFront	src/Data/DoubleList.cpp	/^void DoubleList::addFront(double input) {$/;"	f	class:DoubleList
addFront	src/Data/DoubleList.h	/^        void addFront(double a);$/;"	p	class:DoubleList
addFront	src/Data/IntegerList.cpp	/^void IntegerList::addFront(int input) {$/;"	f	class:IntegerList
addFront	src/Data/IntegerList.h	/^        void addFront(int a);$/;"	p	class:IntegerList
addFunction	include/Eternia/API/APIMod.h	/^	virtual void addFunction(void* func, int params); \/\/ add a function for use by scripts$/;"	p	class:APIMod
addFunction	src/API/APIMod.cpp	/^void APIMod::addFunction(void* func, int params){$/;"	f	class:APIMod
addFunction	src/API/APIMod.h	/^	virtual void addFunction(void* func, int params); \/\/ add a function for use by scripts$/;"	p	class:APIMod
addInteractable	include/Eternia/Gamelogic/AI/AI.h	/^        void addInteractable(); \/\/ add an object that the AI can interact with$/;"	p	class:AI
addInteractable	src/Gamelogic/AI/AI.h	/^        void addInteractable(); \/\/ add an object that the AI can interact with$/;"	p	class:AI
addInterruptHandle	include/Eternia/Emulation/MPU/msp430.h	/^        void addInterruptHandle(INTERRUPT_ID id, void (func)());$/;"	p	class:MSP430
addInterruptHandle	src/Emulation/MPU/msp430.h	/^        void addInterruptHandle(INTERRUPT_ID id, void (func)());$/;"	p	class:MSP430
addItem	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        void addItem(KItem item, double quantity); \/\/ KForce in constants.h defines a set of kinematic forces that can be used.$/;"	p	class:FreeBody
addItem	src/Engineering/Physics/Kinematics/FreeBody.cpp	/^void FreeBody::addItem(KItem item, double quantity) {$/;"	f	class:FreeBody
addItem	src/Engineering/Physics/Kinematics/FreeBody.h	/^        void addItem(KItem item, double quantity); \/\/ KForce in constants.h defines a set of kinematic forces that can be used.$/;"	p	class:FreeBody
addL	include/Eternia/Data/HashMap.hpp	/^        void addL(unsigned long key, T* data) {$/;"	f	class:HashMap
addL	src/Data/HashMap.hpp	/^        void addL(unsigned long key, T* data) {$/;"	f	class:HashMap
addLayout	include/Eternia/Design/View.h	/^        void addLayout(Layout* layout);$/;"	p	class:View
addLayout	src/Design/View.h	/^        void addLayout(Layout* layout);$/;"	p	class:View
addLoc	include/Eternia/Data/HashMap.hpp	/^        void addLoc(unsigned long key, HTEntry<T>* entry) {$/;"	f	class:HashMap
addLoc	src/Data/HashMap.hpp	/^        void addLoc(unsigned long key, HTEntry<T>* entry) {$/;"	f	class:HashMap
addObject	include/Eternia/Data/FileSystem.h	/^        void addObject(FileStructureNode* object); \/\/ add object to this$/;"	p	class:FileStructureNode
addObject	src/Data/FileSystem.cpp	/^void FileStructureNode::addObject(FileStructureNode* object) {$/;"	f	class:FileStructureNode
addObject	src/Data/FileSystem.h	/^        void addObject(FileStructureNode* object); \/\/ add object to this$/;"	p	class:FileStructureNode
addParty	include/Eternia/Gamelogic/Social/War/War.h	/^        void addParty();$/;"	p	class:War
addParty	src/Gamelogic/Social/War/War.h	/^        void addParty();$/;"	p	class:War
addPermission	include/Eternia/API/APIUser.h	/^    bool addPermission(APIUser* user, APIPermission* perm); \/\/ returns false if that user does not have perms to add perms to this user.$/;"	p	class:APIUser
addPermission	src/API/APIUser.cpp	/^bool APIUser::addPermission(APIUser* user, APIPermission* perm){$/;"	f	class:APIUser
addPermission	src/API/APIUser.h	/^    bool addPermission(APIUser* user, APIPermission* perm); \/\/ returns false if that user does not have perms to add perms to this user.$/;"	p	class:APIUser
addRecvPacketData	include/Eternia/WebFramework/Network/PacketChannel.h	/^    void addRecvPacketData(CharString *data); \/\/ received packet data, add to queue$/;"	p	class:PacketChannel
addRecvPacketData	src/WebFramework/Network/PacketChannel.cpp	/^void PacketChannel::addRecvPacketData(CharString *data){$/;"	f	class:PacketChannel
addRecvPacketData	src/WebFramework/Network/PacketChannel.h	/^    void addRecvPacketData(CharString *data); \/\/ received packet data, add to queue$/;"	p	class:PacketChannel
addRegexDefinition	include/Eternia/WebFramework/Templates/Template.h	/^        void addRegexDefinition(CharString toreplace, CharString replacer); \/\/ Add a regex definition, occurs every single time during a render$/;"	p	class:Template
addRegexDefinition	src/WebFramework/Templates/Template.cpp	/^void Template::addRegexDefinition(CharString toreplace, CharString replacer){$/;"	f	class:Template
addRegexDefinition	src/WebFramework/Templates/Template.h	/^        void addRegexDefinition(CharString toreplace, CharString replacer); \/\/ Add a regex definition, occurs every single time during a render$/;"	p	class:Template
addReplacingDefinition	include/Eternia/WebFramework/Templates/Template.h	/^        void addReplacingDefinition(CharString toreplace, CharString replacer); \/\/ Add a replacing definition, occurs every single time during a render$/;"	p	class:Template
addReplacingDefinition	src/WebFramework/Templates/Template.cpp	/^void Template::addReplacingDefinition(CharString toreplace, CharString replacer){$/;"	f	class:Template
addReplacingDefinition	src/WebFramework/Templates/Template.h	/^        void addReplacingDefinition(CharString toreplace, CharString replacer); \/\/ Add a replacing definition, occurs every single time during a render$/;"	p	class:Template
addSerial	include/Eternia/Serialization/SpecificSerializer.h	/^    void addSerial(void* ptr, SSEType); \/\/ Use on the class creation$/;"	p	class:SpecificSerializer
addSerial	src/Serialization/SpecificSerializer.cpp	/^void  SpecificSerializer::addSerial(void* ptr, SSEType type) {$/;"	f	class:SpecificSerializer
addSerial	src/Serialization/SpecificSerializer.h	/^    void addSerial(void* ptr, SSEType); \/\/ Use on the class creation$/;"	p	class:SpecificSerializer
addSerialClass	include/Eternia/Serialization/SpecificSerializer.h	/^    void addSerialClass(void* ptr, SSEType type, int classSize);$/;"	p	class:SpecificSerializer
addSerialClass	src/Serialization/SpecificSerializer.cpp	/^void  SpecificSerializer::addSerialClass(void* ptr, SSEType type, int classSize) {$/;"	f	class:SpecificSerializer
addSerialClass	src/Serialization/SpecificSerializer.h	/^    void addSerialClass(void* ptr, SSEType type, int classSize);$/;"	p	class:SpecificSerializer
addTranslation	include/Eternia/Localization/LanguageController.h	/^        void addTranslation(LANG langid, CharString* english, CharString* language); \/\/ single-word translation$/;"	p	class:LanguageController
addTranslation	src/Localization/LanguageController.h	/^        void addTranslation(LANG langid, CharString* english, CharString* language); \/\/ single-word translation$/;"	p	class:LanguageController
addVector	include/Eternia/Math/struct/VectorSpace.h	/^        void addVector(vertex* v); \/\/ adds vertex to rows.$/;"	p	class:VectorSpace
addVector	src/Math/struct/VectorSpace.cpp	/^void addVector(vertex* v) {$/;"	f
addVector	src/Math/struct/VectorSpace.h	/^        void addVector(vertex* v); \/\/ adds vertex to rows.$/;"	p	class:VectorSpace
addWire	include/Eternia/Engineering/Electrical/Circuit.h	/^        void addWire(Wire* wire); \/\/ add a wire to the circuit$/;"	p	class:Circuit
addWire	src/Engineering/Electrical/Circuit.h	/^        void addWire(Wire* wire); \/\/ add a wire to the circuit$/;"	p	class:Circuit
addition	include/Eternia/Math/Eval.h	/^                addition=7,subtraction=8,multiplication=9,division=10,Modulus=11,exponent=12$/;"	e	enum:MOperator
addition	src/Math/Eval.h	/^                addition=7,subtraction=8,multiplication=9,division=10,Modulus=11,exponent=12$/;"	e	enum:MOperator
address	include/Eternia/WebFramework/Network/SockClient.h	/^        socklen_t address;$/;"	m	class:SockClient
address	include/Eternia/WebFramework/Network/SocketServer.h	/^    char* address;$/;"	m	class:SocketServer
address	src/WebFramework/Network/SockClient.h	/^        socklen_t address;$/;"	m	class:SockClient
address	src/WebFramework/Network/SocketServer.h	/^    char* address;$/;"	m	class:SocketServer
addresses	include/Eternia/Serialization/SpecificSerializer.h	/^    LinkedList<PointerType> addresses; \/\/ local addresses for this class$/;"	m	class:SpecificSerializer
addresses	src/Serialization/SpecificSerializer.h	/^    LinkedList<PointerType> addresses; \/\/ local addresses for this class$/;"	m	class:SpecificSerializer
adjMinor	include/Eternia/Math/struct/Matrix.h	/^    double adjMinor(int x, int y); \/\/ find the minor (find inner keys)$/;"	p	class:Matrix
adjMinor	src/Math/struct/Matrix.cpp	/^double Matrix::adjMinor(int n, int m) {$/;"	f	class:Matrix
adjMinor	src/Math/struct/Matrix.h	/^    double adjMinor(int x, int y); \/\/ find the minor (find inner keys)$/;"	p	class:Matrix
adjutant	include/Eternia/Math/struct/Matrix.h	/^    Matrix* adjutant(); \/\/ find the adjutant (obtained from minor of all values)$/;"	p	class:Matrix
adjutant	src/Math/struct/Matrix.cpp	/^Matrix* Matrix::adjutant() {$/;"	f	class:Matrix
adjutant	src/Math/struct/Matrix.h	/^    Matrix* adjutant(); \/\/ find the adjutant (obtained from minor of all values)$/;"	p	class:Matrix
admiralty	include/Eternia/constants.h	/^        namespace admiralty {$/;"	n	namespace:physical::unit
admiralty	src/constants.h	/^        namespace admiralty {$/;"	n	namespace:physical::unit
aes256_context	include/Eternia/Algorithm/Cryptography/Aes256.h	/^} aes256_context;$/;"	t	typeref:struct:__anon7
aes256_context	src/Algorithm/Cryptography/Aes256.h	/^} aes256_context;$/;"	t	typeref:struct:__anon1
aes256_decrypt_ecb	include/Eternia/Algorithm/Cryptography/Aes256.h	/^void aes256_decrypt_ecb(aes256_context *, uint8_t * \/* cipertext *\/);$/;"	p
aes256_decrypt_ecb	src/Algorithm/Cryptography/Aes256.h	/^void aes256_decrypt_ecb(aes256_context *, uint8_t * \/* cipertext *\/);$/;"	p
aes256_decrypt_ecb	src/Algorithm/Cryptography/Aes267.cpp	/^void aes256_decrypt_ecb(aes256_context *ctx, uint8_t *buf) {$/;"	f
aes256_done	include/Eternia/Algorithm/Cryptography/Aes256.h	/^void aes256_done(aes256_context *);$/;"	p
aes256_done	src/Algorithm/Cryptography/Aes256.h	/^void aes256_done(aes256_context *);$/;"	p
aes256_done	src/Algorithm/Cryptography/Aes267.cpp	/^void aes256_done(aes256_context *ctx) {$/;"	f
aes256_encrypt_ecb	include/Eternia/Algorithm/Cryptography/Aes256.h	/^void aes256_encrypt_ecb(aes256_context *, uint8_t * \/* plaintext *\/);$/;"	p
aes256_encrypt_ecb	src/Algorithm/Cryptography/Aes256.h	/^void aes256_encrypt_ecb(aes256_context *, uint8_t * \/* plaintext *\/);$/;"	p
aes256_encrypt_ecb	src/Algorithm/Cryptography/Aes267.cpp	/^void aes256_encrypt_ecb(aes256_context *ctx, uint8_t *buf) {$/;"	f
aes256_init	include/Eternia/Algorithm/Cryptography/Aes256.h	/^void aes256_init(aes256_context *, uint8_t * \/* key *\/);$/;"	p
aes256_init	src/Algorithm/Cryptography/Aes256.h	/^void aes256_init(aes256_context *, uint8_t * \/* key *\/);$/;"	p
aes256_init	src/Algorithm/Cryptography/Aes267.cpp	/^void aes256_init(aes256_context *ctx, uint8_t *k) {$/;"	f
aes_addRoundKey	src/Algorithm/Cryptography/Aes267.cpp	/^void aes_addRoundKey(uint8_t *buf, uint8_t *key) {$/;"	f
aes_addRoundKey_cpy	src/Algorithm/Cryptography/Aes267.cpp	/^void aes_addRoundKey_cpy(uint8_t *buf, uint8_t *key, uint8_t *cpk) {$/;"	f
aes_expandDecKey	src/Algorithm/Cryptography/Aes267.cpp	/^void aes_expandDecKey(uint8_t *k, uint8_t *rc) {$/;"	f
aes_expandEncKey	src/Algorithm/Cryptography/Aes267.cpp	/^void aes_expandEncKey(uint8_t *k, uint8_t *rc) {$/;"	f
aes_mixColumns	src/Algorithm/Cryptography/Aes267.cpp	/^void aes_mixColumns(uint8_t *buf) {$/;"	f
aes_mixColumns_inv	src/Algorithm/Cryptography/Aes267.cpp	/^void aes_mixColumns_inv(uint8_t *buf) {$/;"	f
aes_shiftRows	src/Algorithm/Cryptography/Aes267.cpp	/^void aes_shiftRows(uint8_t *buf) {$/;"	f
aes_shiftRows_inv	src/Algorithm/Cryptography/Aes267.cpp	/^void aes_shiftRows_inv(uint8_t *buf) {$/;"	f
aes_subBytes	src/Algorithm/Cryptography/Aes267.cpp	/^void aes_subBytes(uint8_t *buf) {$/;"	f
aes_subBytes_inv	src/Algorithm/Cryptography/Aes267.cpp	/^void aes_subBytes_inv(uint8_t *buf) {$/;"	f
agility	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> agility; \/\/ Attack Speed \/ Avoid \/ Accuracy \/ Movement Speed$/;"	m	class:SkillSet
agility	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> agility; \/\/ Attack Speed \/ Avoid \/ Accuracy \/ Movement Speed$/;"	m	class:SkillSet
air_piloting	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> air_piloting; \/\/ Pilot Skill$/;"	m	class:SkillSet
air_piloting	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> air_piloting; \/\/ Pilot Skill$/;"	m	class:SkillSet
algebra	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> algebra; \/\/ did some equations$/;"	m	class:CraftingStats
algebra	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> algebra; \/\/ did some equations$/;"	m	class:CraftingStats
alive	include/Eternia/WebFramework/Network/SockClient.h	/^        bool alive;$/;"	m	class:SockClient
alive	src/WebFramework/Network/SockClient.h	/^        bool alive;$/;"	m	class:SockClient
alpha	include/Eternia/constants.h	/^        const double alpha = 1.0\/137.0359895;$/;"	m	namespace:physical::constant
alpha	src/constants.h	/^        const double alpha = 1.0\/137.0359895;$/;"	m	namespace:physical::constant
ambientTemperature	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        double ambientTemperature; \/\/ sorrounding temperature (can be used to wick heat)$/;"	m	class:ComponentRating
ambientTemperature	src/Engineering/Electrical/Components/ComponentRating.h	/^        double ambientTemperature; \/\/ sorrounding temperature (can be used to wick heat)$/;"	m	class:ComponentRating
amperage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double amperage; \/\/ Applied amperes$/;"	m	class:PowerValue
amperage	src/Engineering/Electrical/PowerValue.h	/^        double amperage; \/\/ Applied amperes$/;"	m	class:PowerValue
amplify	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void amplify(float value);$/;"	p	class:TimeSignal
amplify	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void amplify(float value);$/;"	p	class:TimeSignal
amu	include/Eternia/constants.h	/^        const double amu = atomic_mass_unit;$/;"	m	namespace:physical::constant
amu	src/constants.h	/^        const double amu = atomic_mass_unit;$/;"	m	namespace:physical::constant
angle	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        vertex* angle; \/\/ angle on the branch from the base$/;"	m	class:TreeBranch
angle	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        vertex* angle; \/\/ angle on the limb from the base$/;"	m	class:TreeLimb
angle	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        vertex* angle;$/;"	m	class:Tree
angle	include/Eternia/Math/struct/vertex.h	/^    double angle(vertex  v2); \/\/ angle from v2 based on 0 deg (X-direction)$/;"	p	class:vertex
angle	src/Gamelogic/Environment/Object/Tree.h	/^        vertex* angle; \/\/ angle on the branch from the base$/;"	m	class:TreeBranch
angle	src/Gamelogic/Environment/Object/Tree.h	/^        vertex* angle; \/\/ angle on the limb from the base$/;"	m	class:TreeLimb
angle	src/Gamelogic/Environment/Object/Tree.h	/^        vertex* angle;$/;"	m	class:Tree
angle	src/Math/struct/vertex.cpp	/^double vertex::angle(vertex w) {$/;"	f	class:vertex
angle	src/Math/struct/vertex.h	/^    double angle(vertex  v2); \/\/ angle from v2 based on 0 deg (X-direction)$/;"	p	class:vertex
angleX	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	float angleX; \/\/ Angle turret yaw  (Max is 180 degrees)$/;"	m	class:HardPoint2Gimbal
angleX	src/Gamelogic/CoreSystems/Hardpoint.h	/^	float angleX; \/\/ Angle turret yaw  (Max is 180 degrees)$/;"	m	class:HardPoint2Gimbal
angleY	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	float angleY; \/\/ Angle turret pitch (Max is 359.999~ degrees)$/;"	m	class:HardPoint2Gimbal
angleY	src/Gamelogic/CoreSystems/Hardpoint.h	/^	float angleY; \/\/ Angle turret pitch (Max is 359.999~ degrees)$/;"	m	class:HardPoint2Gimbal
ap	include/Eternia/constants.h	/^        namespace ap = apothecary;$/;"	x
ap	src/constants.h	/^        namespace ap = apothecary;$/;"	x
apostilb	include/Eternia/constants.h	/^        const double apostilb = candelas\/meter\/meter;$/;"	m	namespace:physical::unit
apostilb	src/constants.h	/^        const double apostilb = candelas\/meter\/meter;$/;"	m	namespace:physical::unit
apostilbs	include/Eternia/constants.h	/^        const double apostilbs = apostilb;$/;"	m	namespace:physical::unit
apostilbs	src/constants.h	/^        const double apostilbs = apostilb;$/;"	m	namespace:physical::unit
apothecary	include/Eternia/constants.h	/^        namespace apothecary { \/\/ weight$/;"	n	namespace:physical::unit
apothecary	src/constants.h	/^        namespace apothecary { \/\/ weight$/;"	n	namespace:physical::unit
appearance	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        AvatarAppearance appearance;$/;"	m	class:Avatar
appearance	src/Gamelogic/Avatar/Avatar.h	/^        AvatarAppearance appearance;$/;"	m	class:Avatar
arc	include/Eternia/constants.h	/^        namespace arc {$/;"	n	namespace:physical::unit
arc	src/constants.h	/^        namespace arc {$/;"	n	namespace:physical::unit
are	include/Eternia/constants.h	/^        const double are = 100.0*meter*meter;$/;"	m	namespace:physical::unit
are	src/constants.h	/^        const double are = 100.0*meter*meter;$/;"	m	namespace:physical::unit
ares	include/Eternia/constants.h	/^        const double ares = are;$/;"	m	namespace:physical::unit
ares	src/constants.h	/^        const double ares = are;$/;"	m	namespace:physical::unit
arg1	include/Eternia/Data/Events/EventHandle.h	/^        void *arg1, *arg2;$/;"	m	class:EventHandle
arg1	src/Data/Events/EventHandle.h	/^        void *arg1, *arg2;$/;"	m	class:EventHandle
arg2	include/Eternia/Data/Events/EventHandle.h	/^        void *arg1, *arg2;$/;"	m	class:EventHandle
arg2	src/Data/Events/EventHandle.h	/^        void *arg1, *arg2;$/;"	m	class:EventHandle
arithmeticWaitTime	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^const double arithmeticWaitTime = 20; \/\/ nanoseconds (arithmetic usually is for bank accounts, super-fast operations)$/;"	v
arithmeticWaitTime	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^const double arithmeticWaitTime = 20; \/\/ nanoseconds (arithmetic usually is for bank accounts, super-fast operations)$/;"	v
arm_diameter	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
arm_diameter	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
armor	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        PType<int> armor; \/\/ determines armor value.$/;"	m	class:BodyPartHP
armor	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> armor; \/\/ basic armor skill$/;"	m	class:CraftingStats
armor	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        double armor, weight;$/;"	m	class:ModularShipPart
armor	src/Gamelogic/Avatar/AvatarHealth.h	/^        PType<int> armor; \/\/ determines armor value.$/;"	m	class:BodyPartHP
armor	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> armor; \/\/ basic armor skill$/;"	m	class:CraftingStats
armor	src/Gamelogic/Ship/ModularShipPart.h	/^        double armor, weight;$/;"	m	class:ModularShipPart
arpentcan	include/Eternia/constants.h	/^        const double arpentcan = 27.52*statute::miles;$/;"	m	namespace:physical::unit
arpentcan	src/constants.h	/^        const double arpentcan = 27.52*statute::miles;$/;"	m	namespace:physical::unit
arpentcans	include/Eternia/constants.h	/^        const double arpentcans = arpentcan;$/;"	m	namespace:physical::unit
arpentcans	src/constants.h	/^        const double arpentcans = arpentcan;$/;"	m	namespace:physical::unit
arpentlin	include/Eternia/constants.h	/^        const double arpentlin = 191.835*feet;$/;"	m	namespace:physical::unit
arpentlin	src/constants.h	/^        const double arpentlin = 191.835*feet;$/;"	m	namespace:physical::unit
arpentlins	include/Eternia/constants.h	/^        const double arpentlins = arpentlin;$/;"	m	namespace:physical::unit
arpentlins	src/constants.h	/^        const double arpentlins = arpentlin;$/;"	m	namespace:physical::unit
arr	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void** arr;$/;"	m	class:BasicFixedPointerArray
arr	src/Data/AbstractDatabase/AbstractDB.h	/^        void** arr;$/;"	m	class:BasicFixedPointerArray
asin	include/Eternia/Math/Functions/Trig.h	/^    double asin(double);$/;"	p	namespace:Math
asin	src/Math/Functions/Trig.cpp	/^    double asin(double x) {$/;"	f	namespace:Math
asin	src/Math/Functions/Trig.h	/^    double asin(double);$/;"	p	namespace:Math
assignClient	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignClient(P2PNode player);$/;"	p	class:P2PLServer
assignClient	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignClient(P2PNode player);$/;"	p	class:P2PLServer
assignCpuServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignCpuServer(P2PNode player);$/;"	p	class:P2PLServer
assignCpuServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignCpuServer(P2PNode player);$/;"	p	class:P2PLServer
assignDataServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignDataServer(P2PNode player);$/;"	p	class:P2PLServer
assignDataServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignDataServer(P2PNode player);$/;"	p	class:P2PLServer
assignIRCServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignIRCServer(P2PNode player); \/\/ server that manages IRC chats between players.$/;"	p	class:P2PLServer
assignIRCServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignIRCServer(P2PNode player); \/\/ server that manages IRC chats between players.$/;"	p	class:P2PLServer
assignLClient	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignLClient(P2PNode player);$/;"	p	class:P2PLServer
assignLClient	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignLClient(P2PNode player);$/;"	p	class:P2PLServer
assignLServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignLServer(P2PNode player); \/\/ will subdivide this server's inner boundary futher.$/;"	p	class:P2PLServer
assignLServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignLServer(P2PNode player); \/\/ will subdivide this server's inner boundary futher.$/;"	p	class:P2PLServer
assignStreamServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignStreamServer(P2PNode player); \/\/ Streams high-density audio or video.$/;"	p	class:P2PLServer
assignStreamServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void assignStreamServer(P2PNode player); \/\/ Streams high-density audio or video.$/;"	p	class:P2PLServer
astronomical_unit	include/Eternia/constants.h	/^        const double astronomical_unit = 1.49597871e11*meters;$/;"	m	namespace:physical::unit
astronomical_unit	src/constants.h	/^        const double astronomical_unit = 1.49597871e11*meters;$/;"	m	namespace:physical::unit
astronomical_units	include/Eternia/constants.h	/^        const double astronomical_units = astronomical_unit;$/;"	m	namespace:physical::unit
astronomical_units	src/constants.h	/^        const double astronomical_units = astronomical_unit;$/;"	m	namespace:physical::unit
astronomy	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> astronomy; \/\/ Cosmology: Study of the universe$/;"	m	class:CraftingStats
astronomy	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> astronomy; \/\/ Cosmology: Study of the universe$/;"	m	class:CraftingStats
async	include/Eternia/Data/Logger/Logger.h	/^    bool async, console, ending;$/;"	m	class:Logger
async	src/Data/Logger/Logger.h	/^    bool async, console, ending;$/;"	m	class:Logger
asyncLog	include/Eternia/Data/Logger/Logger.h	/^    Queue asyncLog;$/;"	m	class:Logger
asyncLog	src/Data/Logger/Logger.h	/^    Queue asyncLog;$/;"	m	class:Logger
asyncthread	include/Eternia/Data/Logger/Logger.h	/^    std::thread asyncthread;$/;"	m	class:Logger
asyncthread	src/Data/Logger/Logger.h	/^    std::thread asyncthread;$/;"	m	class:Logger
atan	include/Eternia/Math/Functions/Trig.h	/^    double atan(double);$/;"	p	namespace:Math
atan	src/Math/Functions/Trig.cpp	/^    double atan(double x) {$/;"	f	namespace:Math
atan	src/Math/Functions/Trig.h	/^    double atan(double);$/;"	p	namespace:Math
athletics	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> athletics; \/\/ increases movement speed and carry weight.$/;"	m	class:SkillSet
athletics	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> athletics; \/\/ increases movement speed and carry weight.$/;"	m	class:SkillSet
atm	include/Eternia/constants.h	/^        const double atm = atmosphere;$/;"	m	namespace:physical::unit
atm	src/constants.h	/^        const double atm = atmosphere;$/;"	m	namespace:physical::unit
atmosphere	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Atmosphere atmosphere; \/\/ defines planetary atmosphere$/;"	m	class:Planet
atmosphere	include/Eternia/constants.h	/^        const double atmosphere = 760.0*Torr;$/;"	m	namespace:physical::unit
atmosphere	src/Gamelogic/Environment/Planet/Planet.h	/^    Atmosphere atmosphere; \/\/ defines planetary atmosphere$/;"	m	class:Planet
atmosphere	src/constants.h	/^        const double atmosphere = 760.0*Torr;$/;"	m	namespace:physical::unit
atmospheres	include/Eternia/constants.h	/^        const double atmospheres = atmosphere;$/;"	m	namespace:physical::unit
atmospheres	src/constants.h	/^        const double atmospheres = atmosphere;$/;"	m	namespace:physical::unit
atomList	include/Eternia/Engineering/Chemistry/elementals.h	/^const Atom[118] atomList = {Hydrogen, Helium, Lithium, Beryllium, Boron, Carbon, Nitrogen, Oxygen, Fluorine, Neon, Sodium, Magnesium, Aluminum, Silicon, Phosphorus, Sulfur, Chlorine, Argon, Potassium, Calcium, Scandium, Titanium, Vanadium, Chromium, Manganese, Iron, Cobalt, Nickel, Copper, Zinc, Gallium, Germanium, Arsenic, Selenium, Bronium, Krypton, Rubidium, Strontium, Yttrium, Zirconium, Niobium, Molybdenum, Technetium, Ruthenium, Rhodium, Palladium, Silver, Cadmium, Indium, Tin, Antimony, Tellurium, Iodine, Xenon, Caesium, Barium, Lanthanum, Cerium, Praseodymium, Neodymium, Promethium, Samarium, Europium, Gadolinium, Terbium, Dysprosium, Holmium, Erbium, Thulmium, Ytterbium, Lutetium, Hafnium, Tantalium, Tungsten, Rhenium, Osmium, Iridium, Platinum, Gold, Mercury, Thallium, Lead, Bismuth, Polonium, Astanine, Radon, Francium, Radium, Actinium, Thorium, Protactinium, Uranium, Neptunium, Plutonium, Americium, Curium, Berkelium, Californium, Einsteinium, Fermium, Mendelevium, Nobelium, Lawrencium, Rutherfordium, Dubnium, Seaborgium, Bohrium, Hassium, Meitnerium, Darmstadtium, Roentgenium, Copernicium, Ununtrium, Flerovium, Ununpentium, Livermorium, Ununseptium, Ununoctium};$/;"	v
atomList	src/Engineering/Chemistry/elementals.h	/^const Atom[118] atomList = {Hydrogen, Helium, Lithium, Beryllium, Boron, Carbon, Nitrogen, Oxygen, Fluorine, Neon, Sodium, Magnesium, Aluminum, Silicon, Phosphorus, Sulfur, Chlorine, Argon, Potassium, Calcium, Scandium, Titanium, Vanadium, Chromium, Manganese, Iron, Cobalt, Nickel, Copper, Zinc, Gallium, Germanium, Arsenic, Selenium, Bronium, Krypton, Rubidium, Strontium, Yttrium, Zirconium, Niobium, Molybdenum, Technetium, Ruthenium, Rhodium, Palladium, Silver, Cadmium, Indium, Tin, Antimony, Tellurium, Iodine, Xenon, Caesium, Barium, Lanthanum, Cerium, Praseodymium, Neodymium, Promethium, Samarium, Europium, Gadolinium, Terbium, Dysprosium, Holmium, Erbium, Thulmium, Ytterbium, Lutetium, Hafnium, Tantalium, Tungsten, Rhenium, Osmium, Iridium, Platinum, Gold, Mercury, Thallium, Lead, Bismuth, Polonium, Astanine, Radon, Francium, Radium, Actinium, Thorium, Protactinium, Uranium, Neptunium, Plutonium, Americium, Curium, Berkelium, Californium, Einsteinium, Fermium, Mendelevium, Nobelium, Lawrencium, Rutherfordium, Dubnium, Seaborgium, Bohrium, Hassium, Meitnerium, Darmstadtium, Roentgenium, Copernicium, Ununtrium, Flerovium, Ununpentium, Livermorium, Ununseptium, Ununoctium};$/;"	v
atomic_mass_unit	include/Eternia/constants.h	/^        const double atomic_mass_unit = 1.6605402e-27*kilograms;$/;"	m	namespace:physical::constant
atomic_mass_unit	src/constants.h	/^        const double atomic_mass_unit = 1.6605402e-27*kilograms;$/;"	m	namespace:physical::constant
atomic_mass_units	include/Eternia/constants.h	/^        const double atomic_mass_units = atomic_mass_unit;$/;"	m	namespace:physical::constant
atomic_mass_units	src/constants.h	/^        const double atomic_mass_units = atomic_mass_unit;$/;"	m	namespace:physical::constant
attack_sfx	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString attack_sfx; \/\/ list of sfx used when fighting$/;"	m	class:AvatarAppearance
attack_sfx	src/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString attack_sfx; \/\/ list of sfx used when fighting$/;"	m	class:AvatarAppearance
attemptDirect	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        void attemptDirect();$/;"	p	class:P2PPacket
attemptDirect	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        void attemptDirect();$/;"	p	class:P2PPacket
attributes	include/Eternia/Gamelogic/Avatar/Disease.h	/^        LinkedList<DISEASE_ATTRIBUTES> attributes; \/\/ list of attributes of the disease$/;"	m	class:Disease
attributes	src/Gamelogic/Avatar/Disease.h	/^        LinkedList<DISEASE_ATTRIBUTES> attributes; \/\/ list of attributes of the disease$/;"	m	class:Disease
attrtype	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^        DynamicAttr attrtype;$/;"	m	class:DynamicAttribute
attrtype	src/Gamelogic/Inventory/DynamicAttribute.h	/^        DynamicAttr attrtype;$/;"	m	class:DynamicAttribute
autoManage	include/Eternia/Data/FileCache.hpp	/^        bool autoManage;$/;"	m	class:FileCache
autoManage	src/Data/FileCache.hpp	/^        bool autoManage;$/;"	m	class:FileCache
autoTick	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void autoTick(); \/\/ attempts to affix to a planned tick interval automatically$/;"	p	class:PWM
autoTick	src/Engineering/Electrical/Signal/PWM.cpp	/^void PWM::autoTick() {$/;"	f	class:PWM
autoTick	src/Engineering/Electrical/Signal/PWM.h	/^    void autoTick(); \/\/ attempts to affix to a planned tick interval automatically$/;"	p	class:PWM
autoTickfind	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
autoTickfind	src/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
av	include/Eternia/constants.h	/^        namespace av = avoirdupois;$/;"	x
av	src/constants.h	/^        namespace av = avoirdupois;$/;"	x
avdp	include/Eternia/constants.h	/^        namespace avdp = avoirdupois;$/;"	x
avdp	src/constants.h	/^        namespace avdp = avoirdupois;$/;"	x
avoirdupois	include/Eternia/constants.h	/^        namespace avoirdupois { \/\/ weight$/;"	n	namespace:physical::unit
avoirdupois	src/constants.h	/^        namespace avoirdupois { \/\/ weight$/;"	n	namespace:physical::unit
awareness	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> awareness; \/\/ Keen senses \/ detection \/ timing$/;"	m	class:SkillSet
awareness	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> awareness; \/\/ Keen senses \/ detection \/ timing$/;"	m	class:SkillSet
b	include/Eternia/Data/BitMap.h	/^        unsigned char b;$/;"	m	class:bmbit
b	include/Eternia/Data/Graph.h	/^        GVertex *a, *b;$/;"	m	class:GEdge
b	include/Eternia/Engineering/Chemistry/Composite.h	/^	Atom *a, *b;$/;"	m	class:AtomBond
b	include/Eternia/constants.h	/^        const double b = barn;$/;"	m	namespace:physical::unit
b	src/Data/BitMap.h	/^        unsigned char b;$/;"	m	class:bmbit
b	src/Data/Graph.h	/^        GVertex *a, *b;$/;"	m	class:GEdge
b	src/Engineering/Chemistry/Composite.h	/^	Atom *a, *b;$/;"	m	class:AtomBond
b	src/constants.h	/^        const double b = barn;$/;"	m	namespace:physical::unit
b1	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^        VertexObject a1, b1; \/\/ two objects to collide.$/;"	m	class:Collision1D
b1	src/Engineering/Physics/Kinematics/Collision1D.h	/^        VertexObject a1, b1; \/\/ two objects to collide.$/;"	m	class:Collision1D
bag	include/Eternia/constants.h	/^        const double bag = 94.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
bag	src/constants.h	/^        const double bag = 94.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
bags	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        LinkedList<BaseInventory> bags;$/;"	m	class:AvatarGear
bags	include/Eternia/Gamelogic/Inventory/BagList.h	/^    LinkedList<BaseInventory> bags;$/;"	m	class:BagList
bags	include/Eternia/constants.h	/^        const double bags = bag;$/;"	m	namespace:physical::unit
bags	src/Gamelogic/Avatar/AvatarGear.h	/^        LinkedList<BaseInventory> bags;$/;"	m	class:AvatarGear
bags	src/Gamelogic/Inventory/BagList.h	/^    LinkedList<BaseInventory> bags;$/;"	m	class:BagList
bags	src/constants.h	/^        const double bags = bag;$/;"	m	namespace:physical::unit
bakers	include/Eternia/constants.h	/^        namespace bakers {$/;"	n	namespace:physical::unit
bakers	src/constants.h	/^        namespace bakers {$/;"	n	namespace:physical::unit
ballistic	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> ballistic; \/\/ ballistic weapons$/;"	m	class:CraftingStats
ballistic	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> ballistic; \/\/ ballistic weapons$/;"	m	class:CraftingStats
ban	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        void ban(ChatChannel* channel); \/\/ ban from specific channel$/;"	p	class:ChatClient
ban	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        void ban(ChatChannel* channel); \/\/ ban from specific channel$/;"	p	class:ChatClient
bandpassFilter	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    void bandpassFilter(float centerFreq, float dbm); $/;"	p	class:FreqSignal
bandpassFilter	src/Engineering/Electrical/Signal/FreqSignal.h	/^    void bandpassFilter(float centerFreq, float dbm); $/;"	p	class:FreqSignal
bar	include/Eternia/constants.h	/^        const double bar = 10000.0*Pascals;$/;"	m	namespace:physical::unit
bar	src/constants.h	/^        const double bar = 10000.0*Pascals;$/;"	m	namespace:physical::unit
barleycorn	include/Eternia/constants.h	/^        const double barleycorn = inch\/3.0;$/;"	m	namespace:physical::unit
barleycorn	src/constants.h	/^        const double barleycorn = inch\/3.0;$/;"	m	namespace:physical::unit
barleycorns	include/Eternia/constants.h	/^        const double barleycorns = barleycorn;$/;"	m	namespace:physical::unit
barleycorns	src/constants.h	/^        const double barleycorns = barleycorn;$/;"	m	namespace:physical::unit
barn	include/Eternia/constants.h	/^        const double barn = 1.0e-28*meter*meter;$/;"	m	namespace:physical::unit
barn	src/constants.h	/^        const double barn = 1.0e-28*meter*meter;$/;"	m	namespace:physical::unit
barns	include/Eternia/constants.h	/^        const double barns = barn;$/;"	m	namespace:physical::unit
barns	src/constants.h	/^        const double barns = barn;$/;"	m	namespace:physical::unit
barrel	include/Eternia/constants.h	/^            const double barrel = 31.5*liquid::gallons;$/;"	m	namespace:physical::unit::US
barrel	include/Eternia/constants.h	/^            const double barrel = 36.0*fluid::gallons;$/;"	m	namespace:physical::unit::British
barrel	src/constants.h	/^            const double barrel = 31.5*liquid::gallons;$/;"	m	namespace:physical::unit::US
barrel	src/constants.h	/^            const double barrel = 36.0*fluid::gallons;$/;"	m	namespace:physical::unit::British
barrels	include/Eternia/constants.h	/^            const double barrels = barrel;$/;"	m	namespace:physical::unit::British
barrels	include/Eternia/constants.h	/^            const double barrels = barrel;$/;"	m	namespace:physical::unit::US
barrels	src/constants.h	/^            const double barrels = barrel;$/;"	m	namespace:physical::unit::British
barrels	src/constants.h	/^            const double barrels = barrel;$/;"	m	namespace:physical::unit::US
bars	include/Eternia/constants.h	/^        const double bars = bar;$/;"	m	namespace:physical::unit
bars	src/constants.h	/^        const double bars = bar;$/;"	m	namespace:physical::unit
base	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ADB_STOREBASE base;$/;"	m	class:AbstractDBCacheMap
base	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ADB_STOREBASE base;$/;"	m	class:AbstractDBTable
base	src/Data/AbstractDatabase/AbstractDB.h	/^        ADB_STOREBASE base;$/;"	m	class:AbstractDBCacheMap
base	src/Data/AbstractDatabase/AbstractDB.h	/^        ADB_STOREBASE base;$/;"	m	class:AbstractDBTable
baseNode	include/Eternia/Data/LinkedList.hpp	/^    LinkedNode<T>* baseNode;$/;"	m	class:LinkedList
baseNode	include/Eternia/Data/LinkedListT.h	/^        LinkedNodeT * baseNode;$/;"	m	class:LinkedListT
baseNode	include/Eternia/Data/LinkedMap.h	/^        LinkedMapNode * baseNode;$/;"	m	class:LinkedMap
baseNode	src/Data/LinkedList.hpp	/^    LinkedNode<T>* baseNode;$/;"	m	class:LinkedList
baseNode	src/Data/LinkedListT.h	/^        LinkedNodeT * baseNode;$/;"	m	class:LinkedListT
baseNode	src/Data/LinkedMap.h	/^        LinkedMapNode * baseNode;$/;"	m	class:LinkedMap
baseNodes	include/Eternia/Math/Equation.h	/^        LinkedList<EquationNode>* baseNodes; \/\/ nodes on the "Bottom Step".$/;"	m	class:Equation
baseNodes	src/Math/Equation.h	/^        LinkedList<EquationNode>* baseNodes; \/\/ nodes on the "Bottom Step".$/;"	m	class:Equation
bbl	include/Eternia/constants.h	/^            const double bbl = barrel;$/;"	m	namespace:physical::unit::British
bbl	include/Eternia/constants.h	/^            const double bbl = barrel;$/;"	m	namespace:physical::unit::US
bbl	src/constants.h	/^            const double bbl = barrel;$/;"	m	namespace:physical::unit::British
bbl	src/constants.h	/^            const double bbl = barrel;$/;"	m	namespace:physical::unit::US
beard_color	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex hair_color, beard_color, eyebrow_color; \/\/ hair color$/;"	m	class:AvatarAppearance
beard_color	src/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex hair_color, beard_color, eyebrow_color; \/\/ hair color$/;"	m	class:AvatarAppearance
beginProfile	include/Eternia/Data/TimeProfiler.h	/^    void beginProfile(); \/\/ begin a profiling session$/;"	p	class:TimeProfiler
beginProfile	src/Data/TimeProfiler.cpp	/^void TimeProfiler::beginProfile(){$/;"	f	class:TimeProfiler
beginProfile	src/Data/TimeProfiler.h	/^    void beginProfile(); \/\/ begin a profiling session$/;"	p	class:TimeProfiler
bitlen	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^        int bitlen;$/;"	m	class:SecuredGPUData
bitlen	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^        int bitlen;$/;"	m	class:SecuredGPUData
bl	include/Eternia/constants.h	/^            const double bl = barrel;$/;"	m	namespace:physical::unit::British
bl	include/Eternia/constants.h	/^            const double bl = barrel;$/;"	m	namespace:physical::unit::US
bl	src/constants.h	/^            const double bl = barrel;$/;"	m	namespace:physical::unit::British
bl	src/constants.h	/^            const double bl = barrel;$/;"	m	namespace:physical::unit::US
blah	include/Eternia/Gamelogic/SpaceStations/stub.h	/^#define blah$/;"	d
blah	src/Gamelogic/SpaceStations/stub.h	/^#define blah$/;"	d
blockLen	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    int blockLen; \/\/ length of each block$/;"	m	class:BasicCompressor
blockLen	src/Algorithm/Compression/BasicCompressor.h	/^    int blockLen; \/\/ length of each block$/;"	m	class:BasicCompressor
blocks	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    Block ***blocks;$/;"	m	class:VoxelGeom
blocks	src/Gamelogic/Voxel/VoxelGeom.h	/^    Block ***blocks;$/;"	m	class:VoxelGeom
blocksize	include/Eternia/Algorithm/Cryptography/md5.h	/^        enum {blocksize = 64}; \/\/ VC6 won't eat a const static int here$/;"	e	enum:MD5::__anon8
blocksize	src/Algorithm/Cryptography/md5.h	/^        enum {blocksize = 64}; \/\/ VC6 won't eat a const static int here$/;"	e	enum:MD5::__anon2
blood	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP blood; \/\/ Blood in the body, if humanoid$/;"	m	class:AvatarHealth
blood	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP blood; \/\/ Blood in the body, if humanoid$/;"	m	class:AvatarHealth
bmbit	include/Eternia/Data/BitMap.h	/^        bmbit();$/;"	p	class:bmbit
bmbit	include/Eternia/Data/BitMap.h	/^class bmbit {$/;"	c
bmbit	src/Data/BitMap.cpp	/^bmbit::bmbit() {$/;"	f	class:bmbit
bmbit	src/Data/BitMap.h	/^        bmbit();$/;"	p	class:bmbit
bmbit	src/Data/BitMap.h	/^class bmbit {$/;"	c
bmbit::a	include/Eternia/Data/BitMap.h	/^        unsigned char a;$/;"	m	class:bmbit
bmbit::a	src/Data/BitMap.h	/^        unsigned char a;$/;"	m	class:bmbit
bmbit::b	include/Eternia/Data/BitMap.h	/^        unsigned char b;$/;"	m	class:bmbit
bmbit::b	src/Data/BitMap.h	/^        unsigned char b;$/;"	m	class:bmbit
bmbit::bmbit	include/Eternia/Data/BitMap.h	/^        bmbit();$/;"	p	class:bmbit
bmbit::bmbit	src/Data/BitMap.cpp	/^bmbit::bmbit() {$/;"	f	class:bmbit
bmbit::bmbit	src/Data/BitMap.h	/^        bmbit();$/;"	p	class:bmbit
bmbit::g	include/Eternia/Data/BitMap.h	/^        unsigned char g;$/;"	m	class:bmbit
bmbit::g	src/Data/BitMap.h	/^        unsigned char g;$/;"	m	class:bmbit
bmbit::r	include/Eternia/Data/BitMap.h	/^        unsigned char r;$/;"	m	class:bmbit
bmbit::r	src/Data/BitMap.h	/^        unsigned char r;$/;"	m	class:bmbit
boardfeet	include/Eternia/constants.h	/^        const double boardfeet = boardfoot;$/;"	m	namespace:physical::unit
boardfeet	src/constants.h	/^        const double boardfeet = boardfoot;$/;"	m	namespace:physical::unit
boardfoot	include/Eternia/constants.h	/^        const double boardfoot = 144.0*inch*inch*inch;$/;"	m	namespace:physical::unit
boardfoot	src/constants.h	/^        const double boardfoot = 144.0*inch*inch*inch;$/;"	m	namespace:physical::unit
body	include/Eternia/WebFramework/Network/Types/HTMLRequest.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
body	include/Eternia/WebFramework/Network/Types/HTMLResponse.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
body	src/WebFramework/Network/Types/HTMLRequest.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
body	src/WebFramework/Network/Types/HTMLResponse.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
boiling_point	include/Eternia/Engineering/Chemistry/Atom.h	/^        double boiling_point;$/;"	m	class:Atom
boiling_point	src/Engineering/Chemistry/Atom.h	/^        double boiling_point;$/;"	m	class:Atom
bolt	include/Eternia/constants.h	/^        const double bolt = 40.0*yards;$/;"	m	namespace:physical::unit
bolt	src/constants.h	/^        const double bolt = 40.0*yards;$/;"	m	namespace:physical::unit
bolts	include/Eternia/constants.h	/^        const double bolts = bolt;$/;"	m	namespace:physical::unit
bolts	src/constants.h	/^        const double bolts = bolt;$/;"	m	namespace:physical::unit
bottommeasure	include/Eternia/constants.h	/^        const double bottommeasure = inch\/40.0;$/;"	m	namespace:physical::unit
bottommeasure	src/constants.h	/^        const double bottommeasure = inch\/40.0;$/;"	m	namespace:physical::unit
bottommeasures	include/Eternia/constants.h	/^        const double bottommeasures = bottommeasure;$/;"	m	namespace:physical::unit
bottommeasures	src/constants.h	/^        const double bottommeasures = bottommeasure;$/;"	m	namespace:physical::unit
boughtStocks	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^        LinkedList<Stock> boughtStocks();$/;"	p	class:BaseStock
boughtStocks	src/Gamelogic/Economics/StockMarket/Stock.h	/^        LinkedList<Stock> boughtStocks();$/;"	p	class:BaseStock
boundaries	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PBoundaries boundaries; \/\/ handles players within these bondaries.$/;"	m	class:P2PLServer
boundaries	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PBoundaries boundaries; \/\/ handles players within these bondaries.$/;"	m	class:P2PLServer
branches	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        LinkedList<TreeBranch> *branches; \/\/ list of consecutive branches$/;"	m	class:TreeLimb
branches	include/Eternia/Gamelogic/Social/Government/Government.h	/^        LinkedList<GovernmentBranch> branches; \/\/ list of government power sectors (branches of government)$/;"	m	class:Government
branches	src/Gamelogic/Environment/Object/Tree.h	/^        LinkedList<TreeBranch> *branches; \/\/ list of consecutive branches$/;"	m	class:TreeLimb
branches	src/Gamelogic/Social/Government/Government.h	/^        LinkedList<GovernmentBranch> branches; \/\/ list of government power sectors (branches of government)$/;"	m	class:Government
breathing	include/Eternia/Gamelogic/Race/Race.h	/^	Composite breathing; \/\/ molecule normally used for breathing, humans like o2$/;"	m	class:Race
breathing	src/Gamelogic/Race/Race.h	/^	Composite breathing; \/\/ molecule normally used for breathing, humans like o2$/;"	m	class:Race
bu	include/Eternia/constants.h	/^            const double bu = bushel;$/;"	m	namespace:physical::unit::British
bu	include/Eternia/constants.h	/^            const double bu = bushel;$/;"	m	namespace:physical::unit::US
bu	src/constants.h	/^            const double bu = bushel;$/;"	m	namespace:physical::unit::British
bu	src/constants.h	/^            const double bu = bushel;$/;"	m	namespace:physical::unit::US
buffer	include/Eternia/Algorithm/Cryptography/md5.h	/^        uint1 buffer[blocksize]; \/\/ bytes that didn't fit in last 64 byte chunk$/;"	m	class:MD5
buffer	include/Eternia/Audio/AudioBuffer.h	/^    Queue buffer;$/;"	m	class:AudioBuffer
buffer	src/Algorithm/Cryptography/md5.h	/^        uint1 buffer[blocksize]; \/\/ bytes that didn't fit in last 64 byte chunk$/;"	m	class:MD5
buffer	src/Audio/AudioBuffer.h	/^    Queue buffer;$/;"	m	class:AudioBuffer
bufferSize	include/Eternia/WebFramework/Network/SocketServer.h	/^    int port, bufferSize;$/;"	m	class:SocketServer
bufferSize	src/WebFramework/Network/SocketServer.h	/^    int port, bufferSize;$/;"	m	class:SocketServer
buildings	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> buildings; \/\/ base skill$/;"	m	class:CraftingStats
buildings	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> buildings; \/\/ base skill$/;"	m	class:CraftingStats
buisness	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> buisness; \/\/ Company management$/;"	m	class:SkillSet
buisness	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> buisness; \/\/ Company management$/;"	m	class:SkillSet
bushel	include/Eternia/constants.h	/^            const double bushel = 4.0*pecks;$/;"	m	namespace:physical::unit::British
bushel	include/Eternia/constants.h	/^            const double bushel = 4.0*pecks;$/;"	m	namespace:physical::unit::US
bushel	src/constants.h	/^            const double bushel = 4.0*pecks;$/;"	m	namespace:physical::unit::British
bushel	src/constants.h	/^            const double bushel = 4.0*pecks;$/;"	m	namespace:physical::unit::US
bushels	include/Eternia/constants.h	/^            const double bushels = bushel;$/;"	m	namespace:physical::unit::British
bushels	include/Eternia/constants.h	/^            const double bushels = bushel;$/;"	m	namespace:physical::unit::US
bushels	src/constants.h	/^            const double bushels = bushel;$/;"	m	namespace:physical::unit::British
bushels	src/constants.h	/^            const double bushels = bushel;$/;"	m	namespace:physical::unit::US
bytesize	include/Eternia/Data/Protect/PType.hpp	/^    char bytesize;$/;"	m	class:PType
bytesize	src/Data/Protect/PType.hpp	/^    char bytesize;$/;"	m	class:PType
c	include/Eternia/constants.h	/^        const double c = 2.99792458e8*meters\/second;$/;"	m	namespace:physical::constant
c	src/constants.h	/^        const double c = 2.99792458e8*meters\/second;$/;"	m	namespace:physical::constant
cable_length	include/Eternia/constants.h	/^            const double cable_length = 100.0*fathoms;$/;"	m	namespace:physical::unit::British
cable_length	include/Eternia/constants.h	/^            const double cable_length = 120.0*fathoms;$/;"	m	namespace:physical::unit::US
cable_length	src/constants.h	/^            const double cable_length = 100.0*fathoms;$/;"	m	namespace:physical::unit::British
cable_length	src/constants.h	/^            const double cable_length = 120.0*fathoms;$/;"	m	namespace:physical::unit::US
cable_lengths	include/Eternia/constants.h	/^            const double cable_lengths = cable_length;$/;"	m	namespace:physical::unit::British
cable_lengths	include/Eternia/constants.h	/^            const double cable_lengths = cable_length;$/;"	m	namespace:physical::unit::US
cable_lengths	src/constants.h	/^            const double cable_lengths = cable_length;$/;"	m	namespace:physical::unit::British
cable_lengths	src/constants.h	/^            const double cable_lengths = cable_length;$/;"	m	namespace:physical::unit::US
cache	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBCacheMap *cache;$/;"	m	class:AbstractDBTable
cache	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        void cache(char* playername, P2PNode* l);$/;"	p	class:P2PNodeCache
cache	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBCacheMap *cache;$/;"	m	class:AbstractDBTable
cache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.cpp	/^void P2PNodeCache::cache(char* playername, P2PNode* l) {$/;"	f	class:P2PNodeCache
cache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        void cache(char* playername, P2PNode* l);$/;"	p	class:P2PNodeCache
cal	include/Eternia/constants.h	/^        const double cal = calorie;$/;"	m	namespace:physical::unit
cal	src/constants.h	/^        const double cal = calorie;$/;"	m	namespace:physical::unit
calcAvatarExp	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        double calcAvatarExp(Avatar* av); \/\/ calculate exp based on Avatar's stats.$/;"	p	class:Avatar
calcAvatarExp	src/Gamelogic/Avatar/Avatar.cpp	/^double Avatar::calcAvatarExp(Avatar* av) {$/;"	f	class:Avatar
calcAvatarExp	src/Gamelogic/Avatar/Avatar.h	/^        double calcAvatarExp(Avatar* av); \/\/ calculate exp based on Avatar's stats.$/;"	p	class:Avatar
calculus	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> calculus; \/\/ applied some integrals (includes diff-eq)$/;"	m	class:CraftingStats
calculus	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> calculus; \/\/ applied some integrals (includes diff-eq)$/;"	m	class:CraftingStats
call	include/Eternia/Emulation/MPU/msp430.h	/^        void call(unsigned int addr); \/\/ push twice and change PC$/;"	p	class:MSP430
call	src/Emulation/MPU/msp430.h	/^        void call(unsigned int addr); \/\/ push twice and change PC$/;"	p	class:MSP430
call	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::call(unsigned int addr) {} \/\/ push twice and change PC$/;"	f	class:MSP430
callDirectory	include/Eternia/Data/FileSystem.h	/^        void callDirectory(CharString location); \/\/ call directory (cd \/)$/;"	p	class:FileSystem
callDirectory	src/Data/FileSystem.cpp	/^void FileSystem::callDirectory(CharString location) {$/;"	f	class:FileSystem
callDirectory	src/Data/FileSystem.h	/^        void callDirectory(CharString location); \/\/ call directory (cd \/)$/;"	p	class:FileSystem
callEvent	include/Eternia/API/APIEventRegistry.h	/^    bool callEvent(CharString name, Event* event); \/\/ call an event, used by dev. Returns false if cancelled.$/;"	p	class:APIEventRegistry
callEvent	src/API/APIEventRegistry.cpp	/^bool APIEventRegistry::callEvent(CharString name, Event* event){$/;"	f	class:APIEventRegistry
callEvent	src/API/APIEventRegistry.h	/^    bool callEvent(CharString name, Event* event); \/\/ call an event, used by dev. Returns false if cancelled.$/;"	p	class:APIEventRegistry
calorie	include/Eternia/constants.h	/^        const double calorie = 4.1868*Joules;$/;"	m	namespace:physical::unit
calorie	src/constants.h	/^        const double calorie = 4.1868*Joules;$/;"	m	namespace:physical::unit
calories	include/Eternia/constants.h	/^        const double calories = calorie;$/;"	m	namespace:physical::unit
calories	src/constants.h	/^        const double calories = calorie;$/;"	m	namespace:physical::unit
cancelled	include/Eternia/Data/Events/Event.h	/^    bool cancelled;$/;"	m	class:Event
cancelled	src/Data/Events/Event.h	/^    bool cancelled;$/;"	m	class:Event
candela	include/Eternia/constants.h	/^        const double candela = 1.0;$/;"	m	namespace:physical::unit
candela	src/constants.h	/^        const double candela = 1.0;$/;"	m	namespace:physical::unit
candelas	include/Eternia/constants.h	/^        const double candelas = candela;$/;"	m	namespace:physical::unit
candelas	src/constants.h	/^        const double candelas = candela;$/;"	m	namespace:physical::unit
candle	include/Eternia/constants.h	/^            const double candle = 0.9*unit::candles;$/;"	m	namespace:physical::unit::Hefner
candle	include/Eternia/constants.h	/^        const double candle = 1.02*candelas;$/;"	m	namespace:physical::unit
candle	src/constants.h	/^            const double candle = 0.9*unit::candles;$/;"	m	namespace:physical::unit::Hefner
candle	src/constants.h	/^        const double candle = 1.02*candelas;$/;"	m	namespace:physical::unit
candles	include/Eternia/constants.h	/^            const double candles = candle;$/;"	m	namespace:physical::unit::Hefner
candles	include/Eternia/constants.h	/^        const double candles = candle;$/;"	m	namespace:physical::unit
candles	src/constants.h	/^            const double candles = candle;$/;"	m	namespace:physical::unit::Hefner
candles	src/constants.h	/^        const double candles = candle;$/;"	m	namespace:physical::unit
carat	include/Eternia/constants.h	/^            const double carat = gram\/5.0;$/;"	m	namespace:physical::unit::metric
carat	src/constants.h	/^            const double carat = gram\/5.0;$/;"	m	namespace:physical::unit::metric
carats	include/Eternia/constants.h	/^            const double carats = carat;$/;"	m	namespace:physical::unit::metric
carats	src/constants.h	/^            const double carats = carat;$/;"	m	namespace:physical::unit::metric
cast	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    void cast();$/;"	p	class:Skill
cast	src/Gamelogic/Avatar/Skills/Skill.h	/^    void cast();$/;"	p	class:Skill
castTime	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    double castTime;$/;"	m	class:Skill
castTime	src/Gamelogic/Avatar/Skills/Skill.h	/^    double castTime;$/;"	m	class:Skill
categorizer	include/Eternia/Data/DoubleList.h	/^        double* categorizer;$/;"	m	class:DoubleList
categorizer	include/Eternia/Data/IntegerList.h	/^        int* categorizer;$/;"	m	class:IntegerList
categorizer	src/Data/DoubleList.h	/^        double* categorizer;$/;"	m	class:DoubleList
categorizer	src/Data/IntegerList.h	/^        int* categorizer;$/;"	m	class:IntegerList
cauchySchwarzInequality	include/Eternia/Math/struct/vertex.h	/^    bool cauchySchwarzInequality(vertex v); \/\/ abs(dot(u,v)) <= length(u)*length(v)$/;"	p	class:vertex
cauchySchwarzInequality	src/Math/struct/vertex.cpp	/^bool vertex::cauchySchwarzInequality(vertex v) {$/;"	f	class:vertex
cauchySchwarzInequality	src/Math/struct/vertex.h	/^    bool cauchySchwarzInequality(vertex v); \/\/ abs(dot(u,v)) <= length(u)*length(v)$/;"	p	class:vertex
cc	include/Eternia/constants.h	/^        const double cc = milliliter;$/;"	m	namespace:physical::unit
cc	src/constants.h	/^        const double cc = milliliter;$/;"	m	namespace:physical::unit
cd	include/Eternia/constants.h	/^        const double cd = candela;$/;"	m	namespace:physical::unit
cd	src/constants.h	/^        const double cd = candela;$/;"	m	namespace:physical::unit
cells	include/Eternia/Gamelogic/Avatar/Disease.h	/^        PType<double> cells; \/\/ if living contagion$/;"	m	class:Disease
cells	src/Gamelogic/Avatar/Disease.h	/^        PType<double> cells; \/\/ if living contagion$/;"	m	class:Disease
cent	include/Eternia/constants.h	/^        const double cent = dollar\/100.0;$/;"	m	namespace:physical::unit
cent	src/constants.h	/^        const double cent = dollar\/100.0;$/;"	m	namespace:physical::unit
cental	include/Eternia/constants.h	/^        const double cental = 100.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
cental	src/constants.h	/^        const double cental = 100.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
centals	include/Eternia/constants.h	/^        const double centals = cental;$/;"	m	namespace:physical::unit
centals	src/constants.h	/^        const double centals = cental;$/;"	m	namespace:physical::unit
centesimal	include/Eternia/constants.h	/^            namespace centesimal {$/;"	n	namespace:physical::unit::arc
centesimal	src/constants.h	/^            namespace centesimal {$/;"	n	namespace:physical::unit::arc
centimeter	include/Eternia/constants.h	/^        const double centimeter = meters\/100.0;$/;"	m	namespace:physical::unit
centimeter	src/constants.h	/^        const double centimeter = meters\/100.0;$/;"	m	namespace:physical::unit
centimeters	include/Eternia/constants.h	/^        const double centimeters = centimeter;$/;"	m	namespace:physical::unit
centimeters	src/constants.h	/^        const double centimeters = centimeter;$/;"	m	namespace:physical::unit
cents	include/Eternia/constants.h	/^        const double cents = cent;$/;"	m	namespace:physical::unit
cents	src/constants.h	/^        const double cents = cent;$/;"	m	namespace:physical::unit
centuries	include/Eternia/constants.h	/^        const double centuries = century;$/;"	m	namespace:physical::unit
centuries	src/constants.h	/^        const double centuries = century;$/;"	m	namespace:physical::unit
century	include/Eternia/constants.h	/^        const double century = 100.0*years;$/;"	m	namespace:physical::unit
century	src/constants.h	/^        const double century = 100.0*years;$/;"	m	namespace:physical::unit
cfs	include/Eternia/constants.h	/^        const double cfs = foot*foot*foot\/second;$/;"	m	namespace:physical::unit
cfs	src/constants.h	/^        const double cfs = foot*foot*foot\/second;$/;"	m	namespace:physical::unit
ch	include/Eternia/constants.h	/^        const double ch = chain;$/;"	m	namespace:physical::unit
ch	src/constants.h	/^        const double ch = chain;$/;"	m	namespace:physical::unit
chain	include/Eternia/constants.h	/^            const double chain = 100.0*feet;$/;"	m	namespace:physical::unit::engineers
chain	include/Eternia/constants.h	/^            const double chain = unit::chain;$/;"	m	namespace:physical::unit::Gunters
chain	include/Eternia/constants.h	/^        const double chain = 4.0*rods;$/;"	m	namespace:physical::unit
chain	src/constants.h	/^            const double chain = 100.0*feet;$/;"	m	namespace:physical::unit::engineers
chain	src/constants.h	/^            const double chain = unit::chain;$/;"	m	namespace:physical::unit::Gunters
chain	src/constants.h	/^        const double chain = 4.0*rods;$/;"	m	namespace:physical::unit
chains	include/Eternia/constants.h	/^            const double chains = chain;$/;"	m	namespace:physical::unit::Gunters
chains	include/Eternia/constants.h	/^            const double chains = chain;$/;"	m	namespace:physical::unit::engineers
chains	include/Eternia/constants.h	/^        const double chains = chain;$/;"	m	namespace:physical::unit
chains	src/constants.h	/^            const double chains = chain;$/;"	m	namespace:physical::unit::Gunters
chains	src/constants.h	/^            const double chains = chain;$/;"	m	namespace:physical::unit::engineers
chains	src/constants.h	/^        const double chains = chain;$/;"	m	namespace:physical::unit
challengeKey	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    void challengeKey(CharString passcode); \/\/ Challenge the key, user entering PIN$/;"	p	class:Account
challengeKey	src/Gamelogic/Economics/Banking/Account.h	/^    void challengeKey(CharString passcode); \/\/ Challenge the key, user entering PIN$/;"	p	class:Account
changed	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        bool changed;$/;"	m	class:AbstractDBLinkedDataset
changed	include/Eternia/Data/LinkedList.hpp	/^    bool changed; \/\/ used with freezing to help keep better performance$/;"	m	class:LinkedList
changed	include/Eternia/Data/Protect/PType.hpp	/^    bool changed;$/;"	m	class:PType
changed	src/Data/AbstractDatabase/AbstractDB.h	/^        bool changed;$/;"	m	class:AbstractDBLinkedDataset
changed	src/Data/LinkedList.hpp	/^    bool changed; \/\/ used with freezing to help keep better performance$/;"	m	class:LinkedList
changed	src/Data/Protect/PType.hpp	/^    bool changed;$/;"	m	class:PType
channelcolor	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        vertex channelcolor;$/;"	m	class:ChatChannel
channelcolor	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        vertex channelcolor;$/;"	m	class:ChatChannel
channels	include/Eternia/WebFramework/Network/ChannelledClient.h	/^    PacketChannel channels[65536];$/;"	m	class:ChannelledClient
channels	src/WebFramework/Network/ChannelledClient.h	/^    PacketChannel channels[65536];$/;"	m	class:ChannelledClient
chatspeed	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        int chatspeed; \/\/ how often can somebody chat in this channel? (milliseconds)$/;"	m	class:ChatChannel
chatspeed	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        int chatspeed; \/\/ how often can somebody chat in this channel? (milliseconds)$/;"	m	class:ChatChannel
checkFileExistence	src/Parsing/LoadFile.cpp	/^bool checkFileExistence(const char* filename) {$/;"	f
checksum	include/Eternia/Serialization/SpecificSerializer.h	/^    uint32_t checksum(); \/\/ XOR. do a checksum, useful for detecting if the class needs to be updated from a server$/;"	p	class:SpecificSerializer
checksum	src/Serialization/SpecificSerializer.cpp	/^uint32_t SpecificSerializer::checksum() {$/;"	f	class:SpecificSerializer
checksum	src/Serialization/SpecificSerializer.h	/^    uint32_t checksum(); \/\/ XOR. do a checksum, useful for detecting if the class needs to be updated from a server$/;"	p	class:SpecificSerializer
checksumCompare	include/Eternia/Serialization/SpecificSerializer.h	/^    bool checksumCompare(uint32_t other_checksum); \/\/ compares the checksum with the current class$/;"	p	class:SpecificSerializer
checksumCompare	src/Serialization/SpecificSerializer.cpp	/^bool SpecificSerializer::checksumCompare(uint32_t other_checksum) {$/;"	f	class:SpecificSerializer
checksumCompare	src/Serialization/SpecificSerializer.h	/^    bool checksumCompare(uint32_t other_checksum); \/\/ compares the checksum with the current class$/;"	p	class:SpecificSerializer
checksumCompareId	include/Eternia/Serialization/SpecificSerializer.h	/^    bool checksumCompareId(int id, uint32_t otherid);$/;"	p	class:SpecificSerializer
checksumCompareId	src/Serialization/SpecificSerializer.cpp	/^bool SpecificSerializer::checksumCompareId(int id, uint32_t other_checksum){$/;"	f	class:SpecificSerializer
checksumCompareId	src/Serialization/SpecificSerializer.h	/^    bool checksumCompareId(int id, uint32_t otherid);$/;"	p	class:SpecificSerializer
checksumId	include/Eternia/Serialization/SpecificSerializer.h	/^    uint32_t checksumId(int id);$/;"	p	class:SpecificSerializer
checksumId	src/Serialization/SpecificSerializer.cpp	/^uint32_t SpecificSerializer::checksumId(int id){$/;"	f	class:SpecificSerializer
checksumId	src/Serialization/SpecificSerializer.h	/^    uint32_t checksumId(int id);$/;"	p	class:SpecificSerializer
chemistry	include/Eternia/constants.h	/^namespace chemistry {$/;"	n
chemistry	src/constants.h	/^namespace chemistry {$/;"	n
chemistry::mass	include/Eternia/constants.h	/^    namespace mass {$/;"	n	namespace:chemistry
chemistry::mass	src/constants.h	/^    namespace mass {$/;"	n	namespace:chemistry
chemistry::mass::electron	include/Eternia/constants.h	/^        const double electron = 9.10938188e-31;$/;"	m	namespace:chemistry::mass
chemistry::mass::electron	src/constants.h	/^        const double electron = 9.10938188e-31;$/;"	m	namespace:chemistry::mass
chemistry::mass::neutron	include/Eternia/constants.h	/^        const double neutron = 1.672621777e-27;$/;"	m	namespace:chemistry::mass
chemistry::mass::neutron	src/constants.h	/^        const double neutron = 1.672621777e-27;$/;"	m	namespace:chemistry::mass
chemistry::mass::proton	include/Eternia/constants.h	/^        const double proton = 1.672621777e-27;$/;"	m	namespace:chemistry::mass
chemistry::mass::proton	src/constants.h	/^        const double proton = 1.672621777e-27;$/;"	m	namespace:chemistry::mass
childBranch	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        TreeBranch *childBranch;$/;"	m	class:TreeBranch
childBranch	src/Gamelogic/Environment/Object/Tree.h	/^        TreeBranch *childBranch;$/;"	m	class:TreeBranch
children	include/Eternia/Design/LayoutObject.h	/^        LinkedList<LayoutObject> *children; \/\/ children$/;"	m	class:LayoutObject
children	src/Design/LayoutObject.h	/^        LinkedList<LayoutObject> *children; \/\/ children$/;"	m	class:LayoutObject
circular_inch	include/Eternia/constants.h	/^        const double circular_inch = 0.25*pi*inch*inch;$/;"	m	namespace:physical::unit
circular_inch	src/constants.h	/^        const double circular_inch = 0.25*pi*inch*inch;$/;"	m	namespace:physical::unit
circular_inches	include/Eternia/constants.h	/^        const double circular_inches = circular_inch;$/;"	m	namespace:physical::unit
circular_inches	src/constants.h	/^        const double circular_inches = circular_inch;$/;"	m	namespace:physical::unit
circular_mil	include/Eternia/constants.h	/^        const double circular_mil = 0.25*pi*mil*mil;$/;"	m	namespace:physical::unit
circular_mil	src/constants.h	/^        const double circular_mil = 0.25*pi*mil*mil;$/;"	m	namespace:physical::unit
circular_mils	include/Eternia/constants.h	/^        const double circular_mils = circular_mil;$/;"	m	namespace:physical::unit
circular_mils	src/constants.h	/^        const double circular_mils = circular_mil;$/;"	m	namespace:physical::unit
citizens	include/Eternia/Gamelogic/Social/Government/Government.h	/^        LinkedList<Citizen> citizens; \/\/ list of citizens living in this government (Effectively online)$/;"	m	class:Government
citizens	src/Gamelogic/Social/Government/Government.h	/^        LinkedList<Citizen> citizens; \/\/ list of citizens living in this government (Effectively online)$/;"	m	class:Government
classChecksum	include/Eternia/Serialization/BasicSerializer.h	/^        long classChecksum(); \/\/ do a checksum, useful for detecting if the class needs to be updated$/;"	p	class:BasicSerializer
classChecksum	include/Eternia/Serialization/BasicSerializer.h	/^    long classChecksum(void* object, int size);$/;"	p	namespace:BasicSerialize
classChecksum	src/Serialization/BasicSerializer.cpp	/^    long classChecksum(void* object, int size) {$/;"	f	namespace:BasicSerialize
classChecksum	src/Serialization/BasicSerializer.cpp	/^long BasicSerializer::classChecksum() {$/;"	f	class:BasicSerializer
classChecksum	src/Serialization/BasicSerializer.h	/^        long classChecksum(); \/\/ do a checksum, useful for detecting if the class needs to be updated$/;"	p	class:BasicSerializer
classChecksum	src/Serialization/BasicSerializer.h	/^    long classChecksum(void* object, int size);$/;"	p	namespace:BasicSerialize
classLoc	include/Eternia/Serialization/BasicSerializer.h	/^        void* classLoc;$/;"	m	class:BasicSerializer
classLoc	src/Serialization/BasicSerializer.h	/^        void* classLoc;$/;"	m	class:BasicSerializer
classSize	include/Eternia/Serialization/BasicSerializer.h	/^        int classSize;$/;"	m	class:BasicSerializer
classSize	include/Eternia/Serialization/SpecificSerializer.h	/^        int classSize;$/;"	m	class:PointerType
classSize	src/Serialization/BasicSerializer.h	/^        int classSize;$/;"	m	class:BasicSerializer
classSize	src/Serialization/SpecificSerializer.h	/^        int classSize;$/;"	m	class:PointerType
classType	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    SKCLASS classType;$/;"	m	class:Skill
classType	src/Gamelogic/Avatar/Skills/Skill.h	/^    SKCLASS classType;$/;"	m	class:Skill
clean	include/Eternia/Data/FileCache.hpp	/^        void clean() {$/;"	f	class:FileCache
clean	src/Data/FileCache.hpp	/^        void clean() {$/;"	f	class:FileCache
clear	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    void clear(){$/;"	f	class:ConcurrentLinkedList
clear	include/Eternia/Data/DoubleList.h	/^        void clear();$/;"	p	class:DoubleList
clear	include/Eternia/Data/IntegerList.h	/^        void clear();$/;"	p	class:IntegerList
clear	include/Eternia/Data/LinkedList.hpp	/^    void clear() {$/;"	f	class:LinkedList
clear	include/Eternia/Data/LinkedMap.h	/^        void clear();$/;"	p	class:LinkedMap
clear	include/Eternia/Data/SplitResult.h	/^        void clear(); \/\/ used when a ridiculous number of splitresults will be required$/;"	p	class:SplitResult
clear	src/Data/ConcurrentLinkedList.hpp	/^    void clear(){$/;"	f	class:ConcurrentLinkedList
clear	src/Data/DoubleList.cpp	/^void DoubleList::clear() {$/;"	f	class:DoubleList
clear	src/Data/DoubleList.h	/^        void clear();$/;"	p	class:DoubleList
clear	src/Data/IntegerList.cpp	/^void IntegerList::clear() {$/;"	f	class:IntegerList
clear	src/Data/IntegerList.h	/^        void clear();$/;"	p	class:IntegerList
clear	src/Data/LinkedList.hpp	/^    void clear() {$/;"	f	class:LinkedList
clear	src/Data/LinkedMap.cpp	/^void LinkedMap::clear() {$/;"	f	class:LinkedMap
clear	src/Data/LinkedMap.h	/^        void clear();$/;"	p	class:LinkedMap
clear	src/Data/SplitResult.cpp	/^void SplitResult::clear() {$/;"	f	class:SplitResult
clear	src/Data/SplitResult.h	/^        void clear(); \/\/ used when a ridiculous number of splitresults will be required$/;"	p	class:SplitResult
clearAll	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void clearAll(); \/\/ removes all of the elements from the list$/;"	p	class:AbstractDBLinkedDataset
clearAll	include/Eternia/Data/PriorityQueue.h	/^        void clearAll(); \/\/ clear all items$/;"	p	class:PriorityQueue
clearAll	src/Data/AbstractDatabase/AbstractDB.h	/^        void clearAll(); \/\/ removes all of the elements from the list$/;"	p	class:AbstractDBLinkedDataset
clearAll	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void AbstractDBLinkedDataset::clearAll() {$/;"	f	class:AbstractDBLinkedDataset
clearAll	src/Data/PriorityQueue.cpp	/^void PriorityQueue::clearAll() {$/;"	f	class:PriorityQueue
clearAll	src/Data/PriorityQueue.h	/^        void clearAll(); \/\/ clear all items$/;"	p	class:PriorityQueue
clearCache	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void clearCache();$/;"	p	class:AbstractDBCacheMap
clearCache	src/Data/AbstractDatabase/AbstractDB.h	/^        void clearCache();$/;"	p	class:AbstractDBCacheMap
clearCache	src/Data/AbstractDatabase/AbstractDBCacheMap.cpp	/^void AbstractDBCacheMap::clearCache() {$/;"	f	class:AbstractDBCacheMap
clearChildren	include/Eternia/Design/LayoutObject.h	/^        public void clearChildren();                    \/\/ clears all children$/;"	p	class:LayoutObject
clearChildren	src/Design/LayoutObject.h	/^        public void clearChildren();                    \/\/ clears all children$/;"	p	class:LayoutObject
clearEvents	include/Eternia/Data/Events/EventHandler.h	/^        void clearEvents(); \/\/ clear all objects$/;"	p	class:EventHandler
clearEvents	src/Data/Events/EventHandler.cpp	/^void EventHandler::clearEvents() {$/;"	f	class:EventHandler
clearEvents	src/Data/Events/EventHandler.h	/^        void clearEvents(); \/\/ clear all objects$/;"	p	class:EventHandler
clearFreeze	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void clearFreeze();$/;"	p	class:AbstractDBLinkedDataset
clearFreeze	src/Data/AbstractDatabase/AbstractDB.h	/^        void clearFreeze();$/;"	p	class:AbstractDBLinkedDataset
clearFreeze	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void AbstractDBLinkedDataset::clearFreeze() {$/;"	f	class:AbstractDBLinkedDataset
clearRow	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void clearRow();$/;"	p	class:AbstractDBRow
clearRow	src/Data/AbstractDatabase/AbstractDB.h	/^        void clearRow();$/;"	p	class:AbstractDBRow
clearRow	src/Data/AbstractDatabase/AbstractDBRow.cpp	/^void AbstractDBRow::clearRow() {$/;"	f	class:AbstractDBRow
clearSamples	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void clearSamples();$/;"	p	class:TimeSignal
clearSamples	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void clearSamples();$/;"	p	class:TimeSignal
clearSerial	include/Eternia/Serialization/SpecificSerializer.h	/^    void clearSerial();$/;"	p	class:SpecificSerializer
clearSerial	src/Serialization/SpecificSerializer.cpp	/^void SpecificSerializer::clearSerial(){$/;"	f	class:SpecificSerializer
clearSerial	src/Serialization/SpecificSerializer.h	/^    void clearSerial();$/;"	p	class:SpecificSerializer
cli_addr	include/Eternia/WebFramework/Network/SockClient.h	/^        sockaddr_in cli_addr;$/;"	m	class:SockClient
cli_addr	src/WebFramework/Network/SockClient.h	/^        sockaddr_in cli_addr;$/;"	m	class:SockClient
client	include/Eternia/WebFramework/Network/PacketChannel.h	/^    SockClient client;$/;"	m	class:PacketChannel
client	src/WebFramework/Network/PacketChannel.h	/^    SockClient client;$/;"	m	class:PacketChannel
clients	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PNode* clients; \/\/ E-Client player, Potential node.$/;"	m	class:P2PLServer
clients	include/Eternia/WebFramework/Network/SocketServer.h	/^    LinkedList<SockClient> clients;$/;"	m	class:SocketServer
clients	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PNode* clients; \/\/ E-Client player, Potential node.$/;"	m	class:P2PLServer
clients	src/WebFramework/Network/SocketServer.h	/^    LinkedList<SockClient> clients;$/;"	m	class:SocketServer
clientthread	include/Eternia/WebFramework/Network/SockClient.h	/^        std::thread clientthread;$/;"	m	class:SockClient
clientthread	src/WebFramework/Network/SockClient.h	/^        std::thread clientthread;$/;"	m	class:SockClient
clilen	include/Eternia/WebFramework/Network/SocketServer.h	/^    socklen_t clilen;$/;"	m	class:SocketServer
clilen	src/WebFramework/Network/SocketServer.h	/^    socklen_t clilen;$/;"	m	class:SocketServer
clone	include/Eternia/Data/CharString.h	/^        CharString clone(); \/\/ creates a clone!$/;"	p	class:CharString
clone	include/Eternia/Emulation/SecondTick.h	/^        SecondTick* clone(); \/\/ clone this$/;"	p	class:SecondTick
clone	include/Eternia/Math/struct/Matrix.h	/^    virtual Matrix* clone();$/;"	p	class:Matrix
clone	include/Eternia/Math/struct/VectorSpace.h	/^        virtual VectorSpace* clone();$/;"	p	class:VectorSpace
clone	src/Data/CharString.cpp	/^CharString CharString::clone() {$/;"	f	class:CharString
clone	src/Data/CharString.h	/^        CharString clone(); \/\/ creates a clone!$/;"	p	class:CharString
clone	src/Emulation/SecondTick.cpp	/^SecondTick* SecondTick::clone() {$/;"	f	class:SecondTick
clone	src/Emulation/SecondTick.h	/^        SecondTick* clone(); \/\/ clone this$/;"	p	class:SecondTick
clone	src/Math/struct/Matrix.cpp	/^Matrix* Matrix::clone() {$/;"	f	class:Matrix
clone	src/Math/struct/Matrix.h	/^    virtual Matrix* clone();$/;"	p	class:Matrix
clone	src/Math/struct/VectorSpace.cpp	/^VectorSpace* VectorSpace::clone() {$/;"	f	class:VectorSpace
clone	src/Math/struct/VectorSpace.h	/^        virtual VectorSpace* clone();$/;"	p	class:VectorSpace
cm	include/Eternia/constants.h	/^        const double cm = centimeter;$/;"	m	namespace:physical::unit
cm	src/constants.h	/^        const double cm = centimeter;$/;"	m	namespace:physical::unit
colSolve	include/Eternia/Math/struct/Matrix.h	/^    void colSolve(double scalar, int col, int toCool); \/\/ solves a single column using a scaled column.$/;"	p	class:Matrix
colSolve	src/Math/struct/Matrix.cpp	/^void Matrix::colSolve(double scalar, int col, int toCool) {$/;"	f	class:Matrix
colSolve	src/Math/struct/Matrix.h	/^    void colSolve(double scalar, int col, int toCool); \/\/ solves a single column using a scaled column.$/;"	p	class:Matrix
collides	include/Eternia/Data/HashMap.hpp	/^        int collides,size; \/\/ for use with hashmap debugging.$/;"	m	class:HashMap
collides	include/Eternia/Data/HashTable.h	/^        int collides;$/;"	m	class:HashTable
collides	src/Data/HashMap.hpp	/^        int collides,size; \/\/ for use with hashmap debugging.$/;"	m	class:HashMap
collides	src/Data/HashTable.h	/^        int collides;$/;"	m	class:HashTable
colonySet	include/Eternia/Gamelogic/NanoRobotics/NanoRobots.h	/^        double colonySet; \/\/ Unique ID number set into each Nano.$/;"	m	class:NanoRobots
colonySet	src/Gamelogic/NanoRobotics/NanoRobots.h	/^        double colonySet; \/\/ Unique ID number set into each Nano.$/;"	m	class:NanoRobots
color	include/Eternia/Engineering/Chemistry/Atom.h	/^        vertex color;$/;"	m	class:Atom
color	include/Eternia/Engineering/Chemistry/Ore.h	/^        vertex* color; \/\/ color of this ore$/;"	m	class:Ore
color	src/Engineering/Chemistry/Atom.h	/^        vertex color;$/;"	m	class:Atom
color	src/Engineering/Chemistry/Ore.h	/^        vertex* color; \/\/ color of this ore$/;"	m	class:Ore
columns	include/Eternia/Math/struct/Matrix.h	/^    int columns, rows; \/\/ columns, rows$/;"	m	class:Matrix
columns	src/Math/struct/Matrix.h	/^    int columns, rows; \/\/ columns, rows$/;"	m	class:Matrix
combineOperators	src/Math/Eval.cpp	/^MOperator combineOperators(MOperator o1, MOperator o2) {$/;"	f
command	include/Eternia/Gamelogic/AI/AIDecide.h	/^        void command(); \/\/ AI will command squad or group$/;"	p	class:AIDecide
command	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> command; \/\/ ability to command with prestiege$/;"	m	class:SkillSet
command	src/Gamelogic/AI/AIDecide.h	/^        void command(); \/\/ AI will command squad or group$/;"	p	class:AIDecide
command	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> command; \/\/ ability to command with prestiege$/;"	m	class:SkillSet
comp_a	include/Eternia/Engineering/Electrical/Wire.h	/^        Component* comp_a; \/\/ First component$/;"	m	class:Wire
comp_a	src/Engineering/Electrical/Wire.h	/^        Component* comp_a; \/\/ First component$/;"	m	class:Wire
comp_b	include/Eternia/Engineering/Electrical/Wire.h	/^        Component* comp_b; \/\/ Second component$/;"	m	class:Wire
comp_b	src/Engineering/Electrical/Wire.h	/^        Component* comp_b; \/\/ Second component$/;"	m	class:Wire
companyStock	include/Eternia/Gamelogic/Social/Company/Company.h	/^        BaseStock companyStock;$/;"	m	class:Company
companyStock	src/Gamelogic/Social/Company/Company.h	/^        BaseStock companyStock;$/;"	m	class:Company
compareVars	include/Eternia/Programming/Program.h	/^        bool compareVars(VProgramNode* node);$/;"	p	class:Program
compareVars	src/Programming/Program.h	/^        bool compareVars(VProgramNode* node);$/;"	p	class:Program
compareVars	src/Programming/Visual/VisualProgram.cpp	/^bool Program::compareVars(VProgramNode* node) {$/;"	f	class:Program
compile	include/Eternia/API/APIMod.h	/^	virtual void compile(); \/\/ compileable languages can be dynamically compiled, others will just run a check$/;"	p	class:APIMod
compile	src/API/APIMod.cpp	/^void APIMod::compile(){$/;"	f	class:APIMod
compile	src/API/APIMod.h	/^	virtual void compile(); \/\/ compileable languages can be dynamically compiled, others will just run a check$/;"	p	class:APIMod
compile128	include/Eternia/Programming/Instruction.h	/^    CharString compile128(); \/\/ compile this Instruction for 128-bit$/;"	p	class:Instruction
compile128	src/Programming/Instruction.h	/^    CharString compile128(); \/\/ compile this Instruction for 128-bit$/;"	p	class:Instruction
compile16	include/Eternia/Programming/Instruction.h	/^    CharString compile16(); \/\/ compile this Instruction for 16-bit$/;"	p	class:Instruction
compile16	src/Programming/Instruction.h	/^    CharString compile16(); \/\/ compile this Instruction for 16-bit$/;"	p	class:Instruction
compile256	include/Eternia/Programming/Instruction.h	/^    CharString compile256(); \/\/ compile this Instruction for 256-bit$/;"	p	class:Instruction
compile256	src/Programming/Instruction.h	/^    CharString compile256(); \/\/ compile this Instruction for 256-bit$/;"	p	class:Instruction
compile32	include/Eternia/Programming/Instruction.h	/^    CharString compile32(); \/\/ compile this Instruction for 32-bit$/;"	p	class:Instruction
compile32	src/Programming/Instruction.h	/^    CharString compile32(); \/\/ compile this Instruction for 32-bit$/;"	p	class:Instruction
compile64	include/Eternia/Programming/Instruction.h	/^    CharString compile64(); \/\/ compile this Instruction for 64-bit$/;"	p	class:Instruction
compile64	src/Programming/Instruction.h	/^    CharString compile64(); \/\/ compile this Instruction for 64-bit$/;"	p	class:Instruction
compile8	include/Eternia/Programming/Instruction.h	/^    CharString compile8(); \/\/ compile this Instruction for 8-bit$/;"	p	class:Instruction
compile8	src/Programming/Instruction.h	/^    CharString compile8(); \/\/ compile this Instruction for 8-bit$/;"	p	class:Instruction
componentList	include/Eternia/Engineering/Electrical/Circuit.h	/^        LinkedList<Component>* componentList;$/;"	m	class:Circuit
componentList	src/Engineering/Electrical/Circuit.h	/^        LinkedList<Component>* componentList;$/;"	m	class:Circuit
compress	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    CharString compress(CharString input);$/;"	p	class:BasicCompressor
compress	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        void compress(); \/\/ compress data stores$/;"	p	class:P2PDataServer
compress	src/Algorithm/Compression/BasicCompressor.h	/^    CharString compress(CharString input);$/;"	p	class:BasicCompressor
compress	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        void compress(); \/\/ compress data stores$/;"	p	class:P2PDataServer
compute	include/Eternia/Engineering/Physics/Work.h	/^        double compute(); \/\/ Compute the energy of the system$/;"	p	class:Work
compute	src/Engineering/Physics/Work.cpp	/^double Work::compute() {$/;"	f	class:Work
compute	src/Engineering/Physics/Work.h	/^        double compute(); \/\/ Compute the energy of the system$/;"	p	class:Work
computeEnergy	include/Eternia/Engineering/Physics/Work.h	/^        double computeEnergy(); \/\/ solve for the total energy$/;"	p	class:EnergyValue
computeEnergy	src/Engineering/Physics/Work.h	/^        double computeEnergy(); \/\/ solve for the total energy$/;"	p	class:EnergyValue
computer_science	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> computer_science; \/\/ Ability to program and to logically adapt new virtualization designs (EterniaGame is a super-computer)$/;"	m	class:CraftingStats
computer_science	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> computer_science; \/\/ Ability to program and to logically adapt new virtualization designs (EterniaGame is a super-computer)$/;"	m	class:CraftingStats
concata	include/Eternia/Data/CharString.h	/^        void concata(CharString str); \/\/Combine CharStrings after the current charString.$/;"	p	class:CharString
concata	include/Eternia/Data/CharString.h	/^        void concata(char* str, int len);$/;"	p	class:CharString
concata	src/Data/CharString.cpp	/^void CharString::concata(CharString str) {$/;"	f	class:CharString
concata	src/Data/CharString.cpp	/^void CharString::concata(char* str, int lenx) {$/;"	f	class:CharString
concata	src/Data/CharString.h	/^        void concata(CharString str); \/\/Combine CharStrings after the current charString.$/;"	p	class:CharString
concata	src/Data/CharString.h	/^        void concata(char* str, int len);$/;"	p	class:CharString
concata_	include/Eternia/Data/CharString.h	/^        void concata_(const char* str, const int lenx);$/;"	p	class:CharString
concata_	src/Data/CharString.cpp	/^void CharString::concata_(const char* str, const int lenx) {$/;"	f	class:CharString
concata_	src/Data/CharString.h	/^        void concata_(const char* str, const int lenx);$/;"	p	class:CharString
concatb	include/Eternia/Data/CharString.h	/^        void concatb(CharString str);  \/\/Combine CharStrings before the current charString.$/;"	p	class:CharString
concatb	include/Eternia/Data/CharString.h	/^        void concatb(char* str, int len);$/;"	p	class:CharString
concatb	src/Data/CharString.cpp	/^void CharString::concatb(CharString str) {$/;"	f	class:CharString
concatb	src/Data/CharString.cpp	/^void CharString::concatb(char* str, int lenx) {$/;"	f	class:CharString
concatb	src/Data/CharString.h	/^        void concatb(CharString str);  \/\/Combine CharStrings before the current charString.$/;"	p	class:CharString
concatb	src/Data/CharString.h	/^        void concatb(char* str, int len);$/;"	p	class:CharString
conductorMaterial	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        Atom* conductorMaterial; \/\/ material that this is made of$/;"	m	class:ComponentRating
conductorMaterial	src/Engineering/Electrical/Components/ComponentRating.h	/^        Atom* conductorMaterial; \/\/ material that this is made of$/;"	m	class:ComponentRating
connectP2PLServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        P2PLClient connectP2PLServer(P2PNode server);$/;"	p	class:P2PManager
connectP2PLServer	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        P2PLClient connectP2PLServer(P2PNode server);$/;"	p	class:P2PManager
console	include/Eternia/Data/Logger/Logger.h	/^    bool async, console, ending;$/;"	m	class:Logger
console	src/Data/Logger/Logger.h	/^    bool async, console, ending;$/;"	m	class:Logger
const_loops	include/Eternia/Programming/Visual/VProgramNode.h	/^        int const_loops; \/\/ number of times to loop if conditional$/;"	m	class:VProgramNode
const_loops	src/Programming/Visual/VProgramNode.h	/^        int const_loops; \/\/ number of times to loop if conditional$/;"	m	class:VProgramNode
constant	include/Eternia/constants.h	/^    namespace constant {$/;"	n	namespace:physical
constant	src/constants.h	/^    namespace constant {$/;"	n	namespace:physical
constants	include/Eternia/constants.h	/^    namespace constants = constant;$/;"	x
constants	src/constants.h	/^    namespace constants = constant;$/;"	x
constitution	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> constitution; \/\/ Health \/ Defense$/;"	m	class:SkillSet
constitution	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> constitution; \/\/ Health \/ Defense$/;"	m	class:SkillSet
construction	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> construction; \/\/ Creation of the physical world \/ Physics \/ Machining$/;"	m	class:SkillSet
construction	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> construction; \/\/ Creation of the physical world \/ Physics \/ Machining$/;"	m	class:SkillSet
cont	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        aes256_context cont;$/;"	m	class:CryptoDefiner
cont	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        aes256_context cont;$/;"	m	class:CryptoDefiner
contains	include/Eternia/Data/CharString.h	/^        bool contains(char* c); \/\/ does this string contain the single character 'c'?$/;"	p	class:CharString
contains	src/Data/CharString.cpp	/^bool CharString::contains(char* c) {$/;"	f	class:CharString
contains	src/Data/CharString.h	/^        bool contains(char* c); \/\/ does this string contain the single character 'c'?$/;"	p	class:CharString
coomb	include/Eternia/constants.h	/^        const double coomb = 4.0*US::bushels;$/;"	m	namespace:physical::unit
coomb	src/constants.h	/^        const double coomb = 4.0*US::bushels;$/;"	m	namespace:physical::unit
coombs	include/Eternia/constants.h	/^        const double coombs = coomb;$/;"	m	namespace:physical::unit
coombs	src/constants.h	/^        const double coombs = coomb;$/;"	m	namespace:physical::unit
cord	include/Eternia/constants.h	/^        const double cord = 128.0*(ft*ft*ft);$/;"	m	namespace:physical::unit
cord	src/constants.h	/^        const double cord = 128.0*(ft*ft*ft);$/;"	m	namespace:physical::unit
cordfeet	include/Eternia/constants.h	/^        const double cordfeet = cordfoot;$/;"	m	namespace:physical::unit
cordfeet	src/constants.h	/^        const double cordfeet = cordfoot;$/;"	m	namespace:physical::unit
cordfoot	include/Eternia/constants.h	/^        const double cordfoot = cord;$/;"	m	namespace:physical::unit
cordfoot	src/constants.h	/^        const double cordfoot = cord;$/;"	m	namespace:physical::unit
cords	include/Eternia/constants.h	/^        const double cords = cord;$/;"	m	namespace:physical::unit
cords	src/constants.h	/^        const double cords = cord;$/;"	m	namespace:physical::unit
core	include/Eternia/API/APIMod.h	/^    APICore* core; \/\/ Linked core$/;"	m	class:APIMod
core	src/API/APIMod.h	/^    APICore* core; \/\/ Linked core$/;"	m	class:APIMod
coreElement	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	Atom coreElement; \/\/ $/;"	m	class:Reactor
coreElement	src/Gamelogic/CoreSystems/Reactor.h	/^	Atom coreElement; \/\/ $/;"	m	class:Reactor
core_density	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	float core_density; \/\/ $/;"	m	class:Reactor
core_density	src/Gamelogic/CoreSystems/Reactor.h	/^	float core_density; \/\/ $/;"	m	class:Reactor
cos	include/Eternia/Math/Functions/Trig.h	/^    double cos(double); \/\/$/;"	p	namespace:Math
cos	src/Math/Functions/Trig.cpp	/^    double cos(double x) {$/;"	f	namespace:Math
cos	src/Math/Functions/Trig.h	/^    double cos(double); \/\/$/;"	p	namespace:Math
cosh	include/Eternia/Math/Functions/Trig.h	/^    double cosh(double);$/;"	p	namespace:Math
cosh	src/Math/Functions/Trig.cpp	/^    double cosh(double x) {$/;"	f	namespace:Math
cosh	src/Math/Functions/Trig.h	/^    double cosh(double);$/;"	p	namespace:Math
cosmetics	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> cosmetics; \/\/ makeup and hair beautification$/;"	m	class:SkillSet
cosmetics	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> cosmetics; \/\/ makeup and hair beautification$/;"	m	class:SkillSet
cost	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    double cost;$/;"	m	class:Skill
cost	src/Gamelogic/Avatar/Skills/Skill.h	/^    double cost;$/;"	m	class:Skill
count	include/Eternia/Algorithm/Cryptography/md5.h	/^        uint4 count[2];   \/\/ 64bit counter for number of bits (lo, hi)$/;"	m	class:MD5
count	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
count	src/Algorithm/Cryptography/md5.h	/^        uint4 count[2];   \/\/ 64bit counter for number of bits (lo, hi)$/;"	m	class:MD5
count	src/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
countBits	src/Algorithm/Cryptography/ExHash.cpp	/^int countBits(uint64_t maxVal) {$/;"	f
cpu	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^enum P2PTYPE {data,cpu,L,E};$/;"	e	enum:P2PTYPE
cpu	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^enum P2PTYPE {data,cpu,L,E};$/;"	e	enum:P2PTYPE
cpuid	src/asm/asm1.cpp	/^void cpuid(unsigned info, unsigned *eax, unsigned *ebx, unsigned *ecx, unsigned *edx) {$/;"	f
crafter	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        CharString crafter; \/\/ crafter name for equipment$/;"	m	class:DynamicEquip
crafter	src/Gamelogic/Inventory/DynamicEquip.h	/^        CharString crafter; \/\/ crafter name for equipment$/;"	m	class:DynamicEquip
crafting	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        CraftingStats crafting; \/\/ crafting stats$/;"	m	class:Avatar
crafting	src/Gamelogic/Avatar/Avatar.h	/^        CraftingStats crafting; \/\/ crafting stats$/;"	m	class:Avatar
createAdjMatrix	include/Eternia/Data/Graph.h	/^        void createAdjMatrix(); \/\/ Computes the adjacency Matrix for each vertex.$/;"	p	class:Graph
createAdjMatrix	src/Data/Graph.h	/^        void createAdjMatrix(); \/\/ Computes the adjacency Matrix for each vertex.$/;"	p	class:Graph
createEvent	include/Eternia/Data/Events/EventHandler.h	/^        EventHandle* createEvent(void (*func)(), unsigned long priority);$/;"	p	class:EventHandler
createEvent	include/Eternia/Data/Events/EventHandler.h	/^        EventHandle* createEvent(void (*func)(void*), unsigned long priority);$/;"	p	class:EventHandler
createEvent	include/Eternia/Data/Events/EventHandler.h	/^        EventHandle* createEvent(void (*func)(void*,void*), unsigned long priority);$/;"	p	class:EventHandler
createEvent	src/Data/Events/EventHandler.cpp	/^EventHandle* EventHandler::createEvent(void (*func)(), unsigned long priority) {$/;"	f	class:EventHandler
createEvent	src/Data/Events/EventHandler.cpp	/^EventHandle* EventHandler::createEvent(void (*func)(void*), unsigned long priority) {$/;"	f	class:EventHandler
createEvent	src/Data/Events/EventHandler.cpp	/^EventHandle* EventHandler::createEvent(void (*func)(void*,void*), unsigned long priority) {$/;"	f	class:EventHandler
createEvent	src/Data/Events/EventHandler.h	/^        EventHandle* createEvent(void (*func)(), unsigned long priority);$/;"	p	class:EventHandler
createEvent	src/Data/Events/EventHandler.h	/^        EventHandle* createEvent(void (*func)(void*), unsigned long priority);$/;"	p	class:EventHandler
createEvent	src/Data/Events/EventHandler.h	/^        EventHandle* createEvent(void (*func)(void*,void*), unsigned long priority);$/;"	p	class:EventHandler
createKey	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    double createKey(CharString passcode); \/\/ Create a key based on a passcode$/;"	p	class:Account
createKey	src/Gamelogic/Economics/Banking/Account.h	/^    double createKey(CharString passcode); \/\/ Create a key based on a passcode$/;"	p	class:Account
createMatrixContainer	include/Eternia/Math/struct/Matrix.h	/^    static double** createMatrixContainer(const int x, const int y);$/;"	p	class:Matrix
createMatrixContainer	src/Math/struct/Matrix.cpp	/^double** Matrix::createMatrixContainer(const int x, const int y) {$/;"	f	class:Matrix
createMatrixContainer	src/Math/struct/Matrix.h	/^    static double** createMatrixContainer(const int x, const int y);$/;"	p	class:Matrix
crew_deck	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> crew_deck; \/\/ improves how many men ship can hold and$/;"	m	class:CraftingStats
crew_deck	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> crew_deck; \/\/ improves how many men ship can hold and$/;"	m	class:CraftingStats
crith	include/Eternia/constants.h	/^        const double crith = 0.0906*grams;$/;"	m	namespace:physical::unit
crith	src/constants.h	/^        const double crith = 0.0906*grams;$/;"	m	namespace:physical::unit
criths	include/Eternia/constants.h	/^        const double criths = crith;$/;"	m	namespace:physical::unit
criths	src/constants.h	/^        const double criths = crith;$/;"	m	namespace:physical::unit
cross	include/Eternia/Math/struct/vertex.h	/^    vertex cross(vertex v2); \/\/ Cross-product$/;"	p	class:vertex
cross	src/Math/struct/vertex.cpp	/^vertex vertex::cross(vertex v2) {$/;"	f	class:vertex
cross	src/Math/struct/vertex.h	/^    vertex cross(vertex v2); \/\/ Cross-product$/;"	p	class:vertex
csClientHandler	src/WebFramework/Network/ChannelledServer.cpp	/^void csClientHandler(CharString* dataIn, CharString* dataOut, void* instance){$/;"	f
ctx	include/Eternia/Parsing/SecuredParser.h	/^        aes256_context ctx;$/;"	m	class:SecuredParser
ctx	src/Parsing/SecuredParser.h	/^        aes256_context ctx;$/;"	m	class:SecuredParser
ctype	include/Eternia/Programming/Visual/VProgramNode.h	/^        PCondCompare ctype; \/\/ Comparison type, for if\/else statements$/;"	m	class:VProgramNode
ctype	src/Programming/Visual/VProgramNode.h	/^        PCondCompare ctype; \/\/ Comparison type, for if\/else statements$/;"	m	class:VProgramNode
cubit	include/Eternia/constants.h	/^        const double cubit = 18.0*inches;$/;"	m	namespace:physical::unit
cubit	src/constants.h	/^        const double cubit = 18.0*inches;$/;"	m	namespace:physical::unit
cubits	include/Eternia/constants.h	/^        const double cubits = cubit;$/;"	m	namespace:physical::unit
cubits	src/constants.h	/^        const double cubits = cubit;$/;"	m	namespace:physical::unit
cup	include/Eternia/constants.h	/^        const double cup = 8.0*US::liquid::ounces;$/;"	m	namespace:physical::unit
cup	src/constants.h	/^        const double cup = 8.0*US::liquid::ounces;$/;"	m	namespace:physical::unit
cups	include/Eternia/constants.h	/^        const double cups = cup;$/;"	m	namespace:physical::unit
cups	src/constants.h	/^        const double cups = cup;$/;"	m	namespace:physical::unit
current	include/Eternia/Gamelogic/AI/AIMovement.h	/^        vertex* current; \/\/ current location for reference$/;"	m	class:AIMovement
current	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        static P2PCPUServer current;$/;"	m	class:P2PCPUServer
current	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        static P2PDataServer current;$/;"	m	class:P2PDataServer
current	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        static P2PIRCServer current;$/;"	m	class:P2PIRCServer
current	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        static P2PLClient current;$/;"	m	class:P2PLClient
current	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        static P2PLServer current;$/;"	m	class:P2PLServer
current	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        static P2PStreamServer current;$/;"	m	class:P2PStreamServer
current	src/Gamelogic/AI/AIMovement.h	/^        vertex* current; \/\/ current location for reference$/;"	m	class:AIMovement
current	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        static P2PCPUServer current;$/;"	m	class:P2PCPUServer
current	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        static P2PDataServer current;$/;"	m	class:P2PDataServer
current	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        static P2PIRCServer current;$/;"	m	class:P2PIRCServer
current	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        static P2PLClient current;$/;"	m	class:P2PLClient
current	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        static P2PLServer current;$/;"	m	class:P2PLServer
current	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        static P2PStreamServer current;$/;"	m	class:P2PStreamServer
currentChannel	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        ChatChannel *currentChannel;$/;"	m	class:ChatClient
currentChannel	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        ChatChannel *currentChannel;$/;"	m	class:ChatClient
currentNode	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    LinkedNode<T> *head, *currentNode;$/;"	m	class:ConcurrentLinkedList
currentNode	include/Eternia/Data/LinkedList.hpp	/^    LinkedNode<T>* currentNode;$/;"	m	class:LinkedList
currentNode	include/Eternia/Data/LinkedListT.h	/^        LinkedNodeT * currentNode;$/;"	m	class:LinkedListT
currentNode	include/Eternia/Data/LinkedMap.h	/^        LinkedMapNode * currentNode;$/;"	m	class:LinkedMap
currentNode	src/Data/ConcurrentLinkedList.hpp	/^    LinkedNode<T> *head, *currentNode;$/;"	m	class:ConcurrentLinkedList
currentNode	src/Data/LinkedList.hpp	/^    LinkedNode<T>* currentNode;$/;"	m	class:LinkedList
currentNode	src/Data/LinkedListT.h	/^        LinkedNodeT * currentNode;$/;"	m	class:LinkedListT
currentNode	src/Data/LinkedMap.h	/^        LinkedMapNode * currentNode;$/;"	m	class:LinkedMap
currentPower	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        PowerValue* currentPower;$/;"	m	class:ComponentRating
currentPower	src/Engineering/Electrical/Components/ComponentRating.h	/^        PowerValue* currentPower;$/;"	m	class:ComponentRating
currentTemp	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        double currentTemp;$/;"	m	class:ComponentRating
currentTemp	src/Engineering/Electrical/Components/ComponentRating.h	/^        double currentTemp;$/;"	m	class:ComponentRating
current_ram_size	include/Eternia/Data/FileCache.hpp	/^        long current_ram_size;$/;"	m	class:FileCache
current_ram_size	src/Data/FileCache.hpp	/^        long current_ram_size;$/;"	m	class:FileCache
cwt	include/Eternia/constants.h	/^            const double cwt = hundredweight;$/;"	m	namespace:physical::unit::British
cwt	include/Eternia/constants.h	/^            const double cwt = hundredweight;$/;"	m	namespace:physical::unit::US
cwt	src/constants.h	/^            const double cwt = hundredweight;$/;"	m	namespace:physical::unit::British
cwt	src/constants.h	/^            const double cwt = hundredweight;$/;"	m	namespace:physical::unit::US
d	include/Eternia/Data/HashMap.hpp	/^        T *d;$/;"	m	class:HTEntry
d	include/Eternia/Data/HashTable.h	/^        CharString k, d;$/;"	m	class:HTEntry
d	src/Data/HashMap.hpp	/^        T *d;$/;"	m	class:HTEntry
d	src/Data/HashTable.h	/^        CharString k, d;$/;"	m	class:HTEntry
dFile	include/Eternia/Data/FileCache.hpp	/^        fstream dFile;$/;"	m	class:FileCache
dFile	src/Data/FileCache.hpp	/^        fstream dFile;$/;"	m	class:FileCache
dList	include/Eternia/Math/statistics/statistics.h	/^        DoubleList dList();$/;"	p	class:Statistics
dList	src/Math/statistics/statistics.h	/^        DoubleList dList();$/;"	p	class:Statistics
da	include/Eternia/constants.h	/^        const double da = day;$/;"	m	namespace:physical::unit
da	src/constants.h	/^        const double da = day;$/;"	m	namespace:physical::unit
damage	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        DAMAGERESULT damage(BODYPART part, double k); \/\/ damage this character with k damage (note: defenses are taken into account)$/;"	p	class:Avatar
damage	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        double damage; \/\/ unique damage$/;"	m	class:DynamicEquip
damage	src/Gamelogic/Avatar/Avatar.cpp	/^DAMAGERESULT Avatar::damage(BODYPART part, double k) {$/;"	f	class:Avatar
damage	src/Gamelogic/Avatar/Avatar.h	/^        DAMAGERESULT damage(BODYPART part, double k); \/\/ damage this character with k damage (note: defenses are taken into account)$/;"	p	class:Avatar
damage	src/Gamelogic/Inventory/DynamicEquip.h	/^        double damage; \/\/ unique damage$/;"	m	class:DynamicEquip
damageOther	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        DAMAGERESULT damageOther(Avatar* a, BODYPART part, double k); \/\/ damage another character with k damage (note: defenses are taken into account)$/;"	p	class:Avatar
damageOther	src/Gamelogic/Avatar/Avatar.cpp	/^DAMAGERESULT Avatar::damageOther(Avatar* other, BODYPART part, double k) {$/;"	f	class:Avatar
damageOther	src/Gamelogic/Avatar/Avatar.h	/^        DAMAGERESULT damageOther(Avatar* a, BODYPART part, double k); \/\/ damage another character with k damage (note: defenses are taken into account)$/;"	p	class:Avatar
dat	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        char* dat;$/;"	m	class:VoipPacket
dat	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        char* dat;$/;"	m	class:VoipPacket
data	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* data;$/;"	m	class:AbstractDBLinkedNode
data	include/Eternia/Data/DoubleList.h	/^        double data;$/;"	m	class:DoubleNode
data	include/Eternia/Data/Graph.h	/^        int data;$/;"	m	class:GEdge
data	include/Eternia/Data/IntegerList.h	/^        int data;$/;"	m	class:IntegerNode
data	include/Eternia/Data/LinkedList.hpp	/^    T* data;$/;"	m	class:LinkedNode
data	include/Eternia/Data/LinkedListT.h	/^        void * data;$/;"	m	class:LinkedNodeT
data	include/Eternia/Data/LinkedMap.h	/^        void * data;$/;"	m	class:LinkedMapNode
data	include/Eternia/Data/PriorityQueue.h	/^        void* data;$/;"	m	class:PriorityItem
data	include/Eternia/Data/Queue.h	/^        void *data;$/;"	m	class:QueueNode
data	include/Eternia/Data/Stack.h	/^        int data;$/;"	m	class:ValueNode
data	include/Eternia/Data/TreeList.h	/^        void* data;$/;"	m	class:TreeNode
data	include/Eternia/Math/Equation.h	/^        double data;$/;"	m	class:EquationNode
data	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        char* data; \/\/ direct data to be converted, length for conversion is based off of type$/;"	m	class:CPLVariable
data	include/Eternia/WebFramework/Encoding/CompressedJSON.h	/^        CharString data;$/;"	m	class:CompressedJSON
data	include/Eternia/WebFramework/Encoding/JSON.h	/^        CharString data;$/;"	m	class:JSON
data	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^enum P2PTYPE {data,cpu,L,E};$/;"	e	enum:P2PTYPE
data	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        char* data;$/;"	m	class:P2PPacket
data	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        char* data;$/;"	m	class:P2PPassagePacket
data	src/Data/AbstractDatabase/AbstractDB.h	/^        void* data;$/;"	m	class:AbstractDBLinkedNode
data	src/Data/DoubleList.h	/^        double data;$/;"	m	class:DoubleNode
data	src/Data/Graph.h	/^        int data;$/;"	m	class:GEdge
data	src/Data/IntegerList.h	/^        int data;$/;"	m	class:IntegerNode
data	src/Data/LinkedList.hpp	/^    T* data;$/;"	m	class:LinkedNode
data	src/Data/LinkedListT.h	/^        void * data;$/;"	m	class:LinkedNodeT
data	src/Data/LinkedMap.h	/^        void * data;$/;"	m	class:LinkedMapNode
data	src/Data/PriorityQueue.h	/^        void* data;$/;"	m	class:PriorityItem
data	src/Data/Queue.h	/^        void *data;$/;"	m	class:QueueNode
data	src/Data/Stack.h	/^        int data;$/;"	m	class:ValueNode
data	src/Data/TreeList.h	/^        void* data;$/;"	m	class:TreeNode
data	src/Math/Equation.h	/^        double data;$/;"	m	class:EquationNode
data	src/Programming/CPLScript/CPLVariable.h	/^        char* data; \/\/ direct data to be converted, length for conversion is based off of type$/;"	m	class:CPLVariable
data	src/WebFramework/Encoding/CompressedJSON.h	/^        CharString data;$/;"	m	class:CompressedJSON
data	src/WebFramework/Encoding/JSON.h	/^        CharString data;$/;"	m	class:JSON
data	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^enum P2PTYPE {data,cpu,L,E};$/;"	e	enum:P2PTYPE
data	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        char* data;$/;"	m	class:P2PPacket
data	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        char* data;$/;"	m	class:P2PPassagePacket
dataPackets	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^        int dataPackets;$/;"	m	class:SecuredCPUHeader
dataPackets	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^        int dataPackets;$/;"	m	class:SecuredGPUHeader
dataPackets	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^        int dataPackets;$/;"	m	class:SecuredCPUHeader
dataPackets	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^        int dataPackets;$/;"	m	class:SecuredGPUHeader
dataValue	src/Data/test/testDataStructures.cpp	/^        int dataValue;$/;"	m	class:TestStructure	file:
dataeq	include/Eternia/Math/Equation.h	/^        Equation* dataeq; \/\/ subnode$/;"	m	class:EquationNode
dataeq	src/Math/Equation.h	/^        Equation* dataeq; \/\/ subnode$/;"	m	class:EquationNode
dataswap	include/Eternia/Data/PriorityQueue.h	/^        void dataswap(PriorityItem *a, PriorityItem *b); \/\/ swap data between two priority items.$/;"	p	class:PriorityQueue
dataswap	src/Data/PriorityQueue.cpp	/^void PriorityQueue::dataswap(PriorityItem *a, PriorityItem *b) {$/;"	f	class:PriorityQueue
dataswap	src/Data/PriorityQueue.h	/^        void dataswap(PriorityItem *a, PriorityItem *b); \/\/ swap data between two priority items.$/;"	p	class:PriorityQueue
day	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int day, month, year;$/;"	m	class:AbstractDBDate
day	include/Eternia/constants.h	/^        const double day = 24.0*hours;$/;"	m	namespace:physical::unit
day	src/Data/AbstractDatabase/AbstractDB.h	/^        int day, month, year;$/;"	m	class:AbstractDBDate
day	src/constants.h	/^        const double day = 24.0*hours;$/;"	m	namespace:physical::unit
days	include/Eternia/constants.h	/^        const double days = day;$/;"	m	namespace:physical::unit
days	src/constants.h	/^        const double days = day;$/;"	m	namespace:physical::unit
dead	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        bool dead; \/\/ is this component dead?$/;"	m	class:ComponentRating
dead	src/Engineering/Electrical/Components/ComponentRating.h	/^        bool dead; \/\/ is this component dead?$/;"	m	class:ComponentRating
deadweight	include/Eternia/constants.h	/^            const double deadweight = ton;$/;"	m	namespace:physical::unit::US
deadweight	src/constants.h	/^            const double deadweight = ton;$/;"	m	namespace:physical::unit::US
deathCause	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        CR_DEATHCAUSE deathCause; \/\/ reason for death$/;"	m	class:ComponentRating
deathCause	src/Engineering/Electrical/Components/ComponentRating.h	/^        CR_DEATHCAUSE deathCause; \/\/ reason for death$/;"	m	class:ComponentRating
debugLogEH	src/Data/Events/EventHandler.cpp	/^#define debugLogEH(/;"	d	file:
debugLogEHx	src/Data/Events/EventHandle.cpp	/^#define debugLogEHx(/;"	d	file:
decToFrac	include/Eternia/Math/Functions/Basic.h	/^    int* decToFrac(double dec);$/;"	p	namespace:Math
decToFrac	src/Math/Functions/Basic.cpp	/^    int* decToFrac(double dec) {$/;"	f	namespace:Math
decToFrac	src/Math/Functions/Basic.h	/^    int* decToFrac(double dec);$/;"	p	namespace:Math
decade	include/Eternia/constants.h	/^        const double decade = 10.0*years;$/;"	m	namespace:physical::unit
decade	src/constants.h	/^        const double decade = 10.0*years;$/;"	m	namespace:physical::unit
decades	include/Eternia/constants.h	/^        const double decades = decade;$/;"	m	namespace:physical::unit
decades	src/constants.h	/^        const double decades = decade;$/;"	m	namespace:physical::unit
decide	include/Eternia/Gamelogic/AI/AI.h	/^        void decide(); \/\/ make a decision to do something$/;"	p	class:AI
decide	src/Gamelogic/AI/AI.h	/^        void decide(); \/\/ make a decision to do something$/;"	p	class:AI
decimeter	include/Eternia/constants.h	/^        const double decimeter = meters\/10.0;$/;"	m	namespace:physical::unit
decimeter	src/constants.h	/^        const double decimeter = meters\/10.0;$/;"	m	namespace:physical::unit
decimeters	include/Eternia/constants.h	/^        const double decimeters = decimeter;$/;"	m	namespace:physical::unit
decimeters	src/constants.h	/^        const double decimeters = decimeter;$/;"	m	namespace:physical::unit
decinanometer	include/Eternia/constants.h	/^        const double decinanometer = meter\/10000000000.0;$/;"	m	namespace:physical::unit
decinanometer	src/constants.h	/^        const double decinanometer = meter\/10000000000.0;$/;"	m	namespace:physical::unit
decinanometers	include/Eternia/constants.h	/^        const double decinanometers = decinanometer;$/;"	m	namespace:physical::unit
decinanometers	src/constants.h	/^        const double decinanometers = decinanometer;$/;"	m	namespace:physical::unit
deckey	include/Eternia/Algorithm/Cryptography/Aes256.h	/^    uint8_t deckey[32];$/;"	m	struct:__anon7
deckey	src/Algorithm/Cryptography/Aes256.h	/^    uint8_t deckey[32];$/;"	m	struct:__anon1
decode	include/Eternia/Algorithm/Cryptography/md5.h	/^        static void decode(uint4 output[], const uint1 input[], size_type len);$/;"	p	class:MD5
decode	include/Eternia/WebFramework/Encoding/CompressedJSON.h	/^        CharString static decode(CharString data);$/;"	p	class:CompressedJSON
decode	include/Eternia/WebFramework/Encoding/JSON.h	/^        CharString static decode(CharString data);$/;"	p	class:JSON
decode	src/Algorithm/Cryptography/md5.cpp	/^void MD5::decode(uint4 output[], const uint1 input[], size_type len) {$/;"	f	class:MD5
decode	src/Algorithm/Cryptography/md5.h	/^        static void decode(uint4 output[], const uint1 input[], size_type len);$/;"	p	class:MD5
decode	src/WebFramework/Encoding/CompressedJSON.h	/^        CharString static decode(CharString data);$/;"	p	class:CompressedJSON
decode	src/WebFramework/Encoding/JSON.h	/^        CharString static decode(CharString data);$/;"	p	class:JSON
decodeUrl	include/Eternia/WebFramework/Encoding/UrlEncoding.h	/^        static CharString decodeUrl(CharString url);$/;"	p	class:UrlEncoding
decodeUrl	src/WebFramework/Encoding/UrlEncoding.h	/^        static CharString decodeUrl(CharString url);$/;"	p	class:UrlEncoding
decompress	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    CharString decompress(CharString input);$/;"	p	class:BasicCompressor
decompress	src/Algorithm/Compression/BasicCompressor.h	/^    CharString decompress(CharString input);$/;"	p	class:BasicCompressor
defense	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        double defense; \/\/ unique defense$/;"	m	class:DynamicEquip
defense	src/Gamelogic/Inventory/DynamicEquip.h	/^        double defense; \/\/ unique defense$/;"	m	class:DynamicEquip
degree	include/Eternia/constants.h	/^            const double degree = pi\/180.0;$/;"	m	namespace:physical::unit::arc
degree	src/constants.h	/^            const double degree = pi\/180.0;$/;"	m	namespace:physical::unit::arc
degrees	include/Eternia/constants.h	/^            const double degrees = degree;$/;"	m	namespace:physical::unit::arc
degrees	src/constants.h	/^            const double degrees = degree;$/;"	m	namespace:physical::unit::arc
del	include/Eternia/Data/FileSystem.h	/^        void del(); \/\/ delete THIS from listings.$/;"	p	class:FileStructureNode
del	src/Data/FileSystem.cpp	/^void FileStructureNode::del() {$/;"	f	class:FileStructureNode
del	src/Data/FileSystem.h	/^        void del(); \/\/ delete THIS from listings.$/;"	p	class:FileStructureNode
delObject	include/Eternia/Data/FileSystem.h	/^        bool delObject(FileStructureNode* object); \/\/ delete object from this$/;"	p	class:FileStructureNode
delObject	src/Data/FileSystem.h	/^        bool delObject(FileStructureNode* object); \/\/ delete object from this$/;"	p	class:FileStructureNode
deleteField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void deleteField(AbstractDBField* field); \/\/ remove a field$/;"	p	class:AbstractDBTable
deleteField	src/Data/AbstractDatabase/AbstractDB.h	/^        void deleteField(AbstractDBField* field); \/\/ remove a field$/;"	p	class:AbstractDBTable
density	include/Eternia/Engineering/Chemistry/Atom.h	/^        double density;$/;"	m	class:Atom
density	include/Eternia/Engineering/Chemistry/Composite.h	/^        double density; \/\/ used for stuff like atmospheres, ect.$/;"	m	class:Composite
density	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	float density; \/\/ density of the material (g\/cm3)$/;"	m	class:PhysicalMaterial
density	src/Engineering/Chemistry/Atom.h	/^        double density;$/;"	m	class:Atom
density	src/Engineering/Chemistry/Composite.h	/^        double density; \/\/ used for stuff like atmospheres, ect.$/;"	m	class:Composite
density	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	float density; \/\/ density of the material (g\/cm3)$/;"	m	class:PhysicalMaterial
dependencies	include/Eternia/API/APIMod.h	/^    LinkedList<APIMod> dependencies;$/;"	m	class:APIMod
dependencies	src/API/APIMod.h	/^    LinkedList<APIMod> dependencies;$/;"	m	class:APIMod
depth	include/Eternia/Data/PriorityQueue.h	/^        int depth(PriorityItem* c, int initial); \/\/ find max depth of item c from c's location.$/;"	p	class:PriorityQueue
depth	src/Data/PriorityQueue.cpp	/^int PriorityQueue::depth(PriorityItem* c, int initial) {$/;"	f	class:PriorityQueue
depth	src/Data/PriorityQueue.h	/^        int depth(PriorityItem* c, int initial); \/\/ find max depth of item c from c's location.$/;"	p	class:PriorityQueue
derive	include/Eternia/Math/Equation.h	/^        Equation* derive(char* wrt); \/\/ derive this equation.$/;"	p	class:Equation
derive	src/Math/Equation.h	/^        Equation* derive(char* wrt); \/\/ derive this equation.$/;"	p	class:Equation
derive	src/Math/Equation_CALC.cpp	/^Equation* Equation::derive(char* wrt) {$/;"	f	class:Equation
description	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^    CharString* description; \/\/ description of the item.$/;"	m	class:ItemBase
description	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        CharString description; \/\/ description of this part (possibly dynamically generated)$/;"	m	class:ModularShipPart
description	src/Gamelogic/Inventory/ItemBase.h	/^    CharString* description; \/\/ description of the item.$/;"	m	class:ItemBase
description	src/Gamelogic/Ship/ModularShipPart.h	/^        CharString description; \/\/ description of this part (possibly dynamically generated)$/;"	m	class:ModularShipPart
deserialize	include/Eternia/Serialization/BasicSerializer.h	/^        void deserialize(char* data); \/\/ converts a byte array into this class$/;"	p	class:BasicSerializer
deserialize	include/Eternia/Serialization/SpecificSerializer.h	/^    void deserialize(CharString data); \/\/ converts a byte array into this class$/;"	p	class:SpecificSerializer
deserialize	src/Serialization/BasicSerializer.cpp	/^void BasicSerializer::deserialize(char* data) {$/;"	f	class:BasicSerializer
deserialize	src/Serialization/BasicSerializer.h	/^        void deserialize(char* data); \/\/ converts a byte array into this class$/;"	p	class:BasicSerializer
deserialize	src/Serialization/SpecificSerializer.cpp	/^void  SpecificSerializer::deserialize(CharString datax) {$/;"	f	class:SpecificSerializer
deserialize	src/Serialization/SpecificSerializer.h	/^    void deserialize(CharString data); \/\/ converts a byte array into this class$/;"	p	class:SpecificSerializer
deserializeClass	include/Eternia/Serialization/BasicSerializer.h	/^    void* deserializeClass(char* data, int size);$/;"	p	namespace:BasicSerialize
deserializeClass	src/Serialization/BasicSerializer.cpp	/^    void* deserializeClass(char* data, int size) {$/;"	f	namespace:BasicSerialize
deserializeClass	src/Serialization/BasicSerializer.h	/^    void* deserializeClass(char* data, int size);$/;"	p	namespace:BasicSerialize
deserializeId	include/Eternia/Serialization/SpecificSerializer.h	/^    void deserializeId(int id, CharString data);$/;"	p	class:SpecificSerializer
deserializeId	src/Serialization/SpecificSerializer.cpp	/^void SpecificSerializer::deserializeId(int id, CharString datax){$/;"	f	class:SpecificSerializer
deserializeId	src/Serialization/SpecificSerializer.h	/^    void deserializeId(int id, CharString data);$/;"	p	class:SpecificSerializer
design	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> design; \/\/ creation of 3D art; images and textures inside the world (Payments for originality)$/;"	m	class:CraftingStats
design	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> design; \/\/ creation of 3D art; images and textures inside the world (Payments for originality)$/;"	m	class:CraftingStats
destination	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        P2PNode destination;$/;"	m	class:P2PPacket
destination	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        P2PNode destination;$/;"	m	class:P2PPacket
destruction	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> destruction; \/\/ Ability to demolish with precision (Buildings or territories)$/;"	m	class:SkillSet
destruction	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> destruction; \/\/ Ability to demolish with precision (Buildings or territories)$/;"	m	class:SkillSet
detectAllViolations	include/Eternia/Data/Protect/PType.hpp	/^    static void detectAllViolations(){$/;"	f	class:PType
detectAllViolations	src/Data/Protect/PType.hpp	/^    static void detectAllViolations(){$/;"	f	class:PType
determinant	include/Eternia/Math/struct/Matrix.h	/^    double determinant(); \/\/ finds the determinant by using minor(n,0) on top row.$/;"	p	class:Matrix
determinant	src/Math/struct/Matrix.cpp	/^double Matrix::determinant() {$/;"	f	class:Matrix
determinant	src/Math/struct/Matrix.h	/^    double determinant(); \/\/ finds the determinant by using minor(n,0) on top row.$/;"	p	class:Matrix
digest	include/Eternia/Algorithm/Cryptography/md5.h	/^        uint1 digest[16]; \/\/ the result$/;"	m	class:MD5
digest	src/Algorithm/Cryptography/md5.h	/^        uint1 digest[16]; \/\/ the result$/;"	m	class:MD5
dim	include/Eternia/Math/struct/VectorSpace.h	/^        int dim;$/;"	m	class:VectorSpace
dim	src/Math/struct/VectorSpace.h	/^        int dim;$/;"	m	class:VectorSpace
dimension	include/Eternia/Math/struct/VectorSpace.h	/^        int dimension(); \/\/ returns the dimension of the vertex space.$/;"	p	class:VectorSpace
dimension	include/Eternia/Math/struct/vertex.h	/^    double dimension, mass;$/;"	m	class:VertexObject
dimension	src/Math/struct/VectorSpace.cpp	/^int VectorSpace::dimension() {$/;"	f	class:VectorSpace
dimension	src/Math/struct/VectorSpace.h	/^        int dimension(); \/\/ returns the dimension of the vertex space.$/;"	p	class:VectorSpace
dimension	src/Math/struct/vertex.h	/^    double dimension, mass;$/;"	m	class:VertexObject
diopter	include/Eternia/constants.h	/^        const double diopter = 1.0\/meter;$/;"	m	namespace:physical::unit
diopter	src/constants.h	/^        const double diopter = 1.0\/meter;$/;"	m	namespace:physical::unit
diopters	include/Eternia/constants.h	/^        const double diopters = diopter;$/;"	m	namespace:physical::unit
diopters	src/constants.h	/^        const double diopters = diopter;$/;"	m	namespace:physical::unit
direction	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        KDirection* direction; \/\/ direction of force$/;"	m	class:Force
direction	src/Engineering/Physics/Kinematics/FreeBody.h	/^        KDirection* direction; \/\/ direction of force$/;"	m	class:Force
directionNegative	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        bool directionNegative; \/\/ is the direction on the opposite side?$/;"	m	class:Force
directionNegative	src/Engineering/Physics/Kinematics/FreeBody.h	/^        bool directionNegative; \/\/ is the direction on the opposite side?$/;"	m	class:Force
diseases	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        LinkedList<Disease> diseases; \/\/ list of ailments, toxins, drugs, ect.$/;"	m	class:AvatarHealth
diseases	src/Gamelogic/Avatar/AvatarHealth.h	/^        LinkedList<Disease> diseases; \/\/ list of ailments, toxins, drugs, ect.$/;"	m	class:AvatarHealth
displacement	include/Eternia/constants.h	/^        namespace displacement {$/;"	n	namespace:physical::unit
displacement	src/constants.h	/^        namespace displacement {$/;"	n	namespace:physical::unit
display	include/Eternia/Programming/Program.h	/^        void (*display)(VProgramVariable*); \/\/ display to show info. (Either debugger or something else)$/;"	m	class:Program
display	src/Programming/Program.h	/^        void (*display)(VProgramVariable*); \/\/ display to show info. (Either debugger or something else)$/;"	m	class:Program
distance	include/Eternia/Math/struct/vertex.h	/^    double distance(vertex  v2);$/;"	p	class:vertex
distance	src/Math/struct/vertex.cpp	/^double vertex::distance(vertex v2) {$/;"	f	class:vertex
distance	src/Math/struct/vertex.h	/^    double distance(vertex  v2);$/;"	p	class:vertex
division	include/Eternia/Math/Eval.h	/^                addition=7,subtraction=8,multiplication=9,division=10,Modulus=11,exponent=12$/;"	e	enum:MOperator
division	src/Math/Eval.h	/^                addition=7,subtraction=8,multiplication=9,division=10,Modulus=11,exponent=12$/;"	e	enum:MOperator
dm	include/Eternia/constants.h	/^        const double dm = decimeter;$/;"	m	namespace:physical::unit
dm	src/constants.h	/^        const double dm = decimeter;$/;"	m	namespace:physical::unit
doAnimation	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void doAnimation(); \/\/ do a defined action. (Dance, hit, die, ect.)$/;"	p	class:Avatar
doAnimation	src/Gamelogic/Avatar/Avatar.cpp	/^void Avatar::doAnimation() {$/;"	f	class:Avatar
doAnimation	src/Gamelogic/Avatar/Avatar.h	/^        void doAnimation(); \/\/ do a defined action. (Dance, hit, die, ect.)$/;"	p	class:Avatar
doEvents	src/Data/Events/EventHandler.cpp	/^void doEvents(PriorityItem* item, PriorityQueue* queue) {$/;"	f
doOp	src/Math/Eval.cpp	/^int doOp() {$/;"	f
dodge	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        double dodge; \/\/ some gear gives better dodge ability$/;"	m	class:DynamicEquip
dodge	src/Gamelogic/Inventory/DynamicEquip.h	/^        double dodge; \/\/ some gear gives better dodge ability$/;"	m	class:DynamicEquip
dolisten	include/Eternia/WebFramework/Network/SocketServer.h	/^    bool dolisten;$/;"	m	class:SocketServer
dolisten	src/WebFramework/Network/SocketServer.h	/^    bool dolisten;$/;"	m	class:SocketServer
dollar	include/Eternia/constants.h	/^        const double dollar = 1.0;$/;"	m	namespace:physical::unit
dollar	src/constants.h	/^        const double dollar = 1.0;$/;"	m	namespace:physical::unit
dollars	include/Eternia/constants.h	/^        const double dollars = dollar;$/;"	m	namespace:physical::unit
dollars	src/constants.h	/^        const double dollars = dollar;$/;"	m	namespace:physical::unit
done	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    void done();$/;"	p	class:Skill
done	src/Gamelogic/Avatar/Skills/Skill.h	/^    void done();$/;"	p	class:Skill
doppelzentner	include/Eternia/constants.h	/^        const double doppelzentner = quintal;$/;"	m	namespace:physical::unit
doppelzentner	src/constants.h	/^        const double doppelzentner = quintal;$/;"	m	namespace:physical::unit
doppelzentners	include/Eternia/constants.h	/^        const double doppelzentners = doppelzentner;$/;"	m	namespace:physical::unit
doppelzentners	src/constants.h	/^        const double doppelzentners = doppelzentner;$/;"	m	namespace:physical::unit
dose	include/Eternia/constants.h	/^        namespace dose { \/\/ energy$/;"	n	namespace:physical::unit
dose	src/constants.h	/^        namespace dose { \/\/ energy$/;"	n	namespace:physical::unit
dot	include/Eternia/Math/struct/vertex.h	/^    double dot(vertex v2); \/\/ Dot-product$/;"	p	class:vertex
dot	src/Math/struct/vertex.cpp	/^double vertex::dot(vertex v2) {$/;"	f	class:vertex
dot	src/Math/struct/vertex.h	/^    double dot(vertex v2); \/\/ Dot-product$/;"	p	class:vertex
downheap	include/Eternia/Data/Heap.h	/^        void downheap(int from, int to);$/;"	p	class:Heap
downheap	include/Eternia/Data/PriorityQueue.h	/^        void downheap(PriorityItem* current);$/;"	p	class:PriorityQueue
downheap	src/Data/Heap.cpp	/^void Heap::downheap(int from, int to) {$/;"	f	class:Heap
downheap	src/Data/Heap.h	/^        void downheap(int from, int to);$/;"	p	class:Heap
downheap	src/Data/PriorityQueue.cpp	/^void PriorityQueue::downheap(PriorityItem* current) {$/;"	f	class:PriorityQueue
downheap	src/Data/PriorityQueue.h	/^        void downheap(PriorityItem* current);$/;"	p	class:PriorityQueue
doz	include/Eternia/constants.h	/^            const double doz = dozen;$/;"	m	namespace:physical::unit::bakers
doz	include/Eternia/constants.h	/^        const double doz = dozen;$/;"	m	namespace:physical::unit
doz	src/constants.h	/^            const double doz = dozen;$/;"	m	namespace:physical::unit::bakers
doz	src/constants.h	/^        const double doz = dozen;$/;"	m	namespace:physical::unit
dozen	include/Eternia/constants.h	/^            const double dozen = 13.0;$/;"	m	namespace:physical::unit::bakers
dozen	include/Eternia/constants.h	/^        const double dozen = 12.0;$/;"	m	namespace:physical::unit
dozen	src/constants.h	/^            const double dozen = 13.0;$/;"	m	namespace:physical::unit::bakers
dozen	src/constants.h	/^        const double dozen = 12.0;$/;"	m	namespace:physical::unit
dr	include/Eternia/constants.h	/^                const double dr = drachm;$/;"	m	namespace:physical::unit::British::fluid
dr	include/Eternia/constants.h	/^                const double dr = dram;$/;"	m	namespace:physical::unit::US::liquid
dr	include/Eternia/constants.h	/^            const double dr = dram;$/;"	m	namespace:physical::unit::apothecary
dr	include/Eternia/constants.h	/^            const double dr = dram;$/;"	m	namespace:physical::unit::avoirdupois
dr	src/constants.h	/^                const double dr = drachm;$/;"	m	namespace:physical::unit::British::fluid
dr	src/constants.h	/^                const double dr = dram;$/;"	m	namespace:physical::unit::US::liquid
dr	src/constants.h	/^            const double dr = dram;$/;"	m	namespace:physical::unit::apothecary
dr	src/constants.h	/^            const double dr = dram;$/;"	m	namespace:physical::unit::avoirdupois
drachm	include/Eternia/constants.h	/^                const double drachm = 60.0*minims;$/;"	m	namespace:physical::unit::British::fluid
drachm	src/constants.h	/^                const double drachm = 60.0*minims;$/;"	m	namespace:physical::unit::British::fluid
drachms	include/Eternia/constants.h	/^                const double drachms = drachm;$/;"	m	namespace:physical::unit::British::fluid
drachms	src/constants.h	/^                const double drachms = drachm;$/;"	m	namespace:physical::unit::British::fluid
dram	include/Eternia/constants.h	/^                const double dram = 60.0*minims;$/;"	m	namespace:physical::unit::US::liquid
dram	include/Eternia/constants.h	/^            const double dram = 3.0*scruples;$/;"	m	namespace:physical::unit::apothecary
dram	include/Eternia/constants.h	/^            const double dram = ounce\/16.0;$/;"	m	namespace:physical::unit::avoirdupois
dram	src/constants.h	/^                const double dram = 60.0*minims;$/;"	m	namespace:physical::unit::US::liquid
dram	src/constants.h	/^            const double dram = 3.0*scruples;$/;"	m	namespace:physical::unit::apothecary
dram	src/constants.h	/^            const double dram = ounce\/16.0;$/;"	m	namespace:physical::unit::avoirdupois
drams	include/Eternia/constants.h	/^                const double drams = dram;$/;"	m	namespace:physical::unit::US::liquid
drams	include/Eternia/constants.h	/^            const double drams = dram;$/;"	m	namespace:physical::unit::apothecary
drams	include/Eternia/constants.h	/^            const double drams = dram;$/;"	m	namespace:physical::unit::avoirdupois
drams	src/constants.h	/^                const double drams = dram;$/;"	m	namespace:physical::unit::US::liquid
drams	src/constants.h	/^            const double drams = dram;$/;"	m	namespace:physical::unit::apothecary
drams	src/constants.h	/^            const double drams = dram;$/;"	m	namespace:physical::unit::avoirdupois
draw	include/Eternia/Design/LayoutObject.h	/^        bool resize, draw;$/;"	m	class:LayoutObject
draw	include/Eternia/Design/LayoutObject.h	/^        public virtual void draw();             \/\/ abstract draw method (implements OpenGL, SDL, ect.)$/;"	p	class:LayoutObject
draw	src/Design/LayoutObject.h	/^        bool resize, draw;$/;"	m	class:LayoutObject
draw	src/Design/LayoutObject.h	/^        public virtual void draw();             \/\/ abstract draw method (implements OpenGL, SDL, ect.)$/;"	p	class:LayoutObject
draw_	include/Eternia/Design/LayoutObject.h	/^        public void draw_();$/;"	p	class:LayoutObject
draw_	src/Design/LayoutObject.h	/^        public void draw_();$/;"	p	class:LayoutObject
driver_exit	include/Eternia/Driver/LinuxDriver.h	/^module_exit(driver_exit);$/;"	v
driver_exit	include/Eternia/Driver/LinuxDriver.h	/^static void driver_exit(void) {$/;"	f
driver_exit	src/Driver/LinuxDriver.h	/^module_exit(driver_exit);$/;"	v
driver_exit	src/Driver/LinuxDriver.h	/^static void driver_exit(void) {$/;"	f
driver_init	include/Eternia/Driver/LinuxDriver.h	/^module_init(driver_init);$/;"	v
driver_init	include/Eternia/Driver/LinuxDriver.h	/^static int driver_init(void) {$/;"	f
driver_init	src/Driver/LinuxDriver.h	/^module_init(driver_init);$/;"	v
driver_init	src/Driver/LinuxDriver.h	/^static int driver_init(void) {$/;"	f
drop	include/Eternia/constants.h	/^        const double drop = 0.03*cc;$/;"	m	namespace:physical::unit
drop	src/constants.h	/^        const double drop = 0.03*cc;$/;"	m	namespace:physical::unit
drops	include/Eternia/constants.h	/^        const double drops = drop;$/;"	m	namespace:physical::unit
drops	src/constants.h	/^        const double drops = drop;$/;"	m	namespace:physical::unit
dry	include/Eternia/constants.h	/^            namespace dry {$/;"	n	namespace:physical::unit::US
dry	src/constants.h	/^            namespace dry {$/;"	n	namespace:physical::unit::US
dumpNum	src/Math/Eval.cpp	/^void dumpNum(char* numString, int strlen) {$/;"	f
dumpOp	src/Math/Eval.cpp	/^void dumpOp(MOperator op) {$/;"	f
duty	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    float duty, tickinterval;$/;"	m	class:PWM
duty	src/Engineering/Electrical/Signal/PWM.h	/^    float duty, tickinterval;$/;"	m	class:PWM
dwt	include/Eternia/constants.h	/^        const double dwt = pennyweight;$/;"	m	namespace:physical::unit
dwt	src/constants.h	/^        const double dwt = pennyweight;$/;"	m	namespace:physical::unit
dyn	include/Eternia/constants.h	/^        const double dyn = dyne;$/;"	m	namespace:physical::unit
dyn	src/constants.h	/^        const double dyn = dyne;$/;"	m	namespace:physical::unit
dynamicAttr	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        LinkedList<DynamicAttribute> dynamicAttr;$/;"	m	class:DynamicEquip
dynamicAttr	src/Gamelogic/Inventory/DynamicEquip.h	/^        LinkedList<DynamicAttribute> dynamicAttr;$/;"	m	class:DynamicEquip
dyne	include/Eternia/constants.h	/^        const double dyne = Newton\/100000.0;$/;"	m	namespace:physical::unit
dyne	src/constants.h	/^        const double dyne = Newton\/100000.0;$/;"	m	namespace:physical::unit
dynes	include/Eternia/constants.h	/^        const double dynes = dyne;$/;"	m	namespace:physical::unit
dynes	src/constants.h	/^        const double dynes = dyne;$/;"	m	namespace:physical::unit
dz	include/Eternia/constants.h	/^            const double dz = dozen;$/;"	m	namespace:physical::unit::bakers
dz	include/Eternia/constants.h	/^        const double dz = dozen;$/;"	m	namespace:physical::unit
dz	src/constants.h	/^            const double dz = dozen;$/;"	m	namespace:physical::unit::bakers
dz	src/constants.h	/^        const double dz = dozen;$/;"	m	namespace:physical::unit
e	include/Eternia/constants.h	/^        const double e = 1.60217733e-19*Coulombs;$/;"	m	namespace:physical::constant
e	src/constants.h	/^        const double e = 1.60217733e-19*Coulombs;$/;"	m	namespace:physical::constant
eV	include/Eternia/constants.h	/^        const double eV = e*V;$/;"	m	namespace:physical::constant
eV	src/constants.h	/^        const double eV = e*V;$/;"	m	namespace:physical::constant
eccentricity	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    int eccentricity; \/\/ how flat is the terrain?$/;"	m	class:Terrain
eccentricity	src/Gamelogic/Environment/Planet/Planet.h	/^    int eccentricity; \/\/ how flat is the terrain?$/;"	m	class:Terrain
echeolonForm	include/Eternia/Math/struct/Matrix.h	/^    void echeolonForm(); \/\/ changes to Echeolon form, in which rows linearly increase for each column.$/;"	p	class:Matrix
echeolonForm	src/Math/struct/Matrix.cpp	/^void Matrix::echeolonForm() {$/;"	f	class:Matrix
echeolonForm	src/Math/struct/Matrix.h	/^    void echeolonForm(); \/\/ changes to Echeolon form, in which rows linearly increase for each column.$/;"	p	class:Matrix
economics	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> economics; \/\/ Trade$/;"	m	class:SkillSet
economics	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> economics; \/\/ Trade$/;"	m	class:SkillSet
edgeList	include/Eternia/Data/Graph.h	/^        LinkedListT* edgeList; \/\/ structure that stores this.$/;"	m	class:GEdge
edgeList	src/Data/Graph.h	/^        LinkedListT* edgeList; \/\/ structure that stores this.$/;"	m	class:GEdge
edges	include/Eternia/Data/Graph.h	/^        LinkedListT* edges(); \/\/ returns the full list of edges$/;"	p	class:Graph
edges	src/Data/Graph.h	/^        LinkedListT* edges(); \/\/ returns the full list of edges$/;"	p	class:Graph
edgesList	include/Eternia/Data/Graph.h	/^        LinkedListT* edgesList;$/;"	m	class:Graph
edgesList	src/Data/Graph.h	/^        LinkedListT* edgesList;$/;"	m	class:Graph
effect	include/Eternia/Gamelogic/Avatar/Mood.h	/^        void effect(); \/\/ place an effect on the avatar based on the mood. (i.e: Stressed will make the avatar make accuracy and intelligence mistakes, ect)$/;"	p	class:Mood
effect	src/Gamelogic/Avatar/Mood.cpp	/^void Mood::effect() {}$/;"	f	class:Mood
effect	src/Gamelogic/Avatar/Mood.h	/^        void effect(); \/\/ place an effect on the avatar based on the mood. (i.e: Stressed will make the avatar make accuracy and intelligence mistakes, ect)$/;"	p	class:Mood
electrical	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> electrical; \/\/ Ability to create new circuits and logic behind every wire (Highly useful learning tool)$/;"	m	class:CraftingStats
electrical	include/Eternia/constants.h	/^namespace electrical {$/;"	n
electrical	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> electrical; \/\/ Ability to create new circuits and logic behind every wire (Highly useful learning tool)$/;"	m	class:CraftingStats
electrical	src/constants.cpp	/^namespace electrical {$/;"	n	file:
electrical	src/constants.h	/^namespace electrical {$/;"	n
electrical::Capacitance	include/Eternia/constants.h	/^    double Capacitance(double coulomb, double volt);$/;"	p	namespace:electrical
electrical::Capacitance	src/constants.cpp	/^    double Capacitance(double coulomb, double volt) {$/;"	f	namespace:electrical
electrical::Capacitance	src/constants.h	/^    double Capacitance(double coulomb, double volt);$/;"	p	namespace:electrical
electrical::ParallelSum	include/Eternia/constants.h	/^    double ParallelSum(double* C, int Clen);$/;"	p	namespace:electrical
electrical::ParallelSum	src/constants.cpp	/^    double ParallelSum(double *C, int Clen) {$/;"	f	namespace:electrical
electrical::ParallelSum	src/constants.h	/^    double ParallelSum(double* C, int Clen);$/;"	p	namespace:electrical
electrical::SeriesSum	include/Eternia/constants.h	/^    double SeriesSum(double* C, int Clen);$/;"	p	namespace:electrical
electrical::SeriesSum	src/constants.cpp	/^    double SeriesSum(double *C, int Clen) {$/;"	f	namespace:electrical
electrical::SeriesSum	src/constants.h	/^    double SeriesSum(double* C, int Clen);$/;"	p	namespace:electrical
electrical::getAmps	include/Eternia/constants.h	/^    double getAmps(double volts, double watts);$/;"	p	namespace:electrical
electrical::getAmps	src/constants.cpp	/^    double getAmps(double volts, double watts) {$/;"	f	namespace:electrical
electrical::getAmps	src/constants.h	/^    double getAmps(double volts, double watts);$/;"	p	namespace:electrical
electrical::getOhms	include/Eternia/constants.h	/^    double getOhms(double volts, double amps);$/;"	p	namespace:electrical
electrical::getOhms	src/constants.cpp	/^    double getOhms(double volts, double amps) {$/;"	f	namespace:electrical
electrical::getOhms	src/constants.h	/^    double getOhms(double volts, double amps);$/;"	p	namespace:electrical
electrical::getVolts	include/Eternia/constants.h	/^    double getVolts(double amps, double watts);$/;"	p	namespace:electrical
electrical::getVolts	src/constants.cpp	/^    double getVolts(double amps, double watts) {$/;"	f	namespace:electrical
electrical::getVolts	src/constants.h	/^    double getVolts(double amps, double watts);$/;"	p	namespace:electrical
electrical::getWatts	include/Eternia/constants.h	/^    double getWatts(double volts, double amps);$/;"	p	namespace:electrical
electrical::getWatts	src/constants.cpp	/^    double getWatts(double volts, double amps) {$/;"	f	namespace:electrical
electrical::getWatts	src/constants.h	/^    double getWatts(double volts, double amps);$/;"	p	namespace:electrical
electrical_conductivity	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	float electrical_conductivity;$/;"	m	class:PhysicalMaterial
electrical_conductivity	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	float electrical_conductivity;$/;"	m	class:PhysicalMaterial
electromagnetic	include/Eternia/constants.h	/^namespace electromagnetic {$/;"	n
electromagnetic	src/constants.cpp	/^namespace electromagnetic {$/;"	n	file:
electromagnetic	src/constants.h	/^namespace electromagnetic {$/;"	n
electromagnetic::gamma	include/Eternia/constants.h	/^    const double gamma = 30*exaHertz; \/\/19$/;"	m	namespace:electromagnetic
electromagnetic::gamma	src/constants.h	/^    const double gamma = 30*exaHertz; \/\/19$/;"	m	namespace:electromagnetic
electromagnetic::infared	include/Eternia/constants.h	/^    const double infared = 300*gigaHertz; \/\/9$/;"	m	namespace:electromagnetic
electromagnetic::infared	src/constants.h	/^    const double infared = 300*gigaHertz; \/\/9$/;"	m	namespace:electromagnetic
electromagnetic::light	include/Eternia/constants.h	/^    const double light = 400*teraHertz;\/\/12$/;"	m	namespace:electromagnetic
electromagnetic::light	src/constants.h	/^    const double light = 400*teraHertz;\/\/12$/;"	m	namespace:electromagnetic
electromagnetic::microwave	include/Eternia/constants.h	/^    const double microwave = 3*gigaHertz; \/\/9$/;"	m	namespace:electromagnetic
electromagnetic::microwave	src/constants.h	/^    const double microwave = 3*gigaHertz; \/\/9$/;"	m	namespace:electromagnetic
electromagnetic::radio	include/Eternia/constants.h	/^    const double radio = 50*megaHertz;\/\/6$/;"	m	namespace:electromagnetic
electromagnetic::radio	src/constants.h	/^    const double radio = 50*megaHertz;\/\/6$/;"	m	namespace:electromagnetic
electromagnetic::sound	include/Eternia/constants.h	/^    namespace sound {$/;"	n	namespace:electromagnetic
electromagnetic::sound	src/constants.cpp	/^    namespace sound {$/;"	n	namespace:electromagnetic	file:
electromagnetic::sound	src/constants.h	/^    namespace sound {$/;"	n	namespace:electromagnetic
electromagnetic::sound::A	include/Eternia/constants.h	/^        const double A = 27.50;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::A	src/constants.h	/^        const double A = 27.50;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::B	include/Eternia/constants.h	/^        const double B = 30.87;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::B	src/constants.h	/^        const double B = 30.87;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::BA	include/Eternia/constants.h	/^        const double BA = 29.14;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::BA	src/constants.h	/^        const double BA = 29.14;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::C	include/Eternia/constants.h	/^        const double C = 16.35;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::C	src/constants.h	/^        const double C = 16.35;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::CD	include/Eternia/constants.h	/^        const double CD = 17.32;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::CD	src/constants.h	/^        const double CD = 17.32;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::D	include/Eternia/constants.h	/^        const double D = 18.35;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::D	src/constants.h	/^        const double D = 18.35;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::DE	include/Eternia/constants.h	/^        const double DE = 19.45;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::DE	src/constants.h	/^        const double DE = 19.45;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::E	include/Eternia/constants.h	/^        const double E = 20.60;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::E	src/constants.h	/^        const double E = 20.60;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::F	include/Eternia/constants.h	/^        const double F = 21.83;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::F	src/constants.h	/^        const double F = 21.83;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::FG	include/Eternia/constants.h	/^        const double FG = 23.12;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::FG	src/constants.h	/^        const double FG = 23.12;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::G	include/Eternia/constants.h	/^        const double G = 24.50;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::G	src/constants.h	/^        const double G = 24.50;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::GA	include/Eternia/constants.h	/^        const double GA = 25.96;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::GA	src/constants.h	/^        const double GA = 25.96;$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::getNote	include/Eternia/constants.h	/^        double getNote(double Letter, double Octave);$/;"	p	namespace:electromagnetic::sound
electromagnetic::sound::getNote	src/constants.cpp	/^        double getNote(double Letter, double Octave) {$/;"	f	namespace:electromagnetic::sound
electromagnetic::sound::getNote	src/constants.h	/^        double getNote(double Letter, double Octave);$/;"	p	namespace:electromagnetic::sound
electromagnetic::sound::octave	include/Eternia/constants.h	/^        const double octave = 2; \/\/ Frequency doubles every octave$/;"	m	namespace:electromagnetic::sound
electromagnetic::sound::octave	src/constants.h	/^        const double octave = 2; \/\/ Frequency doubles every octave$/;"	m	namespace:electromagnetic::sound
electromagnetic::ultraviolet	include/Eternia/constants.h	/^    const double ultraviolet = 750*petaHertz;\/\/15$/;"	m	namespace:electromagnetic
electromagnetic::ultraviolet	src/constants.h	/^    const double ultraviolet = 750*petaHertz;\/\/15$/;"	m	namespace:electromagnetic
electromagnetic::xray	include/Eternia/constants.h	/^    const double xray = 3*exaHertz; \/\/18$/;"	m	namespace:electromagnetic
electromagnetic::xray	src/constants.h	/^    const double xray = 3*exaHertz; \/\/18$/;"	m	namespace:electromagnetic
electron	include/Eternia/constants.h	/^        const double electron = 9.10938188e-31;$/;"	m	namespace:chemistry::mass
electron	src/constants.h	/^        const double electron = 9.10938188e-31;$/;"	m	namespace:chemistry::mass
electrons	include/Eternia/Engineering/Chemistry/Atom.h	/^        int electrons;$/;"	m	class:Atom
electrons	src/Engineering/Chemistry/Atom.h	/^        int electrons;$/;"	m	class:Atom
elements	include/Eternia/Engineering/Chemistry/Ore.h	/^        CharString *name, *formula, *elements; \/\/ ore name$/;"	m	class:Ore
elements	src/Engineering/Chemistry/Ore.h	/^        CharString *name, *formula, *elements; \/\/ ore name$/;"	m	class:Ore
ell	include/Eternia/constants.h	/^        const double ell = 45.0*inches;$/;"	m	namespace:physical::unit
ell	src/constants.h	/^        const double ell = 45.0*inches;$/;"	m	namespace:physical::unit
ells	include/Eternia/constants.h	/^        const double ells = ell;$/;"	m	namespace:physical::unit
ells	src/constants.h	/^        const double ells = ell;$/;"	m	namespace:physical::unit
elsenode	include/Eternia/Programming/Visual/VProgramNode.h	/^        VProgramNode* elsenode; \/\/ else next node (conditional)$/;"	m	class:VProgramNode
elsenode	src/Programming/Visual/VProgramNode.h	/^        VProgramNode* elsenode; \/\/ else next node (conditional)$/;"	m	class:VProgramNode
emotion	include/Eternia/Gamelogic/Race/Race.h	/^	float emotion; \/\/ amount of emotion, 0=wut, 1=human, 100=crybabies\/revengers$/;"	m	class:Race
emotion	src/Gamelogic/Race/Race.h	/^	float emotion; \/\/ amount of emotion, 0=wut, 1=human, 100=crybabies\/revengers$/;"	m	class:Race
emplacements	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> emplacements; \/\/ base defense$/;"	m	class:CraftingStats
emplacements	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> emplacements; \/\/ base defense$/;"	m	class:CraftingStats
empty	include/Eternia/Data/DoubleList.h	/^        bool empty();$/;"	p	class:DoubleList
empty	include/Eternia/Data/IntegerList.h	/^        bool empty();$/;"	p	class:IntegerList
empty	include/Eternia/Data/PriorityQueue.h	/^        bool empty(); \/\/ returns whether the size is zero, or the head is empty.$/;"	p	class:PriorityQueue
empty	include/Eternia/Data/Queue.h	/^        bool empty();$/;"	p	class:Queue
empty	src/Data/DoubleList.cpp	/^bool DoubleList::empty() {$/;"	f	class:DoubleList
empty	src/Data/DoubleList.h	/^        bool empty();$/;"	p	class:DoubleList
empty	src/Data/IntegerList.cpp	/^bool IntegerList::empty() {$/;"	f	class:IntegerList
empty	src/Data/IntegerList.h	/^        bool empty();$/;"	p	class:IntegerList
empty	src/Data/PriorityQueue.cpp	/^bool PriorityQueue::empty() {$/;"	f	class:PriorityQueue
empty	src/Data/PriorityQueue.h	/^        bool empty(); \/\/ returns whether the size is zero, or the head is empty.$/;"	p	class:PriorityQueue
empty	src/Data/Queue.cpp	/^bool Queue::empty() {$/;"	f	class:Queue
empty	src/Data/Queue.h	/^        bool empty();$/;"	p	class:Queue
enckey	include/Eternia/Algorithm/Cryptography/Aes256.h	/^    uint8_t enckey[32];$/;"	m	struct:__anon7
enckey	src/Algorithm/Cryptography/Aes256.h	/^    uint8_t enckey[32];$/;"	m	struct:__anon1
encode	include/Eternia/Algorithm/Cryptography/md5.h	/^        static void encode(uint1 output[], const uint4 input[], size_type len);$/;"	p	class:MD5
encode	include/Eternia/WebFramework/Encoding/CompressedJSON.h	/^        CharString static encode(CharString data);$/;"	p	class:CompressedJSON
encode	include/Eternia/WebFramework/Encoding/JSON.h	/^        CharString static encode(CharString data);$/;"	p	class:JSON
encode	src/Algorithm/Cryptography/md5.cpp	/^void MD5::encode(uint1 output[], const uint4 input[], size_type len) {$/;"	f	class:MD5
encode	src/Algorithm/Cryptography/md5.h	/^        static void encode(uint1 output[], const uint4 input[], size_type len);$/;"	p	class:MD5
encode	src/WebFramework/Encoding/CompressedJSON.h	/^        CharString static encode(CharString data);$/;"	p	class:CompressedJSON
encode	src/WebFramework/Encoding/JSON.h	/^        CharString static encode(CharString data);$/;"	p	class:JSON
encodeText	include/Eternia/Parsing/SecuredParser.h	/^        CharString* encodeText(CharString* ss);$/;"	p	class:SecuredParser
encodeText	src/Parsing/SecuredParser.cpp	/^CharString* SecuredParser::encodeText(CharString* ss) {$/;"	f	class:SecuredParser
encodeText	src/Parsing/SecuredParser.h	/^        CharString* encodeText(CharString* ss);$/;"	p	class:SecuredParser
encodeUrl	include/Eternia/WebFramework/Encoding/UrlEncoding.h	/^        static CharString encodeUrl(CharString url);$/;"	p	class:UrlEncoding
encodeUrl	src/WebFramework/Encoding/UrlEncoding.h	/^        static CharString encodeUrl(CharString url);$/;"	p	class:UrlEncoding
endProfile	include/Eternia/Data/TimeProfiler.h	/^    void endProfile(); \/\/ end the profiler, do tallies$/;"	p	class:TimeProfiler
endProfile	src/Data/TimeProfiler.cpp	/^void TimeProfiler::endProfile(){$/;"	f	class:TimeProfiler
endProfile	src/Data/TimeProfiler.h	/^    void endProfile(); \/\/ end the profiler, do tallies$/;"	p	class:TimeProfiler
ender	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        char ender;$/;"	m	class:SecuredCPUInstructables
ender	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        char ender;$/;"	m	class:SecuredGPUInstructables
ender	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        char ender;$/;"	m	class:SecuredCPUInstructables
ender	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        char ender;$/;"	m	class:SecuredGPUInstructables
ending	include/Eternia/Data/Logger/Logger.h	/^    bool async, console, ending;$/;"	m	class:Logger
ending	src/Data/Logger/Logger.h	/^    bool async, console, ending;$/;"	m	class:Logger
endpoints	include/Eternia/WebFramework/Network/RESTFulServer.h	/^        unordered_list<string,string>* endpoints;$/;"	m	class:RESTFulServer
endpoints	src/WebFramework/Network/RESTFulServer.h	/^        unordered_list<string,string>* endpoints;$/;"	m	class:RESTFulServer
endsWith	include/Eternia/Data/CharString.h	/^        bool endsWith(CharString ender);$/;"	p	class:CharString
endsWith	src/Data/CharString.cpp	/^bool CharString::endsWith(CharString ender) {$/;"	f	class:CharString
endsWith	src/Data/CharString.h	/^        bool endsWith(CharString ender);$/;"	p	class:CharString
energyType	include/Eternia/Engineering/Physics/Work.h	/^        KEnergyType energyType; \/\/ PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy$/;"	m	class:EnergyValue
energyType	src/Engineering/Physics/Work.h	/^        KEnergyType energyType; \/\/ PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy$/;"	m	class:EnergyValue
engine	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> engine; \/\/ skill in making better, faster engines.$/;"	m	class:CraftingStats
engine	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> engine; \/\/ skill in making better, faster engines.$/;"	m	class:CraftingStats
engineers	include/Eternia/constants.h	/^        namespace engineers {$/;"	n	namespace:physical::unit
engineers	src/constants.h	/^        namespace engineers {$/;"	n	namespace:physical::unit
entries	include/Eternia/Data/FileCache.hpp	/^        unordered_map<long, T> entries; \/\/ RAM entries.$/;"	m	class:FileCache
entries	include/Eternia/Data/HashMap.hpp	/^        HTEntry<T>* entries;$/;"	m	class:HashMap
entries	include/Eternia/Data/HashTable.h	/^        HTEntry* entries;$/;"	m	class:HashTable
entries	src/Data/FileCache.hpp	/^        unordered_map<long, T> entries; \/\/ RAM entries.$/;"	m	class:FileCache
entries	src/Data/HashMap.hpp	/^        HTEntry<T>* entries;$/;"	m	class:HashMap
entries	src/Data/HashTable.h	/^        HTEntry* entries;$/;"	m	class:HashTable
epsilon	include/Eternia/constants.h	/^        const double epsilon = 8.854187817e-12*Farads\/meter;$/;"	m	namespace:physical::constant
epsilon	src/constants.h	/^        const double epsilon = 8.854187817e-12*Farads\/meter;$/;"	m	namespace:physical::constant
eq	include/Eternia/Math/Equation.h	/^        CharString* eq;$/;"	m	class:Equation
eq	src/Math/Equation.h	/^        CharString* eq;$/;"	m	class:Equation
equals	include/Eternia/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	e	enum:MOperator
equals	src/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	e	enum:MOperator
equation	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        Equation* equation;$/;"	m	class:Force
equation	src/Engineering/Physics/Kinematics/FreeBody.h	/^        Equation* equation;$/;"	m	class:Force
equivalent	include/Eternia/constants.h	/^        namespace equivalent {$/;"	n	namespace:physical::unit
equivalent	src/constants.h	/^        namespace equivalent {$/;"	n	namespace:physical::unit
erase	include/Eternia/Data/DoubleList.h	/^        double erase(int index);$/;"	p	class:DoubleList
erase	include/Eternia/Data/IntegerList.h	/^        int erase(int i);$/;"	p	class:IntegerList
erase	src/Data/DoubleList.cpp	/^double DoubleList::erase(int index) {$/;"	f	class:DoubleList
erase	src/Data/DoubleList.h	/^        double erase(int index);$/;"	p	class:DoubleList
erase	src/Data/IntegerList.cpp	/^int IntegerList::erase(int index) {$/;"	f	class:IntegerList
erase	src/Data/IntegerList.h	/^        int erase(int i);$/;"	p	class:IntegerList
eraseEdge	include/Eternia/Data/Graph.h	/^        void eraseEdge(GEdge* e); \/\/ erase an edge$/;"	p	class:Graph
eraseEdge	src/Data/Graph.h	/^        void eraseEdge(GEdge* e); \/\/ erase an edge$/;"	p	class:Graph
eraseVertex	include/Eternia/Data/Graph.h	/^        void eraseVertex(GVertex* v); \/\/ remove all related edges$/;"	p	class:Graph
eraseVertex	src/Data/Graph.h	/^        void eraseVertex(GVertex* v); \/\/ remove all related edges$/;"	p	class:Graph
erg	include/Eternia/constants.h	/^        const double erg = Joule\/10000000.0;$/;"	m	namespace:physical::unit
erg	src/constants.h	/^        const double erg = Joule\/10000000.0;$/;"	m	namespace:physical::unit
ergs	include/Eternia/constants.h	/^        const double ergs = erg;$/;"	m	namespace:physical::unit
ergs	src/constants.h	/^        const double ergs = erg;$/;"	m	namespace:physical::unit
error	include/Eternia/WebFramework/Network/SocketServer.h	/^#define error(/;"	d
error	src/WebFramework/Network/SocketServer.h	/^#define error(/;"	d
evaluate	include/Eternia/Math/Equation.h	/^        double evaluate(double a, double b); \/\/ evaluate equation with a TO b. only works with one variable.$/;"	p	class:Equation
evaluate	src/Math/Equation.h	/^        double evaluate(double a, double b); \/\/ evaluate equation with a TO b. only works with one variable.$/;"	p	class:Equation
evaluate	src/Math/Equation_CALC.cpp	/^double Equation::evaluate(double a, double b) {$/;"	f	class:Equation
events	include/Eternia/API/APICore.h	/^    APIEventRegistry events; \/\/ registry for event listeners$/;"	m	class:APICore
events	src/API/APICore.h	/^    APIEventRegistry events; \/\/ registry for event listeners$/;"	m	class:APICore
exHash	include/Eternia/Algorithm/Cryptography/ExHash.h	/^CharString* exHash(CharString *str, CharString* salt, int bits);$/;"	p
exHash	src/Algorithm/Cryptography/ExHash.h	/^CharString* exHash(CharString *str, CharString* salt, int bits);$/;"	p
exHashChars	include/Eternia/Algorithm/Cryptography/ExHash.h	/^CharString* exHashChars(CharString *str, CharString* salt, int outchars);$/;"	p
exHashChars	src/Algorithm/Cryptography/ExHash.h	/^CharString* exHashChars(CharString *str, CharString* salt, int outchars);$/;"	p
exHashDivValue	src/Algorithm/Cryptography/ExHash.cpp	/^uint64_t exHashDivValue(uint64_t sum, uint64_t maxVal) {$/;"	f
exHashPrime	src/Algorithm/Cryptography/ExHash.cpp	/^uint64_t exHashPrime(char* str, int len, uint64_t maxVal) {$/;"	f
exHashShuffleBits	src/Algorithm/Cryptography/ExHash.cpp	/^uint64_t exHashShuffleBits(uint64_t sum) {$/;"	f
exSumMap	include/Eternia/Algorithm/Cryptography/ExHash.h	/^uint64_t exSumMap(CharString *str, uint64_t maxVal, int steps);$/;"	p
exSumMap	src/Algorithm/Cryptography/ExHash.cpp	/^uint64_t exSumMap(CharString *str, uint64_t maxVal, int steps) {$/;"	f
exSumMap	src/Algorithm/Cryptography/ExHash.h	/^uint64_t exSumMap(CharString *str, uint64_t maxVal, int steps);$/;"	p
exVAL	include/Eternia/WebFramework/Network/SockClient.h	/^        void* exVAL;$/;"	m	class:SockClient
exVAL	include/Eternia/WebFramework/Network/SocketServer.h	/^    void* exVAL;$/;"	m	class:SocketServer
exVAL	src/WebFramework/Network/SockClient.h	/^        void* exVAL;$/;"	m	class:SockClient
exVAL	src/WebFramework/Network/SocketServer.h	/^    void* exVAL;$/;"	m	class:SocketServer
exa	include/Eternia/constants.h	/^        const double exa = 1e18;$/;"	m	namespace:physical::unit
exa	src/constants.h	/^        const double exa = 1e18;$/;"	m	namespace:physical::unit
exa1	src/Algorithm/Cryptography/ExHash.cpp	/^#define exa1 /;"	d	file:
exa2	src/Algorithm/Cryptography/ExHash.cpp	/^#define exa2 /;"	d	file:
exa3	src/Algorithm/Cryptography/ExHash.cpp	/^#define exa3 /;"	d	file:
exa4	src/Algorithm/Cryptography/ExHash.cpp	/^#define exa4 /;"	d	file:
exa64_1	src/Algorithm/Cryptography/ExHash.cpp	/^#define exa64_1 /;"	d	file:
exa64_2	src/Algorithm/Cryptography/ExHash.cpp	/^#define exa64_2 /;"	d	file:
exa64_3	src/Algorithm/Cryptography/ExHash.cpp	/^#define exa64_3 /;"	d	file:
exa64_4	src/Algorithm/Cryptography/ExHash.cpp	/^#define exa64_4 /;"	d	file:
exaHertz	include/Eternia/constants.h	/^        const double exaHertz = exa*Hertz;$/;"	m	namespace:physical::unit
exaHertz	src/constants.h	/^        const double exaHertz = exa*Hertz;$/;"	m	namespace:physical::unit
exec	include/Eternia/Emulation/MPU/msp430.h	/^        void exec(unsigned int address); \/\/ execute a line with PC$/;"	p	class:MSP430
exec	src/Emulation/MPU/msp430.cpp	/^void MSP430::exec(unsigned int) {$/;"	f	class:MSP430
exec	src/Emulation/MPU/msp430.h	/^        void exec(unsigned int address); \/\/ execute a line with PC$/;"	p	class:MSP430
exponent	include/Eternia/Math/Eval.h	/^                addition=7,subtraction=8,multiplication=9,division=10,Modulus=11,exponent=12$/;"	e	enum:MOperator
exponent	src/Math/Eval.h	/^                addition=7,subtraction=8,multiplication=9,division=10,Modulus=11,exponent=12$/;"	e	enum:MOperator
eye_color	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex eye_color; \/\/ eye color$/;"	m	class:AvatarAppearance
eye_color	src/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex eye_color; \/\/ eye color$/;"	m	class:AvatarAppearance
eyebrow_color	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex hair_color, beard_color, eyebrow_color; \/\/ hair color$/;"	m	class:AvatarAppearance
eyebrow_color	src/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex hair_color, beard_color, eyebrow_color; \/\/ hair color$/;"	m	class:AvatarAppearance
eyebrow_height	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> eyebrow_height, nose_height, mouth_height;$/;"	m	class:AvatarAppearance
eyebrow_height	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> eyebrow_height, nose_height, mouth_height;$/;"	m	class:AvatarAppearance
faction	include/Eternia/Gamelogic/Social/War/WarParty.h	/^        WARPARTYType faction;$/;"	m	class:WarParty
faction	src/Gamelogic/Social/War/WarParty.h	/^        WARPARTYType faction;$/;"	m	class:WarParty
factorial	include/Eternia/Math/Functions/Basic.h	/^    double factorial(double a); \/\/ finds the factorial of the numberex−e−x2$/;"	p	namespace:Math
factorial	src/Math/Functions/Basic.cpp	/^    double factorial(double x) {$/;"	f	namespace:Math
factorial	src/Math/Functions/Basic.h	/^    double factorial(double a); \/\/ finds the factorial of the numberex−e−x2$/;"	p	namespace:Math
factory	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> factory; \/\/ skill in making more efficient factories. (minigame?)$/;"	m	class:CraftingStats
factory	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> factory; \/\/ skill in making more efficient factories. (minigame?)$/;"	m	class:CraftingStats
falseValue	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T falseValue; \/\/ false value that can be changed, but will do nothing$/;"	m	class:CryptoDefiner
falseValue	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T falseValue; \/\/ false value that can be changed, but will do nothing$/;"	m	class:CryptoDefiner
fathom	include/Eternia/constants.h	/^        const double fathom = 6.0*feet;$/;"	m	namespace:physical::unit
fathom	src/constants.h	/^        const double fathom = 6.0*feet;$/;"	m	namespace:physical::unit
fathoms	include/Eternia/constants.h	/^        const double fathoms = fathom;$/;"	m	namespace:physical::unit
fathoms	src/constants.h	/^        const double fathoms = fathom;$/;"	m	namespace:physical::unit
fc	include/Eternia/constants.h	/^            const double fc = foot_candle;$/;"	m	namespace:physical::unit::equivalent
fc	include/Eternia/constants.h	/^        const double fc = foot_candle;$/;"	m	namespace:physical::unit
fc	src/constants.h	/^            const double fc = foot_candle;$/;"	m	namespace:physical::unit::equivalent
fc	src/constants.h	/^        const double fc = foot_candle;$/;"	m	namespace:physical::unit
features	CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
feet	include/Eternia/constants.h	/^            const double feet = foot;$/;"	m	namespace:physical::unit::geodetic
feet	include/Eternia/constants.h	/^        const double feet = foot;$/;"	m	namespace:physical::unit
feet	src/constants.h	/^            const double feet = foot;$/;"	m	namespace:physical::unit::geodetic
feet	src/constants.h	/^        const double feet = foot;$/;"	m	namespace:physical::unit
fft	include/Eternia/Math/Functions/FFT.h	/^void fft(LinkedList<Complex> &complexlist);$/;"	p
fft	src/Math/Functions/FFT.cpp	/^void fft(LinkedList<Complex> &x)$/;"	f
fft	src/Math/Functions/FFT.h	/^void fft(LinkedList<Complex> &complexlist);$/;"	p
field	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBField* field;$/;"	m	class:AbstractDBFieldValue
field	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBField* field;$/;"	m	class:AbstractDBFieldValue
fieldList	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* fieldList;$/;"	m	class:AbstractDBRow
fieldList	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* fieldList;$/;"	m	class:AbstractDBRow
fields	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset *fields;$/;"	m	class:AbstractDBTable
fields	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset *fields;$/;"	m	class:AbstractDBTable
fieldtype	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ADBF_TYPE fieldtype;$/;"	m	class:AbstractDBField
fieldtype	src/Data/AbstractDatabase/AbstractDB.h	/^        ADBF_TYPE fieldtype;$/;"	m	class:AbstractDBField
fifth	include/Eternia/constants.h	/^        const double fifth = US::liquid::gallon\/5.0;$/;"	m	namespace:physical::unit
fifth	src/constants.h	/^        const double fifth = US::liquid::gallon\/5.0;$/;"	m	namespace:physical::unit
fifths	include/Eternia/constants.h	/^        const double fifths = fifth;$/;"	m	namespace:physical::unit
fifths	src/constants.h	/^        const double fifths = fifth;$/;"	m	namespace:physical::unit
file	include/Eternia/API/APIMod.h	/^    CharString file, language, version;$/;"	m	class:APIMod
file	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        fstream file, filetmp;$/;"	m	class:AbstractDBTable
file	include/Eternia/Data/Logger/Logger.h	/^    std::ofstream file;$/;"	m	class:Logger
file	include/Eternia/Parsing/SecuredParser.h	/^        CharString* file;$/;"	m	class:SecuredParser
file	src/API/APIMod.h	/^    CharString file, language, version;$/;"	m	class:APIMod
file	src/Data/AbstractDatabase/AbstractDB.h	/^        fstream file, filetmp;$/;"	m	class:AbstractDBTable
file	src/Data/Logger/Logger.h	/^    std::ofstream file;$/;"	m	class:Logger
file	src/Parsing/SecuredParser.h	/^        CharString* file;$/;"	m	class:SecuredParser
fileClose	include/Eternia/Parsing/LoadFile.h	/^void fileClose(ifstream &file); \/\/ close the file stream$/;"	p
fileClose	src/Parsing/LoadFile.cpp	/^void fileClose(ifstream &file) {$/;"	f
fileClose	src/Parsing/LoadFile.h	/^void fileClose(ifstream &file); \/\/ close the file stream$/;"	p
fileGetLine	include/Eternia/Parsing/LoadFile.h	/^CharString fileGetLine(ifstream &file); \/\/ read a single line from the file$/;"	p
fileGetLine	src/Parsing/LoadFile.cpp	/^CharString fileGetLine(ifstream &file) {$/;"	f
fileGetLine	src/Parsing/LoadFile.h	/^CharString fileGetLine(ifstream &file); \/\/ read a single line from the file$/;"	p
fileOpen	include/Eternia/Parsing/LoadFile.h	/^void fileOpen(ifstream &infile, char* filename); \/\/ open a file for writing$/;"	p
fileOpen	src/Parsing/LoadFile.cpp	/^void fileOpen(ifstream &infile, char* filename) {$/;"	f
fileOpen	src/Parsing/LoadFile.h	/^void fileOpen(ifstream &infile, char* filename); \/\/ open a file for writing$/;"	p
fileWrite	include/Eternia/Parsing/LoadFile.h	/^void fileWrite(ifstream &file, CharString* data); \/\/ write a block of text to the file$/;"	p
fileWrite	src/Parsing/LoadFile.cpp	/^void fileWrite(ifstream &file, CharString* data) {$/;"	f
fileWrite	src/Parsing/LoadFile.h	/^void fileWrite(ifstream &file, CharString* data); \/\/ write a block of text to the file$/;"	p
fileloc	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        char* fileloc;$/;"	m	class:AbstractDBTable
fileloc	src/Data/AbstractDatabase/AbstractDB.h	/^        char* fileloc;$/;"	m	class:AbstractDBTable
filesize	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^std::ifstream::pos_type filesize(fstream &in);$/;"	p
filesize	src/Data/AbstractDatabase/AbstractDB.h	/^std::ifstream::pos_type filesize(fstream &in);$/;"	p
filesize	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^std::ifstream::pos_type filesize(fstream &in) {$/;"	f
filetmp	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        fstream file, filetmp;$/;"	m	class:AbstractDBTable
filetmp	src/Data/AbstractDatabase/AbstractDB.h	/^        fstream file, filetmp;$/;"	m	class:AbstractDBTable
finalize	include/Eternia/Algorithm/Cryptography/md5.h	/^        MD5& finalize();$/;"	p	class:MD5
finalize	src/Algorithm/Cryptography/md5.cpp	/^MD5& MD5::finalize() {$/;"	f	class:MD5
finalize	src/Algorithm/Cryptography/md5.h	/^        MD5& finalize();$/;"	p	class:MD5
finalized	include/Eternia/Algorithm/Cryptography/md5.h	/^        bool finalized;$/;"	m	class:MD5
finalized	src/Algorithm/Cryptography/md5.h	/^        bool finalized;$/;"	m	class:MD5
find	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        P2PNode* find(char* playername);$/;"	p	class:P2PNodeCache
find	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.cpp	/^P2PNode* P2PNodeCache::find(char* playername) {$/;"	f	class:P2PNodeCache
find	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        P2PNode* find(char* playername);$/;"	p	class:P2PNodeCache
findinsertionposition	include/Eternia/Data/Heap.h	/^        int findinsertionposition(); \/\/ finds the correct insertion position.$/;"	p	class:Heap
findinsertionposition	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem* findinsertionposition(PriorityItem* current); \/\/ finds the correct insertion position.$/;"	p	class:PriorityQueue
findinsertionposition	src/Data/Heap.cpp	/^int Heap::findinsertionposition() {$/;"	f	class:Heap
findinsertionposition	src/Data/Heap.h	/^        int findinsertionposition(); \/\/ finds the correct insertion position.$/;"	p	class:Heap
findinsertionposition	src/Data/PriorityQueue.cpp	/^PriorityItem* PriorityQueue::findinsertionposition(PriorityItem* current) {$/;"	f	class:PriorityQueue
findinsertionposition	src/Data/PriorityQueue.h	/^        PriorityItem* findinsertionposition(PriorityItem* current); \/\/ finds the correct insertion position.$/;"	p	class:PriorityQueue
findlastinsertionposition	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem* findlastinsertionposition(PriorityItem* current); \/\/ finds the LAST available tree leaf.$/;"	p	class:PriorityQueue
findlastinsertionposition	src/Data/PriorityQueue.cpp	/^PriorityItem* PriorityQueue::findlastinsertionposition(PriorityItem* current) {$/;"	f	class:PriorityQueue
findlastinsertionposition	src/Data/PriorityQueue.h	/^        PriorityItem* findlastinsertionposition(PriorityItem* current); \/\/ finds the LAST available tree leaf.$/;"	p	class:PriorityQueue
finger	include/Eternia/constants.h	/^        const double finger = 7.0*inches\/8.0;$/;"	m	namespace:physical::unit
finger	src/constants.h	/^        const double finger = 7.0*inches\/8.0;$/;"	m	namespace:physical::unit
fingers	include/Eternia/constants.h	/^        const double fingers = finger;$/;"	m	namespace:physical::unit
fingers	src/constants.h	/^        const double fingers = finger;$/;"	m	namespace:physical::unit
firkin	include/Eternia/constants.h	/^        const double firkin = 9.0*US::liquid::gallons;$/;"	m	namespace:physical::unit
firkin	src/constants.h	/^        const double firkin = 9.0*US::liquid::gallons;$/;"	m	namespace:physical::unit
firkins	include/Eternia/constants.h	/^        const double firkins = firkin;$/;"	m	namespace:physical::unit
firkins	src/constants.h	/^        const double firkins = firkin;$/;"	m	namespace:physical::unit
floor	include/Eternia/Math/Functions/Basic.h	/^    int floor(double val);$/;"	p	namespace:Math
floor	src/Math/Functions/Basic.cpp	/^    int floor(double val) {$/;"	f	namespace:Math
floor	src/Math/Functions/Basic.h	/^    int floor(double val);$/;"	p	namespace:Math
fluid	include/Eternia/constants.h	/^            namespace fluid {$/;"	n	namespace:physical::unit::British
fluid	src/constants.h	/^            namespace fluid {$/;"	n	namespace:physical::unit::British
flush	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    void flush();$/;"	p	class:VoxelGeom
flush	src/Gamelogic/Voxel/VoxelGeom.h	/^    void flush();$/;"	p	class:VoxelGeom
flushTable	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void flushTable(); \/\/ writes all data in cache to file$/;"	p	class:AbstractDBTable
flushTable	src/Data/AbstractDatabase/AbstractDB.h	/^        void flushTable(); \/\/ writes all data in cache to file$/;"	p	class:AbstractDBTable
flushTable	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^void AbstractDBTable::flushTable() {$/;"	f	class:AbstractDBTable
fm	include/Eternia/constants.h	/^        const double fm = fathom;$/;"	m	namespace:physical::unit
fm	src/constants.h	/^        const double fm = fathom;$/;"	m	namespace:physical::unit
foot	include/Eternia/constants.h	/^            const double foot = (1200.0\/3937.0)*meters;$/;"	m	namespace:physical::unit::geodetic
foot	include/Eternia/constants.h	/^        const double foot = 12.0*inches;$/;"	m	namespace:physical::unit
foot	src/constants.h	/^            const double foot = (1200.0\/3937.0)*meters;$/;"	m	namespace:physical::unit::geodetic
foot	src/constants.h	/^        const double foot = 12.0*inches;$/;"	m	namespace:physical::unit
foot_Lambert	include/Eternia/constants.h	/^        const double foot_Lambert = candelas\/foot\/foot\/pi;$/;"	m	namespace:physical::unit
foot_Lambert	src/constants.h	/^        const double foot_Lambert = candelas\/foot\/foot\/pi;$/;"	m	namespace:physical::unit
foot_Lamberts	include/Eternia/constants.h	/^        const double foot_Lamberts = foot_Lambert;$/;"	m	namespace:physical::unit
foot_Lamberts	src/constants.h	/^        const double foot_Lamberts = foot_Lambert;$/;"	m	namespace:physical::unit
foot_candle	include/Eternia/constants.h	/^            const double foot_candle = unit::foot_candle\/pi;$/;"	m	namespace:physical::unit::equivalent
foot_candle	include/Eternia/constants.h	/^        const double foot_candle = lumens\/foot\/foot;$/;"	m	namespace:physical::unit
foot_candle	src/constants.h	/^            const double foot_candle = unit::foot_candle\/pi;$/;"	m	namespace:physical::unit::equivalent
foot_candle	src/constants.h	/^        const double foot_candle = lumens\/foot\/foot;$/;"	m	namespace:physical::unit
foot_candles	include/Eternia/constants.h	/^            const double foot_candles = foot_candle;$/;"	m	namespace:physical::unit::equivalent
foot_candles	include/Eternia/constants.h	/^        const double foot_candles = foot_candle;$/;"	m	namespace:physical::unit
foot_candles	src/constants.h	/^            const double foot_candles = foot_candle;$/;"	m	namespace:physical::unit::equivalent
foot_candles	src/constants.h	/^        const double foot_candles = foot_candle;$/;"	m	namespace:physical::unit
force	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        KItem* force; \/\/ type of force$/;"	m	class:Force
force	src/Engineering/Physics/Kinematics/FreeBody.h	/^        KItem* force; \/\/ type of force$/;"	m	class:Force
forceList	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        LinkedListT *forceList;$/;"	m	class:FreeBody
forceList	src/Engineering/Physics/Kinematics/FreeBody.h	/^        LinkedListT *forceList;$/;"	m	class:FreeBody
formula	include/Eternia/Engineering/Chemistry/Ore.h	/^        CharString *name, *formula, *elements; \/\/ ore name$/;"	m	class:Ore
formula	include/Eternia/Engineering/Chemistry/Ore.h	/^        Composite* formula; \/\/ formula used for this ore$/;"	m	class:Ore
formula	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	char* formula;$/;"	m	class:PhysicalMaterial
formula	src/Engineering/Chemistry/Ore.h	/^        CharString *name, *formula, *elements; \/\/ ore name$/;"	m	class:Ore
formula	src/Engineering/Chemistry/Ore.h	/^        Composite* formula; \/\/ formula used for this ore$/;"	m	class:Ore
formula	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	char* formula;$/;"	m	class:PhysicalMaterial
fortnight	include/Eternia/constants.h	/^        const double fortnight = 2.0*weeks;$/;"	m	namespace:physical::unit
fortnight	src/constants.h	/^        const double fortnight = 2.0*weeks;$/;"	m	namespace:physical::unit
fortnights	include/Eternia/constants.h	/^        const double fortnights = fortnight;$/;"	m	namespace:physical::unit
fortnights	src/constants.h	/^        const double fortnights = fortnight;$/;"	m	namespace:physical::unit
freeze	include/Eternia/Data/LinkedList.hpp	/^    void freeze() {$/;"	f	class:LinkedList
freeze	include/Eternia/Data/LinkedListT.h	/^        void freeze();$/;"	p	class:LinkedListT
freeze	src/Data/LinkedList.hpp	/^    void freeze() {$/;"	f	class:LinkedList
freeze	src/Data/LinkedListT.cpp	/^void LinkedListT::freeze() {$/;"	f	class:LinkedListT
freeze	src/Data/LinkedListT.h	/^        void freeze();$/;"	p	class:LinkedListT
frequency	include/Eternia/Emulation/SecondTick.h	/^        double frequency;$/;"	m	class:SecondTick
frequency	include/Eternia/Engineering/Electrical/Components/Inverter.h	/^        double frequency; \/\/ frequency at which the inverter converts DC to.$/;"	m	class:Inverter
frequency	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        int frequency, Counter;$/;"	m	class:CLKModule
frequency	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
frequency	src/Emulation/SecondTick.h	/^        double frequency;$/;"	m	class:SecondTick
frequency	src/Engineering/Electrical/Components/Inverter.h	/^        double frequency; \/\/ frequency at which the inverter converts DC to.$/;"	m	class:Inverter
frequency	src/Engineering/Electrical/Signal/CLKProvider.h	/^        int frequency, Counter;$/;"	m	class:CLKModule
frequency	src/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
fromID	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        long fromID;$/;"	m	class:VoipPacket
fromID	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        long fromID;$/;"	m	class:VoipPacket
fromPeerID	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        long fromPeerID;$/;"	m	class:P2PPassagePacket
fromPeerID	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        long fromPeerID;$/;"	m	class:P2PPassagePacket
fromPolar	include/Eternia/Math/Complex.hpp	/^    static Complex fromPolar(float r, float theta){$/;"	f	class:Complex
fromPolar	src/Math/Complex.hpp	/^    static Complex fromPolar(float r, float theta){$/;"	f	class:Complex
front	include/Eternia/Data/DoubleList.h	/^        double front();$/;"	p	class:DoubleList
front	include/Eternia/Data/IntegerList.h	/^        int front();$/;"	p	class:IntegerList
front	include/Eternia/Data/Queue.h	/^        void* front();$/;"	p	class:Queue
front	src/Data/DoubleList.cpp	/^double DoubleList::front() {$/;"	f	class:DoubleList
front	src/Data/DoubleList.h	/^        double front();$/;"	p	class:DoubleList
front	src/Data/IntegerList.cpp	/^int IntegerList::front() {$/;"	f	class:IntegerList
front	src/Data/IntegerList.h	/^        int front();$/;"	p	class:IntegerList
front	src/Data/Queue.cpp	/^void* Queue::front() {$/;"	f	class:Queue
front	src/Data/Queue.h	/^        void* front();$/;"	p	class:Queue
frozen	include/Eternia/Data/LinkedList.hpp	/^    T **frozen;$/;"	m	class:LinkedList
frozen	include/Eternia/Data/LinkedListT.h	/^        void **frozen;$/;"	m	class:LinkedListT
frozen	src/Data/LinkedList.hpp	/^    T **frozen;$/;"	m	class:LinkedList
frozen	src/Data/LinkedListT.h	/^        void **frozen;$/;"	m	class:LinkedListT
frozenList	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode** frozenList;$/;"	m	class:AbstractDBLinkedDataset
frozenList	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode** frozenList;$/;"	m	class:AbstractDBLinkedDataset
frozen_get	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* frozen_get(int index);  \/\/ get an element$/;"	p	class:AbstractDBLinkedDataset
frozen_get	src/Data/AbstractDatabase/AbstractDB.h	/^        void* frozen_get(int index);  \/\/ get an element$/;"	p	class:AbstractDBLinkedDataset
frozen_get	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void* AbstractDBLinkedDataset::frozen_get(int index) {$/;"	f	class:AbstractDBLinkedDataset
frozen_remove	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* frozen_remove(int index); \/\/ remove an element$/;"	p	class:AbstractDBLinkedDataset
frozen_remove	src/Data/AbstractDatabase/AbstractDB.h	/^        void* frozen_remove(int index); \/\/ remove an element$/;"	p	class:AbstractDBLinkedDataset
frozen_remove	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void* AbstractDBLinkedDataset::frozen_remove(int index) {$/;"	f	class:AbstractDBLinkedDataset
frozen_set	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void frozen_set(int index, void* value); \/\/ set an element$/;"	p	class:AbstractDBLinkedDataset
frozen_set	src/Data/AbstractDatabase/AbstractDB.h	/^        void frozen_set(int index, void* value); \/\/ set an element$/;"	p	class:AbstractDBLinkedDataset
frozen_set	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void AbstractDBLinkedDataset::frozen_set(int index, void* value) {$/;"	f	class:AbstractDBLinkedDataset
frozenlen	include/Eternia/Data/LinkedList.hpp	/^    int frozenlen;$/;"	m	class:LinkedList
frozenlen	include/Eternia/Data/LinkedListT.h	/^        int frozenlen;$/;"	m	class:LinkedListT
frozenlen	src/Data/LinkedList.hpp	/^    int frozenlen;$/;"	m	class:LinkedList
frozenlen	src/Data/LinkedListT.h	/^        int frozenlen;$/;"	m	class:LinkedListT
ft	include/Eternia/constants.h	/^            const double ft = foot;$/;"	m	namespace:physical::unit::geodetic
ft	include/Eternia/constants.h	/^        const double ft = foot;$/;"	m	namespace:physical::unit
ft	src/constants.h	/^            const double ft = foot;$/;"	m	namespace:physical::unit::geodetic
ft	src/constants.h	/^        const double ft = foot;$/;"	m	namespace:physical::unit
fullAtDepth	include/Eternia/Data/PriorityQueue.h	/^        bool fullAtDepth(PriorityItem* c); \/\/ determines if the branch has even left and right bottoms.$/;"	p	class:PriorityQueue
fullAtDepth	src/Data/PriorityQueue.cpp	/^bool PriorityQueue::fullAtDepth(PriorityItem* c) {$/;"	f	class:PriorityQueue
fullAtDepth	src/Data/PriorityQueue.h	/^        bool fullAtDepth(PriorityItem* c); \/\/ determines if the branch has even left and right bottoms.$/;"	p	class:PriorityQueue
func	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        void (func)();$/;"	p	class:CLKModule
func	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void (*func)(bool);$/;"	m	class:PWM
func	src/Engineering/Electrical/Signal/CLKProvider.h	/^        void (func)();$/;"	p	class:CLKModule
func	src/Engineering/Electrical/Signal/PWM.h	/^    void (*func)(bool);$/;"	m	class:PWM
furlong	include/Eternia/constants.h	/^        const double furlong = 220*yards;$/;"	m	namespace:physical::unit
furlong	src/constants.h	/^        const double furlong = 220*yards;$/;"	m	namespace:physical::unit
furlongs	include/Eternia/constants.h	/^        const double furlongs = furlong;$/;"	m	namespace:physical::unit
furlongs	src/constants.h	/^        const double furlongs = furlong;$/;"	m	namespace:physical::unit
g	include/Eternia/Data/BitMap.h	/^        unsigned char g;$/;"	m	class:bmbit
g	include/Eternia/constants.h	/^        const double g = gram;$/;"	m	namespace:physical::unit
g	include/Eternia/constants.h	/^        const double g = units::gravity;$/;"	m	namespace:physical::constant
g	src/Data/BitMap.h	/^        unsigned char g;$/;"	m	class:bmbit
g	src/constants.h	/^        const double g = gram;$/;"	m	namespace:physical::unit
g	src/constants.h	/^        const double g = units::gravity;$/;"	m	namespace:physical::constant
gal	include/Eternia/constants.h	/^                const double gal = gallon;$/;"	m	namespace:physical::unit::British::fluid
gal	include/Eternia/constants.h	/^                const double gal = gallon;$/;"	m	namespace:physical::unit::US::liquid
gal	src/constants.h	/^                const double gal = gallon;$/;"	m	namespace:physical::unit::British::fluid
gal	src/constants.h	/^                const double gal = gallon;$/;"	m	namespace:physical::unit::US::liquid
gallon	include/Eternia/constants.h	/^                const double gallon = 4.0*quarts;$/;"	m	namespace:physical::unit::British::fluid
gallon	include/Eternia/constants.h	/^                const double gallon = 4.0*quarts;$/;"	m	namespace:physical::unit::US::liquid
gallon	src/constants.h	/^                const double gallon = 4.0*quarts;$/;"	m	namespace:physical::unit::British::fluid
gallon	src/constants.h	/^                const double gallon = 4.0*quarts;$/;"	m	namespace:physical::unit::US::liquid
gallons	include/Eternia/constants.h	/^                const double gallons = gallon;$/;"	m	namespace:physical::unit::British::fluid
gallons	include/Eternia/constants.h	/^                const double gallons = gallon;$/;"	m	namespace:physical::unit::US::liquid
gallons	src/constants.h	/^                const double gallons = gallon;$/;"	m	namespace:physical::unit::British::fluid
gallons	src/constants.h	/^                const double gallons = gallon;$/;"	m	namespace:physical::unit::US::liquid
gamma	include/Eternia/constants.h	/^        const double gamma = Tesla\/1000000000.0;$/;"	m	namespace:physical::unit
gamma	include/Eternia/constants.h	/^    const double gamma = 30*exaHertz; \/\/19$/;"	m	namespace:electromagnetic
gamma	src/constants.h	/^        const double gamma = Tesla\/1000000000.0;$/;"	m	namespace:physical::unit
gamma	src/constants.h	/^    const double gamma = 30*exaHertz; \/\/19$/;"	m	namespace:electromagnetic
gas	include/Eternia/Engineering/Chemistry/Composite.h	/^enum STATE {solid, liquid, gas, plasma};$/;"	e	enum:STATE
gas	src/Engineering/Chemistry/Composite.h	/^enum STATE {solid, liquid, gas, plasma};$/;"	e	enum:STATE
gc	include/Eternia/API/APIMod.h	/^    virtual void gc();    \/\/ clear garbage (For specific languages, such as java and C#)$/;"	p	class:APIMod
gc	src/API/APIMod.cpp	/^void APIMod::gc(){$/;"	f	class:APIMod
gc	src/API/APIMod.h	/^    virtual void gc();    \/\/ clear garbage (For specific languages, such as java and C#)$/;"	p	class:APIMod
gear	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        AvatarGear gear; \/\/ equiped gear$/;"	m	class:Avatar
gear	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        DynamicEquip gear;$/;"	m	class:MountedEquip
gear	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> gear; \/\/ base infantry gear skill$/;"	m	class:CraftingStats
gear	src/Gamelogic/Avatar/Avatar.h	/^        AvatarGear gear; \/\/ equiped gear$/;"	m	class:Avatar
gear	src/Gamelogic/Avatar/AvatarGear.h	/^        DynamicEquip gear;$/;"	m	class:MountedEquip
gear	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> gear; \/\/ base infantry gear skill$/;"	m	class:CraftingStats
genBitmask	src/Algorithm/Cryptography/ExHash.cpp	/^uint64_t genBitmask(int bits) {$/;"	f
genRand	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    int genRand(double phi, double theta);$/;"	p	class:Terrain
genRand	src/Gamelogic/Environment/Planet/Planet.h	/^    int genRand(double phi, double theta);$/;"	p	class:Terrain
genRand	src/Gamelogic/Environment/Planet/Planet_Terrain.cpp	/^int Terrain::genRand(double phi, double theta){$/;"	f	class:Terrain
gender	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<AP_GENDER> gender;$/;"	m	class:AvatarAppearance
gender	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<AP_GENDER> gender;$/;"	m	class:AvatarAppearance
generate	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    void generate(int MIPLevel, double radius, vertex cameraloc);$/;"	p	class:Terrain
generate	src/Gamelogic/Environment/Planet/Planet.h	/^    void generate(int MIPLevel, double radius, vertex cameraloc);$/;"	p	class:Terrain
generate	src/Gamelogic/Environment/Planet/Planet_Terrain.cpp	/^void Terrain::generate(int MIPLevel, double radius, vertex cameraloc) {$/;"	f	class:Terrain
generateFace	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    void generateFace(double rho, double phi, double theta, double delta, int suppress, vertex cameraloc);$/;"	p	class:Terrain
generateFace	src/Gamelogic/Environment/Planet/Planet.h	/^    void generateFace(double rho, double phi, double theta, double delta, int suppress, vertex cameraloc);$/;"	p	class:Terrain
generateFace	src/Gamelogic/Environment/Planet/Planet_Terrain.cpp	/^void Terrain::generateFace(double rho, double phi, double theta, double delta, int suppress, vertex cameraloc){$/;"	f	class:Terrain
generateRegion	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    void generateRegion(int MIPLevel, double rho, double phi, double theta, double delta, int suppress, vertex cameraloc);$/;"	p	class:Terrain
generateRegion	src/Gamelogic/Environment/Planet/Planet.h	/^    void generateRegion(int MIPLevel, double rho, double phi, double theta, double delta, int suppress, vertex cameraloc);$/;"	p	class:Terrain
generateRegion	src/Gamelogic/Environment/Planet/Planet_Terrain.cpp	/^void Terrain::generateRegion(int MIPLevel, double rho, double phi, double theta, double delta, int suppress, vertex cameraloc){$/;"	f	class:Terrain
geodetic	include/Eternia/constants.h	/^        namespace geodetic {$/;"	n	namespace:physical::unit
geodetic	src/constants.h	/^        namespace geodetic {$/;"	n	namespace:physical::unit
geographical	include/Eternia/constants.h	/^        namespace geographical {$/;"	n	namespace:physical::unit
geographical	src/constants.h	/^        namespace geographical {$/;"	n	namespace:physical::unit
geometry	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> geometry; \/\/ Can be gained by placing triangles or squares$/;"	m	class:CraftingStats
geometry	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> geometry; \/\/ Can be gained by placing triangles or squares$/;"	m	class:CraftingStats
get	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T get() {$/;"	f	class:CryptoDefiner
get	include/Eternia/Audio/AudioBuffer.h	/^    float get();$/;"	p	class:AudioBuffer
get	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* get(int index);$/;"	p	class:BasicFixedPointerArray
get	include/Eternia/Data/CharString.h	/^        char* get(); \/\/ returns pointer to char variable$/;"	p	class:CharString
get	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    T* get(int i){$/;"	f	class:ConcurrentLinkedList
get	include/Eternia/Data/DoubleList.h	/^        double get(int index);$/;"	p	class:DoubleList
get	include/Eternia/Data/FileCache.hpp	/^        T* get(long id) {$/;"	f	class:FileCache
get	include/Eternia/Data/HashMap.hpp	/^        T* get(CharString key) {$/;"	f	class:HTEntry
get	include/Eternia/Data/HashMap.hpp	/^        T* get(CharString key) {$/;"	f	class:HashMap
get	include/Eternia/Data/HashMap.hpp	/^        T* get(long key) {$/;"	f	class:HTEntry
get	include/Eternia/Data/HashTable.h	/^        CharString get(CharString key); \/\/ get using EXACT key values.$/;"	p	class:HTEntry
get	include/Eternia/Data/HashTable.h	/^        CharString get(CharString key); \/\/ get value$/;"	p	class:HashTable
get	include/Eternia/Data/IntegerList.h	/^        int get(int i);$/;"	p	class:IntegerList
get	include/Eternia/Data/LinkedList.hpp	/^    T* get(int index) {$/;"	f	class:LinkedList
get	include/Eternia/Data/LinkedListT.h	/^        void* get(int index);$/;"	p	class:LinkedListT
get	include/Eternia/Data/LinkedMap.h	/^        char* get(char* key);$/;"	p	class:LinkedMap
get	include/Eternia/Data/LinkedMap.h	/^        char* get(int index);$/;"	p	class:LinkedMap
get	include/Eternia/Data/Protect/PType.hpp	/^    T get() {$/;"	f	class:PType
get	include/Eternia/Data/SplitResult.h	/^        char* get(int i);$/;"	p	class:SplitResult
get	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T get() {$/;"	f	class:CryptoDefiner
get	src/Audio/AudioBuffer.h	/^    float get();$/;"	p	class:AudioBuffer
get	src/Data/AbstractDatabase/AbstractDB.h	/^        void* get(int index);$/;"	p	class:BasicFixedPointerArray
get	src/Data/AbstractDatabase/BasicFixedPointerArray.cpp	/^void* BasicFixedPointerArray::get(int index) {$/;"	f	class:BasicFixedPointerArray
get	src/Data/CharString.cpp	/^char* CharString::get() {$/;"	f	class:CharString
get	src/Data/CharString.h	/^        char* get(); \/\/ returns pointer to char variable$/;"	p	class:CharString
get	src/Data/ConcurrentLinkedList.hpp	/^    T* get(int i){$/;"	f	class:ConcurrentLinkedList
get	src/Data/DoubleList.cpp	/^double DoubleList::get(int index) {$/;"	f	class:DoubleList
get	src/Data/DoubleList.h	/^        double get(int index);$/;"	p	class:DoubleList
get	src/Data/FileCache.hpp	/^        T* get(long id) {$/;"	f	class:FileCache
get	src/Data/HashMap.hpp	/^        T* get(CharString key) {$/;"	f	class:HTEntry
get	src/Data/HashMap.hpp	/^        T* get(CharString key) {$/;"	f	class:HashMap
get	src/Data/HashMap.hpp	/^        T* get(long key) {$/;"	f	class:HTEntry
get	src/Data/HashTable.cpp	/^CharString HTEntry::get(CharString key) {$/;"	f	class:HTEntry
get	src/Data/HashTable.cpp	/^CharString HashTable::get(CharString key) {$/;"	f	class:HashTable
get	src/Data/HashTable.h	/^        CharString get(CharString key); \/\/ get using EXACT key values.$/;"	p	class:HTEntry
get	src/Data/HashTable.h	/^        CharString get(CharString key); \/\/ get value$/;"	p	class:HashTable
get	src/Data/IntegerList.cpp	/^int IntegerList::get(int index) {$/;"	f	class:IntegerList
get	src/Data/IntegerList.h	/^        int get(int i);$/;"	p	class:IntegerList
get	src/Data/LinkedList.hpp	/^    T* get(int index) {$/;"	f	class:LinkedList
get	src/Data/LinkedListT.cpp	/^void* LinkedListT::get(int index) {$/;"	f	class:LinkedListT
get	src/Data/LinkedListT.h	/^        void* get(int index);$/;"	p	class:LinkedListT
get	src/Data/LinkedMap.cpp	/^char* LinkedMap::get(char* key) {$/;"	f	class:LinkedMap
get	src/Data/LinkedMap.cpp	/^char* LinkedMap::get(int index) {$/;"	f	class:LinkedMap
get	src/Data/LinkedMap.h	/^        char* get(char* key);$/;"	p	class:LinkedMap
get	src/Data/LinkedMap.h	/^        char* get(int index);$/;"	p	class:LinkedMap
get	src/Data/Protect/PType.hpp	/^    T get() {$/;"	f	class:PType
get	src/Data/SplitResult.cpp	/^char* SplitResult::get(int i) {$/;"	f	class:SplitResult
get	src/Data/SplitResult.h	/^        char* get(int i);$/;"	p	class:SplitResult
getAirPressure	include/Eternia/Engineering/Physics/Equations.h	/^        double getAirPressure(double gravity, double radius, double atmosMass); \/\/ Get P0 at sea level based on information$/;"	p	class:PhysicsEquations
getAirPressure	src/Engineering/Physics/Equations.cpp	/^double PhysicsEquations::getAirPressure(double gravity, double radius, double atmosMass) {$/;"	f	class:PhysicsEquations
getAirPressure	src/Engineering/Physics/Equations.h	/^        double getAirPressure(double gravity, double radius, double atmosMass); \/\/ Get P0 at sea level based on information$/;"	p	class:PhysicsEquations
getAllRows	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getAllRows(); \/\/ SLOW: reads all data from DB file$/;"	p	class:AbstractDBTable
getAllRows	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getAllRows();$/;"	p	class:AbstractDBCacheMap
getAllRows	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getAllRows(); \/\/ SLOW: reads all data from DB file$/;"	p	class:AbstractDBTable
getAllRows	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getAllRows();$/;"	p	class:AbstractDBCacheMap
getAllRows	src/Data/AbstractDatabase/AbstractDBCacheMap.cpp	/^AbstractDBLinkedDataset* AbstractDBCacheMap::getAllRows() {$/;"	f	class:AbstractDBCacheMap
getAmperage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double getAmperage();$/;"	p	class:PowerValue
getAmperage	src/Engineering/Electrical/PowerValue.cpp	/^double PowerValue::getAmperage() {$/;"	f	class:PowerValue
getAmperage	src/Engineering/Electrical/PowerValue.h	/^        double getAmperage();$/;"	p	class:PowerValue
getAmps	include/Eternia/constants.h	/^    double getAmps(double volts, double watts);$/;"	p	namespace:electrical
getAmps	src/constants.cpp	/^    double getAmps(double volts, double watts) {$/;"	f	namespace:electrical
getAmps	src/constants.h	/^    double getAmps(double volts, double watts);$/;"	p	namespace:electrical
getAngularMomentum	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    double getAngularMomentum(double I, double angularVelo);$/;"	p	namespace:Rotational
getAngularMomentum	src/Engineering/Physics/Rotational/RotationalFuncs.cpp	/^    double getAngularMomentum(double I, double angularVelo) {$/;"	f	namespace:Rotational
getAngularMomentum	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    double getAngularMomentum(double I, double angularVelo);$/;"	p	namespace:Rotational
getAtom	include/Eternia/Engineering/Chemistry/Atom.h	/^        Atom* getAtom(); \/\/ get this material's atom.$/;"	p	class:Atom
getAtom	src/Engineering/Chemistry/Atom.cpp	/^Atom* Atom::getAtom() {} \/\/ get this material's atom.$/;"	f	class:Atom
getAtom	src/Engineering/Chemistry/Atom.h	/^        Atom* getAtom(); \/\/ get this material's atom.$/;"	p	class:Atom
getAtomicNumber	include/Eternia/Engineering/Chemistry/Atom.h	/^        double getAtomicNumber(); \/\/ N = p$/;"	p	class:Atom
getAtomicNumber	src/Engineering/Chemistry/Atom.cpp	/^double Atom::getAtomicNumber() {$/;"	f	class:Atom
getAtomicNumber	src/Engineering/Chemistry/Atom.h	/^        double getAtomicNumber(); \/\/ N = p$/;"	p	class:Atom
getAtomicWeight	include/Eternia/Engineering/Chemistry/Atom.h	/^        double getAtomicWeight(); \/\/ W = (p+n+e)$/;"	p	class:Atom
getAtomicWeight	src/Engineering/Chemistry/Atom.cpp	/^double Atom::getAtomicWeight() {$/;"	f	class:Atom
getAtomicWeight	src/Engineering/Chemistry/Atom.h	/^        double getAtomicWeight(); \/\/ W = (p+n+e)$/;"	p	class:Atom
getAverage	include/Eternia/Data/CyclicList.hpp	/^    T getAverage(){$/;"	f	class:CyclicList
getAverage	src/Data/CyclicList.hpp	/^    T getAverage(){$/;"	f	class:CyclicList
getBaseNodeFromString	include/Eternia/Data/FileSystem.h	/^        FileStructureNode* getBaseNodeFromString(CharString location); \/\/ find a BASE directory or file at location.$/;"	p	class:FileSystem
getBaseNodeFromString	src/Data/FileSystem.cpp	/^FileStructureNode* FileSystem::getBaseNodeFromString(CharString location) {$/;"	f	class:FileSystem
getBaseNodeFromString	src/Data/FileSystem.h	/^        FileStructureNode* getBaseNodeFromString(CharString location); \/\/ find a BASE directory or file at location.$/;"	p	class:FileSystem
getBitrate	include/Eternia/Audio/AudioBuffer.h	/^    int getBitrate();$/;"	p	class:AudioBuffer
getBitrate	src/Audio/AudioBuffer.h	/^    int getBitrate();$/;"	p	class:AudioBuffer
getBlock	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    Block* getBlock(int x, int y, int z, int layers);$/;"	p	class:VoxelGeom
getBlock	src/Gamelogic/Voxel/VoxelGeom.h	/^    Block* getBlock(int x, int y, int z, int layers);$/;"	p	class:VoxelGeom
getBool	include/Eternia/Data/Protect/PType.hpp	/^    bool getBool(){$/;"	f	class:PType
getBool	src/Data/Protect/PType.hpp	/^    bool getBool(){$/;"	f	class:PType
getByte	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned char getByte(unsigned int address); \/\/ [address]$/;"	p	class:MSP430
getByte	src/Emulation/MPU/msp430.cpp	/^unsigned char MSP430::getByte(unsigned int address) {$/;"	f	class:MSP430
getByte	src/Emulation/MPU/msp430.h	/^        unsigned char getByte(unsigned int address); \/\/ [address]$/;"	p	class:MSP430
getByteSize	include/Eternia/Data/Protect/PType.hpp	/^    int getByteSize(){$/;"	f	class:PType
getByteSize	src/Data/Protect/PType.hpp	/^    int getByteSize(){$/;"	f	class:PType
getCS	include/Eternia/Data/SplitResult.h	/^        CharString getCS(int i);$/;"	p	class:SplitResult
getCS	src/Data/SplitResult.cpp	/^CharString SplitResult::getCS(int i) {$/;"	f	class:SplitResult
getCS	src/Data/SplitResult.h	/^        CharString getCS(int i);$/;"	p	class:SplitResult
getChannel	include/Eternia/WebFramework/Network/ChannelledClient.h	/^    PacketChannel* getChannel(short id);$/;"	p	class:ChannelledClient
getChannel	src/WebFramework/Network/ChannelledClient.cpp	/^PacketChannel* ChannelledClient::getChannel(short id){$/;"	f	class:ChannelledClient
getChannel	src/WebFramework/Network/ChannelledClient.h	/^    PacketChannel* getChannel(short id);$/;"	p	class:ChannelledClient
getChildren	include/Eternia/Design/LayoutObject.h	/^        public LayoutObject* getChildren();             \/\/ get all children$/;"	p	class:LayoutObject
getChildren	src/Design/LayoutObject.h	/^        public LayoutObject* getChildren();             \/\/ get all children$/;"	p	class:LayoutObject
getClass	include/Eternia/API/APIMod.h	/^    void* getClass(APIMod* mod, CharString classN); \/\/ retrieve a class$/;"	p	class:APIMod
getClass	src/API/APIMod.h	/^    void* getClass(APIMod* mod, CharString classN); \/\/ retrieve a class$/;"	p	class:APIMod
getClassSize	include/Eternia/Serialization/SpecificSerializer.h	/^    int getClassSize(); \/\/ get the size of all of the combined addresses with data types$/;"	p	class:SpecificSerializer
getClassSize	src/Serialization/SpecificSerializer.cpp	/^int SpecificSerializer::getClassSize() {$/;"	f	class:SpecificSerializer
getClassSize	src/Serialization/SpecificSerializer.h	/^    int getClassSize(); \/\/ get the size of all of the combined addresses with data types$/;"	p	class:SpecificSerializer
getColor	include/Eternia/Engineering/Chemistry/Ore.h	/^        vertex* getColor(); \/\/ get the color for this ore based on the formula given$/;"	p	class:Ore
getColor	src/Engineering/Chemistry/Ore.h	/^        vertex* getColor(); \/\/ get the color for this ore based on the formula given$/;"	p	class:Ore
getComposite	include/Eternia/Engineering/Chemistry/Ore.h	/^        Composite* getComposite(); \/\/ get the full composite of materials$/;"	p	class:Ore
getComposite	src/Engineering/Chemistry/Ore.h	/^        Composite* getComposite(); \/\/ get the full composite of materials$/;"	p	class:Ore
getConductivity	include/Eternia/Engineering/Chemistry/Atom.h	/^        double getConductivity();$/;"	p	class:Atom
getConductivity	src/Engineering/Chemistry/Atom.cpp	/^double Atom::getConductivity() {$/;"	f	class:Atom
getConductivity	src/Engineering/Chemistry/Atom.h	/^        double getConductivity();$/;"	p	class:Atom
getConfigDir	include/Eternia/API/APIMod.h	/^    CharString getConfigDir(); \/\/ specific dir string for the directory$/;"	p	class:APIMod
getConfigDir	src/API/APIMod.h	/^    CharString getConfigDir(); \/\/ specific dir string for the directory$/;"	p	class:APIMod
getData	include/Eternia/Data/HashMap.hpp	/^        T* getData() {$/;"	f	class:HTEntry
getData	include/Eternia/Data/HashTable.h	/^        CharString getData();$/;"	p	class:HTEntry
getData	src/Data/HashMap.hpp	/^        T* getData() {$/;"	f	class:HTEntry
getData	src/Data/HashTable.cpp	/^CharString HTEntry::getData() {$/;"	f	class:HTEntry
getData	src/Data/HashTable.h	/^        CharString getData();$/;"	p	class:HTEntry
getDataDir	include/Eternia/API/APIMod.h	/^    CharString getDataDir();$/;"	p	class:APIMod
getDataDir	src/API/APIMod.h	/^    CharString getDataDir();$/;"	p	class:APIMod
getDateValue	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBDate* getDateValue();$/;"	p	class:AbstractDBFieldValue
getDateValue	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBDate* getDateValue();$/;"	p	class:AbstractDBFieldValue
getDeathCause	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        CR_DEATHCAUSE getDeathCause(); \/\/ return why it died$/;"	p	class:ComponentRating
getDeathCause	src/Engineering/Electrical/Components/ComponentRating.cpp	/^CR_DEATHCAUSE ComponentRating::getDeathCause() {$/;"	f	class:ComponentRating
getDeathCause	src/Engineering/Electrical/Components/ComponentRating.h	/^        CR_DEATHCAUSE getDeathCause(); \/\/ return why it died$/;"	p	class:ComponentRating
getDensity	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    double getDensity(double relativeHeight); \/\/ returns current air density at location, relative to ground$/;"	p	class:Atmosphere
getDensity	src/Gamelogic/Environment/Planet/Planet.h	/^    double getDensity(double relativeHeight); \/\/ returns current air density at location, relative to ground$/;"	p	class:Atmosphere
getDensity	src/Gamelogic/Environment/Planet/Planet_Atmosphere.cpp	/^double Atmosphere::getDensity(double relativeHeight) {$/;"	f	class:Atmosphere
getDeterminant	include/Eternia/Math/struct/Matrix.h	/^    double getDeterminant(int n, int m); \/\/ do inter-sequential determinants at location m,n.$/;"	p	class:Matrix
getDeterminant	src/Math/struct/Matrix.h	/^    double getDeterminant(int n, int m); \/\/ do inter-sequential determinants at location m,n.$/;"	p	class:Matrix
getDeviation	include/Eternia/Math/statistics/statistics.h	/^        double getDeviation(); \/\/ determines the standard deviation of the points sqrt(variance)$/;"	p	class:Statistics
getDeviation	src/Math/statistics/statistics.h	/^        double getDeviation(); \/\/ determines the standard deviation of the points sqrt(variance)$/;"	p	class:Statistics
getDirect	include/Eternia/Data/HashMap.hpp	/^        T* getDirect(long id) {$/;"	f	class:HashMap
getDirect	src/Data/HashMap.hpp	/^        T* getDirect(long id) {$/;"	f	class:HashMap
getDuty	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    float getDuty(); \/\/ duty from 0 to 1$/;"	p	class:PWM
getDuty	src/Engineering/Electrical/Signal/PWM.cpp	/^float PWM::getDuty() {$/;"	f	class:PWM
getDuty	src/Engineering/Electrical/Signal/PWM.h	/^    float getDuty(); \/\/ duty from 0 to 1$/;"	p	class:PWM
getEvents	include/Eternia/API/APICore.h	/^    APIEventRegistry* getEvents();$/;"	p	class:APICore
getEvents	src/API/APICore.h	/^    APIEventRegistry* getEvents();$/;"	p	class:APICore
getF	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        float getF(); \/\/ get float$/;"	p	class:CPLVariable
getF	src/Programming/CPLScript/CPLVariable.h	/^        float getF(); \/\/ get float$/;"	p	class:CPLVariable
getFieldValues	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getFieldValues();$/;"	p	class:AbstractDBRow
getFieldValues	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getFieldValues();$/;"	p	class:AbstractDBRow
getFields	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getFields(); \/\/ returns header that was read from file on init$/;"	p	class:AbstractDBTable
getFields	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* getFields(); \/\/ returns header that was read from file on init$/;"	p	class:AbstractDBTable
getFloat	include/Eternia/Data/CharString.h	/^        float getFloat(); \/\/ automatically converts char variable into an float$/;"	p	class:CharString
getFloat	src/Data/CharString.cpp	/^float CharString::getFloat() {$/;"	f	class:CharString
getFloat	src/Data/CharString.h	/^        float getFloat(); \/\/ automatically converts char variable into an float$/;"	p	class:CharString
getFrequency	include/Eternia/Emulation/SecondTick.h	/^        double getFrequency(); \/\/ return frequency$/;"	p	class:SecondTick
getFrequency	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    int getFrequency(); \/\/ set frequency from 1 to 10 MHz$/;"	p	class:PWM
getFrequency	src/Emulation/SecondTick.cpp	/^double SecondTick::getFrequency() {$/;"	f	class:SecondTick
getFrequency	src/Emulation/SecondTick.h	/^        double getFrequency(); \/\/ return frequency$/;"	p	class:SecondTick
getFrequency	src/Engineering/Electrical/Signal/PWM.cpp	/^int PWM::getFrequency() {$/;"	f	class:PWM
getFrequency	src/Engineering/Electrical/Signal/PWM.h	/^    int getFrequency(); \/\/ set frequency from 1 to 10 MHz$/;"	p	class:PWM
getGravity	include/Eternia/Engineering/Physics/Equations.h	/^        double getGravity(double mass1, double mass2, double radius); \/\/ Gravity of an object with respect to another object (m\/s**2)$/;"	p	class:PhysicsEquations
getGravity	include/Eternia/Math/struct/vertex.h	/^    double getGravity(VertexObject body, double height);$/;"	p	class:VertexObject
getGravity	src/Engineering/Physics/Equations.cpp	/^double PhysicsEquations::getGravity(double mass1, double mass2, double radius) {$/;"	f	class:PhysicsEquations
getGravity	src/Engineering/Physics/Equations.h	/^        double getGravity(double mass1, double mass2, double radius); \/\/ Gravity of an object with respect to another object (m\/s**2)$/;"	p	class:PhysicsEquations
getGravity	src/Math/struct/vertex.cpp	/^double VertexObject::getGravity(VertexObject body, double distance){$/;"	f	class:VertexObject
getGravity	src/Math/struct/vertex.h	/^    double getGravity(VertexObject body, double height);$/;"	p	class:VertexObject
getHandler	include/Eternia/API/APIEventRegistry.h	/^    EventHandler* getHandler(CharString name); \/\/ get an event handler$/;"	p	class:APIEventRegistry
getHandler	src/API/APIEventRegistry.cpp	/^EventHandler* APIEventRegistry::getHandler(CharString name){$/;"	f	class:APIEventRegistry
getHandler	src/API/APIEventRegistry.h	/^    EventHandler* getHandler(CharString name); \/\/ get an event handler$/;"	p	class:APIEventRegistry
getHandlers	include/Eternia/API/APIEventRegistry.h	/^    LinkedList<EventHandler> getHandlers(); \/\/ get list of all handlers$/;"	p	class:APIEventRegistry
getHandlers	src/API/APIEventRegistry.cpp	/^LinkedList<EventHandler> APIEventRegistry::getHandlers(){$/;"	f	class:APIEventRegistry
getHandlers	src/API/APIEventRegistry.h	/^    LinkedList<EventHandler> getHandlers(); \/\/ get list of all handlers$/;"	p	class:APIEventRegistry
getHeader	include/Eternia/WebFramework/Network/Types/HTMLRequest.h	/^        unordered_map<string,int> getHeader(); \/\/ return the header$/;"	p	class:HTMLResponse
getHeader	src/WebFramework/Network/Types/HTMLRequest.h	/^        unordered_map<string,int> getHeader(); \/\/ return the header$/;"	p	class:HTMLResponse
getI	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        int getI();   \/\/ get int$/;"	p	class:CPLVariable
getI	src/Programming/CPLScript/CPLVariable.h	/^        int getI();   \/\/ get int$/;"	p	class:CPLVariable
getID	include/Eternia/Data/HashMap.hpp	/^        int getID() {$/;"	f	class:HTEntry
getID	include/Eternia/Data/HashTable.h	/^        int getID();$/;"	p	class:HTEntry
getID	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    double getID(); \/\/ return the account id$/;"	p	class:Account
getID	include/Eternia/Gamelogic/Voxel/Block.h	/^    int getID(){$/;"	f	class:Block
getID	src/Data/HashMap.hpp	/^        int getID() {$/;"	f	class:HTEntry
getID	src/Data/HashTable.cpp	/^int HTEntry::getID() {$/;"	f	class:HTEntry
getID	src/Data/HashTable.h	/^        int getID();$/;"	p	class:HTEntry
getID	src/Gamelogic/Economics/Banking/Account.h	/^    double getID(); \/\/ return the account id$/;"	p	class:Account
getID	src/Gamelogic/Voxel/Block.h	/^    int getID(){$/;"	f	class:Block
getIQR	include/Eternia/Math/statistics/statistics.h	/^        double getIQR(); \/\/ returns the Inter-Quartile range$/;"	p	class:Statistics
getIQR	src/Math/statistics/statistics.h	/^        double getIQR(); \/\/ returns the Inter-Quartile range$/;"	p	class:Statistics
getIdentifier	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^        char* getIdentifier() {$/;"	f	class:P2PRequestPID
getIdentifier	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^        char* getIdentifier() {$/;"	f	class:P2PRequestPID
getImpedance	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        double getImpedance(); \/\/ get component resistance$/;"	p	class:ComponentRating
getImpedance	src/Engineering/Electrical/Components/ComponentRating.cpp	/^double ComponentRating::getImpedance() {$/;"	f	class:ComponentRating
getImpedance	src/Engineering/Electrical/Components/ComponentRating.h	/^        double getImpedance(); \/\/ get component resistance$/;"	p	class:ComponentRating
getIncomeTax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        double getIncomeTax();$/;"	p	class:Tax
getIncomeTax	src/Gamelogic/Economics/Tax/Tax.cpp	/^double Tax::getIncomeTax() {$/;"	f	class:Tax
getIncomeTax	src/Gamelogic/Economics/Tax/Tax.h	/^        double getIncomeTax();$/;"	p	class:Tax
getInt	include/Eternia/Data/CharString.h	/^        int getInt(); \/\/ automatically converts char variable into an integer$/;"	p	class:CharString
getInt	src/Data/CharString.cpp	/^int CharString::getInt() {$/;"	f	class:CharString
getInt	src/Data/CharString.h	/^        int getInt(); \/\/ automatically converts char variable into an integer$/;"	p	class:CharString
getIntValue	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int getIntValue();$/;"	p	class:AbstractDBFieldValue
getIntValue	src/Data/AbstractDatabase/AbstractDB.h	/^        int getIntValue();$/;"	p	class:AbstractDBFieldValue
getIsKey	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        bool getIsKey();$/;"	p	class:AbstractDBField
getIsKey	src/Data/AbstractDatabase/AbstractDB.h	/^        bool getIsKey();$/;"	p	class:AbstractDBField
getIsKey	src/Data/AbstractDatabase/AbstractDBField.cpp	/^bool AbstractDBField::getIsKey() {$/;"	f	class:AbstractDBField
getKey	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int getKey(double index);$/;"	p	class:AbstractDBCacheMap
getKey	include/Eternia/Data/HashMap.hpp	/^        CharString getKey() {$/;"	f	class:HTEntry
getKey	include/Eternia/Data/HashTable.h	/^        CharString getKey();$/;"	p	class:HTEntry
getKey	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    double getKey();$/;"	p	class:Account
getKey	src/Data/AbstractDatabase/AbstractDB.h	/^        int getKey(double index);$/;"	p	class:AbstractDBCacheMap
getKey	src/Data/AbstractDatabase/AbstractDBCacheMap.cpp	/^int AbstractDBCacheMap::getKey(double index) {$/;"	f	class:AbstractDBCacheMap
getKey	src/Data/HashMap.hpp	/^        CharString getKey() {$/;"	f	class:HTEntry
getKey	src/Data/HashTable.cpp	/^CharString HTEntry::getKey() {$/;"	f	class:HTEntry
getKey	src/Data/HashTable.h	/^        CharString getKey();$/;"	p	class:HTEntry
getKey	src/Gamelogic/Economics/Banking/Account.h	/^    double getKey();$/;"	p	class:Account
getL	include/Eternia/Data/HashMap.hpp	/^        T* getL(unsigned long key) {$/;"	f	class:HashMap
getL	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        long getL();  \/\/ get long$/;"	p	class:CPLVariable
getL	src/Data/HashMap.hpp	/^        T* getL(unsigned long key) {$/;"	f	class:HashMap
getL	src/Programming/CPLScript/CPLVariable.h	/^        long getL();  \/\/ get long$/;"	p	class:CPLVariable
getLanguage	include/Eternia/API/APIMod.h	/^    CharString getLanguage(); \/\/ get the language of the module (e.g: C++, Lua, ect.)$/;"	p	class:APIMod
getLanguage	src/API/APIMod.h	/^    CharString getLanguage(); \/\/ get the language of the module (e.g: C++, Lua, ect.)$/;"	p	class:APIMod
getLen	include/Eternia/Data/SplitResult.h	/^        const int getLen(int i);$/;"	p	class:SplitResult
getLen	src/Data/SplitResult.cpp	/^const int SplitResult::getLen(int i) {$/;"	f	class:SplitResult
getLen	src/Data/SplitResult.h	/^        const int getLen(int i);$/;"	p	class:SplitResult
getLines	include/Eternia/Parsing/SecuredParser.h	/^        LinkedList<CharString>* getLines();$/;"	p	class:SecuredParser
getLines	src/Parsing/SecuredParser.cpp	/^LinkedList<CharString>* SecuredParser::getLines() {$/;"	f	class:SecuredParser
getLines	src/Parsing/SecuredParser.h	/^        LinkedList<CharString>* getLines();$/;"	p	class:SecuredParser
getLinesSplit	include/Eternia/Parsing/SecuredParser.h	/^        LinkedList<CharString>* getLinesSplit(char splitter);$/;"	p	class:SecuredParser
getLinesSplit	src/Parsing/SecuredParser.h	/^        LinkedList<CharString>* getLinesSplit(char splitter);$/;"	p	class:SecuredParser
getLogDir	include/Eternia/API/APIMod.h	/^    CharString getLogDir();$/;"	p	class:APIMod
getLogDir	src/API/APIMod.h	/^    CharString getLogDir();$/;"	p	class:APIMod
getLogger	include/Eternia/API/APICore.h	/^    Logger* getLogger(); \/\/ General logger used by this API$/;"	p	class:APICore
getLogger	src/API/APICore.h	/^    Logger* getLogger(); \/\/ General logger used by this API$/;"	p	class:APICore
getMagnitude	include/Eternia/Math/Complex.hpp	/^    float getMagnitude(){$/;"	f	class:Complex
getMagnitude	src/Math/Complex.hpp	/^    float getMagnitude(){$/;"	f	class:Complex
getMap	include/Eternia/Parsing/SecuredParser.h	/^        LinkedList<CharString>* getMap(char splitter);$/;"	p	class:SecuredParser
getMap	src/Parsing/SecuredParser.h	/^        LinkedList<CharString>* getMap(char splitter);$/;"	p	class:SecuredParser
getMaxPins	include/Eternia/Engineering/Electrical/IC/IC.h	/^        int getMaxPins();$/;"	p	class:IC
getMaxPins	src/Engineering/Electrical/IC/IC.h	/^        int getMaxPins();$/;"	p	class:IC
getMean	include/Eternia/Math/statistics/statistics.h	/^        double getMean(); \/\/ used to get the average of a list of Doubles$/;"	p	class:Statistics
getMean	src/Math/statistics/statistics.h	/^        double getMean(); \/\/ used to get the average of a list of Doubles$/;"	p	class:Statistics
getMeanVector	include/Eternia/Math/statistics/statistics.h	/^        vertex* getMeanVector(); \/\/ returns the average vertex, sample with the weight to act as a center of mass$/;"	p	class:Statistics
getMeanVector	src/Math/statistics/statistics.h	/^        vertex* getMeanVector(); \/\/ returns the average vertex, sample with the weight to act as a center of mass$/;"	p	class:Statistics
getMedian	include/Eternia/Math/statistics/statistics.h	/^        vertex* getMedian(); \/\/ get the number is in the "Middle"$/;"	p	class:Statistics
getMedian	src/Math/statistics/statistics.h	/^        vertex* getMedian(); \/\/ get the number is in the "Middle"$/;"	p	class:Statistics
getMedianVector	include/Eternia/Math/statistics/statistics.h	/^        vertex* getMedianVector(); \/\/ returns vertex that is in the "Middle" of all of the vertexs$/;"	p	class:Statistics
getMedianVector	src/Math/statistics/statistics.h	/^        vertex* getMedianVector(); \/\/ returns vertex that is in the "Middle" of all of the vertexs$/;"	p	class:Statistics
getMode	include/Eternia/Math/statistics/statistics.h	/^        vertex* getMode(); \/\/ returns the number that occurs the most times$/;"	p	class:Statistics
getMode	src/Math/statistics/statistics.h	/^        vertex* getMode(); \/\/ returns the number that occurs the most times$/;"	p	class:Statistics
getModeVector	include/Eternia/Math/statistics/statistics.h	/^        vertex* getModeVector(); \/\/ returns the vertex with most occurences$/;"	p	class:Statistics
getModeVector	src/Math/statistics/statistics.h	/^        vertex* getModeVector(); \/\/ returns the vertex with most occurences$/;"	p	class:Statistics
getMomentOfIntertia	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    double getMomentOfIntertia(IType inertialType, double M, double r);$/;"	p	namespace:Rotational
getMomentOfIntertia	src/Engineering/Physics/Rotational/RotationalFuncs.cpp	/^    double getMomentOfIntertia(IType inertialType, double M, double r) {$/;"	f	namespace:Rotational
getMomentOfIntertia	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    double getMomentOfIntertia(IType inertialType, double M, double r);$/;"	p	namespace:Rotational
getName	include/Eternia/API/APIMod.h	/^    CharString getName(); \/\/ module name$/;"	p	class:APIMod
getName	include/Eternia/Engineering/Electrical/Pin.h	/^        CharString* getName();$/;"	p	class:Pin
getName	src/API/APIMod.h	/^    CharString getName(); \/\/ module name$/;"	p	class:APIMod
getName	src/Engineering/Electrical/Pin.h	/^        CharString* getName();$/;"	p	class:Pin
getNameFromString	include/Eternia/Data/FileSystem.h	/^        CharString getNameFromString(CharString location); \/\/ returns the name of the object in the breadcrum list.$/;"	p	class:FileSystem
getNameFromString	src/Data/FileSystem.cpp	/^CharString FileSystem::getNameFromString(CharString location) {$/;"	f	class:FileSystem
getNameFromString	src/Data/FileSystem.h	/^        CharString getNameFromString(CharString location); \/\/ returns the name of the object in the breadcrum list.$/;"	p	class:FileSystem
getNext	include/Eternia/Data/DoubleList.h	/^        double getNext();$/;"	p	class:DoubleList
getNext	include/Eternia/Data/IntegerList.h	/^        int getNext();$/;"	p	class:IntegerList
getNext	src/Data/DoubleList.cpp	/^double DoubleList::getNext() {$/;"	f	class:DoubleList
getNext	src/Data/DoubleList.h	/^        double getNext();$/;"	p	class:DoubleList
getNext	src/Data/IntegerList.cpp	/^int IntegerList::getNext() {$/;"	f	class:IntegerList
getNext	src/Data/IntegerList.h	/^        int getNext();$/;"	p	class:IntegerList
getNodeFromString	include/Eternia/Data/FileSystem.h	/^        FileStructureNode* getNodeFromString(CharString location); \/\/ find a directory or file at location.$/;"	p	class:FileSystem
getNodeFromString	src/Data/FileSystem.cpp	/^FileStructureNode* FileSystem::getNodeFromString(CharString location) {$/;"	f	class:FileSystem
getNodeFromString	src/Data/FileSystem.h	/^        FileStructureNode* getNodeFromString(CharString location); \/\/ find a directory or file at location.$/;"	p	class:FileSystem
getNote	include/Eternia/constants.h	/^        double getNote(double Letter, double Octave);$/;"	p	namespace:electromagnetic::sound
getNote	src/constants.cpp	/^        double getNote(double Letter, double Octave) {$/;"	f	namespace:electromagnetic::sound
getNote	src/constants.h	/^        double getNote(double Letter, double Octave);$/;"	p	namespace:electromagnetic::sound
getOhms	include/Eternia/constants.h	/^    double getOhms(double volts, double amps);$/;"	p	namespace:electrical
getOhms	src/constants.cpp	/^    double getOhms(double volts, double amps) {$/;"	f	namespace:electrical
getOhms	src/constants.h	/^    double getOhms(double volts, double amps);$/;"	p	namespace:electrical
getOperatorFromChar	src/Math/Eval.cpp	/^MOperator getOperatorFromChar(char character) {$/;"	f
getPWMValue	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    bool getPWMValue(); \/\/ output the PWM value!$/;"	p	class:PWM
getPWMValue	src/Engineering/Electrical/Signal/PWM.cpp	/^bool PWM::getPWMValue() {$/;"	f	class:PWM
getPWMValue	src/Engineering/Electrical/Signal/PWM.h	/^    bool getPWMValue(); \/\/ output the PWM value!$/;"	p	class:PWM
getParent	include/Eternia/Design/LayoutObject.h	/^        public LayoutObject* getParent();$/;"	p	class:LayoutObject
getParent	src/Design/LayoutObject.h	/^        public LayoutObject* getParent();$/;"	p	class:LayoutObject
getPermissions	include/Eternia/API/APICore.h	/^    APIPermissionsRegistry* getPermissions();$/;"	p	class:APICore
getPermissions	src/API/APICore.h	/^    APIPermissionsRegistry* getPermissions();$/;"	p	class:APICore
getPhase	include/Eternia/Engineering/Chemistry/Atom.h	/^        CHEMPHASE getPhase(double temp, double pressure); \/\/ get the phase of the material$/;"	p	class:Atom
getPhase	src/Engineering/Chemistry/Atom.cpp	/^CHEMPHASE Atom::getPhase(double temp, double Pressure) {$/;"	f	class:Atom
getPhase	src/Engineering/Chemistry/Atom.h	/^        CHEMPHASE getPhase(double temp, double pressure); \/\/ get the phase of the material$/;"	p	class:Atom
getPhi	include/Eternia/Math/struct/vertex.h	/^    double getPhi();$/;"	p	class:vertex
getPhi	src/Math/struct/vertex.cpp	/^double vertex::getPhi(){$/;"	f	class:vertex
getPhi	src/Math/struct/vertex.h	/^    double getPhi();$/;"	p	class:vertex
getPin	include/Eternia/Engineering/Electrical/IC/General/IC555.h	/^        virtual double getPin(int pin); \/\/ return the value on a specific pin$/;"	p	class:IC555
getPin	include/Eternia/Engineering/Electrical/IC/IC.h	/^        Pin* getPin(int pin); \/\/ return the value on a specific pin$/;"	p	class:IC
getPin	src/Engineering/Electrical/IC/General/IC555.cpp	/^double IC555::getPin(int pin) {$/;"	f	class:IC555
getPin	src/Engineering/Electrical/IC/General/IC555.h	/^        virtual double getPin(int pin); \/\/ return the value on a specific pin$/;"	p	class:IC555
getPin	src/Engineering/Electrical/IC/IC.h	/^        Pin* getPin(int pin); \/\/ return the value on a specific pin$/;"	p	class:IC
getPinA	include/Eternia/Engineering/Electrical/Components/Component.h	/^        PowerValue* getPinA(); \/\/ Returns the pin A$/;"	p	class:Component
getPinA	src/Engineering/Electrical/Components/Component.h	/^        PowerValue* getPinA(); \/\/ Returns the pin A$/;"	p	class:Component
getPinB	include/Eternia/Engineering/Electrical/Components/Component.h	/^        PowerValue* getPinB(); \/\/ Returns the pin B$/;"	p	class:Component
getPinB	src/Engineering/Electrical/Components/Component.h	/^        PowerValue* getPinB(); \/\/ Returns the pin B$/;"	p	class:Component
getPower	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        float getPower(); \/\/ returns power in watts. (P=I^2*R)$/;"	p	class:Resistor
getPower	src/Engineering/Electrical/Components/Resistor.h	/^        float getPower(); \/\/ returns power in watts. (P=I^2*R)$/;"	p	class:Resistor
getProjectileProperty	src/Engineering/Physics/Kinematics/FreeBody.cpp	/^double getProjectileProperty(KItem& item) {$/;"	f
getProperty	include/Eternia/Data/Events/Event.h	/^    T getProperty(CharString name);$/;"	p	class:Event
getProperty	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        double getProperty(KItem item); \/\/ get a specific property of this element. (Returns -99999 if not found)$/;"	p	class:FreeBody
getProperty	src/Data/Events/Event.h	/^    T getProperty(CharString name);$/;"	p	class:Event
getProperty	src/Engineering/Physics/Kinematics/FreeBody.cpp	/^double FreeBody::getProperty(KItem item) {$/;"	f	class:FreeBody
getProperty	src/Engineering/Physics/Kinematics/FreeBody.h	/^        double getProperty(KItem item); \/\/ get a specific property of this element. (Returns -99999 if not found)$/;"	p	class:FreeBody
getPropertyNames	include/Eternia/Data/Events/Event.h	/^    LinkedList<CharString> getPropertyNames();$/;"	p	class:Event
getPropertyNames	src/Data/Events/Event.h	/^    LinkedList<CharString> getPropertyNames();$/;"	p	class:Event
getPtr	include/Eternia/Data/Protect/PType.hpp	/^    void* getPtr(){$/;"	f	class:PType
getPtr	src/Data/Protect/PType.hpp	/^    void* getPtr(){$/;"	f	class:PType
getPurelyElasticVelo	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^        double* getPurelyElasticVelo(); \/\/ gets the resultant velocities.$/;"	p	class:Collision1D
getPurelyElasticVelo	src/Engineering/Physics/Kinematics/Collision1D.h	/^        double* getPurelyElasticVelo(); \/\/ gets the resultant velocities.$/;"	p	class:Collision1D
getPurelyInelasticVelo	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^        double getPurelyInelasticVelo(); \/\/ gets velocity of inelastic collision.$/;"	p	class:Collision1D
getPurelyInelasticVelo	src/Engineering/Physics/Kinematics/Collision1D.cpp	/^double Collision1D::getPurelyInelasticVelo() {$/;"	f	class:Collision1D
getPurelyInelasticVelo	src/Engineering/Physics/Kinematics/Collision1D.h	/^        double getPurelyInelasticVelo(); \/\/ gets velocity of inelastic collision.$/;"	p	class:Collision1D
getQuartile	include/Eternia/Math/statistics/statistics.h	/^        double getQuartile(int quartile); \/\/ returns the quarter*quartile (ie: 1\/4*2 = second quarter of the data)$/;"	p	class:Statistics
getQuartile	src/Math/statistics/statistics.h	/^        double getQuartile(int quartile); \/\/ returns the quarter*quartile (ie: 1\/4*2 = second quarter of the data)$/;"	p	class:Statistics
getRAW	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        char* getRAW();$/;"	p	class:VoipPacket
getRAW	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        char* getRAW();$/;"	p	class:VoipPacket
getRange	include/Eternia/Math/statistics/statistics.h	/^        double getRange(); \/\/ determines that maximum possible data value$/;"	p	class:Statistics
getRange	src/Math/statistics/statistics.h	/^        double getRange(); \/\/ determines that maximum possible data value$/;"	p	class:Statistics
getRangeVector	include/Eternia/Math/statistics/statistics.h	/^        double getRangeVector(); \/\/ determines the largest vertex (from origin)$/;"	p	class:Statistics
getRangeVector	src/Math/statistics/statistics.h	/^        double getRangeVector(); \/\/ determines the largest vertex (from origin)$/;"	p	class:Statistics
getResistance	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double getResistance(); \/\/ gets the known resistance$/;"	p	class:PowerValue
getResistance	src/Engineering/Electrical/PowerValue.cpp	/^double PowerValue::getResistance() {$/;"	f	class:PowerValue
getResistance	src/Engineering/Electrical/PowerValue.h	/^        double getResistance(); \/\/ gets the known resistance$/;"	p	class:PowerValue
getRow	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBRow* getRow(double index);$/;"	p	class:AbstractDBCacheMap
getRow	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBRow* getRow(double index);$/;"	p	class:AbstractDBCacheMap
getRow	src/Data/AbstractDatabase/AbstractDBCacheMap.cpp	/^AbstractDBRow* AbstractDBCacheMap::getRow(double index) {$/;"	f	class:AbstractDBCacheMap
getS	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        char* getS(); \/\/ get string$/;"	p	class:CPLVariable
getS	src/Programming/CPLScript/CPLVariable.h	/^        char* getS(); \/\/ get string$/;"	p	class:CPLVariable
getSalesTax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        double getSalesTax();$/;"	p	class:Tax
getSalesTax	src/Gamelogic/Economics/Tax/Tax.cpp	/^double Tax::getSalesTax() {$/;"	f	class:Tax
getSalesTax	src/Gamelogic/Economics/Tax/Tax.h	/^        double getSalesTax();$/;"	p	class:Tax
getScientific	include/Eternia/Data/CharString.h	/^        float getScientific(float val);$/;"	p	class:CharString
getScientific	src/Data/CharString.cpp	/^float CharString::getScientific(float val){$/;"	f	class:CharString
getScientific	src/Data/CharString.h	/^        float getScientific(float val);$/;"	p	class:CharString
getSecondTime	include/Eternia/Emulation/SecondTick.h	/^        double getSecondTime(); \/\/ return secondTime$/;"	p	class:SecondTick
getSecondTime	src/Emulation/SecondTick.cpp	/^double SecondTick::getSecondTime() {$/;"	f	class:SecondTick
getSecondTime	src/Emulation/SecondTick.h	/^        double getSecondTime(); \/\/ return secondTime$/;"	p	class:SecondTick
getServerPeerID	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        long getServerPeerID() {$/;"	f	class:P2PRegisterServer
getServerPeerID	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        long getServerPeerID() {$/;"	f	class:P2PRegisterServer
getServerType	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        P2PSERVERTYPE getServerType() {$/;"	f	class:P2PRegisterServer
getServerType	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        P2PSERVERTYPE getServerType() {$/;"	f	class:P2PRegisterServer
getSize	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int getSize();$/;"	p	class:AbstractDBField
getSize	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int getSize();$/;"	p	class:AbstractDBLinkedDataset
getSize	include/Eternia/Data/CharString.h	/^        int getSize(); \/\/ returns the size of the CharString$/;"	p	class:CharString
getSize	include/Eternia/Data/PriorityQueue.h	/^        int getSize(); \/\/ returns the total size$/;"	p	class:PriorityQueue
getSize	include/Eternia/Data/SplitResult.h	/^        int getSize();$/;"	p	class:SplitResult
getSize	src/Data/AbstractDatabase/AbstractDB.h	/^        int getSize();$/;"	p	class:AbstractDBField
getSize	src/Data/AbstractDatabase/AbstractDB.h	/^        int getSize();$/;"	p	class:AbstractDBLinkedDataset
getSize	src/Data/AbstractDatabase/AbstractDBField.cpp	/^int AbstractDBField::getSize() {$/;"	f	class:AbstractDBField
getSize	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^int AbstractDBLinkedDataset::getSize() {$/;"	f	class:AbstractDBLinkedDataset
getSize	src/Data/CharString.cpp	/^int CharString::getSize() {$/;"	f	class:CharString
getSize	src/Data/CharString.h	/^        int getSize(); \/\/ returns the size of the CharString$/;"	p	class:CharString
getSize	src/Data/PriorityQueue.cpp	/^int PriorityQueue::getSize() {$/;"	f	class:PriorityQueue
getSize	src/Data/PriorityQueue.h	/^        int getSize(); \/\/ returns the total size$/;"	p	class:PriorityQueue
getSize	src/Data/SplitResult.cpp	/^int SplitResult::getSize() {$/;"	f	class:SplitResult
getSize	src/Data/SplitResult.h	/^        int getSize();$/;"	p	class:SplitResult
getSlow	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    bool getSlow(); \/\/ is the input tick too slow to saturate the duty?$/;"	p	class:PWM
getSlow	src/Engineering/Electrical/Signal/PWM.cpp	/^bool PWM::getSlow() {$/;"	f	class:PWM
getSlow	src/Engineering/Electrical/Signal/PWM.h	/^    bool getSlow(); \/\/ is the input tick too slow to saturate the duty?$/;"	p	class:PWM
getStats	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        CharString getStats(); \/\/ retrive stats to a string.$/;"	p	class:Avatar
getStats	src/Gamelogic/Avatar/Avatar.cpp	/^CharString Avatar::getStats() {$/;"	f	class:Avatar
getStats	src/Gamelogic/Avatar/Avatar.h	/^        CharString getStats(); \/\/ retrive stats to a string.$/;"	p	class:Avatar
getStringFromNode	include/Eternia/Data/FileSystem.h	/^        CharString getStringFromNode(FileStructureNode* location); \/\/ converts current location into a directory location$/;"	p	class:FileSystem
getStringFromNode	src/Data/FileSystem.cpp	/^CharString FileSystem::getStringFromNode(FileStructureNode* location) {$/;"	f	class:FileSystem
getStringFromNode	src/Data/FileSystem.h	/^        CharString getStringFromNode(FileStructureNode* location); \/\/ converts current location into a directory location$/;"	p	class:FileSystem
getStringValue	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        char* getStringValue();$/;"	p	class:AbstractDBFieldValue
getStringValue	src/Data/AbstractDatabase/AbstractDB.h	/^        char* getStringValue();$/;"	p	class:AbstractDBFieldValue
getText	include/Eternia/Parsing/SecuredParser.h	/^        CharString* getText();$/;"	p	class:SecuredParser
getText	src/Parsing/SecuredParser.cpp	/^CharString* SecuredParser::getText() {$/;"	f	class:SecuredParser
getText	src/Parsing/SecuredParser.h	/^        CharString* getText();$/;"	p	class:SecuredParser
getTheta	include/Eternia/Math/struct/vertex.h	/^    double getTheta();$/;"	p	class:vertex
getTheta	src/Math/struct/vertex.cpp	/^double vertex::getTheta(){$/;"	f	class:vertex
getTheta	src/Math/struct/vertex.h	/^    double getTheta();$/;"	p	class:vertex
getTickInterval	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    float getTickInterval(); \/\/ how many seconds expected per tick?$/;"	p	class:PWM
getTickInterval	src/Engineering/Electrical/Signal/PWM.cpp	/^float  PWM::getTickInterval() {$/;"	f	class:PWM
getTickInterval	src/Engineering/Electrical/Signal/PWM.h	/^    float getTickInterval(); \/\/ how many seconds expected per tick?$/;"	p	class:PWM
getTime	include/Eternia/Emulation/SecondTick.h	/^        double getTime(); \/\/ return tick time expired in microseconds = time\/Freq$/;"	p	class:SecondTick
getTime	src/Emulation/SecondTick.cpp	/^double SecondTick::getTime() {$/;"	f	class:SecondTick
getTime	src/Emulation/SecondTick.h	/^        double getTime(); \/\/ return tick time expired in microseconds = time\/Freq$/;"	p	class:SecondTick
getTorque	include/Eternia/Engineering/Physics/Rotational/RotationalFuncs.h	/^    double getTorque(double radius, double force);$/;"	p	namespace:Rotational
getTorque	src/Engineering/Physics/Rotational/RotationalFuncs.cpp	/^    double getTorque(double radius, double force) {$/;"	f	namespace:Rotational
getTorque	src/Engineering/Physics/Rotational/RotationalFuncs.h	/^    double getTorque(double radius, double force);$/;"	p	namespace:Rotational
getTotalWatts	include/Eternia/Engineering/Physics/Work.h	/^        double getTotalWatts(double time); \/\/ divides joules by time$/;"	p	class:Work
getTotalWatts	src/Engineering/Physics/Work.cpp	/^double Work::getTotalWatts(double time) {$/;"	f	class:Work
getTotalWatts	src/Engineering/Physics/Work.h	/^        double getTotalWatts(double time); \/\/ divides joules by time$/;"	p	class:Work
getTradeTax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        double getTradeTax();$/;"	p	class:Tax
getTradeTax	src/Gamelogic/Economics/Tax/Tax.cpp	/^double Tax::getTradeTax() {$/;"	f	class:Tax
getTradeTax	src/Gamelogic/Economics/Tax/Tax.h	/^        double getTradeTax();$/;"	p	class:Tax
getTrueTime	include/Eternia/Emulation/SecondTick.h	/^        double getTrueTime(); \/\/ return tick time expired in microsends time();$/;"	p	class:SecondTick
getTrueTime	src/Emulation/SecondTick.cpp	/^double SecondTick::getTrueTime() {$/;"	f	class:SecondTick
getTrueTime	src/Emulation/SecondTick.h	/^        double getTrueTime(); \/\/ return tick time expired in microsends time();$/;"	p	class:SecondTick
getType	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ADBF_TYPE getType();$/;"	p	class:AbstractDBField
getType	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        CPLVarType getType(); \/\/ get data type$/;"	p	class:CPLVariable
getType	src/Data/AbstractDatabase/AbstractDB.h	/^        ADBF_TYPE getType();$/;"	p	class:AbstractDBField
getType	src/Data/AbstractDatabase/AbstractDBField.cpp	/^ADBF_TYPE AbstractDBField::getType() {$/;"	f	class:AbstractDBField
getType	src/Programming/CPLScript/CPLVariable.h	/^        CPLVarType getType(); \/\/ get data type$/;"	p	class:CPLVariable
getValue	include/Eternia/API/APIMod.h	/^    void* getValue(APIMod* mod, CharString valname); \/\/ retrieve a value$/;"	p	class:APIMod
getValue	include/Eternia/Engineering/Electrical/Pin.h	/^        PowerValue* getValue();$/;"	p	class:Pin
getValue	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    double getValue();$/;"	p	class:Account
getValue	src/API/APIMod.h	/^    void* getValue(APIMod* mod, CharString valname); \/\/ retrieve a value$/;"	p	class:APIMod
getValue	src/Engineering/Electrical/Pin.h	/^        PowerValue* getValue();$/;"	p	class:Pin
getValue	src/Gamelogic/Economics/Banking/Account.h	/^    double getValue();$/;"	p	class:Account
getVariable	include/Eternia/Programming/Program.h	/^        VProgramVariable* getVariable(int slot, VarTYPE typex);$/;"	p	class:Program
getVariable	src/Programming/Program.h	/^        VProgramVariable* getVariable(int slot, VarTYPE typex);$/;"	p	class:Program
getVariable	src/Programming/Visual/VisualProgram.cpp	/^VProgramVariable* Program::getVariable(int slot, VarTYPE typex) {$/;"	f	class:Program
getVariableFromKItem	include/Eternia/constants.h	/^    CharString* getVariableFromKItem(KItem *item);$/;"	p	namespace:physical
getVariableFromKItem	src/constants.cpp	/^    CharString *getVariableFromKItem(KItem *item_) {$/;"	f	namespace:physical
getVariableFromKItem	src/constants.h	/^    CharString* getVariableFromKItem(KItem *item);$/;"	p	namespace:physical
getVariance	include/Eternia/Math/statistics/statistics.h	/^        double getVariance(); \/\/ determines the variance of the values sum[(i-mean)^2]$/;"	p	class:Statistics
getVariance	src/Math/statistics/statistics.h	/^        double getVariance(); \/\/ determines the variance of the values sum[(i-mean)^2]$/;"	p	class:Statistics
getVelo	include/Eternia/Engineering/Physics/Kinematics/Collision1D.h	/^        double* getVelo(); \/\/ assumes that there is no pureness, get velo.$/;"	p	class:Collision1D
getVelo	src/Engineering/Physics/Kinematics/Collision1D.cpp	/^double* Collision1D::getVelo() {$/;"	f	class:Collision1D
getVelo	src/Engineering/Physics/Kinematics/Collision1D.h	/^        double* getVelo(); \/\/ assumes that there is no pureness, get velo.$/;"	p	class:Collision1D
getVersion	include/Eternia/API/APIMod.h	/^    CharString getVersion(); \/\/ get the versions of the module$/;"	p	class:APIMod
getVersion	src/API/APIMod.h	/^    CharString getVersion(); \/\/ get the versions of the module$/;"	p	class:APIMod
getVoltage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double getVoltage();$/;"	p	class:PowerValue
getVoltage	src/Engineering/Electrical/PowerValue.cpp	/^double PowerValue::getVoltage() {$/;"	f	class:PowerValue
getVoltage	src/Engineering/Electrical/PowerValue.h	/^        double getVoltage();$/;"	p	class:PowerValue
getVolts	include/Eternia/constants.h	/^    double getVolts(double amps, double watts);$/;"	p	namespace:electrical
getVolts	src/constants.cpp	/^    double getVolts(double amps, double watts) {$/;"	f	namespace:electrical
getVolts	src/constants.h	/^    double getVolts(double amps, double watts);$/;"	p	namespace:electrical
getWatts	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double getWatts();$/;"	p	class:PowerValue
getWatts	include/Eternia/constants.h	/^    double getWatts(double volts, double amps);$/;"	p	namespace:electrical
getWatts	src/Engineering/Electrical/PowerValue.cpp	/^double PowerValue::getWatts() {$/;"	f	class:PowerValue
getWatts	src/Engineering/Electrical/PowerValue.h	/^        double getWatts();$/;"	p	class:PowerValue
getWatts	src/constants.cpp	/^    double getWatts(double volts, double amps) {$/;"	f	namespace:electrical
getWatts	src/constants.h	/^    double getWatts(double volts, double amps);$/;"	p	namespace:electrical
getWord	include/Eternia/Emulation/MPU/msp430.h	/^        unsigned int getWord(unsigned int address); \/\/ [address]<<4 + [address+1]$/;"	p	class:MSP430
getWord	src/Emulation/MPU/msp430.cpp	/^unsigned int MSP430::getWord(unsigned int address) {$/;"	f	class:MSP430
getWord	src/Emulation/MPU/msp430.h	/^        unsigned int getWord(unsigned int address); \/\/ [address]<<4 + [address+1]$/;"	p	class:MSP430
gf_alog	src/Algorithm/Cryptography/Aes267.cpp	/^uint8_t gf_alog(uint8_t x) { \/\/ calculate anti-logarithm gen 3$/;"	f
gf_log	src/Algorithm/Cryptography/Aes267.cpp	/^uint8_t gf_log(uint8_t x) { \/\/ calculate logarithm gen 3$/;"	f
gf_mulinv	src/Algorithm/Cryptography/Aes267.cpp	/^uint8_t gf_mulinv(uint8_t x) { \/\/ calculate multiplicative inverse$/;"	f
gi	include/Eternia/constants.h	/^                const double gi = gill;$/;"	m	namespace:physical::unit::British::fluid
gi	src/constants.h	/^                const double gi = gill;$/;"	m	namespace:physical::unit::British::fluid
giga	include/Eternia/constants.h	/^        const double giga = 1e12;$/;"	m	namespace:physical::unit
giga	src/constants.h	/^        const double giga = 1e12;$/;"	m	namespace:physical::unit
gigaHertz	include/Eternia/constants.h	/^        const double gigaHertz = giga*Hertz;$/;"	m	namespace:physical::unit
gigaHertz	src/constants.h	/^        const double gigaHertz = giga*Hertz;$/;"	m	namespace:physical::unit
gill	include/Eternia/constants.h	/^                const double gill = 4.0*ounces;$/;"	m	namespace:physical::unit::US::liquid
gill	include/Eternia/constants.h	/^                const double gill = 5.0*ounces;$/;"	m	namespace:physical::unit::British::fluid
gill	src/constants.h	/^                const double gill = 4.0*ounces;$/;"	m	namespace:physical::unit::US::liquid
gill	src/constants.h	/^                const double gill = 5.0*ounces;$/;"	m	namespace:physical::unit::British::fluid
gills	include/Eternia/constants.h	/^                const double gills = gill;$/;"	m	namespace:physical::unit::British::fluid
gills	include/Eternia/constants.h	/^                const double gills = gill;$/;"	m	namespace:physical::unit::US::liquid
gills	src/constants.h	/^                const double gills = gill;$/;"	m	namespace:physical::unit::British::fluid
gills	src/constants.h	/^                const double gills = gill;$/;"	m	namespace:physical::unit::US::liquid
gl	include/Eternia/constants.h	/^                const double gl = gill;$/;"	m	namespace:physical::unit::US::liquid
gl	src/constants.h	/^                const double gl = gill;$/;"	m	namespace:physical::unit::US::liquid
globalvars	include/Eternia/Programming/CPLScript/CPLScripter.h	/^        HashMap<CPLVariable> globalvars; \/\/ Global variables. Used everywhere in text, for this specific script.$/;"	m	class:CPLScripter
globalvars	src/Programming/CPLScript/CPLScripter.h	/^        HashMap<CPLVariable> globalvars; \/\/ Global variables. Used everywhere in text, for this specific script.$/;"	m	class:CPLScripter
government	include/Eternia/Gamelogic/Social/Company/Company.h	/^        Government government; \/\/ what side is this company on?$/;"	m	class:Company
government	src/Gamelogic/Social/Company/Company.h	/^        Government government; \/\/ what side is this company on?$/;"	m	class:Company
gr	include/Eternia/constants.h	/^        const double gr = grain;$/;"	m	namespace:physical::unit
gr	src/constants.h	/^        const double gr = grain;$/;"	m	namespace:physical::unit
grade	include/Eternia/constants.h	/^            const double grade = 0.9*degrees;$/;"	m	namespace:physical::unit::arc
grade	src/constants.h	/^            const double grade = 0.9*degrees;$/;"	m	namespace:physical::unit::arc
grades	include/Eternia/constants.h	/^            const double grades = grade;$/;"	m	namespace:physical::unit::arc
grades	src/constants.h	/^            const double grades = grade;$/;"	m	namespace:physical::unit::arc
grain	include/Eternia/constants.h	/^        const double grain = 0.06479891*grams;$/;"	m	namespace:physical::unit
grain	src/constants.h	/^        const double grain = 0.06479891*grams;$/;"	m	namespace:physical::unit
grains	include/Eternia/constants.h	/^        const double grains = grain;$/;"	m	namespace:physical::unit
grains	src/constants.h	/^        const double grains = grain;$/;"	m	namespace:physical::unit
gram	include/Eternia/constants.h	/^        const double gram = kilograms\/1000.0;$/;"	m	namespace:physical::unit
gram	src/constants.h	/^        const double gram = kilograms\/1000.0;$/;"	m	namespace:physical::unit
grams	include/Eternia/constants.h	/^        const double grams = gram;$/;"	m	namespace:physical::unit
grams	src/constants.h	/^        const double grams = gram;$/;"	m	namespace:physical::unit
gravitate	include/Eternia/Math/struct/vertex.h	/^    double gravitate(VertexObject body,  double time);$/;"	p	class:VertexObject
gravitate	src/Math/struct/vertex.cpp	/^double VertexObject::gravitate(VertexObject body, double seconds) {$/;"	f	class:VertexObject
gravitate	src/Math/struct/vertex.h	/^    double gravitate(VertexObject body,  double time);$/;"	p	class:VertexObject
gravity	include/Eternia/constants.h	/^        const double gravity = 9.80665*meters\/second\/second;$/;"	m	namespace:physical::unit
gravity	src/constants.h	/^        const double gravity = 9.80665*meters\/second\/second;$/;"	m	namespace:physical::unit
greaterequals	include/Eternia/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	e	enum:MOperator
greaterequals	src/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	e	enum:MOperator
gro	include/Eternia/constants.h	/^        const double gro = gross;$/;"	m	namespace:physical::unit
gro	src/constants.h	/^        const double gro = gross;$/;"	m	namespace:physical::unit
gross	include/Eternia/constants.h	/^        const double gross = 12.0*dozen;$/;"	m	namespace:physical::unit
gross	src/constants.h	/^        const double gross = 12.0*dozen;$/;"	m	namespace:physical::unit
groundDensity	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    double groundDensity; \/\/ density of atmosphere near ground. (M*V, km*m^3)$/;"	m	class:Atmosphere
groundDensity	src/Gamelogic/Environment/Planet/Planet.h	/^    double groundDensity; \/\/ density of atmosphere near ground. (M*V, km*m^3)$/;"	m	class:Atmosphere
group	include/Eternia/Engineering/Chemistry/Atom.h	/^        char group;$/;"	m	class:Atom
group	src/Engineering/Chemistry/Atom.h	/^        char group;$/;"	m	class:Atom
h	include/Eternia/constants.h	/^        const double h = 6.6260755e-34*Joule*seconds;$/;"	m	namespace:physical::constant
h	src/constants.h	/^        const double h = 6.6260755e-34*Joule*seconds;$/;"	m	namespace:physical::constant
h_bar	include/Eternia/constants.h	/^        const double h_bar = h\/(2.0*pi);$/;"	m	namespace:physical::constant
h_bar	src/constants.h	/^        const double h_bar = h\/(2.0*pi);$/;"	m	namespace:physical::constant
ha	include/Eternia/constants.h	/^        const double ha = hectare;$/;"	m	namespace:physical::unit
ha	src/constants.h	/^        const double ha = hectare;$/;"	m	namespace:physical::unit
hacking	include/Eternia/Gamelogic/NanoRobotics/NanoRobots.h	/^        void hacking(NanoRobots* attemptColony);$/;"	p	class:NanoRobots
hacking	src/Gamelogic/NanoRobotics/NanoRobots.h	/^        void hacking(NanoRobots* attemptColony);$/;"	p	class:NanoRobots
hair_color	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex hair_color, beard_color, eyebrow_color; \/\/ hair color$/;"	m	class:AvatarAppearance
hair_color	src/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex hair_color, beard_color, eyebrow_color; \/\/ hair color$/;"	m	class:AvatarAppearance
hair_curliness	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hair_length, hair_gloss, hair_curliness; \/\/ growable hair length$/;"	m	class:AvatarAppearance
hair_curliness	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hair_length, hair_gloss, hair_curliness; \/\/ growable hair length$/;"	m	class:AvatarAppearance
hair_gloss	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hair_length, hair_gloss, hair_curliness; \/\/ growable hair length$/;"	m	class:AvatarAppearance
hair_gloss	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hair_length, hair_gloss, hair_curliness; \/\/ growable hair length$/;"	m	class:AvatarAppearance
hair_length	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hair_length, hair_gloss, hair_curliness; \/\/ growable hair length$/;"	m	class:AvatarAppearance
hair_length	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hair_length, hair_gloss, hair_curliness; \/\/ growable hair length$/;"	m	class:AvatarAppearance
hand	include/Eternia/constants.h	/^        const double hand = 4.0*inches;$/;"	m	namespace:physical::unit
hand	src/constants.h	/^        const double hand = 4.0*inches;$/;"	m	namespace:physical::unit
handle	include/Eternia/Data/Events/EventHandle.h	/^        bool handle(); \/\/ handle this event$/;"	p	class:EventHandle
handle	src/Data/Events/EventHandle.cpp	/^bool EventHandle::handle() {$/;"	f	class:EventHandle
handle	src/Data/Events/EventHandle.h	/^        bool handle(); \/\/ handle this event$/;"	p	class:EventHandle
handleCPUPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleCPUPacket(P2PNode player, P2PPacket packet); \/\/ Sim data from CPU server$/;"	p	class:P2PLServer
handleCPUPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleCPUPacket(P2PNode player, P2PPacket packet); \/\/ Sim data from CPU server$/;"	p	class:P2PLServer
handleCPUServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        void handleCPUServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PCPUServer
handleCPUServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        void handleCPUServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PCPUServer
handleClientDisconnect	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleClientDisconnect(P2PNode player); \/\/ client disconnects$/;"	p	class:P2PLServer
handleClientDisconnect	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleClientDisconnect(P2PNode player); \/\/ client disconnects$/;"	p	class:P2PLServer
handleCoServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleCoServerPacket(P2PNode coserver, P2PPacket packet); \/\/ multiple servers managing heavy load?$/;"	p	class:P2PLServer
handleCoServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleCoServerPacket(P2PNode coserver, P2PPacket packet); \/\/ multiple servers managing heavy load?$/;"	p	class:P2PLServer
handleConnectPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleConnectPacket(P2PNode player, P2PPacket packet); \/\/ ASSIGN new clients.$/;"	p	class:P2PLServer
handleConnectPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleConnectPacket(P2PNode player, P2PPacket packet); \/\/ ASSIGN new clients.$/;"	p	class:P2PLServer
handleCpuServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleCpuServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PLClient
handleCpuServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleCpuServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PLClient
handleDataPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleDataPacket(P2PNode player, P2PPacket packet); \/\/ Compress data from Data server$/;"	p	class:P2PLServer
handleDataPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleDataPacket(P2PNode player, P2PPacket packet); \/\/ Compress data from Data server$/;"	p	class:P2PLServer
handleDataServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        void handleDataServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PDataServer
handleDataServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleDataServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PLClient
handleDataServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        void handleDataServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PDataServer
handleDataServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleDataServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PLClient
handleEvents	include/Eternia/Data/Events/EventHandler.h	/^        void handleEvents(); \/\/ handles automatic events$/;"	p	class:EventHandler
handleEvents	src/Data/Events/EventHandler.cpp	/^void EventHandler::handleEvents() {$/;"	f	class:EventHandler
handleEvents	src/Data/Events/EventHandler.h	/^        void handleEvents(); \/\/ handles automatic events$/;"	p	class:EventHandler
handleGamePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleGamePacket(P2PNode server, P2PPacket packet); \/\/ Game packet pertains to operations within the game$/;"	p	class:P2PLClient
handleGamePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleGamePacket(P2PNode player, P2PPacket packet); \/\/ certain game packets can be processed here.$/;"	p	class:P2PLServer
handleGamePacket	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleGamePacket(P2PNode server, P2PPacket packet); \/\/ Game packet pertains to operations within the game$/;"	p	class:P2PLClient
handleGamePacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleGamePacket(P2PNode player, P2PPacket packet); \/\/ certain game packets can be processed here.$/;"	p	class:P2PLServer
handleIRCPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleIRCPacket(P2PNode player, P2PPacket packet); \/\/ handle IRC packet$/;"	p	class:P2PLServer
handleIRCPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleIRCPacket(P2PNode player, P2PPacket packet); \/\/ handle IRC packet$/;"	p	class:P2PLServer
handleInputLine	include/Eternia/Parsing/InputRedirection.h	/^        virtual void handleInputLine(CharString* input);$/;"	p	class:InputRedirection
handleInputLine	main.cpp	/^void InputRedirection::handleInputLine(CharString* input) {$/;"	f	class:InputRedirection
handleInputLine	src/Parsing/InputRedirection.h	/^        virtual void handleInputLine(CharString* input);$/;"	p	class:InputRedirection
handleInterrupt	include/Eternia/Emulation/MPU/msp430.h	/^        void handleInterrupt(INTERRUPT_ID id);$/;"	p	class:MSP430
handleInterrupt	src/Emulation/MPU/msp430.h	/^        void handleInterrupt(INTERRUPT_ID id);$/;"	p	class:MSP430
handleInterrupt	src/Emulation/MPU/msp430_Interrupts.cpp	/^void MSP430::handleInterrupt(INTERRUPT_ID id) {$/;"	f	class:MSP430
handleLogs	include/Eternia/Data/Logger/Logger.h	/^    bool handleLogs(); \/\/ internal Async command, writes to file$/;"	p	class:Logger
handleLogs	src/Data/Logger/Logger.cpp	/^bool Logger::handleLogs(){$/;"	f	class:Logger
handleLogs	src/Data/Logger/Logger.h	/^    bool handleLogs(); \/\/ internal Async command, writes to file$/;"	p	class:Logger
handleMainPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleMainPacket(P2PNode player, P2PPacket packet); \/\/ handles packet from main server *whoa!*$/;"	p	class:P2PLServer
handleMainPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleMainPacket(P2PNode player, P2PPacket packet); \/\/ handles packet from main server *whoa!*$/;"	p	class:P2PLServer
handleNewBoundaries	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleNewBoundaries(P2PNode server, P2PPacket packet); \/\/ Get new node boundaries if they exist.$/;"	p	class:P2PLServer
handleNewBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleNewBoundaries(P2PNode server, P2PPacket packet); \/\/ Get new node boundaries if they exist.$/;"	p	class:P2PLServer
handleNodePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleNodePacket(P2PNode server, P2PPacket packet); \/\/ Node-management packet (AKA: X-fer, assign, ect)$/;"	p	class:P2PLClient
handleNodePacket	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleNodePacket(P2PNode server, P2PPacket packet); \/\/ Node-management packet (AKA: X-fer, assign, ect)$/;"	p	class:P2PLClient
handleP2PPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        void handleP2PPacket(P2PNode player);$/;"	p	class:P2PManager
handleP2PPacket	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        void handleP2PPacket(P2PNode player);$/;"	p	class:P2PManager
handleP2PServerDisconnect	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleP2PServerDisconnect(P2PNode server); \/\/ P2P Server disconnects... (Re-connect to Lk-1 server)$/;"	p	class:P2PLClient
handleP2PServerDisconnect	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handleP2PServerDisconnect(P2PNode server); \/\/ P2P Server disconnects... (Re-connect to Lk-1 server)$/;"	p	class:P2PLClient
handlePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handlePacket(P2PNode server, P2PPacket packet); \/\/ sorts packet$/;"	p	class:P2PLClient
handlePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handlePacket(P2PNode player, P2PPacket packet); \/\/ first-stop for P2P Server-based packets$/;"	p	class:P2PLServer
handlePacket	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        void handlePacket(P2PNode server, P2PPacket packet); \/\/ sorts packet$/;"	p	class:P2PLClient
handlePacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handlePacket(P2PNode player, P2PPacket packet); \/\/ first-stop for P2P Server-based packets$/;"	p	class:P2PLServer
handlePreNodePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handlePreNodePacket(P2PNode server, P2PPacket packet); \/\/ handles server a tier higher then this one, used for distrobutions, ect... Prevents fraud connections$/;"	p	class:P2PLServer
handlePreNodePacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handlePreNodePacket(P2PNode server, P2PPacket packet); \/\/ handles server a tier higher then this one, used for distrobutions, ect... Prevents fraud connections$/;"	p	class:P2PLServer
handleStreamPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleStreamPacket(P2PNode player, P2PPacket packet); \/\/ handle Video\/Audio packet$/;"	p	class:P2PLServer
handleStreamPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        void handleStreamPacket(P2PNode sender, P2PPacket packet);$/;"	p	class:P2PStreamServer
handleStreamPacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleStreamPacket(P2PNode player, P2PPacket packet); \/\/ handle Video\/Audio packet$/;"	p	class:P2PLServer
handleStreamPacket	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        void handleStreamPacket(P2PNode sender, P2PPacket packet);$/;"	p	class:P2PStreamServer
handleSubNodeDisconnect	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleSubNodeDisconnect(P2PNode player); \/\/ Lk+1 disconnects$/;"	p	class:P2PLServer
handleSubNodeDisconnect	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleSubNodeDisconnect(P2PNode player); \/\/ Lk+1 disconnects$/;"	p	class:P2PLServer
handleSubNodePacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleSubNodePacket(P2PNode player, P2PPacket packet); \/\/ handles sub-node's packet data.$/;"	p	class:P2PLServer
handleSubNodePacket	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleSubNodePacket(P2PNode player, P2PPacket packet); \/\/ handles sub-node's packet data.$/;"	p	class:P2PLServer
handleTransfer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleTransfer(P2PNode NewServer, P2PPacket);$/;"	p	class:P2PLServer
handleTransfer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void handleTransfer(P2PNode NewServer, P2PPacket);$/;"	p	class:P2PLServer
handleUSCIA	include/Eternia/Emulation/MPU/msp430.h	/^        void handleUSCIA();$/;"	p	class:MSP430
handleUSCIA	src/Emulation/MPU/msp430.h	/^        void handleUSCIA();$/;"	p	class:MSP430
handleUSCIA	src/Emulation/MPU/msp430_USCI.cpp	/^void MSP430::handleUSCIA() {$/;"	f	class:MSP430
handleUSCIB	include/Eternia/Emulation/MPU/msp430.h	/^        void handleUSCIB();$/;"	p	class:MSP430
handleUSCIB	src/Emulation/MPU/msp430.h	/^        void handleUSCIB();$/;"	p	class:MSP430
handleUSCIB	src/Emulation/MPU/msp430_USCI.cpp	/^void MSP430::handleUSCIB() {$/;"	f	class:MSP430
handlerList	include/Eternia/API/APIEventRegistry.h	/^    LinkedList<EventHandler> handlerList;$/;"	m	class:APIEventRegistry
handlerList	src/API/APIEventRegistry.h	/^    LinkedList<EventHandler> handlerList;$/;"	m	class:APIEventRegistry
handlers	include/Eternia/API/APIEventRegistry.h	/^    HashMap<EventHandler> handlers; \/\/ list of known handlers$/;"	m	class:APIEventRegistry
handlers	src/API/APIEventRegistry.h	/^    HashMap<EventHandler> handlers; \/\/ list of known handlers$/;"	m	class:APIEventRegistry
handles	include/Eternia/Data/Events/EventHandler.h	/^        PriorityQueue *handles; \/\/ events to handle$/;"	m	class:EventHandler
handles	src/Data/Events/EventHandler.h	/^        PriorityQueue *handles; \/\/ events to handle$/;"	m	class:EventHandler
handlesIRCPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        void handlesIRCPacket(P2PNode client, P2PPacket packet); \/\/ Manages range of packet (May contact L1+ ir massive IRC)$/;"	p	class:P2PIRCServer
handlesIRCPacket	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        void handlesIRCPacket(P2PNode client, P2PPacket packet); \/\/ Manages range of packet (May contact L1+ ir massive IRC)$/;"	p	class:P2PIRCServer
hands	include/Eternia/constants.h	/^        const double hands = hand;$/;"	m	namespace:physical::unit
hands	src/constants.h	/^        const double hands = hand;$/;"	m	namespace:physical::unit
hangar	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        ShipHangar hangar; \/\/ used in ship hangar, ships stored internally$/;"	m	class:ModularShipPart
hangar	src/Gamelogic/Ship/ModularShipPart.h	/^        ShipHangar hangar; \/\/ used in ship hangar, ships stored internally$/;"	m	class:ModularShipPart
hardpoints	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> hardpoints; \/\/ skill in making bigger hardpoints.$/;"	m	class:CraftingStats
hardpoints	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> hardpoints; \/\/ skill in making bigger hardpoints.$/;"	m	class:CraftingStats
hasDrone	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        PType<bool> hasDrone, hasShield;$/;"	m	class:Avatar
hasDrone	src/Gamelogic/Avatar/Avatar.h	/^        PType<bool> hasDrone, hasShield;$/;"	m	class:Avatar
hasInfiniteDimensions	include/Eternia/Math/struct/VectorSpace.h	/^        bool hasInfiniteDimensions(); \/\/ has infinite dimensions (or Rn)$/;"	p	class:VectorSpace
hasInfiniteDimensions	src/Math/struct/VectorSpace.cpp	/^bool VectorSpace::hasInfiniteDimensions() {$/;"	f	class:VectorSpace
hasInfiniteDimensions	src/Math/struct/VectorSpace.h	/^        bool hasInfiniteDimensions(); \/\/ has infinite dimensions (or Rn)$/;"	p	class:VectorSpace
hasItemType	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        bool hasItemType(KItem item);$/;"	p	class:FreeBody
hasItemType	src/Engineering/Physics/Kinematics/FreeBody.cpp	/^bool FreeBody::hasItemType(KItem item) {$/;"	f	class:FreeBody
hasItemType	src/Engineering/Physics/Kinematics/FreeBody.h	/^        bool hasItemType(KItem item);$/;"	p	class:FreeBody
hasPermission	include/Eternia/API/APIUser.h	/^    bool hasPermission(APIPermission perm);$/;"	p	class:APIUser
hasPermission	src/API/APIUser.cpp	/^bool APIUser::hasPermission(APIPermission perm){$/;"	f	class:APIUser
hasPermission	src/API/APIUser.h	/^    bool hasPermission(APIPermission perm);$/;"	p	class:APIUser
hasShield	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        PType<bool> hasDrone, hasShield;$/;"	m	class:Avatar
hasShield	src/Gamelogic/Avatar/Avatar.h	/^        PType<bool> hasDrone, hasShield;$/;"	m	class:Avatar
hashingWaitTime	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^const double hashingWaitTime = 90; \/\/ nanoseconds$/;"	v
hashingWaitTime	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^const double hashingWaitTime = 90; \/\/ nanoseconds$/;"	v
head	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *head, *tail;$/;"	m	class:AbstractDBLinkedDataset
head	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    LinkedNode<T> *head, *currentNode;$/;"	m	class:ConcurrentLinkedList
head	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem *head;$/;"	m	class:PriorityQueue
head	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP head, torso, abdomen;$/;"	m	class:AvatarHealth
head	include/Eternia/Programming/Program.h	/^        VProgramNode* head; \/\/ First graphical node$/;"	m	class:Program
head	include/Eternia/WebFramework/Network/Types/HTMLRequest.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
head	include/Eternia/WebFramework/Network/Types/HTMLResponse.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
head	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *head, *tail;$/;"	m	class:AbstractDBLinkedDataset
head	src/Data/ConcurrentLinkedList.hpp	/^    LinkedNode<T> *head, *currentNode;$/;"	m	class:ConcurrentLinkedList
head	src/Data/PriorityQueue.h	/^        PriorityItem *head;$/;"	m	class:PriorityQueue
head	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP head, torso, abdomen;$/;"	m	class:AvatarHealth
head	src/Programming/Program.h	/^        VProgramNode* head; \/\/ First graphical node$/;"	m	class:Program
head	src/WebFramework/Network/Types/HTMLRequest.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
head	src/WebFramework/Network/Types/HTMLResponse.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
headersize	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int headersize;$/;"	m	class:AbstractDBTable
headersize	src/Data/AbstractDatabase/AbstractDB.h	/^        int headersize;$/;"	m	class:AbstractDBTable
heading	include/Eternia/Gamelogic/Ship/Ship.h	/^        vertex heading; \/\/ Heading of the ship$/;"	m	class:Ship
heading	src/Gamelogic/Ship/Ship.h	/^        vertex heading; \/\/ Heading of the ship$/;"	m	class:Ship
health	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        AvatarHealth health; \/\/ Advanced Health class that includes physiology, diseases, ect.$/;"	m	class:Avatar
health	src/Gamelogic/Avatar/Avatar.h	/^        AvatarHealth health; \/\/ Advanced Health class that includes physiology, diseases, ect.$/;"	m	class:Avatar
hear_range	include/Eternia/Gamelogic/Mob/Mob.h	/^        double hear_range; \/\/ Aggro algorithm requires direct sight or sound.$/;"	m	class:Mob
hear_range	src/Gamelogic/Mob/Mob.h	/^        double hear_range; \/\/ Aggro algorithm requires direct sight or sound.$/;"	m	class:Mob
hectare	include/Eternia/constants.h	/^        const double hectare = 10000.0*meter*meter;$/;"	m	namespace:physical::unit
hectare	src/constants.h	/^        const double hectare = 10000.0*meter*meter;$/;"	m	namespace:physical::unit
hectares	include/Eternia/constants.h	/^        const double hectares = hectare;$/;"	m	namespace:physical::unit
hectares	src/constants.h	/^        const double hectares = hectare;$/;"	m	namespace:physical::unit
height	include/Eternia/Data/BitMap.h	/^        int height;$/;"	m	class:BitMap
height	include/Eternia/Design/LayoutObject.h	/^        int width, height;$/;"	m	class:LayoutObject
height	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> height; \/\/ Avatar height in meters not including hair or shoes.$/;"	m	class:AvatarAppearance
height	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    double height; \/\/ max height (km)$/;"	m	class:Atmosphere
height	src/Data/BitMap.h	/^        int height;$/;"	m	class:BitMap
height	src/Design/LayoutObject.h	/^        int width, height;$/;"	m	class:LayoutObject
height	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> height; \/\/ Avatar height in meters not including hair or shoes.$/;"	m	class:AvatarAppearance
height	src/Gamelogic/Environment/Planet/Planet.h	/^    double height; \/\/ max height (km)$/;"	m	class:Atmosphere
heightx	include/Eternia/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
heightx	src/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
helmet	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip helmet; \/\/ main visor helmet$/;"	m	class:PortableArmor
helmet	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip helmet; \/\/ main visor helmet$/;"	m	class:PortableArmor
hexdigest	include/Eternia/Algorithm/Cryptography/md5.h	/^        std::string hexdigest() const;$/;"	p	class:MD5
hexdigest	src/Algorithm/Cryptography/md5.cpp	/^std::string MD5::hexdigest() const {$/;"	f	class:MD5
hexdigest	src/Algorithm/Cryptography/md5.h	/^        std::string hexdigest() const;$/;"	p	class:MD5
highpassFilter	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    void highpassFilter(float centerFreq, float dbm);$/;"	p	class:FreqSignal
highpassFilter	src/Engineering/Electrical/Signal/FreqSignal.h	/^    void highpassFilter(float centerFreq, float dbm);$/;"	p	class:FreqSignal
hints	include/Eternia/WebFramework/Network/SocketServer.h	/^    struct addrinfo hints;$/;"	m	class:SocketServer	typeref:struct:SocketServer::addrinfo
hints	src/WebFramework/Network/SocketServer.h	/^    struct addrinfo hints;$/;"	m	class:SocketServer	typeref:struct:SocketServer::addrinfo
hip_width	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
hip_width	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
hogshead	include/Eternia/constants.h	/^        const double hogshead = 2.0*US::barrels;$/;"	m	namespace:physical::unit
hogshead	src/constants.h	/^        const double hogshead = 2.0*US::barrels;$/;"	m	namespace:physical::unit
hogsheads	include/Eternia/constants.h	/^        const double hogsheads = hogshead;$/;"	m	namespace:physical::unit
hogsheads	src/constants.h	/^        const double hogsheads = hogshead;$/;"	m	namespace:physical::unit
homestead	include/Eternia/constants.h	/^        const double homestead = section\/4.0;$/;"	m	namespace:physical::unit
homestead	src/constants.h	/^        const double homestead = section\/4.0;$/;"	m	namespace:physical::unit
homesteads	include/Eternia/constants.h	/^        const double homesteads = homestead;$/;"	m	namespace:physical::unit
homesteads	src/constants.h	/^        const double homesteads = homestead;$/;"	m	namespace:physical::unit
honeypot	include/Eternia/Data/Protect/PType.hpp	/^    T honeypot; \/\/ actual value, just resets every change$/;"	m	class:PType
honeypot	src/Data/Protect/PType.hpp	/^    T honeypot; \/\/ actual value, just resets every change$/;"	m	class:PType
horn_length	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> tail_length, horn_length; \/\/ Alien$/;"	m	class:AvatarAppearance
horn_length	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> tail_length, horn_length; \/\/ Alien$/;"	m	class:AvatarAppearance
horsepower	include/Eternia/constants.h	/^        const double horsepower = 735.49875*Watts;$/;"	m	namespace:physical::unit
horsepower	src/constants.h	/^        const double horsepower = 735.49875*Watts;$/;"	m	namespace:physical::unit
hour	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int second, minute, hour;$/;"	m	class:AbstractDBDate
hour	include/Eternia/constants.h	/^        const double hour = 60.0*minutes;$/;"	m	namespace:physical::unit
hour	src/Data/AbstractDatabase/AbstractDB.h	/^        int second, minute, hour;$/;"	m	class:AbstractDBDate
hour	src/constants.h	/^        const double hour = 60.0*minutes;$/;"	m	namespace:physical::unit
hours	include/Eternia/constants.h	/^        const double hours = hour;$/;"	m	namespace:physical::unit
hours	src/constants.h	/^        const double hours = hour;$/;"	m	namespace:physical::unit
hover	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> hover; \/\/ hovering vehicles$/;"	m	class:CraftingStats
hover	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> hover; \/\/ hovering vehicles$/;"	m	class:CraftingStats
hr	include/Eternia/constants.h	/^        const double hr = hour;$/;"	m	namespace:physical::unit
hr	src/constants.h	/^        const double hr = hour;$/;"	m	namespace:physical::unit
hundredweight	include/Eternia/constants.h	/^            const double hundredweight = 100.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit::US
hundredweight	include/Eternia/constants.h	/^            const double hundredweight = 112.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit::British
hundredweight	src/constants.h	/^            const double hundredweight = 100.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit::US
hundredweight	src/constants.h	/^            const double hundredweight = 112.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit::British
hunger	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP hunger; \/\/ Hunger is realistic. Ticks down based on eating times.$/;"	m	class:AvatarHealth
hunger	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP hunger; \/\/ Hunger is realistic. Ticks down based on eating times.$/;"	m	class:AvatarHealth
hyl	include/Eternia/constants.h	/^        const double hyl = kilohyl\/1000.0;$/;"	m	namespace:physical::unit
hyl	src/constants.h	/^        const double hyl = kilohyl\/1000.0;$/;"	m	namespace:physical::unit
hyls	include/Eternia/constants.h	/^        const double hyls = hyl;$/;"	m	namespace:physical::unit
hyls	src/constants.h	/^        const double hyls = hyl;$/;"	m	namespace:physical::unit
hyperdrive	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> hyperdrive; \/\/ skill in making better hyperdrives.$/;"	m	class:CraftingStats
hyperdrive	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> hyperdrive; \/\/ skill in making better hyperdrives.$/;"	m	class:CraftingStats
icoolant	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	Composite icoolant, ocoolant; \/\/ inner\/outer coolant$/;"	m	class:Reactor
icoolant	src/Gamelogic/CoreSystems/Reactor.h	/^	Composite icoolant, ocoolant; \/\/ inner\/outer coolant$/;"	m	class:Reactor
id	include/Eternia/Data/HashMap.hpp	/^        int id;$/;"	m	class:HTEntry
id	include/Eternia/Data/HashTable.h	/^        unsigned int id;$/;"	m	class:HTEntry
id	include/Eternia/Data/LinkedList.hpp	/^    int id;$/;"	m	class:LinkedNode
id	include/Eternia/Emulation/MPU/msp430.h	/^        INTERRUPT_ID id;$/;"	m	class:InterruptHandle
id	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<int> id; \/\/ account id$/;"	m	class:Account
id	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^    int id; \/\/ base item id, useful for net transfer ids.$/;"	m	class:ItemBase
id	include/Eternia/Gamelogic/Voxel/Block.h	/^    int id;$/;"	m	class:Block
id	include/Eternia/WebFramework/Network/PacketServer/Packets/Packet.hpp	/^        long id;$/;"	m	class:Packet
id	src/Data/HashMap.hpp	/^        int id;$/;"	m	class:HTEntry
id	src/Data/HashTable.h	/^        unsigned int id;$/;"	m	class:HTEntry
id	src/Data/LinkedList.hpp	/^    int id;$/;"	m	class:LinkedNode
id	src/Emulation/MPU/msp430.h	/^        INTERRUPT_ID id;$/;"	m	class:InterruptHandle
id	src/Gamelogic/Economics/Banking/Account.h	/^    PType<int> id; \/\/ account id$/;"	m	class:Account
id	src/Gamelogic/Inventory/ItemBase.h	/^    int id; \/\/ base item id, useful for net transfer ids.$/;"	m	class:ItemBase
id	src/Gamelogic/Voxel/Block.h	/^    int id;$/;"	m	class:Block
id	src/WebFramework/Network/PacketServer/Packets/Packet.hpp	/^        long id;$/;"	m	class:Packet
identifier	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^        char* identifier;$/;"	m	class:P2PRequestPID
identifier	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRequestPID.hpp	/^        char* identifier;$/;"	m	class:P2PRequestPID
idle_sfx	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString idle_sfx; \/\/ sfx used when avatar or monster is idle$/;"	m	class:AvatarAppearance
idle_sfx	src/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString idle_sfx; \/\/ sfx used when avatar or monster is idle$/;"	m	class:AvatarAppearance
ifnode	include/Eternia/Programming/Visual/VProgramNode.h	/^        VProgramNode* ifnode; \/\/ next node if not conditional$/;"	m	class:VProgramNode
ifnode	src/Programming/Visual/VProgramNode.h	/^        VProgramNode* ifnode; \/\/ next node if not conditional$/;"	m	class:VProgramNode
imaginary	include/Eternia/Math/Complex.hpp	/^    float real, imaginary;$/;"	m	class:Complex
imaginary	src/Math/Complex.hpp	/^    float real, imaginary;$/;"	m	class:Complex
impedance	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        double impedance; \/\/ resistance creates temperature when current flows through it$/;"	m	class:ComponentRating
impedance	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        double impedance; \/\/ Gate impedance$/;"	m	class:Mosfet
impedance	src/Engineering/Electrical/Components/ComponentRating.h	/^        double impedance; \/\/ resistance creates temperature when current flows through it$/;"	m	class:ComponentRating
impedance	src/Engineering/Electrical/Components/Mosfet.h	/^        double impedance; \/\/ Gate impedance$/;"	m	class:Mosfet
in	include/Eternia/constants.h	/^        const double in = inch;$/;"	m	namespace:physical::unit
in	src/constants.h	/^        const double in = inch;$/;"	m	namespace:physical::unit
inch	include/Eternia/constants.h	/^        const double inch = 0.0254*meters;$/;"	m	namespace:physical::unit
inch	src/constants.h	/^        const double inch = 0.0254*meters;$/;"	m	namespace:physical::unit
inches	include/Eternia/constants.h	/^        const double inches = inch;$/;"	m	namespace:physical::unit
inches	src/constants.h	/^        const double inches = inch;$/;"	m	namespace:physical::unit
incidentEdges	include/Eternia/Data/Graph.h	/^        LinkedListT* incidentEdges;$/;"	m	class:GVertex
incidentEdges	src/Data/Graph.h	/^        LinkedListT* incidentEdges;$/;"	m	class:GVertex
index	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    int index;$/;"	m	struct:__anon9
index	src/Algorithm/Compression/BasicCompressor.h	/^    int index;$/;"	m	struct:__anon3
infared	include/Eternia/constants.h	/^    const double infared = 300*gigaHertz; \/\/9$/;"	m	namespace:electromagnetic
infared	src/constants.h	/^    const double infared = 300*gigaHertz; \/\/9$/;"	m	namespace:electromagnetic
info_arch	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_language_dialect_default	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
init	include/Eternia/API/APIMod.h	/^    void init(CharString file, CharString name, CharString language, CharString version);$/;"	p	class:APIMod
init	include/Eternia/Algorithm/Cryptography/md5.h	/^        void init();$/;"	p	class:MD5
init	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void init(ADBF_TYPE type, bool isKey);$/;"	p	class:AbstractDBField
init	include/Eternia/Data/Events/EventHandle.h	/^        void init();$/;"	p	class:EventHandle
init	include/Eternia/Data/Protect/PType.hpp	/^    void init(){$/;"	f	class:PType
init	include/Eternia/Emulation/MPU/msp430.h	/^        void init(); \/\/ or reinit msp430$/;"	p	class:MSP430
init	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^    void init(int id, int stacksize, double price); \/\/ initializes basic item base, use in declaration of item.$/;"	p	class:ItemBase
init	src/API/APIMod.cpp	/^void APIMod::init(CharString file, CharString name, CharString language, CharString version){$/;"	f	class:APIMod
init	src/API/APIMod.h	/^    void init(CharString file, CharString name, CharString language, CharString version);$/;"	p	class:APIMod
init	src/Algorithm/Cryptography/md5.cpp	/^void MD5::init() {$/;"	f	class:MD5
init	src/Algorithm/Cryptography/md5.h	/^        void init();$/;"	p	class:MD5
init	src/Data/AbstractDatabase/AbstractDB.h	/^        void init(ADBF_TYPE type, bool isKey);$/;"	p	class:AbstractDBField
init	src/Data/AbstractDatabase/AbstractDBField.cpp	/^void AbstractDBField::init(ADBF_TYPE type, bool isKey) {$/;"	f	class:AbstractDBField
init	src/Data/Events/EventHandle.cpp	/^void EventHandle::init() {$/;"	f	class:EventHandle
init	src/Data/Events/EventHandle.h	/^        void init();$/;"	p	class:EventHandle
init	src/Data/Protect/PType.hpp	/^    void init(){$/;"	f	class:PType
init	src/Emulation/MPU/msp430.cpp	/^void MSP430::init() {$/;"	f	class:MSP430
init	src/Emulation/MPU/msp430.h	/^        void init(); \/\/ or reinit msp430$/;"	p	class:MSP430
init	src/Gamelogic/Inventory/ItemBase.h	/^    void init(int id, int stacksize, double price); \/\/ initializes basic item base, use in declaration of item.$/;"	p	class:ItemBase
initFile	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void initFile(const char* file);$/;"	p	class:AbstractDBTable
initFile	src/Data/AbstractDatabase/AbstractDB.h	/^        void initFile(const char* file);$/;"	p	class:AbstractDBTable
initFile	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^void AbstractDBTable::initFile(const char* loc) {$/;"	f	class:AbstractDBTable
initObject	include/Eternia/Design/LayoutObject.h	/^        private initObject(); \/\/ initialize variables$/;"	p	class:LayoutObject
initObject	src/Design/LayoutObject.h	/^        private initObject(); \/\/ initialize variables$/;"	p	class:LayoutObject
initSerializer	include/Eternia/Serialization/BasicSerializer.h	/^        void initSerializer(void* thisobject, int class_size); \/\/ initialize the serializer in bytes$/;"	p	class:BasicSerializer
initSerializer	src/Serialization/BasicSerializer.cpp	/^void BasicSerializer::initSerializer(void* thisobject, int class_size) {$/;"	f	class:BasicSerializer
initSerializer	src/Serialization/BasicSerializer.h	/^        void initSerializer(void* thisobject, int class_size); \/\/ initialize the serializer in bytes$/;"	p	class:BasicSerializer
innerProduct	include/Eternia/Math/struct/VectorSpace.h	/^        double innerProduct(VectorSpace* V); \/\/ inner dot product. <u,v> = U(1,1)*V(1,1) + U(2,1)*V(2,1) + ... U(n)*V(n)$/;"	p	class:VectorSpace
innerProduct	src/Math/struct/VectorSpace.cpp	/^double VectorSpace::innerProduct(VectorSpace* V) {$/;"	f	class:VectorSpace
innerProduct	src/Math/struct/VectorSpace.h	/^        double innerProduct(VectorSpace* V); \/\/ inner dot product. <u,v> = U(1,1)*V(1,1) + U(2,1)*V(2,1) + ... U(n)*V(n)$/;"	p	class:VectorSpace
inorganic_chemistry	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> inorganic_chemistry; \/\/ polymers \/ Acids \/ Advanced chemistry$/;"	m	class:CraftingStats
inorganic_chemistry	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> inorganic_chemistry; \/\/ polymers \/ Acids \/ Advanced chemistry$/;"	m	class:CraftingStats
input	include/Eternia/Programming/Program.h	/^        void input(int slot, VProgramVariable* value); \/\/ sets the value of a variable$/;"	p	class:Program
input	src/Programming/Program.h	/^        void input(int slot, VProgramVariable* value); \/\/ sets the value of a variable$/;"	p	class:Program
input	src/Programming/Visual/VisualProgram.cpp	/^void Program::input(int slot, VProgramVariable* var) {$/;"	f	class:Program
inputs	include/Eternia/Programming/Program.h	/^        VProgramVariable *inputs, *actions;$/;"	m	class:Program
inputs	src/Programming/Program.h	/^        VProgramVariable *inputs, *actions;$/;"	m	class:Program
insert	include/Eternia/Data/Heap.h	/^        void insert(int item); \/\/ insert item into list.$/;"	p	class:Heap
insert	include/Eternia/Data/LinkedList.hpp	/^    void insert(T* data, int location){$/;"	f	class:LinkedList
insert	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem* insert(unsigned long priority, void* data); \/\/ insert item into list.$/;"	p	class:PriorityQueue
insert	src/Data/Heap.cpp	/^void Heap::insert(int item) {$/;"	f	class:Heap
insert	src/Data/Heap.h	/^        void insert(int item); \/\/ insert item into list.$/;"	p	class:Heap
insert	src/Data/LinkedList.hpp	/^    void insert(T* data, int location){$/;"	f	class:LinkedList
insert	src/Data/PriorityQueue.cpp	/^PriorityItem* PriorityQueue::insert(unsigned long priority, void* data) {$/;"	f	class:PriorityQueue
insert	src/Data/PriorityQueue.h	/^        PriorityItem* insert(unsigned long priority, void* data); \/\/ insert item into list.$/;"	p	class:PriorityQueue
insertEdge	include/Eternia/Data/Graph.h	/^        void insertEdge(GEdge* e); \/\/ inserts an edge if it doesn't exist.$/;"	p	class:Graph
insertEdge	src/Data/Graph.h	/^        void insertEdge(GEdge* e); \/\/ inserts an edge if it doesn't exist.$/;"	p	class:Graph
insertRow	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void insertRow(int index, AbstractDBRow* row);$/;"	p	class:AbstractDBTable
insertRow	src/Data/AbstractDatabase/AbstractDB.h	/^        void insertRow(int index, AbstractDBRow* row);$/;"	p	class:AbstractDBTable
insertVertex	include/Eternia/Data/Graph.h	/^        void insertVertex(GVertex* o); \/\/ inserts a vertex if it doesn't exist.$/;"	p	class:Graph
insertVertex	src/Data/Graph.h	/^        void insertVertex(GVertex* o); \/\/ inserts a vertex if it doesn't exist.$/;"	p	class:Graph
insight	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> insight; \/\/ Intelligence \/ Discovery$/;"	m	class:SkillSet
insight	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> insight; \/\/ Intelligence \/ Discovery$/;"	m	class:SkillSet
inslots	include/Eternia/Programming/Program.h	/^        int inslots, actionslots, outslots;$/;"	m	class:Program
inslots	src/Programming/Program.h	/^        int inslots, actionslots, outslots;$/;"	m	class:Program
instructablePackets	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^        int instructablePackets;$/;"	m	class:SecuredCPUHeader
instructablePackets	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^        int instructablePackets;$/;"	m	class:SecuredGPUHeader
instructablePackets	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUHeader.hpp	/^        int instructablePackets;$/;"	m	class:SecuredCPUHeader
instructablePackets	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUHeader.hpp	/^        int instructablePackets;$/;"	m	class:SecuredGPUHeader
instructionNumber	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        int instructionNumber;$/;"	m	class:SecuredCPUInstructables
instructionNumber	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        int instructionNumber;$/;"	m	class:SecuredGPUInstructables
instructionNumber	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        int instructionNumber;$/;"	m	class:SecuredCPUInstructables
instructionNumber	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        int instructionNumber;$/;"	m	class:SecuredGPUInstructables
instructions	include/Eternia/Programming/CPLScript/CPLScripter.h	/^        LinkedList<Instruction> instructions; \/\/ general list of compiled instructions.$/;"	m	class:CPLScripter
instructions	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        LinkedList<CharString>* instructions;$/;"	m	class:SecuredCPUInstructables
instructions	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        LinkedList<CharString>* instructions;$/;"	m	class:SecuredGPUInstructables
instructions	src/Programming/CPLScript/CPLScripter.h	/^        LinkedList<Instruction> instructions; \/\/ general list of compiled instructions.$/;"	m	class:CPLScripter
instructions	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        LinkedList<CharString>* instructions;$/;"	m	class:SecuredCPUInstructables
instructions	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        LinkedList<CharString>* instructions;$/;"	m	class:SecuredGPUInstructables
integrate	include/Eternia/Math/Equation.h	/^        Equation* integrate(char* wrt); \/\/ integrate this equation.$/;"	p	class:Equation
integrate	src/Math/Equation.h	/^        Equation* integrate(char* wrt); \/\/ integrate this equation.$/;"	p	class:Equation
integrate	src/Math/Equation_CALC.cpp	/^Equation* Equation::integrate(char* wrt) {$/;"	f	class:Equation
intelligence	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> intelligence; \/\/ Research \/ Tech \/ Strategist \/ Crafting \/ Leadership$/;"	m	class:SkillSet
intelligence	include/Eternia/Gamelogic/Race/Race.h	/^	float intelligence; \/\/ Base intelligence level, rated in IQ. Higher IQ = faster research.$/;"	m	class:Race
intelligence	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> intelligence; \/\/ Research \/ Tech \/ Strategist \/ Crafting \/ Leadership$/;"	m	class:SkillSet
intelligence	src/Gamelogic/Race/Race.h	/^	float intelligence; \/\/ Base intelligence level, rated in IQ. Higher IQ = faster research.$/;"	m	class:Race
interest	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<double> interest; \/\/ percent interest$/;"	m	class:Account
interest	src/Gamelogic/Economics/Banking/Account.h	/^    PType<double> interest; \/\/ percent interest$/;"	m	class:Account
interestTYPE	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^enum interestTYPE {Interest_HOURLY, Interest_DAILY, Interest_WEEKLY, Interest_MONTHLY, Interest_YEARLY};$/;"	g
interestTYPE	src/Gamelogic/Economics/Banking/Account.h	/^enum interestTYPE {Interest_HOURLY, Interest_DAILY, Interest_WEEKLY, Interest_MONTHLY, Interest_YEARLY};$/;"	g
interest_type	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<interestTYPE> interest_type;$/;"	m	class:Account
interest_type	src/Gamelogic/Economics/Banking/Account.h	/^    PType<interestTYPE> interest_type;$/;"	m	class:Account
interruptHandles	include/Eternia/Emulation/MPU/msp430.h	/^        HashMap<LinkedList<InterruptHandle> >* interruptHandles;$/;"	m	class:MSP430
interruptHandles	src/Emulation/MPU/msp430.h	/^        HashMap<LinkedList<InterruptHandle> >* interruptHandles;$/;"	m	class:MSP430
inuse	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    bool inuse;$/;"	m	class:ConcurrentLinkedList
inuse	src/Data/ConcurrentLinkedList.hpp	/^    bool inuse;$/;"	m	class:ConcurrentLinkedList
inventoryItems	include/Eternia/Gamelogic/Inventory/BaseInventory.h	/^    LinkedList<ItemBase> inventoryItems;$/;"	m	class:BaseInventory
inventoryItems	src/Gamelogic/Inventory/BaseInventory.h	/^    LinkedList<ItemBase> inventoryItems;$/;"	m	class:BaseInventory
inverse	include/Eternia/Math/struct/Matrix.h	/^    void inverse(); \/\/ invert this matrix. (requires determinants)$/;"	p	class:Matrix
inverse	src/Math/struct/Matrix.cpp	/^void Matrix::inverse() {$/;"	f	class:Matrix
inverse	src/Math/struct/Matrix.h	/^    void inverse(); \/\/ invert this matrix. (requires determinants)$/;"	p	class:Matrix
ip	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        char* ip;$/;"	m	class:P2PNode
ip	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        char* ip;$/;"	m	class:P2PNode
isAdjacentTo	include/Eternia/Data/Graph.h	/^        bool isAdjacentTo(GVertex* v);$/;"	p	class:GEdge
isAdjacentTo	src/Data/Graph.h	/^        bool isAdjacentTo(GVertex* v);$/;"	p	class:GEdge
isAllowed	include/Eternia/Gamelogic/Avatar/Mood.h	/^        bool isAllowed(); \/\/ determined if this mood is allowed in the current avatar situation$/;"	p	class:Mood
isAllowed	src/Gamelogic/Avatar/Mood.cpp	/^bool Mood::isAllowed() {}$/;"	f	class:Mood
isAllowed	src/Gamelogic/Avatar/Mood.h	/^        bool isAllowed(); \/\/ determined if this mood is allowed in the current avatar situation$/;"	p	class:Mood
isBasis	include/Eternia/Math/struct/VectorSpace.h	/^        bool isBasis(VectorSpace* W); \/\/ returns whether the VectorSpace is a Basis of Rn$/;"	p	class:VectorSpace
isBasis	src/Math/struct/VectorSpace.cpp	/^bool VectorSpace::isBasis(VectorSpace* W) {$/;"	f	class:VectorSpace
isBasis	src/Math/struct/VectorSpace.h	/^        bool isBasis(VectorSpace* W); \/\/ returns whether the VectorSpace is a Basis of Rn$/;"	p	class:VectorSpace
isBlocked	include/Eternia/Gamelogic/AI/AIMovement.h	/^        bool isBlocked(vertex* loc); \/\/ is a location blocked? (Bad terrain)$/;"	p	class:AIMovement
isBlocked	src/Gamelogic/AI/AIMovement.h	/^        bool isBlocked(vertex* loc); \/\/ is a location blocked? (Bad terrain)$/;"	p	class:AIMovement
isBondPossible	include/Eternia/Engineering/Chemistry/Atom.h	/^        bool isBondPossible(Atom* atom); \/\/ checks valence and ions$/;"	p	class:Atom
isBondPossible	src/Engineering/Chemistry/Atom.h	/^        bool isBondPossible(Atom* atom); \/\/ checks valence and ions$/;"	p	class:Atom
isCancelled	include/Eternia/Data/Events/Event.h	/^    bool isCancelled(); \/\/ determine if an event has been cancelled.$/;"	p	class:Event
isCancelled	src/Data/Events/Event.h	/^    bool isCancelled(); \/\/ determine if an event has been cancelled.$/;"	p	class:Event
isCategorized	include/Eternia/Data/DoubleList.h	/^        bool isCategorized;\/\/ is the list categorized doubleo a fast fixed list?$/;"	m	class:DoubleList
isCategorized	include/Eternia/Data/IntegerList.h	/^        bool isCategorized;\/\/ is the list categorized into a fast fixed list?$/;"	m	class:IntegerList
isCategorized	src/Data/DoubleList.h	/^        bool isCategorized;\/\/ is the list categorized doubleo a fast fixed list?$/;"	m	class:DoubleList
isCategorized	src/Data/IntegerList.h	/^        bool isCategorized;\/\/ is the list categorized into a fast fixed list?$/;"	m	class:IntegerList
isChanged	include/Eternia/Data/Protect/PType.hpp	/^    bool isChanged(){$/;"	f	class:PType
isChanged	src/Data/Protect/PType.hpp	/^    bool isChanged(){$/;"	f	class:PType
isCharNumber	src/Math/Eval.cpp	/^bool isCharNumber(char in) {$/;"	f
isDataDifferent	include/Eternia/Serialization/BasicSerializer.h	/^        bool isDataDifferent(long removeChecksum); \/\/ compares the checksum with the current class$/;"	p	class:BasicSerializer
isDataDifferent	src/Serialization/BasicSerializer.cpp	/^bool BasicSerializer::isDataDifferent(long removeChecksum) {$/;"	f	class:BasicSerializer
isDataDifferent	src/Serialization/BasicSerializer.h	/^        bool isDataDifferent(long removeChecksum); \/\/ compares the checksum with the current class$/;"	p	class:BasicSerializer
isDead	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        bool isDead(); \/\/ return dead$/;"	p	class:ComponentRating
isDead	src/Engineering/Electrical/Components/ComponentRating.cpp	/^bool ComponentRating::isDead() {$/;"	f	class:ComponentRating
isDead	src/Engineering/Electrical/Components/ComponentRating.h	/^        bool isDead(); \/\/ return dead$/;"	p	class:ComponentRating
isEmpty	include/Eternia/Data/CharString.h	/^        bool isEmpty();$/;"	p	class:CharString
isEmpty	include/Eternia/Data/Events/EventHandler.h	/^        bool isEmpty(); \/\/ returns if the event queue is empty$/;"	p	class:EventHandler
isEmpty	src/Data/CharString.cpp	/^bool CharString::isEmpty() {$/;"	f	class:CharString
isEmpty	src/Data/CharString.h	/^        bool isEmpty();$/;"	p	class:CharString
isEmpty	src/Data/Events/EventHandler.cpp	/^bool EventHandler::isEmpty() {$/;"	f	class:EventHandler
isEmpty	src/Data/Events/EventHandler.h	/^        bool isEmpty(); \/\/ returns if the event queue is empty$/;"	p	class:EventHandler
isIndependent	include/Eternia/Math/struct/VectorSpace.h	/^        bool isIndependent(); \/\/ returns true if the vertex space is dependent of equations.$/;"	p	class:VectorSpace
isIndependent	src/Math/struct/VectorSpace.cpp	/^bool VectorSpace::isIndependent() {$/;"	f	class:VectorSpace
isIndependent	src/Math/struct/VectorSpace.h	/^        bool isIndependent(); \/\/ returns true if the vertex space is dependent of equations.$/;"	p	class:VectorSpace
isLeaf	include/Eternia/Data/TreeList.h	/^        bool isLeaf(); \/\/ is leaf (end) node?$/;"	p	class:TreeNode
isLeaf	src/Data/TreeList.h	/^        bool isLeaf(); \/\/ is leaf (end) node?$/;"	p	class:TreeNode
isOrthagonal	include/Eternia/Math/struct/vertex.h	/^    bool isOrthagonal(vertex v); \/\/ returns whether this is orthagonal.$/;"	p	class:vertex
isOrthagonal	src/Math/struct/vertex.cpp	/^bool vertex::isOrthagonal(vertex v) {$/;"	f	class:vertex
isOrthagonal	src/Math/struct/vertex.h	/^    bool isOrthagonal(vertex v); \/\/ returns whether this is orthagonal.$/;"	p	class:vertex
isRoot	include/Eternia/Data/TreeList.h	/^        bool isRoot(); \/\/ is top node?$/;"	p	class:TreeNode
isRoot	src/Data/TreeList.h	/^        bool isRoot(); \/\/ is top node?$/;"	p	class:TreeNode
isSquare	include/Eternia/Math/struct/Matrix.h	/^    bool isSquare(); \/\/ _m == _n$/;"	p	class:Matrix
isSquare	src/Math/struct/Matrix.cpp	/^bool Matrix::isSquare() {$/;"	f	class:Matrix
isSquare	src/Math/struct/Matrix.h	/^    bool isSquare(); \/\/ _m == _n$/;"	p	class:Matrix
isSubSpace	include/Eternia/Math/struct/VectorSpace.h	/^        bool isSubSpace(VectorSpace* V); \/\/ returns whether this is a subspace of V$/;"	p	class:VectorSpace
isSubSpace	src/Math/struct/VectorSpace.h	/^        bool isSubSpace(VectorSpace* V); \/\/ returns whether this is a subspace of V$/;"	p	class:VectorSpace
isValidCharString	include/Eternia/Data/CharString.h	/^        bool isValidCharString(); \/\/ checks if empty$/;"	p	class:CharString
isValidCharString	src/Data/CharString.cpp	/^bool CharString::isValidCharString() {$/;"	f	class:CharString
isValidCharString	src/Data/CharString.h	/^        bool isValidCharString(); \/\/ checks if empty$/;"	p	class:CharString
isValidNumber	include/Eternia/Data/CharString.h	/^        bool isValidNumber(); \/\/ checks for "0-9, -, ."$/;"	p	class:CharString
isValidNumber	src/Data/CharString.cpp	/^bool CharString::isValidNumber(){$/;"	f	class:CharString
isValidNumber	src/Data/CharString.h	/^        bool isValidNumber(); \/\/ checks for "0-9, -, ."$/;"	p	class:CharString
isValidScientific	include/Eternia/Data/CharString.h	/^        bool isValidScientific(); \/\/ checks for a valid scientific number (or infinity \/ NaN)$/;"	p	class:CharString
isValidScientific	src/Data/CharString.cpp	/^bool CharString::isValidScientific(){$/;"	f	class:CharString
isValidScientific	src/Data/CharString.h	/^        bool isValidScientific(); \/\/ checks for a valid scientific number (or infinity \/ NaN)$/;"	p	class:CharString
isViolated	include/Eternia/Data/Protect/PType.hpp	/^    bool isViolated(){$/;"	f	class:PType
isViolated	src/Data/Protect/PType.hpp	/^    bool isViolated(){$/;"	f	class:PType
ishield	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	Composite ishield, oshield; \/\/ material used to shield the reactor from exposing radiation$/;"	m	class:Reactor
ishield	src/Gamelogic/CoreSystems/Reactor.h	/^	Composite ishield, oshield; \/\/ material used to shield the reactor from exposing radiation$/;"	m	class:Reactor
iskey	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        bool iskey;$/;"	m	class:AbstractDBField
iskey	src/Data/AbstractDatabase/AbstractDB.h	/^        bool iskey;$/;"	m	class:AbstractDBField
items	include/Eternia/Data/TimeProfiler.h	/^    LinkedList<CharString> items;$/;"	m	class:TimeProfiler
items	src/Data/TimeProfiler.h	/^    LinkedList<CharString> items;$/;"	m	class:TimeProfiler
iterator	include/Eternia/Data/FileCache.hpp	/^        long iterator;$/;"	m	class:FileCache
iterator	src/Data/FileCache.hpp	/^        long iterator;$/;"	m	class:FileCache
jc	include/Eternia/Emulation/MPU/msp430.h	/^        void jc(unsigned int location); \/\/ jump carry$/;"	p	class:MSP430
jc	src/Emulation/MPU/msp430.h	/^        void jc(unsigned int location); \/\/ jump carry$/;"	p	class:MSP430
jc	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jc(unsigned int location) {$/;"	f	class:MSP430
jeq	include/Eternia/Emulation/MPU/msp430.h	/^        void jeq(unsigned int location); \/\/ jz$/;"	p	class:MSP430
jeq	src/Emulation/MPU/msp430.h	/^        void jeq(unsigned int location); \/\/ jz$/;"	p	class:MSP430
jeq	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jeq(unsigned int location) {$/;"	f	class:MSP430
jeroboam	include/Eternia/constants.h	/^        const double jeroboam = 4.0*fifths;$/;"	m	namespace:physical::unit
jeroboam	src/constants.h	/^        const double jeroboam = 4.0*fifths;$/;"	m	namespace:physical::unit
jeroboams	include/Eternia/constants.h	/^        const double jeroboams = jeroboam;$/;"	m	namespace:physical::unit
jeroboams	src/constants.h	/^        const double jeroboams = jeroboam;$/;"	m	namespace:physical::unit
jge	include/Eternia/Emulation/MPU/msp430.h	/^        void jge(unsigned int location);$/;"	p	class:MSP430
jge	src/Emulation/MPU/msp430.h	/^        void jge(unsigned int location);$/;"	p	class:MSP430
jge	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jge(unsigned int location) {$/;"	f	class:MSP430
jl	include/Eternia/Emulation/MPU/msp430.h	/^        void jl(unsigned int location);$/;"	p	class:MSP430
jl	src/Emulation/MPU/msp430.h	/^        void jl(unsigned int location);$/;"	p	class:MSP430
jl	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jl(unsigned int location) {$/;"	f	class:MSP430
jmp	include/Eternia/Emulation/MPU/msp430.h	/^        void jmp(unsigned int location);$/;"	p	class:MSP430
jmp	src/Emulation/MPU/msp430.h	/^        void jmp(unsigned int location);$/;"	p	class:MSP430
jmp	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jmp(unsigned int location) {$/;"	f	class:MSP430
jn	include/Eternia/Emulation/MPU/msp430.h	/^        void jn(unsigned int location); \/\/ jump negative$/;"	p	class:MSP430
jn	src/Emulation/MPU/msp430.h	/^        void jn(unsigned int location); \/\/ jump negative$/;"	p	class:MSP430
jn	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jn(unsigned int location) {$/;"	f	class:MSP430
jnc	include/Eternia/Emulation/MPU/msp430.h	/^        void jnc(unsigned int location); \/\/ jump not carry$/;"	p	class:MSP430
jnc	src/Emulation/MPU/msp430.h	/^        void jnc(unsigned int location); \/\/ jump not carry$/;"	p	class:MSP430
jnc	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jnc(unsigned int location) {$/;"	f	class:MSP430
jne	include/Eternia/Emulation/MPU/msp430.h	/^        void jne(unsigned int location); \/\/ jnz$/;"	p	class:MSP430
jne	src/Emulation/MPU/msp430.h	/^        void jne(unsigned int location); \/\/ jnz$/;"	p	class:MSP430
jne	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::jne(unsigned int location) {$/;"	f	class:MSP430
k	include/Eternia/Data/HashMap.hpp	/^        CharString k;$/;"	m	class:HTEntry
k	include/Eternia/Data/HashTable.h	/^        CharString k, d;$/;"	m	class:HTEntry
k	src/Data/HashMap.hpp	/^        CharString k;$/;"	m	class:HTEntry
k	src/Data/HashTable.h	/^        CharString k, d;$/;"	m	class:HTEntry
kHz	include/Eternia/constants.h	/^        const double kHz = kiloHertz;$/;"	m	namespace:physical::unit
kHz	src/constants.h	/^        const double kHz = kiloHertz;$/;"	m	namespace:physical::unit
kW	include/Eternia/constants.h	/^        const double kW = kiloWatt;$/;"	m	namespace:physical::unit
kW	src/constants.h	/^        const double kW = kiloWatt;$/;"	m	namespace:physical::unit
kWh	include/Eternia/constants.h	/^        const double kWh = kiloWatthour;$/;"	m	namespace:physical::unit
kWh	src/constants.h	/^        const double kWh = kiloWatthour;$/;"	m	namespace:physical::unit
karat	include/Eternia/constants.h	/^        const double karat = 1.0\/24.0;$/;"	m	namespace:physical::unit
karat	src/constants.h	/^        const double karat = 1.0\/24.0;$/;"	m	namespace:physical::unit
karats	include/Eternia/constants.h	/^        const double karats = karat;$/;"	m	namespace:physical::unit
karats	src/constants.h	/^        const double karats = karat;$/;"	m	namespace:physical::unit
kcal	include/Eternia/constants.h	/^        const double kcal = kilocalorie;$/;"	m	namespace:physical::unit
kcal	src/constants.h	/^        const double kcal = kilocalorie;$/;"	m	namespace:physical::unit
keV	include/Eternia/constants.h	/^        const double keV = 1000.0*eV;$/;"	m	namespace:physical::constant
keV	src/constants.h	/^        const double keV = 1000.0*eV;$/;"	m	namespace:physical::constant
key	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    CharString key;$/;"	m	class:BasicCompressor
key	include/Eternia/Algorithm/Cryptography/Aes256.h	/^    uint8_t key[32];$/;"	m	struct:__anon7
key	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        char* key; \/\/ randomly generated key$/;"	m	class:CryptoDefiner
key	include/Eternia/Data/LinkedMap.h	/^        char * key; \/\/ <-- primary key$/;"	m	class:LinkedMapNode
key	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<double> key; \/\/ number-key for accessing account, hashed$/;"	m	class:Account
key	include/Eternia/Parsing/SecuredParser.h	/^        uint8_t key[32];$/;"	m	class:SecuredParser
key	src/Algorithm/Compression/BasicCompressor.h	/^    CharString key;$/;"	m	class:BasicCompressor
key	src/Algorithm/Cryptography/Aes256.h	/^    uint8_t key[32];$/;"	m	struct:__anon1
key	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        char* key; \/\/ randomly generated key$/;"	m	class:CryptoDefiner
key	src/Data/LinkedMap.h	/^        char * key; \/\/ <-- primary key$/;"	m	class:LinkedMapNode
key	src/Gamelogic/Economics/Banking/Account.h	/^    PType<double> key; \/\/ number-key for accessing account, hashed$/;"	m	class:Account
key	src/Parsing/SecuredParser.h	/^        uint8_t key[32];$/;"	m	class:SecuredParser
kg	include/Eternia/constants.h	/^        const double kg = kilogram;$/;"	m	namespace:physical::unit
kg	src/constants.h	/^        const double kg = kilogram;$/;"	m	namespace:physical::unit
kilderkin	include/Eternia/constants.h	/^        const double kilderkin = 18.0*US::liquid::gallons;$/;"	m	namespace:physical::unit
kilderkin	src/constants.h	/^        const double kilderkin = 18.0*US::liquid::gallons;$/;"	m	namespace:physical::unit
kilderkins	include/Eternia/constants.h	/^        const double kilderkins = kilderkin;$/;"	m	namespace:physical::unit
kilderkins	src/constants.h	/^        const double kilderkins = kilderkin;$/;"	m	namespace:physical::unit
killAvatar	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void killAvatar(Avatar* av); \/\/ Player\/NPC\/Monster kills another. EXP is calculated then distributed.$/;"	p	class:Avatar
killAvatar	src/Gamelogic/Avatar/Avatar.cpp	/^void Avatar::killAvatar(Avatar* av) {$/;"	f	class:Avatar
killAvatar	src/Gamelogic/Avatar/Avatar.h	/^        void killAvatar(Avatar* av); \/\/ Player\/NPC\/Monster kills another. EXP is calculated then distributed.$/;"	p	class:Avatar
kilo	include/Eternia/constants.h	/^        const double kilo = 1e3;$/;"	m	namespace:physical::unit
kilo	src/constants.h	/^        const double kilo = 1e3;$/;"	m	namespace:physical::unit
kiloHertz	include/Eternia/constants.h	/^        const double kiloHertz = kilo*Hertz;$/;"	m	namespace:physical::unit
kiloHertz	src/constants.h	/^        const double kiloHertz = kilo*Hertz;$/;"	m	namespace:physical::unit
kiloWatt	include/Eternia/constants.h	/^        const double kiloWatt = 1000.0*Watts;$/;"	m	namespace:physical::unit
kiloWatt	src/constants.h	/^        const double kiloWatt = 1000.0*Watts;$/;"	m	namespace:physical::unit
kiloWatthour	include/Eternia/constants.h	/^        const double kiloWatthour = 3600000.0*Joules;$/;"	m	namespace:physical::unit
kiloWatthour	src/constants.h	/^        const double kiloWatthour = 3600000.0*Joules;$/;"	m	namespace:physical::unit
kiloWatthours	include/Eternia/constants.h	/^        const double kiloWatthours = kiloWatthour;$/;"	m	namespace:physical::unit
kiloWatthours	src/constants.h	/^        const double kiloWatthours = kiloWatthour;$/;"	m	namespace:physical::unit
kiloWatts	include/Eternia/constants.h	/^        const double kiloWatts = kiloWatt;$/;"	m	namespace:physical::unit
kiloWatts	src/constants.h	/^        const double kiloWatts = kiloWatt;$/;"	m	namespace:physical::unit
kilocalorie	include/Eternia/constants.h	/^        const double kilocalorie = 1000.0*calories;$/;"	m	namespace:physical::unit
kilocalorie	src/constants.h	/^        const double kilocalorie = 1000.0*calories;$/;"	m	namespace:physical::unit
kilocalories	include/Eternia/constants.h	/^        const double kilocalories = kilocalorie;$/;"	m	namespace:physical::unit
kilocalories	src/constants.h	/^        const double kilocalories = kilocalorie;$/;"	m	namespace:physical::unit
kilogram	include/Eternia/constants.h	/^        const double kilogram = 1.0;$/;"	m	namespace:physical::unit
kilogram	src/constants.h	/^        const double kilogram = 1.0;$/;"	m	namespace:physical::unit
kilograms	include/Eternia/constants.h	/^        const double kilograms = kilogram;$/;"	m	namespace:physical::unit
kilograms	src/constants.h	/^        const double kilograms = kilogram;$/;"	m	namespace:physical::unit
kilohyl	include/Eternia/constants.h	/^        const double kilohyl = kilogram*gravity*second*second\/meter;$/;"	m	namespace:physical::unit
kilohyl	src/constants.h	/^        const double kilohyl = kilogram*gravity*second*second\/meter;$/;"	m	namespace:physical::unit
kilohyls	include/Eternia/constants.h	/^        const double kilohyls = kilohyl;$/;"	m	namespace:physical::unit
kilohyls	src/constants.h	/^        const double kilohyls = kilohyl;$/;"	m	namespace:physical::unit
kilometer	include/Eternia/constants.h	/^        const double kilometer = 1000.0*meters;$/;"	m	namespace:physical::unit
kilometer	src/constants.h	/^        const double kilometer = 1000.0*meters;$/;"	m	namespace:physical::unit
kilometers	include/Eternia/constants.h	/^        const double kilometers = kilometer;$/;"	m	namespace:physical::unit
kilometers	src/constants.h	/^        const double kilometers = kilometer;$/;"	m	namespace:physical::unit
km	include/Eternia/constants.h	/^        const double km = kilometer;$/;"	m	namespace:physical::unit
km	src/constants.h	/^        const double km = kilometer;$/;"	m	namespace:physical::unit
knot	include/Eternia/constants.h	/^            const double knot = 6980.0*feet\/hour;$/;"	m	namespace:physical::unit::admiralty
knot	include/Eternia/constants.h	/^        const double knot = nautical::miles\/hour;$/;"	m	namespace:physical::unit
knot	src/constants.h	/^            const double knot = 6980.0*feet\/hour;$/;"	m	namespace:physical::unit::admiralty
knot	src/constants.h	/^        const double knot = nautical::miles\/hour;$/;"	m	namespace:physical::unit
knots	include/Eternia/constants.h	/^            const double knots = knot;$/;"	m	namespace:physical::unit::admiralty
knots	include/Eternia/constants.h	/^        const double knots = knot;$/;"	m	namespace:physical::unit
knots	src/constants.h	/^            const double knots = knot;$/;"	m	namespace:physical::unit::admiralty
knots	src/constants.h	/^        const double knots = knot;$/;"	m	namespace:physical::unit
kph	include/Eternia/constants.h	/^        const double kph = kilometers\/hour;$/;"	m	namespace:physical::unit
kph	src/constants.h	/^        const double kph = kilometers\/hour;$/;"	m	namespace:physical::unit
l	include/Eternia/constants.h	/^        const double l = liter;$/;"	m	namespace:physical::unit
l	src/constants.h	/^        const double l = liter;$/;"	m	namespace:physical::unit
label	include/Eternia/Data/Graph.h	/^        int label;$/;"	m	class:GVertex
label	src/Data/Graph.h	/^        int label;$/;"	m	class:GVertex
lambda_1eV	include/Eternia/constants.h	/^        const double lambda_1eV = 1.23984244e-6*meters;$/;"	m	namespace:physical::constant
lambda_1eV	src/constants.h	/^        const double lambda_1eV = 1.23984244e-6*meters;$/;"	m	namespace:physical::constant
lambda_bar	include/Eternia/constants.h	/^        const double lambda_bar = 3.86159323e-13*meters;$/;"	m	namespace:physical::constant
lambda_bar	src/constants.h	/^        const double lambda_bar = 3.86159323e-13*meters;$/;"	m	namespace:physical::constant
language	include/Eternia/API/APIMod.h	/^    CharString file, language, version;$/;"	m	class:APIMod
language	src/API/APIMod.h	/^    CharString file, language, version;$/;"	m	class:APIMod
languages	include/Eternia/Localization/LanguageController.h	/^const LanguageController languages[0xff];$/;"	v
languages	src/Localization/LanguageController.h	/^const LanguageController languages[0xff];$/;"	v
laser	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> laser; \/\/ Laser technology weapons$/;"	m	class:CraftingStats
laser	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> laser; \/\/ Laser technology weapons$/;"	m	class:CraftingStats
last	include/Eternia/constants.h	/^        const double last = 80.0*US::bushels;$/;"	m	namespace:physical::unit
last	src/constants.h	/^        const double last = 80.0*US::bushels;$/;"	m	namespace:physical::unit
lastClock	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
lastClock	src/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
lastTT	include/Eternia/Emulation/SecondTick.h	/^        double lastTT; \/\/ last time(); used$/;"	m	class:SecondTick
lastTT	src/Emulation/SecondTick.h	/^        double lastTT; \/\/ last time(); used$/;"	m	class:SecondTick
lasts	include/Eternia/constants.h	/^        const double lasts = last;$/;"	m	namespace:physical::unit
lasts	src/constants.h	/^        const double lasts = last;$/;"	m	namespace:physical::unit
layers	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    char layers;$/;"	m	class:VoxelGeom
layers	src/Gamelogic/Voxel/VoxelGeom.h	/^    char layers;$/;"	m	class:VoxelGeom
layout	include/Eternia/Design/View.h	/^        LinkedList<Layout> *layout;$/;"	m	class:View
layout	src/Design/View.h	/^        LinkedList<Layout> *layout;$/;"	m	class:View
lb	include/Eternia/constants.h	/^            const double lb = pound;$/;"	m	namespace:physical::unit::apothecary
lb	include/Eternia/constants.h	/^            const double lb = pound;$/;"	m	namespace:physical::unit::avoirdupois
lb	src/constants.h	/^            const double lb = pound;$/;"	m	namespace:physical::unit::apothecary
lb	src/constants.h	/^            const double lb = pound;$/;"	m	namespace:physical::unit::avoirdupois
lbf	include/Eternia/constants.h	/^        const double lbf = avoirdupois::pound*gravity;$/;"	m	namespace:physical::unit
lbf	src/constants.h	/^        const double lbf = avoirdupois::pound*gravity;$/;"	m	namespace:physical::unit
leadership	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> leadership; \/\/ leadership increases the number of AIs that will follow you.$/;"	m	class:SkillSet
leadership	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> leadership; \/\/ leadership increases the number of AIs that will follow you.$/;"	m	class:SkillSet
league	include/Eternia/constants.h	/^            const double league = 3.0*miles;$/;"	m	namespace:physical::unit::nautical
league	include/Eternia/constants.h	/^            const double league = 3.0*miles;$/;"	m	namespace:physical::unit::statute
league	src/constants.h	/^            const double league = 3.0*miles;$/;"	m	namespace:physical::unit::nautical
league	src/constants.h	/^            const double league = 3.0*miles;$/;"	m	namespace:physical::unit::statute
leagues	include/Eternia/constants.h	/^            const double leagues = league;$/;"	m	namespace:physical::unit::nautical
leagues	include/Eternia/constants.h	/^            const double leagues = league;$/;"	m	namespace:physical::unit::statute
leagues	src/constants.h	/^            const double leagues = league;$/;"	m	namespace:physical::unit::nautical
leagues	src/constants.h	/^            const double leagues = league;$/;"	m	namespace:physical::unit::statute
left	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem *left, *right, *parent; \/\/ node selections.$/;"	m	class:PriorityItem
left	src/Data/PriorityQueue.h	/^        PriorityItem *left, *right, *parent; \/\/ node selections.$/;"	m	class:PriorityItem
left_arm	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip left_arm;$/;"	m	class:PortableArmor
left_arm	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip left_arm;$/;"	m	class:PortableArmor
left_foot	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip left_foot;$/;"	m	class:PortableArmor
left_foot	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip left_foot;$/;"	m	class:PortableArmor
leftarm	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
leftarm	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
leftfoot	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
leftfoot	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
lefthand	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
lefthand	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
leftknee	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
leftknee	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
leftwrist	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
leftwrist	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
leg_diameter	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
leg_diameter	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
leggings	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip leggings;$/;"	m	class:PortableArmor
leggings	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip leggings;$/;"	m	class:PortableArmor
len	include/Eternia/Data/CharString.h	/^        int len;$/;"	m	class:CharString
len	src/Data/CharString.h	/^        int len;$/;"	m	class:CharString
length	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int length;$/;"	m	class:AbstractDBLinkedDataset
length	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int length;$/;"	m	class:BasicFixedPointerArray
length	include/Eternia/Engineering/Chemistry/Composite.h	/^	float length; \/\/ distance, normal in pico-meters$/;"	m	class:AtomBond
length	include/Eternia/Math/struct/vertex.h	/^    double length(); \/\/ returns total distance between point and origin.$/;"	p	class:vertex
length	src/Data/AbstractDatabase/AbstractDB.h	/^        int length;$/;"	m	class:AbstractDBLinkedDataset
length	src/Data/AbstractDatabase/AbstractDB.h	/^        int length;$/;"	m	class:BasicFixedPointerArray
length	src/Engineering/Chemistry/Composite.h	/^	float length; \/\/ distance, normal in pico-meters$/;"	m	class:AtomBond
length	src/Math/struct/vertex.cpp	/^double vertex::length() {$/;"	f	class:vertex
length	src/Math/struct/vertex.h	/^    double length(); \/\/ returns total distance between point and origin.$/;"	p	class:vertex
length2	include/Eternia/Math/struct/vertex.h	/^    double length2(); \/\/ returns total distance between point and origin powered by 2$/;"	p	class:vertex
length2	src/Math/struct/vertex.h	/^    double length2(); \/\/ returns total distance between point and origin powered by 2$/;"	p	class:vertex
lessequals	include/Eternia/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	e	enum:MOperator
lessequals	src/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	e	enum:MOperator
level	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        int level; \/\/ server level (or L), only changed if participating in P2P. *cough* most likely to happen.$/;"	m	class:P2PLClient
level	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        int level; \/\/ server level (or L), only changed if participating in P2P. *cough* most likely to happen.$/;"	m	class:P2PLServer
level	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        int level; \/\/ server level (or L), only changed if participating in P2P. *cough* most likely to happen.$/;"	m	class:P2PLClient
level	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        int level; \/\/ server level (or L), only changed if participating in P2P. *cough* most likely to happen.$/;"	m	class:P2PLServer
li	include/Eternia/constants.h	/^        const double li = link;$/;"	m	namespace:physical::unit
li	src/constants.h	/^        const double li = link;$/;"	m	namespace:physical::unit
light	include/Eternia/constants.h	/^    const double light = 400*teraHertz;\/\/12$/;"	m	namespace:electromagnetic
light	src/constants.h	/^    const double light = 400*teraHertz;\/\/12$/;"	m	namespace:electromagnetic
lightyear	include/Eternia/constants.h	/^        const double lightyear = 9.4605e15*meters;$/;"	m	namespace:physical::unit
lightyear	src/constants.h	/^        const double lightyear = 9.4605e15*meters;$/;"	m	namespace:physical::unit
lightyears	include/Eternia/constants.h	/^        const double lightyears = lightyear;$/;"	m	namespace:physical::unit
lightyears	src/constants.h	/^        const double lightyears = lightyear;$/;"	m	namespace:physical::unit
limbs	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        LinkedList<TreeLimb> *limbs; \/\/ list of consecutive limbs$/;"	m	class:Tree
limbs	src/Gamelogic/Environment/Object/Tree.h	/^        LinkedList<TreeLimb> *limbs; \/\/ list of consecutive limbs$/;"	m	class:Tree
line	include/Eternia/Programming/CPLScript/CPLScripter.h	/^        int line; \/\/ current line$/;"	m	class:CPLScripter
line	include/Eternia/constants.h	/^        const double line = inch\/12.0;$/;"	m	namespace:physical::unit
line	src/Programming/CPLScript/CPLScripter.h	/^        int line; \/\/ current line$/;"	m	class:CPLScripter
line	src/constants.h	/^        const double line = inch\/12.0;$/;"	m	namespace:physical::unit
lines	include/Eternia/constants.h	/^        const double lines = line;$/;"	m	namespace:physical::unit
lines	src/constants.h	/^        const double lines = line;$/;"	m	namespace:physical::unit
link	include/Eternia/constants.h	/^            const double link = foot;$/;"	m	namespace:physical::unit::engineers
link	include/Eternia/constants.h	/^        const double link = 7.92*inches;$/;"	m	namespace:physical::unit
link	src/constants.h	/^            const double link = foot;$/;"	m	namespace:physical::unit::engineers
link	src/constants.h	/^        const double link = 7.92*inches;$/;"	m	namespace:physical::unit
links	include/Eternia/constants.h	/^            const double links = link;$/;"	m	namespace:physical::unit::engineers
links	include/Eternia/constants.h	/^        const double links = link;$/;"	m	namespace:physical::unit
links	src/constants.h	/^            const double links = link;$/;"	m	namespace:physical::unit::engineers
links	src/constants.h	/^        const double links = link;$/;"	m	namespace:physical::unit
liquid	include/Eternia/Engineering/Chemistry/Composite.h	/^enum STATE {solid, liquid, gas, plasma};$/;"	e	enum:STATE
liquid	include/Eternia/constants.h	/^            namespace liquid {$/;"	n	namespace:physical::unit::US
liquid	src/Engineering/Chemistry/Composite.h	/^enum STATE {solid, liquid, gas, plasma};$/;"	e	enum:STATE
liquid	src/constants.h	/^            namespace liquid {$/;"	n	namespace:physical::unit::US
list	include/Eternia/Data/CyclicList.hpp	/^    T* list; \/\/ list$/;"	m	class:CyclicList
list	src/Data/CyclicList.hpp	/^    T* list; \/\/ list$/;"	m	class:CyclicList
listDirs	include/Eternia/Data/FileSystem.h	/^        void listDirs(); \/\/ list directories (ls)$/;"	p	class:FileSystem
listDirs	include/Eternia/Data/FileSystem.h	/^        void listDirs(CharString location); \/\/ list directories (ls \/loc)$/;"	p	class:FileSystem
listDirs	src/Data/FileSystem.cpp	/^void FileSystem::listDirs() {$/;"	f	class:FileSystem
listDirs	src/Data/FileSystem.h	/^        void listDirs(); \/\/ list directories (ls)$/;"	p	class:FileSystem
listDirs	src/Data/FileSystem.h	/^        void listDirs(CharString location); \/\/ list directories (ls \/loc)$/;"	p	class:FileSystem
listFreeze	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void listFreeze();$/;"	p	class:AbstractDBLinkedDataset
listFreeze	src/Data/AbstractDatabase/AbstractDB.h	/^        void listFreeze();$/;"	p	class:AbstractDBLinkedDataset
listFreeze	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void AbstractDBLinkedDataset::listFreeze() {$/;"	f	class:AbstractDBLinkedDataset
listOfTypes	include/Eternia/Engineering/Physics/Work.h	/^        LinkedList<EnergyValue>* listOfTypes;$/;"	m	class:Work
listOfTypes	src/Engineering/Physics/Work.h	/^        LinkedList<EnergyValue>* listOfTypes;$/;"	m	class:Work
listStr	include/Eternia/Data/SplitResult.h	/^        LinkedList<CharString> listStr;$/;"	m	class:SplitResult
listStr	src/Data/SplitResult.h	/^        LinkedList<CharString> listStr;$/;"	m	class:SplitResult
listlen	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^        int listlen;$/;"	m	class:SecuredGPUData
listlen	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUData.hpp	/^        int listlen;$/;"	m	class:SecuredGPUData
liter	include/Eternia/constants.h	/^        const double liter = stere\/1000.0;$/;"	m	namespace:physical::unit
liter	src/constants.h	/^        const double liter = stere\/1000.0;$/;"	m	namespace:physical::unit
liters	include/Eternia/constants.h	/^        const double liters = liter;$/;"	m	namespace:physical::unit
liters	src/constants.h	/^        const double liters = liter;$/;"	m	namespace:physical::unit
lm	include/Eternia/constants.h	/^            const double lm = lumen;$/;"	m	namespace:physical::unit::equivalent
lm	include/Eternia/constants.h	/^        const double lm = lumen;$/;"	m	namespace:physical::unit
lm	src/constants.h	/^            const double lm = lumen;$/;"	m	namespace:physical::unit::equivalent
lm	src/constants.h	/^        const double lm = lumen;$/;"	m	namespace:physical::unit
ln	include/Eternia/Math/Functions/Basic.h	/^    double ln(double x); \/\/ natural log function$/;"	p	namespace:Math
ln	src/Math/Functions/Basic.cpp	/^    double ln(double x) {$/;"	f	namespace:Math
ln	src/Math/Functions/Basic.h	/^    double ln(double x); \/\/ natural log function$/;"	p	namespace:Math
load	include/Eternia/Emulation/MPU/msp430.h	/^        void load(char* loc); \/\/ load a raw memory file (0xFFFF long)$/;"	p	class:MSP430
load	src/Emulation/MPU/msp430.h	/^        void load(char* loc); \/\/ load a raw memory file (0xFFFF long)$/;"	p	class:MSP430
loadFile	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    CharString loadFile(CharString location); \/\/ load a file and convert$/;"	p	class:BasicCompressor
loadFile	include/Eternia/WebFramework/Encoding/JSON.h	/^        void loadFile(CharString loc); \/\/ load JSON from file$/;"	p	class:JSON
loadFile	src/Algorithm/Compression/BasicCompressor.h	/^    CharString loadFile(CharString location); \/\/ load a file and convert$/;"	p	class:BasicCompressor
loadFile	src/WebFramework/Encoding/JSON.h	/^        void loadFile(CharString loc); \/\/ load JSON from file$/;"	p	class:JSON
loadFromFile	include/Eternia/Data/BitMap.h	/^        void loadFromFile(CharString* fileLocation); \/\/ load this bitmap from a file.$/;"	p	class:BitMap
loadFromFile	src/Data/BitMap.h	/^        void loadFromFile(CharString* fileLocation); \/\/ load this bitmap from a file.$/;"	p	class:BitMap
loadHEX	include/Eternia/Emulation/MPU/msp430.h	/^        void loadHEX(char* loc); \/\/ load a hex desriptor file$/;"	p	class:MSP430
loadHEX	src/Emulation/MPU/msp430.h	/^        void loadHEX(char* loc); \/\/ load a hex desriptor file$/;"	p	class:MSP430
loadMods	include/Eternia/API/APICore.h	/^    void loadMods(); \/\/ begins the process to load all of the mods$/;"	p	class:APICore
loadMods	src/API/APICore.h	/^    void loadMods(); \/\/ begins the process to load all of the mods$/;"	p	class:APICore
loadModule	include/Eternia/API/APICore.h	/^    bool loadModule(CharString file); \/\/ load a module from a file or folder. false if not loaded.$/;"	p	class:APICore
loadModule	src/API/APICore.h	/^    bool loadModule(CharString file); \/\/ load a module from a file or folder. false if not loaded.$/;"	p	class:APICore
loadNodes	include/Eternia/Programming/Program.h	/^        void loadNodes(CharString* nodelist); \/\/ Load program nodes$/;"	p	class:Program
loadNodes	src/Programming/Program.h	/^        void loadNodes(CharString* nodelist); \/\/ Load program nodes$/;"	p	class:Program
loadNodes	src/Programming/Visual/VisualProgram.cpp	/^void Program::loadNodes(CharString* nodelist) {$/;"	f	class:Program
loadStats	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void loadStats(CharString statsString); \/\/ load stats directly from a string.$/;"	p	class:Avatar
loadStats	src/Gamelogic/Avatar/Avatar.cpp	/^void Avatar::loadStats(CharString statsString) {$/;"	f	class:Avatar
loadStats	src/Gamelogic/Avatar/Avatar.h	/^        void loadStats(CharString statsString); \/\/ load stats directly from a string.$/;"	p	class:Avatar
loadedIDs	include/Eternia/Data/FileCache.hpp	/^        LinkedList<long> *loadedIDs;$/;"	m	class:FileCache
loadedIDs	src/Data/FileCache.hpp	/^        LinkedList<long> *loadedIDs;$/;"	m	class:FileCache
loc	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        Location loc; \/\/ current location$/;"	m	class:Avatar
loc	src/Gamelogic/Avatar/Avatar.h	/^        Location loc; \/\/ current location$/;"	m	class:Avatar
local	include/Eternia/Gamelogic/Location.h	/^        VertexObject local; \/\/ local area (by local, solar-system wide)$/;"	m	class:Location
local	src/Gamelogic/Location.h	/^        VertexObject local; \/\/ local area (by local, solar-system wide)$/;"	m	class:Location
locals	include/Eternia/Programming/Program.h	/^        LinkedList<VProgramVariable> locals; \/\/ Local variables for the program.$/;"	m	class:Program
locals	src/Programming/Program.h	/^        LinkedList<VProgramVariable> locals; \/\/ Local variables for the program.$/;"	m	class:Program
location	include/Eternia/Data/CyclicList.hpp	/^    int location, num;$/;"	m	class:CyclicList
location	include/Eternia/Data/Graph.h	/^        vertex location;$/;"	m	class:GVertex
location	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        PType<GEAR_Placement> location;$/;"	m	class:MountedEquip
location	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        vertex* location; \/\/ location on the current world$/;"	m	class:Tree
location	include/Eternia/Gamelogic/Ship/Ship.h	/^        VectorBody location; \/\/ location of this ship, with applied acceleration$/;"	m	class:Ship
location	src/Data/CyclicList.hpp	/^    int location, num;$/;"	m	class:CyclicList
location	src/Data/Graph.h	/^        vertex location;$/;"	m	class:GVertex
location	src/Gamelogic/Avatar/AvatarGear.h	/^        PType<GEAR_Placement> location;$/;"	m	class:MountedEquip
location	src/Gamelogic/Environment/Object/Tree.h	/^        vertex* location; \/\/ location on the current world$/;"	m	class:Tree
location	src/Gamelogic/Ship/Ship.h	/^        VectorBody location; \/\/ location of this ship, with applied acceleration$/;"	m	class:Ship
log	include/Eternia/Math/Functions/Basic.h	/^    double log(double base, double x); \/\/ log_b(x)$/;"	p	namespace:Math
log	src/Math/Functions/Basic.cpp	/^    double log(double base, double x) {$/;"	f	namespace:Math
log	src/Math/Functions/Basic.h	/^    double log(double base, double x); \/\/ log_b(x)$/;"	p	namespace:Math
logfileloc	include/Eternia/Data/Logger/Logger.h	/^    CharString logfileloc, prefix;$/;"	m	class:Logger
logfileloc	src/Data/Logger/Logger.h	/^    CharString logfileloc, prefix;$/;"	m	class:Logger
loggerThread	src/Data/Logger/Logger.cpp	/^void loggerThread(Logger* logger){$/;"	f
logs	include/Eternia/API/APICore.h	/^    Logger logs;$/;"	m	class:APICore
logs	src/API/APICore.h	/^    Logger logs;$/;"	m	class:APICore
lookupEdges	include/Eternia/Data/Graph.h	/^        HashMap<GEdge>* lookupEdges;$/;"	m	class:Graph
lookupEdges	src/Data/Graph.h	/^        HashMap<GEdge>* lookupEdges;$/;"	m	class:Graph
lookupVerticies	include/Eternia/Data/Graph.h	/^        HashMap<GVertex>* lookupVerticies;$/;"	m	class:Graph
lookupVerticies	src/Data/Graph.h	/^        HashMap<GVertex>* lookupVerticies;$/;"	m	class:Graph
loops	include/Eternia/Programming/Program.h	/^        int loops; \/\/ Number of times a conditional has looped.$/;"	m	class:Program
loops	src/Programming/Program.h	/^        int loops; \/\/ Number of times a conditional has looped.$/;"	m	class:Program
lower	include/Eternia/Math/struct/Matrix.h	/^    void lower(); \/\/ linearly solves the lower quadrant$/;"	p	class:Matrix
lower	src/Math/struct/Matrix.cpp	/^void Matrix::lower() {$/;"	f	class:Matrix
lower	src/Math/struct/Matrix.h	/^    void lower(); \/\/ linearly solves the lower quadrant$/;"	p	class:Matrix
lowpassFilter	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    void lowpassFilter(float centerFreq, float dbm);$/;"	p	class:FreqSignal
lowpassFilter	src/Engineering/Electrical/Signal/FreqSignal.h	/^    void lowpassFilter(float centerFreq, float dbm);$/;"	p	class:FreqSignal
luces	include/Eternia/constants.h	/^            const double luces = lux;$/;"	m	namespace:physical::unit::equivalent
luces	include/Eternia/constants.h	/^        const double luces = lux;$/;"	m	namespace:physical::unit
luces	src/constants.h	/^            const double luces = lux;$/;"	m	namespace:physical::unit::equivalent
luces	src/constants.h	/^        const double luces = lux;$/;"	m	namespace:physical::unit
luck	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> luck; \/\/ Crafting luck \/ likelihood of mistakes \/ mining luck$/;"	m	class:SkillSet
luck	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> luck; \/\/ Crafting luck \/ likelihood of mistakes \/ mining luck$/;"	m	class:SkillSet
lumen	include/Eternia/constants.h	/^            const double lumen = unit::lumen\/pi;$/;"	m	namespace:physical::unit::equivalent
lumen	include/Eternia/constants.h	/^        const double lumen = candela*steradian;$/;"	m	namespace:physical::unit
lumen	src/constants.h	/^            const double lumen = unit::lumen\/pi;$/;"	m	namespace:physical::unit::equivalent
lumen	src/constants.h	/^        const double lumen = candela*steradian;$/;"	m	namespace:physical::unit
lumens	include/Eternia/constants.h	/^            const double lumens = lumen;$/;"	m	namespace:physical::unit::equivalent
lumens	include/Eternia/constants.h	/^        const double lumens = lumen;$/;"	m	namespace:physical::unit
lumens	src/constants.h	/^            const double lumens = lumen;$/;"	m	namespace:physical::unit::equivalent
lumens	src/constants.h	/^        const double lumens = lumen;$/;"	m	namespace:physical::unit
lux	include/Eternia/constants.h	/^            const double lux = unit::lux\/pi;$/;"	m	namespace:physical::unit::equivalent
lux	include/Eternia/constants.h	/^        const double lux = lumens\/meter\/meter;$/;"	m	namespace:physical::unit
lux	src/constants.h	/^            const double lux = unit::lux\/pi;$/;"	m	namespace:physical::unit::equivalent
lux	src/constants.h	/^        const double lux = lumens\/meter\/meter;$/;"	m	namespace:physical::unit
luxes	include/Eternia/constants.h	/^            const double luxes = lux;$/;"	m	namespace:physical::unit::equivalent
luxes	include/Eternia/constants.h	/^        const double luxes = lux;$/;"	m	namespace:physical::unit
luxes	src/constants.h	/^            const double luxes = lux;$/;"	m	namespace:physical::unit::equivalent
luxes	src/constants.h	/^        const double luxes = lux;$/;"	m	namespace:physical::unit
lx	include/Eternia/constants.h	/^            const double lx = lux;$/;"	m	namespace:physical::unit::equivalent
lx	include/Eternia/constants.h	/^        const double lx = lux;$/;"	m	namespace:physical::unit
lx	src/constants.h	/^            const double lx = lux;$/;"	m	namespace:physical::unit::equivalent
lx	src/constants.h	/^        const double lx = lux;$/;"	m	namespace:physical::unit
ly	include/Eternia/constants.h	/^        const double ly = lightyear;$/;"	m	namespace:physical::unit
ly	src/constants.h	/^        const double ly = lightyear;$/;"	m	namespace:physical::unit
m	include/Eternia/constants.h	/^        const double m = meter;$/;"	m	namespace:physical::unit
m	src/constants.h	/^        const double m = meter;$/;"	m	namespace:physical::unit
mH	include/Eternia/constants.h	/^        const double mH = milliHenry;$/;"	m	namespace:physical::unit
mH	src/constants.h	/^        const double mH = milliHenry;$/;"	m	namespace:physical::unit
mW	include/Eternia/constants.h	/^        const double mW = milliWatt;$/;"	m	namespace:physical::unit
mW	src/constants.h	/^        const double mW = milliWatt;$/;"	m	namespace:physical::unit
m_D	include/Eternia/constants.h	/^        const double m_D = 1875.61339*MeV\/(c*c);$/;"	m	namespace:physical::constant
m_D	src/constants.h	/^        const double m_D = 1875.61339*MeV\/(c*c);$/;"	m	namespace:physical::constant
m_P	include/Eternia/constants.h	/^        const double m_P = 1.6726231e-27*kilograms;$/;"	m	namespace:physical::constant
m_P	src/constants.h	/^        const double m_P = 1.6726231e-27*kilograms;$/;"	m	namespace:physical::constant
m_e	include/Eternia/constants.h	/^        const double m_e = 9.1093897e-31*kilograms;$/;"	m	namespace:physical::constant
m_e	src/constants.h	/^        const double m_e = 9.1093897e-31*kilograms;$/;"	m	namespace:physical::constant
magnum	include/Eternia/constants.h	/^                const double magnum = 2.0*quarts;$/;"	m	namespace:physical::unit::US::liquid
magnum	src/constants.h	/^                const double magnum = 2.0*quarts;$/;"	m	namespace:physical::unit::US::liquid
magnums	include/Eternia/constants.h	/^                const double magnums = magnum;$/;"	m	namespace:physical::unit::US::liquid
magnums	src/constants.h	/^                const double magnums = magnum;$/;"	m	namespace:physical::unit::US::liquid
main	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	main.cpp	/^int main() {$/;"	f
main_attribute	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<accountATTRIBUTE> main_attribute; \/\/ account or a loan?$/;"	m	class:Account
main_attribute	src/Gamelogic/Economics/Banking/Account.h	/^    PType<accountATTRIBUTE> main_attribute; \/\/ account or a loan?$/;"	m	class:Account
mainmood	include/Eternia/Gamelogic/Avatar/Mood.h	/^        PType<MOOD> mainmood;$/;"	m	class:Mood
mainmood	src/Gamelogic/Avatar/Mood.h	/^        PType<MOOD> mainmood;$/;"	m	class:Mood
makeEdge	include/Eternia/Data/Graph.h	/^        GEdge* makeEdge(GVertex* v1, GVertex* v2, int len); \/\/ creates an edge if it doesn't exist.$/;"	p	class:Graph
makeEdge	src/Data/Graph.h	/^        GEdge* makeEdge(GVertex* v1, GVertex* v2, int len); \/\/ creates an edge if it doesn't exist.$/;"	p	class:Graph
map	include/Eternia/Data/BitMap.h	/^        bmbit** map; \/\/ 2-dim array$/;"	m	class:BitMap
map	src/Data/BitMap.h	/^        bmbit** map; \/\/ 2-dim array$/;"	m	class:BitMap
mapArray	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void** mapArray;$/;"	m	class:AbstractDBCacheMap
mapArray	src/Data/AbstractDatabase/AbstractDB.h	/^        void** mapArray;$/;"	m	class:AbstractDBCacheMap
mapindex	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int mapindex;$/;"	m	class:AbstractDBRow
mapindex	src/Data/AbstractDatabase/AbstractDB.h	/^        int mapindex;$/;"	m	class:AbstractDBRow
marine	include/Eternia/constants.h	/^        namespace marine = nautical;$/;"	x
marine	src/constants.h	/^        namespace marine = nautical;$/;"	x
mass	include/Eternia/Engineering/Physics/Work.h	/^        double mass, TEnergy; \/\/ stored mass (Since mass doesn't normally change)$/;"	m	class:Work
mass	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	float mass; \/\/ total mass of the turret in kilograms$/;"	m	class:Turret
mass	include/Eternia/Math/struct/vertex.h	/^    double dimension, mass;$/;"	m	class:VertexObject
mass	include/Eternia/constants.h	/^    namespace mass {$/;"	n	namespace:chemistry
mass	src/Engineering/Physics/Work.h	/^        double mass, TEnergy; \/\/ stored mass (Since mass doesn't normally change)$/;"	m	class:Work
mass	src/Gamelogic/CoreSystems/Turret.h	/^	float mass; \/\/ total mass of the turret in kilograms$/;"	m	class:Turret
mass	src/Math/struct/vertex.h	/^    double dimension, mass;$/;"	m	class:VertexObject
mass	src/constants.h	/^    namespace mass {$/;"	n	namespace:chemistry
match	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    char* match;$/;"	m	struct:__anon9
match	src/Algorithm/Compression/BasicCompressor.h	/^    char* match;$/;"	m	struct:__anon3
matchindex	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    int matchindex; \/\/ index in the list of matched code.$/;"	m	struct:__anon9
matchindex	src/Algorithm/Compression/BasicCompressor.h	/^    int matchindex; \/\/ index in the list of matched code.$/;"	m	struct:__anon3
matchlen	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    char matchlen;$/;"	m	struct:__anon9
matchlen	src/Algorithm/Compression/BasicCompressor.h	/^    char matchlen;$/;"	m	struct:__anon3
math	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> math; \/\/ general math$/;"	m	class:CraftingStats
math	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> math; \/\/ general math$/;"	m	class:CraftingStats
max	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> value, max;$/;"	m	class:BodyPartHP
max	src/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> value, max;$/;"	m	class:BodyPartHP
maxPins	include/Eternia/Engineering/Electrical/IC/IC.h	/^        int maxPins;$/;"	m	class:IC
maxPins	src/Engineering/Electrical/IC/IC.h	/^        int maxPins;$/;"	m	class:IC
maxPower	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        PowerValue* maxPower(); \/\/ get maximum Power$/;"	p	class:ComponentRating
maxPower	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        PowerValue* maxPower; \/\/ Max power this resistor can handle$/;"	m	class:Resistor
maxPower	src/Engineering/Electrical/Components/ComponentRating.cpp	/^PowerValue* ComponentRating::maxPower() {$/;"	f	class:ComponentRating
maxPower	src/Engineering/Electrical/Components/ComponentRating.h	/^        PowerValue* maxPower(); \/\/ get maximum Power$/;"	p	class:ComponentRating
maxPower	src/Engineering/Electrical/Components/Resistor.h	/^        PowerValue* maxPower; \/\/ Max power this resistor can handle$/;"	m	class:Resistor
maxVolts	include/Eternia/Engineering/Electrical/Components/Capacitor.h	/^        double maxVolts;$/;"	m	class:Capacitor
maxVolts	src/Engineering/Electrical/Components/Capacitor.h	/^        double maxVolts;$/;"	m	class:Capacitor
max_PERCENTAGE_MEMORY_PROGRAM	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^const double max_PERCENTAGE_MEMORY_PROGRAM = 10;$/;"	v
max_PERCENTAGE_MEMORY_PROGRAM	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^const double max_PERCENTAGE_MEMORY_PROGRAM = 10;$/;"	v
max_ram_size	include/Eternia/Data/FileCache.hpp	/^        long max_ram_size;$/;"	m	class:FileCache
max_ram_size	src/Data/FileCache.hpp	/^        long max_ram_size;$/;"	m	class:FileCache
maxslots	include/Eternia/Gamelogic/Inventory/BaseInventory.h	/^    int maxslots; \/\/ max slots in this bag$/;"	m	class:BaseInventory
maxslots	src/Gamelogic/Inventory/BaseInventory.h	/^    int maxslots; \/\/ max slots in this bag$/;"	m	class:BaseInventory
mclk	include/Eternia/Emulation/MPU/msp430.h	/^        void mclk();$/;"	p	class:MSP430
mclk	src/Emulation/MPU/msp430.cpp	/^void MSP430::mclk() {$/;"	f	class:MSP430
mclk	src/Emulation/MPU/msp430.h	/^        void mclk();$/;"	p	class:MSP430
md5	include/Eternia/Algorithm/Cryptography/md5.h	/^std::string md5(const std::string str);$/;"	p
md5	src/Algorithm/Cryptography/md5.cpp	/^std::string md5(const std::string str) {$/;"	f
md5	src/Algorithm/Cryptography/md5.h	/^std::string md5(const std::string str);$/;"	p
mechanics	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> mechanics; \/\/ Ability to design and produce working vehicles or machines.$/;"	m	class:CraftingStats
mechanics	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> mechanics; \/\/ Ability to design and produce working vehicles or machines.$/;"	m	class:CraftingStats
medical	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> medical; \/\/ medical areas all around the ship.$/;"	m	class:CraftingStats
medical	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> medical; \/\/ medical areas all around the ship.$/;"	m	class:CraftingStats
mega	include/Eternia/constants.h	/^        const double mega = 1e6;$/;"	m	namespace:physical::unit
mega	src/constants.h	/^        const double mega = 1e6;$/;"	m	namespace:physical::unit
megaHertz	include/Eternia/constants.h	/^        const double megaHertz = mega*Hertz;$/;"	m	namespace:physical::unit
megaHertz	src/constants.h	/^        const double megaHertz = mega*Hertz;$/;"	m	namespace:physical::unit
megaWatt	include/Eternia/constants.h	/^        const double megaWatt = 1000000.0*Watts;$/;"	m	namespace:physical::unit
megaWatt	src/constants.h	/^        const double megaWatt = 1000000.0*Watts;$/;"	m	namespace:physical::unit
megaWatts	include/Eternia/constants.h	/^        const double megaWatts = megaWatt;$/;"	m	namespace:physical::unit
megaWatts	src/constants.h	/^        const double megaWatts = megaWatt;$/;"	m	namespace:physical::unit
melting_point	include/Eternia/Engineering/Chemistry/Atom.h	/^        double melting_point;$/;"	m	class:Atom
melting_point	src/Engineering/Chemistry/Atom.h	/^        double melting_point;$/;"	m	class:Atom
memRegion	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        unsigned char memRegion[128]; \/\/ encrypted region of memory$/;"	m	class:CryptoDefiner
memRegion	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        unsigned char memRegion[128]; \/\/ encrypted region of memory$/;"	m	class:CryptoDefiner
memmap	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    CharString memmap;$/;"	m	class:VoxelGeom
memmap	src/Gamelogic/Voxel/VoxelGeom.h	/^    CharString memmap;$/;"	m	class:VoxelGeom
memoryThread	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    void memoryThread();$/;"	p	class:VoxelGeom
memoryThread	src/Gamelogic/Voxel/VoxelGeom.h	/^    void memoryThread();$/;"	p	class:VoxelGeom
merge	src/Algorithm/Sorting/MergeSort.cpp	/^IntegerList* merge(IntegerList *a, IntegerList *b) {$/;"	f
mesh1	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        LinkedList<vertex>* mesh1; \/\/ RAW data points$/;"	m	class:GPUInstruction
mesh1	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        LinkedList<vertex>* mesh1; \/\/ RAW data points$/;"	m	class:GPUInstruction
mesh2	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        LinkedList<vertex>* mesh2; \/\/ RAW data points$/;"	m	class:GPUInstruction
mesh2	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        LinkedList<vertex>* mesh2; \/\/ RAW data points$/;"	m	class:GPUInstruction
meter	include/Eternia/constants.h	/^        const double meter = 1.0;$/;"	m	namespace:physical::unit
meter	src/constants.h	/^        const double meter = 1.0;$/;"	m	namespace:physical::unit
meters	include/Eternia/constants.h	/^        const double meters = meter;$/;"	m	namespace:physical::unit
meters	src/constants.h	/^        const double meters = meter;$/;"	m	namespace:physical::unit
method	include/Eternia/Data/Events/EventHandle.h	/^        void (*method)(); \/\/ variable method$/;"	m	class:EventHandle
method	include/Eternia/Emulation/MPU/msp430.h	/^        int* method; \/\/ << method to call$/;"	m	class:InterruptHandle
method	src/Data/Events/EventHandle.h	/^        void (*method)(); \/\/ variable method$/;"	m	class:EventHandle
method	src/Emulation/MPU/msp430.h	/^        int* method; \/\/ << method to call$/;"	m	class:InterruptHandle
method1	include/Eternia/Data/Events/EventHandle.h	/^        void (*method1)(void* arg);$/;"	m	class:EventHandle
method1	src/Data/Events/EventHandle.h	/^        void (*method1)(void* arg);$/;"	m	class:EventHandle
method2	include/Eternia/Data/Events/EventHandle.h	/^        void (*method2)(void* arg, void* arg2);$/;"	m	class:EventHandle
method2	src/Data/Events/EventHandle.h	/^        void (*method2)(void* arg, void* arg2);$/;"	m	class:EventHandle
metric	include/Eternia/constants.h	/^        namespace metric { \/\/ weight$/;"	n	namespace:physical::unit
metric	src/constants.h	/^        namespace metric { \/\/ weight$/;"	n	namespace:physical::unit
mg	include/Eternia/constants.h	/^        const double mg = milligram;$/;"	m	namespace:physical::unit
mg	src/constants.h	/^        const double mg = milligram;$/;"	m	namespace:physical::unit
mgd	include/Eternia/constants.h	/^        const double mgd = 1000000.0*US::liquid::gallons\/day;$/;"	m	namespace:physical::unit
mgd	src/constants.h	/^        const double mgd = 1000000.0*US::liquid::gallons\/day;$/;"	m	namespace:physical::unit
mho	include/Eternia/constants.h	/^        const double mho = 1.0\/Ohm;$/;"	m	namespace:physical::unit
mho	src/constants.h	/^        const double mho = 1.0\/Ohm;$/;"	m	namespace:physical::unit
mhos	include/Eternia/constants.h	/^        const double mhos = mho;$/;"	m	namespace:physical::unit
mhos	src/constants.h	/^        const double mhos = mho;$/;"	m	namespace:physical::unit
mi	include/Eternia/constants.h	/^            const double mi = mile;$/;"	m	namespace:physical::unit::geographical
mi	include/Eternia/constants.h	/^            const double mi = mile;$/;"	m	namespace:physical::unit::statute
mi	src/constants.h	/^            const double mi = mile;$/;"	m	namespace:physical::unit::geographical
mi	src/constants.h	/^            const double mi = mile;$/;"	m	namespace:physical::unit::statute
micron	include/Eternia/constants.h	/^        const double micron = meter\/1000000.0;$/;"	m	namespace:physical::unit
micron	src/constants.h	/^        const double micron = meter\/1000000.0;$/;"	m	namespace:physical::unit
microns	include/Eternia/constants.h	/^        const double microns = micron;$/;"	m	namespace:physical::unit
microns	src/constants.h	/^        const double microns = micron;$/;"	m	namespace:physical::unit
microsecond	include/Eternia/constants.h	/^        const double microsecond = second\/1000000.0;$/;"	m	namespace:physical::unit
microsecond	src/constants.h	/^        const double microsecond = second\/1000000.0;$/;"	m	namespace:physical::unit
microseconds	include/Eternia/constants.h	/^        const double microseconds = microsecond;$/;"	m	namespace:physical::unit
microseconds	src/constants.h	/^        const double microseconds = microsecond;$/;"	m	namespace:physical::unit
microwave	include/Eternia/constants.h	/^    const double microwave = 3*gigaHertz; \/\/9$/;"	m	namespace:electromagnetic
microwave	src/constants.h	/^    const double microwave = 3*gigaHertz; \/\/9$/;"	m	namespace:electromagnetic
mil	include/Eternia/constants.h	/^        const double mil = inch\/1000.0;$/;"	m	namespace:physical::unit
mil	src/constants.h	/^        const double mil = inch\/1000.0;$/;"	m	namespace:physical::unit
mile	include/Eternia/constants.h	/^            const double mile = 1852*meters;$/;"	m	namespace:physical::unit::nautical
mile	include/Eternia/constants.h	/^            const double mile = 5280.0*feet;$/;"	m	namespace:physical::unit::statute
mile	include/Eternia/constants.h	/^            const double mile = nautical::mile;$/;"	m	namespace:physical::unit::geographical
mile	src/constants.h	/^            const double mile = 1852*meters;$/;"	m	namespace:physical::unit::nautical
mile	src/constants.h	/^            const double mile = 5280.0*feet;$/;"	m	namespace:physical::unit::statute
mile	src/constants.h	/^            const double mile = nautical::mile;$/;"	m	namespace:physical::unit::geographical
miles	include/Eternia/constants.h	/^            const double miles = mile;$/;"	m	namespace:physical::unit::geographical
miles	include/Eternia/constants.h	/^            const double miles = mile;$/;"	m	namespace:physical::unit::nautical
miles	include/Eternia/constants.h	/^            const double miles = mile;$/;"	m	namespace:physical::unit::statute
miles	src/constants.h	/^            const double miles = mile;$/;"	m	namespace:physical::unit::geographical
miles	src/constants.h	/^            const double miles = mile;$/;"	m	namespace:physical::unit::nautical
miles	src/constants.h	/^            const double miles = mile;$/;"	m	namespace:physical::unit::statute
millenia	include/Eternia/constants.h	/^        const double millenia = millenium;$/;"	m	namespace:physical::unit
millenia	src/constants.h	/^        const double millenia = millenium;$/;"	m	namespace:physical::unit
millenium	include/Eternia/constants.h	/^        const double millenium = 1000.0*years;$/;"	m	namespace:physical::unit
millenium	src/constants.h	/^        const double millenium = 1000.0*years;$/;"	m	namespace:physical::unit
milliHenry	include/Eternia/constants.h	/^        const double milliHenry = Henry\/1000.0;$/;"	m	namespace:physical::unit
milliHenry	src/constants.h	/^        const double milliHenry = Henry\/1000.0;$/;"	m	namespace:physical::unit
milliHenrys	include/Eternia/constants.h	/^        const double milliHenrys = milliHenry;$/;"	m	namespace:physical::unit
milliHenrys	src/constants.h	/^        const double milliHenrys = milliHenry;$/;"	m	namespace:physical::unit
milliWatt	include/Eternia/constants.h	/^        const double milliWatt = Watt\/1000.0;$/;"	m	namespace:physical::unit
milliWatt	src/constants.h	/^        const double milliWatt = Watt\/1000.0;$/;"	m	namespace:physical::unit
milliWatts	include/Eternia/constants.h	/^        const double milliWatts = milliWatt;$/;"	m	namespace:physical::unit
milliWatts	src/constants.h	/^        const double milliWatts = milliWatt;$/;"	m	namespace:physical::unit
milligram	include/Eternia/constants.h	/^        const double milligram = kilogram\/1000000.0;$/;"	m	namespace:physical::unit
milligram	src/constants.h	/^        const double milligram = kilogram\/1000000.0;$/;"	m	namespace:physical::unit
milligrams	include/Eternia/constants.h	/^        const double milligrams = milligram;$/;"	m	namespace:physical::unit
milligrams	src/constants.h	/^        const double milligrams = milligram;$/;"	m	namespace:physical::unit
milliliter	include/Eternia/constants.h	/^        const double milliliter = stere\/1000000.0;$/;"	m	namespace:physical::unit
milliliter	src/constants.h	/^        const double milliliter = stere\/1000000.0;$/;"	m	namespace:physical::unit
milliliters	include/Eternia/constants.h	/^        const double milliliters = milliliter;$/;"	m	namespace:physical::unit
milliliters	src/constants.h	/^        const double milliliters = milliliter;$/;"	m	namespace:physical::unit
millimeter	include/Eternia/constants.h	/^        const double millimeter = meters\/1000.0;$/;"	m	namespace:physical::unit
millimeter	src/constants.h	/^        const double millimeter = meters\/1000.0;$/;"	m	namespace:physical::unit
millimeters	include/Eternia/constants.h	/^        const double millimeters = millimeter;$/;"	m	namespace:physical::unit
millimeters	src/constants.h	/^        const double millimeters = millimeter;$/;"	m	namespace:physical::unit
millisecond	include/Eternia/constants.h	/^        const double millisecond = second\/1000.0;$/;"	m	namespace:physical::unit
millisecond	src/constants.h	/^        const double millisecond = second\/1000.0;$/;"	m	namespace:physical::unit
milliseconds	include/Eternia/constants.h	/^        const double milliseconds = millisecond;$/;"	m	namespace:physical::unit
milliseconds	src/constants.h	/^        const double milliseconds = millisecond;$/;"	m	namespace:physical::unit
mils	include/Eternia/constants.h	/^        const double mils = mil;$/;"	m	namespace:physical::unit
mils	src/constants.h	/^        const double mils = mil;$/;"	m	namespace:physical::unit
min	include/Eternia/constants.h	/^                const double min = minute;$/;"	m	namespace:physical::unit::arc::centesimal
min	include/Eternia/constants.h	/^            const double min = minute;$/;"	m	namespace:physical::unit::arc
min	include/Eternia/constants.h	/^        const double min = minute;$/;"	m	namespace:physical::unit
min	src/constants.h	/^                const double min = minute;$/;"	m	namespace:physical::unit::arc::centesimal
min	src/constants.h	/^            const double min = minute;$/;"	m	namespace:physical::unit::arc
min	src/constants.h	/^        const double min = minute;$/;"	m	namespace:physical::unit
minersinch	include/Eternia/constants.h	/^        const double minersinch = 1.5*foot*foot*foot\/minute;$/;"	m	namespace:physical::unit
minersinch	src/constants.h	/^        const double minersinch = 1.5*foot*foot*foot\/minute;$/;"	m	namespace:physical::unit
minim	include/Eternia/constants.h	/^        const double minim = 6.161152e-8*(m*m*m);$/;"	m	namespace:physical::unit
minim	src/constants.h	/^        const double minim = 6.161152e-8*(m*m*m);$/;"	m	namespace:physical::unit
minims	include/Eternia/constants.h	/^        const double minims = minim;$/;"	m	namespace:physical::unit
minims	src/constants.h	/^        const double minims = minim;$/;"	m	namespace:physical::unit
mining	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> mining; \/\/ ability to extract minerals$/;"	m	class:SkillSet
mining	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> mining; \/\/ ability to extract minerals$/;"	m	class:SkillSet
minsectorx	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long minsectorx; \/\/Min sector boundaries (Prevents P2PLServers from going lower and forces them to Co-server)$/;"	m	class:P2PBoundaries
minsectorx	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long minsectorx; \/\/Min sector boundaries (Prevents P2PLServers from going lower and forces them to Co-server)$/;"	m	class:P2PBoundaries
minsectory	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long minsectory;$/;"	m	class:P2PBoundaries
minsectory	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long minsectory;$/;"	m	class:P2PBoundaries
minute	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int second, minute, hour;$/;"	m	class:AbstractDBDate
minute	include/Eternia/constants.h	/^                const double minute = grade\/100.0;$/;"	m	namespace:physical::unit::arc::centesimal
minute	include/Eternia/constants.h	/^            const double minute = degree\/60.0;$/;"	m	namespace:physical::unit::arc
minute	include/Eternia/constants.h	/^        const double minute = 60.0*seconds;$/;"	m	namespace:physical::unit
minute	src/Data/AbstractDatabase/AbstractDB.h	/^        int second, minute, hour;$/;"	m	class:AbstractDBDate
minute	src/constants.h	/^                const double minute = grade\/100.0;$/;"	m	namespace:physical::unit::arc::centesimal
minute	src/constants.h	/^            const double minute = degree\/60.0;$/;"	m	namespace:physical::unit::arc
minute	src/constants.h	/^        const double minute = 60.0*seconds;$/;"	m	namespace:physical::unit
minutes	include/Eternia/constants.h	/^                const double minutes = minute;$/;"	m	namespace:physical::unit::arc::centesimal
minutes	include/Eternia/constants.h	/^            const double minutes = minute;$/;"	m	namespace:physical::unit::arc
minutes	include/Eternia/constants.h	/^        const double minutes = minute;$/;"	m	namespace:physical::unit
minutes	src/constants.h	/^                const double minutes = minute;$/;"	m	namespace:physical::unit::arc::centesimal
minutes	src/constants.h	/^            const double minutes = minute;$/;"	m	namespace:physical::unit::arc
minutes	src/constants.h	/^        const double minutes = minute;$/;"	m	namespace:physical::unit
ml	include/Eternia/constants.h	/^        const double ml = milliliter;$/;"	m	namespace:physical::unit
ml	src/constants.h	/^        const double ml = milliliter;$/;"	m	namespace:physical::unit
mm	include/Eternia/constants.h	/^        const double mm = millimeter;$/;"	m	namespace:physical::unit
mm	src/constants.h	/^        const double mm = millimeter;$/;"	m	namespace:physical::unit
mo	include/Eternia/constants.h	/^        const double mo = month;$/;"	m	namespace:physical::unit
mo	src/constants.h	/^        const double mo = month;$/;"	m	namespace:physical::unit
mode	include/Eternia/Math/Equation.h	/^        EqType mode;$/;"	m	class:EquationNode
mode	src/Math/Equation.h	/^        EqType mode;$/;"	m	class:EquationNode
model	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString model; \/\/ model location$/;"	m	class:AvatarAppearance
model	src/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString model; \/\/ model location$/;"	m	class:AvatarAppearance
mods	include/Eternia/API/APICore.h	/^    LinkedList<APIMod> mods; \/\/ loaded mods$/;"	m	class:APICore
mods	src/API/APICore.h	/^    LinkedList<APIMod> mods; \/\/ loaded mods$/;"	m	class:APICore
modular	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> modular; \/\/ better modular structures \/ ships \/ turrets$/;"	m	class:CraftingStats
modular	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> modular; \/\/ better modular structures \/ ships \/ turrets$/;"	m	class:CraftingStats
mol	include/Eternia/constants.h	/^        const double mol = mole;$/;"	m	namespace:physical::unit
mol	src/constants.h	/^        const double mol = mole;$/;"	m	namespace:physical::unit
mole	include/Eternia/constants.h	/^        const double mole = 6.0221367e+23;$/;"	m	namespace:physical::unit
mole	src/constants.h	/^        const double mole = 6.0221367e+23;$/;"	m	namespace:physical::unit
moles	include/Eternia/constants.h	/^        const double moles = mole;$/;"	m	namespace:physical::unit
moles	src/constants.h	/^        const double moles = mole;$/;"	m	namespace:physical::unit
month	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int day, month, year;$/;"	m	class:AbstractDBDate
month	include/Eternia/constants.h	/^        const double month = year\/12.0;$/;"	m	namespace:physical::unit
month	src/Data/AbstractDatabase/AbstractDB.h	/^        int day, month, year;$/;"	m	class:AbstractDBDate
month	src/constants.h	/^        const double month = year\/12.0;$/;"	m	namespace:physical::unit
months	include/Eternia/constants.h	/^        const double months = month;$/;"	m	namespace:physical::unit
months	src/constants.h	/^        const double months = month;$/;"	m	namespace:physical::unit
moods	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        LinkedList<Mood> moods; \/\/ Humans are complicated$/;"	m	class:AvatarHealth
moods	src/Gamelogic/Avatar/AvatarHealth.h	/^        LinkedList<Mood> moods; \/\/ Humans are complicated$/;"	m	class:AvatarHealth
mountedGear	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        LinkedList<MountedEquip> mountedGear;$/;"	m	class:AvatarGear
mountedGear	src/Gamelogic/Avatar/AvatarGear.h	/^        LinkedList<MountedEquip> mountedGear;$/;"	m	class:AvatarGear
mouth_height	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> eyebrow_height, nose_height, mouth_height;$/;"	m	class:AvatarAppearance
mouth_height	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> eyebrow_height, nose_height, mouth_height;$/;"	m	class:AvatarAppearance
mov	include/Eternia/Emulation/MPU/msp430.h	/^        void mov(unsigned int addr, unsigned int value);$/;"	p	class:MSP430
mov	src/Emulation/MPU/msp430.h	/^        void mov(unsigned int addr, unsigned int value);$/;"	p	class:MSP430
mov	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::mov(unsigned int addr, unsigned int value) {}$/;"	f	class:MSP430
mpg	include/Eternia/constants.h	/^        const double mpg = statute::miles\/US::liquid::gallon;$/;"	m	namespace:physical::unit
mpg	src/constants.h	/^        const double mpg = statute::miles\/US::liquid::gallon;$/;"	m	namespace:physical::unit
mph	include/Eternia/constants.h	/^        const double mph = statute::miles\/hour;$/;"	m	namespace:physical::unit
mph	src/constants.h	/^        const double mph = statute::miles\/hour;$/;"	m	namespace:physical::unit
ms	include/Eternia/constants.h	/^        const double ms = millisecond;$/;"	m	namespace:physical::unit
ms	src/constants.h	/^        const double ms = millisecond;$/;"	m	namespace:physical::unit
mtype	include/Eternia/Programming/Visual/VProgramNode.h	/^        PMathType mtype; \/\/ type of math to perform$/;"	m	class:VProgramNode
mtype	src/Programming/Visual/VProgramNode.h	/^        PMathType mtype; \/\/ type of math to perform$/;"	m	class:VProgramNode
mu	include/Eternia/constants.h	/^        const double mu = 12.566370614e-7*Newtons\/(A*A);$/;"	m	namespace:physical::constant
mu	src/constants.h	/^        const double mu = 12.566370614e-7*Newtons\/(A*A);$/;"	m	namespace:physical::constant
mu_B	include/Eternia/constants.h	/^        const double mu_B = 5.78838263e-11*MeV\/Tesla;$/;"	m	namespace:physical::constant
mu_B	src/constants.h	/^        const double mu_B = 5.78838263e-11*MeV\/Tesla;$/;"	m	namespace:physical::constant
mu_N	include/Eternia/constants.h	/^        const double mu_N = 3.15245166e-14*MeV\/Tesla;$/;"	m	namespace:physical::constant
mu_N	src/constants.h	/^        const double mu_N = 3.15245166e-14*MeV\/Tesla;$/;"	m	namespace:physical::constant
multiplication	include/Eternia/Math/Eval.h	/^                addition=7,subtraction=8,multiplication=9,division=10,Modulus=11,exponent=12$/;"	e	enum:MOperator
multiplication	src/Math/Eval.h	/^                addition=7,subtraction=8,multiplication=9,division=10,Modulus=11,exponent=12$/;"	e	enum:MOperator
multiply	include/Eternia/Math/struct/Matrix.h	/^    void multiply(Matrix* matrix); \/\/ multiplies with another matrix$/;"	p	class:Matrix
multiply	src/Math/struct/Matrix.cpp	/^void Matrix::multiply(Matrix* matrix) {$/;"	f	class:Matrix
multiply	src/Math/struct/Matrix.h	/^    void multiply(Matrix* matrix); \/\/ multiplies with another matrix$/;"	p	class:Matrix
music	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> music; \/\/ creation of music (+tools)$/;"	m	class:CraftingStats
music	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> music; \/\/ creation of music (+tools)$/;"	m	class:CraftingStats
mute	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        void mute(ChatChannel* channel, long ms); \/\/ mute on channel for set time in milliseconds$/;"	p	class:ChatClient
mute	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        void mute(ChatChannel* channel, long ms); \/\/ mute on channel for set time in milliseconds$/;"	p	class:ChatClient
nail	include/Eternia/constants.h	/^        const double nail = yard\/16.0;$/;"	m	namespace:physical::unit
nail	src/constants.h	/^        const double nail = yard\/16.0;$/;"	m	namespace:physical::unit
nails	include/Eternia/constants.h	/^        const double nails = nail;$/;"	m	namespace:physical::unit
nails	src/constants.h	/^        const double nails = nail;$/;"	m	namespace:physical::unit
name	include/Eternia/API/APIUser.h	/^    CharString name;$/;"	m	class:APIUser
name	include/Eternia/Data/Events/Event.h	/^    CharString name;$/;"	m	class:Event
name	include/Eternia/Data/FileSystem.h	/^        CharString name;$/;"	m	class:FileStructureNode
name	include/Eternia/Engineering/Chemistry/Atom.h	/^        char* name;$/;"	m	class:Atom
name	include/Eternia/Engineering/Chemistry/Ore.h	/^        CharString *name, *formula, *elements; \/\/ ore name$/;"	m	class:Ore
name	include/Eternia/Engineering/Electrical/Pin.h	/^        CharString* name;$/;"	m	class:Pin
name	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        CharString name;$/;"	m	class:Avatar
name	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    CharString name;$/;"	m	class:Skill
name	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	char* name; \/\/$/;"	m	class:PhysicalMaterial
name	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^    CharString* name; \/\/ basic name of this item.$/;"	m	class:ItemBase
name	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        CharString name; \/\/ name of this part$/;"	m	class:ModularShipPart
name	include/Eternia/Programming/Visual/VProgramVariable.h	/^        CharString name; \/\/ name of the variable$/;"	m	class:VProgramVariable
name	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        char* name;$/;"	m	class:ChatChannel
name	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        CharString tag, name;$/;"	m	class:ChatClient
name	src/API/APIUser.h	/^    CharString name;$/;"	m	class:APIUser
name	src/Data/Events/Event.h	/^    CharString name;$/;"	m	class:Event
name	src/Data/FileSystem.h	/^        CharString name;$/;"	m	class:FileStructureNode
name	src/Engineering/Chemistry/Atom.h	/^        char* name;$/;"	m	class:Atom
name	src/Engineering/Chemistry/Ore.h	/^        CharString *name, *formula, *elements; \/\/ ore name$/;"	m	class:Ore
name	src/Engineering/Electrical/Pin.h	/^        CharString* name;$/;"	m	class:Pin
name	src/Gamelogic/Avatar/Avatar.h	/^        CharString name;$/;"	m	class:Avatar
name	src/Gamelogic/Avatar/Skills/Skill.h	/^    CharString name;$/;"	m	class:Skill
name	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	char* name; \/\/$/;"	m	class:PhysicalMaterial
name	src/Gamelogic/Inventory/ItemBase.h	/^    CharString* name; \/\/ basic name of this item.$/;"	m	class:ItemBase
name	src/Gamelogic/Ship/ModularShipPart.h	/^        CharString name; \/\/ name of this part$/;"	m	class:ModularShipPart
name	src/Programming/Visual/VProgramVariable.h	/^        CharString name; \/\/ name of the variable$/;"	m	class:VProgramVariable
name	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        char* name;$/;"	m	class:ChatChannel
name	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        CharString tag, name;$/;"	m	class:ChatClient
nameEquals	include/Eternia/Data/FileSystem.h	/^        bool nameEquals(CharString AName); \/\/ quick compare of names$/;"	p	class:FileStructureNode
nameEquals	src/Data/FileSystem.h	/^        bool nameEquals(CharString AName); \/\/ quick compare of names$/;"	p	class:FileStructureNode
nanites	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> nanites; \/\/ skill with nanites \/ "Magic" \/ Telekinesis \/ Mind-reading \/ ect.$/;"	m	class:SkillSet
nanites	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> nanites; \/\/ skill with nanites \/ "Magic" \/ Telekinesis \/ Mind-reading \/ ect.$/;"	m	class:SkillSet
nanometer	include/Eternia/constants.h	/^        const double nanometer = meter\/1000000000.0;$/;"	m	namespace:physical::unit
nanometer	src/constants.h	/^        const double nanometer = meter\/1000000000.0;$/;"	m	namespace:physical::unit
nanometers	include/Eternia/constants.h	/^        const double nanometers = nanometer;$/;"	m	namespace:physical::unit
nanometers	src/constants.h	/^        const double nanometers = nanometer;$/;"	m	namespace:physical::unit
nanosecond	include/Eternia/constants.h	/^        const double nanosecond = second\/1000000000.0;$/;"	m	namespace:physical::unit
nanosecond	src/constants.h	/^        const double nanosecond = second\/1000000000.0;$/;"	m	namespace:physical::unit
nanoseconds	include/Eternia/constants.h	/^        const double nanoseconds = nanosecond;$/;"	m	namespace:physical::unit
nanoseconds	src/constants.h	/^        const double nanoseconds = nanosecond;$/;"	m	namespace:physical::unit
nautical	include/Eternia/constants.h	/^        namespace nautical {$/;"	n	namespace:physical::unit
nautical	src/constants.h	/^        namespace nautical {$/;"	n	namespace:physical::unit
neighbors	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PNode* neighbors; \/\/ Neighbors on this L Level. (AKA, boundary partners)$/;"	m	class:P2PLServer
neighbors	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PNode* neighbors; \/\/ Neighbors on this L Level. (AKA, boundary partners)$/;"	m	class:P2PLServer
neutron	include/Eternia/constants.h	/^        const double neutron = 1.672621777e-27;$/;"	m	namespace:chemistry::mass
neutron	src/constants.h	/^        const double neutron = 1.672621777e-27;$/;"	m	namespace:chemistry::mass
neutrons	include/Eternia/Engineering/Chemistry/Atom.h	/^        int neutrons;$/;"	m	class:Atom
neutrons	src/Engineering/Chemistry/Atom.h	/^        int neutrons;$/;"	m	class:Atom
newEndpoint	include/Eternia/WebFramework/Network/RESTFulServer.h	/^        RESTFulServer* newEndpoint(CharString* url,$/;"	p	class:RESTFulServer
newEndpoint	src/WebFramework/Network/RESTFulServer.h	/^        RESTFulServer* newEndpoint(CharString* url,$/;"	p	class:RESTFulServer
next	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *prev, *next;$/;"	m	class:AbstractDBLinkedNode
next	include/Eternia/Data/DoubleList.h	/^        DoubleNode *prev, *next;$/;"	m	class:DoubleNode
next	include/Eternia/Data/HashMap.hpp	/^        HTEntry<T>* next; \/\/ for over-load of collisions. (separate chaining)$/;"	m	class:HTEntry
next	include/Eternia/Data/HashTable.h	/^        HTEntry* next;$/;"	m	class:HTEntry
next	include/Eternia/Data/IntegerList.h	/^        IntegerNode *prev, *next;$/;"	m	class:IntegerNode
next	include/Eternia/Data/LinkedList.hpp	/^    LinkedNode<T> * next;$/;"	m	class:LinkedNode
next	include/Eternia/Data/LinkedListT.h	/^        LinkedNodeT * next;$/;"	m	class:LinkedNodeT
next	include/Eternia/Data/LinkedMap.h	/^        void * next;$/;"	m	class:LinkedMapNode
next	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *prev, *next;$/;"	m	class:AbstractDBLinkedNode
next	src/Data/DoubleList.h	/^        DoubleNode *prev, *next;$/;"	m	class:DoubleNode
next	src/Data/HashMap.hpp	/^        HTEntry<T>* next; \/\/ for over-load of collisions. (separate chaining)$/;"	m	class:HTEntry
next	src/Data/HashTable.h	/^        HTEntry* next;$/;"	m	class:HTEntry
next	src/Data/IntegerList.h	/^        IntegerNode *prev, *next;$/;"	m	class:IntegerNode
next	src/Data/LinkedList.hpp	/^    LinkedNode<T> * next;$/;"	m	class:LinkedNode
next	src/Data/LinkedListT.h	/^        LinkedNodeT * next;$/;"	m	class:LinkedNodeT
next	src/Data/LinkedMap.h	/^        void * next;$/;"	m	class:LinkedMapNode
nit	include/Eternia/constants.h	/^        const double nit = apostilb;$/;"	m	namespace:physical::unit
nit	src/constants.h	/^        const double nit = apostilb;$/;"	m	namespace:physical::unit
nits	include/Eternia/constants.h	/^        const double nits = nit;$/;"	m	namespace:physical::unit
nits	src/constants.h	/^        const double nits = nit;$/;"	m	namespace:physical::unit
nm	include/Eternia/constants.h	/^            const double nm = mile;$/;"	m	namespace:physical::unit::nautical
nm	include/Eternia/constants.h	/^        const double nm = nanometer;$/;"	m	namespace:physical::unit
nm	src/constants.h	/^            const double nm = mile;$/;"	m	namespace:physical::unit::nautical
nm	src/constants.h	/^        const double nm = nanometer;$/;"	m	namespace:physical::unit
nodeid	include/Eternia/Programming/Visual/VProgramError.h	/^        int nodeid; \/\/ node which caused the error$/;"	m	class:VProgramError
nodeid	include/Eternia/Programming/Visual/VProgramNode.h	/^        int nodeid; \/\/ node id, useful for error debugging$/;"	m	class:VProgramNode
nodeid	src/Programming/Visual/VProgramError.h	/^        int nodeid; \/\/ node which caused the error$/;"	m	class:VProgramError
nodeid	src/Programming/Visual/VProgramNode.h	/^        int nodeid; \/\/ node id, useful for error debugging$/;"	m	class:VProgramNode
nodeidinc	include/Eternia/Programming/Program.h	/^        int nodeidinc; \/\/ increments every time a node is added$/;"	m	class:Program
nodeidinc	src/Programming/Program.h	/^        int nodeidinc; \/\/ increments every time a node is added$/;"	m	class:Program
nodes	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        LinkedList<P2PNode>* nodes();$/;"	p	class:P2PNodeCache
nodes	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        LinkedList<P2PNode>* nodes();$/;"	p	class:P2PNodeCache
noggin	include/Eternia/constants.h	/^        const double noggin = 2.0*US::liquid::ounces;$/;"	m	namespace:physical::unit
noggin	src/constants.h	/^        const double noggin = 2.0*US::liquid::ounces;$/;"	m	namespace:physical::unit
noggins	include/Eternia/constants.h	/^        const double noggins = noggin;$/;"	m	namespace:physical::unit
noggins	src/constants.h	/^        const double noggins = noggin;$/;"	m	namespace:physical::unit
noiseFilter	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    void noiseFilter(FreqSignal profile, float dbm); \/\/ appends that filter$/;"	p	class:FreqSignal
noiseFilter	src/Engineering/Electrical/Signal/FreqSignal.h	/^    void noiseFilter(FreqSignal profile, float dbm); \/\/ appends that filter$/;"	p	class:FreqSignal
noiseProfile	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    FreqSignal noiseProfile(); \/\/ gets the profile for noise (use static ambient)$/;"	p	class:FreqSignal
noiseProfile	src/Engineering/Electrical/Signal/FreqSignal.h	/^    FreqSignal noiseProfile(); \/\/ gets the profile for noise (use static ambient)$/;"	p	class:FreqSignal
none	include/Eternia/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	e	enum:MOperator
none	src/Math/Eval.h	/^enum MOperator {none=1,Less=2,Greater=3,equals=4,greaterequals=5,lessequals=6,$/;"	e	enum:MOperator
nose_height	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> eyebrow_height, nose_height, mouth_height;$/;"	m	class:AvatarAppearance
nose_height	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> eyebrow_height, nose_height, mouth_height;$/;"	m	class:AvatarAppearance
notchFilter	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    void notchFilter(float centerFreq, float dbm);$/;"	p	class:FreqSignal
notchFilter	src/Engineering/Electrical/Signal/FreqSignal.h	/^    void notchFilter(float centerFreq, float dbm);$/;"	p	class:FreqSignal
nox	include/Eternia/constants.h	/^        const double nox = lux\/1000.0;$/;"	m	namespace:physical::unit
nox	src/constants.h	/^        const double nox = lux\/1000.0;$/;"	m	namespace:physical::unit
nullity	include/Eternia/Math/struct/VectorSpace.h	/^        VectorSpace* nullity(); \/\/ returns the N(A), or nullity space. Should return B = span(A)$/;"	p	class:VectorSpace
nullity	src/Math/struct/VectorSpace.cpp	/^VectorSpace* VectorSpace::nullity() {$/;"	f	class:VectorSpace
nullity	src/Math/struct/VectorSpace.h	/^        VectorSpace* nullity(); \/\/ returns the N(A), or nullity space. Should return B = span(A)$/;"	p	class:VectorSpace
num	include/Eternia/Data/CyclicList.hpp	/^    int location, num;$/;"	m	class:CyclicList
num	src/Data/CyclicList.hpp	/^    int location, num;$/;"	m	class:CyclicList
number	include/Eternia/Programming/Visual/VProgramVariable.h	/^        double number;$/;"	m	class:VProgramVariable
number	src/Programming/Visual/VProgramVariable.h	/^        double number;$/;"	m	class:VProgramVariable
number1	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        double number1;$/;"	m	class:GPUInstruction
number1	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        double number1;$/;"	m	class:GPUInstruction
number2	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        double number2;$/;"	m	class:GPUInstruction
number2	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        double number2;$/;"	m	class:GPUInstruction
number_theory	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> number_theory; \/\/ found some new sequences$/;"	m	class:CraftingStats
number_theory	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> number_theory; \/\/ found some new sequences$/;"	m	class:CraftingStats
nxx	include/Eternia/Math/Eval.h	/^enum nxx {PrimNULL = -99999};$/;"	g
nxx	src/Math/Eval.h	/^enum nxx {PrimNULL = -99999};$/;"	g
obesity	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> obesity; \/\/ huh.$/;"	m	class:AvatarAppearance
obesity	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> obesity; \/\/ huh.$/;"	m	class:AvatarAppearance
object	include/Eternia/Programming/Visual/VProgramVariable.h	/^        void* object; \/\/ object set as a variable$/;"	m	class:VProgramVariable
object	src/Programming/Visual/VProgramVariable.h	/^        void* object; \/\/ object set as a variable$/;"	m	class:VProgramVariable
occcurence	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^} occcurence;$/;"	t	typeref:struct:__anon9
occcurence	src/Algorithm/Compression/BasicCompressor.h	/^} occcurence;$/;"	t	typeref:struct:__anon3
occurenceTable	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    LinkedList<occcurence> occurenceTable;$/;"	m	class:BasicCompressor
occurenceTable	src/Algorithm/Compression/BasicCompressor.h	/^    LinkedList<occcurence> occurenceTable;$/;"	m	class:BasicCompressor
ocoolant	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	Composite icoolant, ocoolant; \/\/ inner\/outer coolant$/;"	m	class:Reactor
ocoolant	src/Gamelogic/CoreSystems/Reactor.h	/^	Composite icoolant, ocoolant; \/\/ inner\/outer coolant$/;"	m	class:Reactor
octave	include/Eternia/constants.h	/^        const double octave = 2; \/\/ Frequency doubles every octave$/;"	m	namespace:electromagnetic::sound
octave	src/constants.h	/^        const double octave = 2; \/\/ Frequency doubles every octave$/;"	m	namespace:electromagnetic::sound
offset	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        double offset = 0.0; \/\/ offset along the limb (or parent branch)$/;"	m	class:TreeBranch
offset	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        double offset = 0.0; \/\/ offset from the bark base$/;"	m	class:TreeLimb
offset	src/Gamelogic/Environment/Object/Tree.h	/^        double offset = 0.0; \/\/ offset along the limb (or parent branch)$/;"	m	class:TreeBranch
offset	src/Gamelogic/Environment/Object/Tree.h	/^        double offset = 0.0; \/\/ offset from the bark base$/;"	m	class:TreeLimb
ohms	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        double ohms; \/\/ Resistance$/;"	m	class:Resistor
ohms	src/Engineering/Electrical/Components/Resistor.h	/^        double ohms; \/\/ Resistance$/;"	m	class:Resistor
onChanged	include/Eternia/Data/Protect/PType.hpp	/^    void (*onChanged)(T* value);$/;"	m	class:PType
onChanged	src/Data/Protect/PType.hpp	/^    void (*onChanged)(T* value);$/;"	m	class:PType
onDisable	include/Eternia/API/APICore.h	/^    void onDisable(); \/\/ runs to tell the module to turn "off". (Does not actually stop, mod dev has to do it)$/;"	p	class:APICore
onDisable	include/Eternia/API/APIMod.h	/^    virtual void onDisable();$/;"	p	class:APIMod
onDisable	src/API/APICore.h	/^    void onDisable(); \/\/ runs to tell the module to turn "off". (Does not actually stop, mod dev has to do it)$/;"	p	class:APICore
onDisable	src/API/APIMod.cpp	/^void APIMod::onDisable(){$/;"	f	class:APIMod
onDisable	src/API/APIMod.h	/^    virtual void onDisable();$/;"	p	class:APIMod
onEnable	include/Eternia/API/APICore.h	/^    void onEnable(); \/\/ runs to tell the module to turn "on" and start processing.$/;"	p	class:APICore
onEnable	include/Eternia/API/APIMod.h	/^    virtual void onEnable();$/;"	p	class:APIMod
onEnable	src/API/APICore.h	/^    void onEnable(); \/\/ runs to tell the module to turn "on" and start processing.$/;"	p	class:APICore
onEnable	src/API/APIMod.cpp	/^void APIMod::onEnable(){$/;"	f	class:APIMod
onEnable	src/API/APIMod.h	/^    virtual void onEnable();$/;"	p	class:APIMod
onEvent	include/Eternia/API/APIMod.h	/^    virtual Event onEvent(Event event); \/\/ send an event to the scripts$/;"	p	class:APIMod
onEvent	src/API/APIMod.cpp	/^Event APIMod::onEvent(Event event){$/;"	f	class:APIMod
onEvent	src/API/APIMod.h	/^    virtual Event onEvent(Event event); \/\/ send an event to the scripts$/;"	p	class:APIMod
onGuiDraw	include/Eternia/API/APIMod.h	/^    virtual void onGuiDraw(); \/\/ [SYNC] specific function that enables openGL contexts$/;"	p	class:APIMod
onGuiDraw	src/API/APIMod.cpp	/^void APIMod::onGuiDraw(){$/;"	f	class:APIMod
onGuiDraw	src/API/APIMod.h	/^    virtual void onGuiDraw(); \/\/ [SYNC] specific function that enables openGL contexts$/;"	p	class:APIMod
onHacked	include/Eternia/Data/Protect/PType.hpp	/^    void (*onHacked)(T* value); \/\/ Hacked value detection$/;"	m	class:PType
onHacked	src/Data/Protect/PType.hpp	/^    void (*onHacked)(T* value); \/\/ Hacked value detection$/;"	m	class:PType
onInit	include/Eternia/API/APICore.h	/^    void onInit(); \/\/ runs after a module is loaded.$/;"	p	class:APICore
onInit	src/API/APICore.h	/^    void onInit(); \/\/ runs after a module is loaded.$/;"	p	class:APICore
onLoad	include/Eternia/API/APIMod.h	/^    virtual void onLoad();$/;"	p	class:APIMod
onLoad	src/API/APIMod.cpp	/^void APIMod::onLoad(){$/;"	f	class:APIMod
onLoad	src/API/APIMod.h	/^    virtual void onLoad();$/;"	p	class:APIMod
onNetworkTick	include/Eternia/API/APIMod.h	/^    virtual void onNetworkTick();$/;"	p	class:APIMod
onNetworkTick	src/API/APIMod.cpp	/^void APIMod::onNetworkTick(){$/;"	f	class:APIMod
onNetworkTick	src/API/APIMod.h	/^    virtual void onNetworkTick();$/;"	p	class:APIMod
onNodeTick	include/Eternia/API/APIMod.h	/^    virtual void onNodeTick(); \/\/ Node processing$/;"	p	class:APIMod
onNodeTick	src/API/APIMod.cpp	/^void APIMod::onNodeTick(){$/;"	f	class:APIMod
onNodeTick	src/API/APIMod.h	/^    virtual void onNodeTick(); \/\/ Node processing$/;"	p	class:APIMod
onReload	include/Eternia/API/APIMod.h	/^    virtual void onReload(); \/\/ reload configs$/;"	p	class:APIMod
onReload	src/API/APIMod.cpp	/^void APIMod::onReload(){$/;"	f	class:APIMod
onReload	src/API/APIMod.h	/^    virtual void onReload(); \/\/ reload configs$/;"	p	class:APIMod
onRenderDraw	include/Eternia/API/APIMod.h	/^    virtual void onRenderDraw(); \/\/ [SYNC] Draw 3D things$/;"	p	class:APIMod
onRenderDraw	src/API/APIMod.cpp	/^void APIMod::onRenderDraw(){$/;"	f	class:APIMod
onRenderDraw	src/API/APIMod.h	/^    virtual void onRenderDraw(); \/\/ [SYNC] Draw 3D things$/;"	p	class:APIMod
onShader	include/Eternia/API/APIMod.h	/^    virtual void onShader(); \/\/ [SYNC] draw a specific shader$/;"	p	class:APIMod
onShader	src/API/APIMod.cpp	/^void APIMod::onShader(){$/;"	f	class:APIMod
onShader	src/API/APIMod.h	/^    virtual void onShader(); \/\/ [SYNC] draw a specific shader$/;"	p	class:APIMod
onTick	include/Eternia/API/APIMod.h	/^    virtual void onTick(double time); \/\/ time between ticks given to script engines$/;"	p	class:APIMod
onTick	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    void onTick();$/;"	p	class:Skill
onTick	src/API/APIMod.cpp	/^void APIMod::onTick(double time){$/;"	f	class:APIMod
onTick	src/API/APIMod.h	/^    virtual void onTick(double time); \/\/ time between ticks given to script engines$/;"	p	class:APIMod
onTick	src/Gamelogic/Avatar/Skills/Skill.h	/^    void onTick();$/;"	p	class:Skill
onUnload	include/Eternia/API/APICore.h	/^    void onUnload(); \/\/ runs when module is stopping.$/;"	p	class:APICore
onUnload	include/Eternia/API/APIMod.h	/^    virtual void onUnload(); \/\/ C\/C++\/Go modules cannot be directly unloaded.$/;"	p	class:APIMod
onUnload	src/API/APICore.h	/^    void onUnload(); \/\/ runs when module is stopping.$/;"	p	class:APICore
onUnload	src/API/APIMod.cpp	/^void APIMod::onUnload(){$/;"	f	class:APIMod
onUnload	src/API/APIMod.h	/^    virtual void onUnload(); \/\/ C\/C++\/Go modules cannot be directly unloaded.$/;"	p	class:APIMod
opcode	include/Eternia/Programming/Instruction.h	/^    short opcode; \/\/ Primary opcode. 16-bit max. (Highly dependent on the OS, but 2^11,  1024 seems the be the max # of opcodes on 64-bits)$/;"	m	class:Instruction
opcode	src/Programming/Instruction.h	/^    short opcode; \/\/ Primary opcode. 16-bit max. (Highly dependent on the OS, but 2^11,  1024 seems the be the max # of opcodes on 64-bits)$/;"	m	class:Instruction
openChannels	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        static LinkedList<ChatChannel> openChannels;$/;"	m	class:ChatChannel
openChannels	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        static LinkedList<ChatChannel> openChannels;$/;"	m	class:ChatChannel
operator !	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator !() {$/;"	f	class:CryptoDefiner
operator !	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator !() {$/;"	f	class:CryptoDefiner
operator !=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator !=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator !=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator !=(T val) {$/;"	f	class:CryptoDefiner
operator !=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator !=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator !=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator !=(T val) {$/;"	f	class:CryptoDefiner
operator &	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator &	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &(T val) {$/;"	f	class:CryptoDefiner
operator &	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator &	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &(T val) {$/;"	f	class:CryptoDefiner
operator &=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator &=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &=(T val) {$/;"	f	class:CryptoDefiner
operator &=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator &=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator &=(T val) {$/;"	f	class:CryptoDefiner
operator *	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator *	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *(T val) {$/;"	f	class:CryptoDefiner
operator *	include/Eternia/Math/Complex.hpp	/^    Complex operator *(Complex val){$/;"	f	class:Complex
operator *	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator *	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *(T val) {$/;"	f	class:CryptoDefiner
operator *	src/Math/Complex.hpp	/^    Complex operator *(Complex val){$/;"	f	class:Complex
operator *=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator *=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *=(T val) {$/;"	f	class:CryptoDefiner
operator *=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator *=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator *=(T val) {$/;"	f	class:CryptoDefiner
operator +	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator +	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +(T val) {$/;"	f	class:CryptoDefiner
operator +	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator +(UInt512 v) {$/;"	f	class:UInt512
operator +	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator +(long v) {$/;"	f	class:UInt512
operator +	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator +(uint64_t v) {$/;"	f	class:UInt512
operator +	include/Eternia/Math/Complex.hpp	/^    Complex operator +(Complex val){$/;"	f	class:Complex
operator +	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator +	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +(T val) {$/;"	f	class:CryptoDefiner
operator +	src/Data/SpecialTypes.hpp	/^        UInt512 operator +(UInt512 v) {$/;"	f	class:UInt512
operator +	src/Data/SpecialTypes.hpp	/^        UInt512 operator +(long v) {$/;"	f	class:UInt512
operator +	src/Data/SpecialTypes.hpp	/^        UInt512 operator +(uint64_t v) {$/;"	f	class:UInt512
operator +	src/Math/Complex.hpp	/^    Complex operator +(Complex val){$/;"	f	class:Complex
operator ++	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ++() {$/;"	f	class:CryptoDefiner
operator ++	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ++() {$/;"	f	class:CryptoDefiner
operator +=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator +=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +=(T val) {$/;"	f	class:CryptoDefiner
operator +=	include/Eternia/Data/SpecialTypes.hpp	/^        void operator +=(UInt512 v) {$/;"	f	class:UInt512
operator +=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator +=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator +=(T val) {$/;"	f	class:CryptoDefiner
operator +=	src/Data/SpecialTypes.hpp	/^        void operator +=(UInt512 v) {$/;"	f	class:UInt512
operator -	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator -	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -(T val) {$/;"	f	class:CryptoDefiner
operator -	include/Eternia/Math/Complex.hpp	/^    Complex operator -(Complex val){$/;"	f	class:Complex
operator -	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator -	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -(T val) {$/;"	f	class:CryptoDefiner
operator -	src/Math/Complex.hpp	/^    Complex operator -(Complex val){$/;"	f	class:Complex
operator -=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator -=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -=(T val) {$/;"	f	class:CryptoDefiner
operator -=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator -=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator -=(T val) {$/;"	f	class:CryptoDefiner
operator /	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator /	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/(T val) {$/;"	f	class:CryptoDefiner
operator /	include/Eternia/Math/Complex.hpp	/^    Complex operator \/(Complex val){$/;"	f	class:Complex
operator /	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator /	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/(T val) {$/;"	f	class:CryptoDefiner
operator /	src/Math/Complex.hpp	/^    Complex operator \/(Complex val){$/;"	f	class:Complex
operator /=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator /=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/=(T val) {$/;"	f	class:CryptoDefiner
operator /=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator /=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator \/=(T val) {$/;"	f	class:CryptoDefiner
operator <	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator <	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <(T val) {$/;"	f	class:CryptoDefiner
operator <	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator <	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <(T val) {$/;"	f	class:CryptoDefiner
operator <<	include/Eternia/Algorithm/Cryptography/md5.h	/^        friend std::ostream& operator<<(std::ostream&, MD5 md5);$/;"	p	class:MD5
operator <<	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator <<(int v) {$/;"	f	class:UInt512
operator <<	src/Algorithm/Cryptography/md5.cpp	/^std::ostream& operator<<(std::ostream& out, MD5 md5) {$/;"	f
operator <<	src/Algorithm/Cryptography/md5.h	/^        friend std::ostream& operator<<(std::ostream&, MD5 md5);$/;"	p	class:MD5
operator <<	src/Data/SpecialTypes.hpp	/^        UInt512 operator <<(int v) {$/;"	f	class:UInt512
operator <=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator <=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <=(T val) {$/;"	f	class:CryptoDefiner
operator <=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator <=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator <=(T val) {$/;"	f	class:CryptoDefiner
operator =	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator =(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator =	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator =(T val) {$/;"	f	class:CryptoDefiner
operator =	include/Eternia/Data/CharString.h	/^        void operator =(char* string);$/;"	p	class:CharString
operator =	include/Eternia/Data/Protect/PType.hpp	/^    PType<T> operator =(PType<T> v){$/;"	f	class:PType
operator =	include/Eternia/Data/Protect/PType.hpp	/^    PType<T> operator =(T v){$/;"	f	class:PType
operator =	include/Eternia/Data/SpecialTypes.hpp	/^        void operator =(int v) {$/;"	f	class:UInt512
operator =	include/Eternia/Math/Complex.hpp	/^    Complex operator =(Complex val){$/;"	f	class:Complex
operator =	include/Eternia/Math/struct/vertex.h	/^    vertex operator=(vertex b);$/;"	p	class:vertex
operator =	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator =(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator =	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator =(T val) {$/;"	f	class:CryptoDefiner
operator =	src/Data/CharString.cpp	/^void CharString::operator =(char* stringg) {$/;"	f	class:CharString
operator =	src/Data/CharString.h	/^        void operator =(char* string);$/;"	p	class:CharString
operator =	src/Data/Protect/PType.hpp	/^    PType<T> operator =(PType<T> v){$/;"	f	class:PType
operator =	src/Data/Protect/PType.hpp	/^    PType<T> operator =(T v){$/;"	f	class:PType
operator =	src/Data/SpecialTypes.hpp	/^        void operator =(int v) {$/;"	f	class:UInt512
operator =	src/Math/Complex.hpp	/^    Complex operator =(Complex val){$/;"	f	class:Complex
operator =	src/Math/struct/vertex.cpp	/^vertex vertex::operator=(vertex b){$/;"	f	class:vertex
operator =	src/Math/struct/vertex.h	/^    vertex operator=(vertex b);$/;"	p	class:vertex
operator ==	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator ==(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator ==	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator ==(T val) {$/;"	f	class:CryptoDefiner
operator ==	include/Eternia/Data/CharString.h	/^        bool operator ==(CharString other); \/\/ operator for 'compare'$/;"	p	class:CharString
operator ==	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator ==(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator ==	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator ==(T val) {$/;"	f	class:CryptoDefiner
operator ==	src/Data/CharString.cpp	/^bool CharString::operator==(CharString ins) {$/;"	f	class:CharString
operator ==	src/Data/CharString.h	/^        bool operator ==(CharString other); \/\/ operator for 'compare'$/;"	p	class:CharString
operator >	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator >	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >(T val) {$/;"	f	class:CryptoDefiner
operator >	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator >	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >(T val) {$/;"	f	class:CryptoDefiner
operator >=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator >=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >=(T val) {$/;"	f	class:CryptoDefiner
operator >=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator >=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        bool operator >=(T val) {$/;"	f	class:CryptoDefiner
operator []	include/Eternia/Data/LinkedList.hpp	/^    T operator [](int i) const {$/;"	f	class:LinkedList
operator []	include/Eternia/Data/LinkedList.hpp	/^    T& operator [](int i){$/;"	f	class:LinkedList
operator []	src/Data/LinkedList.hpp	/^    T operator [](int i) const {$/;"	f	class:LinkedList
operator []	src/Data/LinkedList.hpp	/^    T& operator [](int i){$/;"	f	class:LinkedList
operator ^	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator ^	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^(T val) {$/;"	f	class:CryptoDefiner
operator ^	include/Eternia/Data/Protect/PType.hpp	/^    PType<T> operator ^(T v){$/;"	f	class:PType
operator ^	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator ^(UInt512 v) {$/;"	f	class:UInt512
operator ^	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator ^(uint64_t v) {$/;"	f	class:UInt512
operator ^	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator ^	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^(T val) {$/;"	f	class:CryptoDefiner
operator ^	src/Data/Protect/PType.hpp	/^    PType<T> operator ^(T v){$/;"	f	class:PType
operator ^	src/Data/SpecialTypes.hpp	/^        UInt512 operator ^(UInt512 v) {$/;"	f	class:UInt512
operator ^	src/Data/SpecialTypes.hpp	/^        UInt512 operator ^(uint64_t v) {$/;"	f	class:UInt512
operator ^=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator ^=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^=(T val) {$/;"	f	class:CryptoDefiner
operator ^=	include/Eternia/Data/SpecialTypes.hpp	/^        void operator ^=(UInt512 v) {$/;"	f	class:UInt512
operator ^=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator ^=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ^=(T val) {$/;"	f	class:CryptoDefiner
operator ^=	src/Data/SpecialTypes.hpp	/^        void operator ^=(UInt512 v) {$/;"	f	class:UInt512
operator |	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator |	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |(T val) {$/;"	f	class:CryptoDefiner
operator |	include/Eternia/Data/SpecialTypes.hpp	/^        UInt512 operator |(uint64_t v) {$/;"	f	class:UInt512
operator |	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator |	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |(T val) {$/;"	f	class:CryptoDefiner
operator |	src/Data/SpecialTypes.hpp	/^        UInt512 operator |(uint64_t v) {$/;"	f	class:UInt512
operator |=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator |=	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |=(T val) {$/;"	f	class:CryptoDefiner
operator |=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |=(CryptoDefiner<T> val) {$/;"	f	class:CryptoDefiner
operator |=	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator |=(T val) {$/;"	f	class:CryptoDefiner
operator ~	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ~() {$/;"	f	class:CryptoDefiner
operator ~	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T operator ~() {$/;"	f	class:CryptoDefiner
opposite	include/Eternia/Data/Graph.h	/^        GVertex* opposite(GVertex* v);$/;"	p	class:GEdge
opposite	src/Data/Graph.h	/^        GVertex* opposite(GVertex* v);$/;"	p	class:GEdge
oreSize	include/Eternia/Engineering/Chemistry/Ore.h	/^        double oreSize; \/\/ amount of ore in deposit, measrured in kilograms.$/;"	m	class:Ore
oreSize	src/Engineering/Chemistry/Ore.h	/^        double oreSize; \/\/ amount of ore in deposit, measrured in kilograms.$/;"	m	class:Ore
organic_chemistry	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> organic_chemistry; \/\/ Carbon-based or Silicon-based chemistry$/;"	m	class:CraftingStats
organic_chemistry	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> organic_chemistry; \/\/ Carbon-based or Silicon-based chemistry$/;"	m	class:CraftingStats
originalStock	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^	BaseStock originalStock;$/;"	m	class:Stock
originalStock	src/Gamelogic/Economics/StockMarket/Stock.h	/^	BaseStock originalStock;$/;"	m	class:Stock
oshield	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	Composite ishield, oshield; \/\/ material used to shield the reactor from exposing radiation$/;"	m	class:Reactor
oshield	src/Gamelogic/CoreSystems/Reactor.h	/^	Composite ishield, oshield; \/\/ material used to shield the reactor from exposing radiation$/;"	m	class:Reactor
ounce	include/Eternia/constants.h	/^                const double ounce = 8.0*drachms;$/;"	m	namespace:physical::unit::British::fluid
ounce	include/Eternia/constants.h	/^                const double ounce = 8.0*drams;$/;"	m	namespace:physical::unit::US::liquid
ounce	include/Eternia/constants.h	/^            const double ounce = 8.0*drams;$/;"	m	namespace:physical::unit::apothecary
ounce	include/Eternia/constants.h	/^            const double ounce = pound\/16.0;$/;"	m	namespace:physical::unit::avoirdupois
ounce	src/constants.h	/^                const double ounce = 8.0*drachms;$/;"	m	namespace:physical::unit::British::fluid
ounce	src/constants.h	/^                const double ounce = 8.0*drams;$/;"	m	namespace:physical::unit::US::liquid
ounce	src/constants.h	/^            const double ounce = 8.0*drams;$/;"	m	namespace:physical::unit::apothecary
ounce	src/constants.h	/^            const double ounce = pound\/16.0;$/;"	m	namespace:physical::unit::avoirdupois
ounces	include/Eternia/constants.h	/^                const double ounces = ounce;$/;"	m	namespace:physical::unit::British::fluid
ounces	include/Eternia/constants.h	/^                const double ounces = ounce;$/;"	m	namespace:physical::unit::US::liquid
ounces	include/Eternia/constants.h	/^            const double ounces = ounce;$/;"	m	namespace:physical::unit::apothecary
ounces	include/Eternia/constants.h	/^            const double ounces = ounce;$/;"	m	namespace:physical::unit::avoirdupois
ounces	src/constants.h	/^                const double ounces = ounce;$/;"	m	namespace:physical::unit::British::fluid
ounces	src/constants.h	/^                const double ounces = ounce;$/;"	m	namespace:physical::unit::US::liquid
ounces	src/constants.h	/^            const double ounces = ounce;$/;"	m	namespace:physical::unit::apothecary
ounces	src/constants.h	/^            const double ounces = ounce;$/;"	m	namespace:physical::unit::avoirdupois
outputs	include/Eternia/Programming/Program.h	/^        void (*outputs)(VProgramVariable*);$/;"	m	class:Program
outputs	src/Programming/Program.h	/^        void (*outputs)(VProgramVariable*);$/;"	m	class:Program
outslots	include/Eternia/Programming/Program.h	/^        int inslots, actionslots, outslots;$/;"	m	class:Program
outslots	src/Programming/Program.h	/^        int inslots, actionslots, outslots;$/;"	m	class:Program
oz	include/Eternia/constants.h	/^                const double oz = ounce;$/;"	m	namespace:physical::unit::British::fluid
oz	include/Eternia/constants.h	/^                const double oz = ounce;$/;"	m	namespace:physical::unit::US::liquid
oz	include/Eternia/constants.h	/^            const double oz = ounce;$/;"	m	namespace:physical::unit::apothecary
oz	include/Eternia/constants.h	/^            const double oz = ounce;$/;"	m	namespace:physical::unit::avoirdupois
oz	src/constants.h	/^                const double oz = ounce;$/;"	m	namespace:physical::unit::British::fluid
oz	src/constants.h	/^                const double oz = ounce;$/;"	m	namespace:physical::unit::US::liquid
oz	src/constants.h	/^            const double oz = ounce;$/;"	m	namespace:physical::unit::apothecary
oz	src/constants.h	/^            const double oz = ounce;$/;"	m	namespace:physical::unit::avoirdupois
p	include/Eternia/constants.h	/^        const double p = pole;$/;"	m	namespace:physical::unit
p	src/constants.h	/^        const double p = pole;$/;"	m	namespace:physical::unit
p2pNodeCache	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^} p2pNodeCache;$/;"	v	typeref:class:P2PNodeCache
p2pNodeCache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^} p2pNodeCache;$/;"	v	typeref:class:P2PNodeCache
pAPI	include/Eternia/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
pAPI	src/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
pDB	include/Eternia/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
pDB	src/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
pGLOBAL	include/Eternia/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
pGLOBAL	src/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
pMOD	include/Eternia/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
pMOD	src/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
pUSER	include/Eternia/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
pUSER	src/API/APIUser.h	/^    HashMap<bool> pGLOBAL,pUSER,pMOD,pDB,pAPI; \/\/ primary speed increases$/;"	m	class:APIUser
pace	include/Eternia/constants.h	/^        const double pace = 5.0*feet;$/;"	m	namespace:physical::unit
pace	src/constants.h	/^        const double pace = 5.0*feet;$/;"	m	namespace:physical::unit
paces	include/Eternia/constants.h	/^        const double paces = pace;$/;"	m	namespace:physical::unit
paces	src/constants.h	/^        const double paces = pace;$/;"	m	namespace:physical::unit
packetQ	include/Eternia/WebFramework/Network/PacketChannel.h	/^    Queue packetQ;$/;"	m	class:PacketChannel
packetQ	src/WebFramework/Network/PacketChannel.h	/^    Queue packetQ;$/;"	m	class:PacketChannel
paidPrice	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^	long paidPrice, units;$/;"	m	class:Stock
paidPrice	src/Gamelogic/Economics/StockMarket/Stock.h	/^	long paidPrice, units;$/;"	m	class:Stock
palm	include/Eternia/constants.h	/^        const double palm = 3.0*inches;$/;"	m	namespace:physical::unit
palm	src/constants.h	/^        const double palm = 3.0*inches;$/;"	m	namespace:physical::unit
palms	include/Eternia/constants.h	/^        const double palms = palm;$/;"	m	namespace:physical::unit
palms	src/constants.h	/^        const double palms = palm;$/;"	m	namespace:physical::unit
parasang	include/Eternia/constants.h	/^        const double parasang = 3.5*statute::miles;$/;"	m	namespace:physical::unit
parasang	src/constants.h	/^        const double parasang = 3.5*statute::miles;$/;"	m	namespace:physical::unit
parasangs	include/Eternia/constants.h	/^        const double parasangs = parasang;$/;"	m	namespace:physical::unit
parasangs	src/constants.h	/^        const double parasangs = parasang;$/;"	m	namespace:physical::unit
parent	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem *left, *right, *parent; \/\/ node selections.$/;"	m	class:PriorityItem
parent	include/Eternia/Design/LayoutObject.h	/^        LayoutObject *parent; \/\/ parent object$/;"	m	class:LayoutObject
parent	src/Data/PriorityQueue.h	/^        PriorityItem *left, *right, *parent; \/\/ node selections.$/;"	m	class:PriorityItem
parent	src/Design/LayoutObject.h	/^        LayoutObject *parent; \/\/ parent object$/;"	m	class:LayoutObject
parsec	include/Eternia/constants.h	/^        const double parsec = AU*radians\/arc::second;$/;"	m	namespace:physical::unit
parsec	src/constants.h	/^        const double parsec = AU*radians\/arc::second;$/;"	m	namespace:physical::unit
parsecs	include/Eternia/constants.h	/^        const double parsecs = parsec;$/;"	m	namespace:physical::unit
parsecs	src/constants.h	/^        const double parsecs = parsec;$/;"	m	namespace:physical::unit
particle_physics	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> particle_physics; \/\/ advanced mechanics of physics$/;"	m	class:CraftingStats
particle_physics	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> particle_physics; \/\/ advanced mechanics of physics$/;"	m	class:CraftingStats
partition	src/Algorithm/Sorting/MergeSort.cpp	/^IntegerList* partition(IntegerList *a, int partby) {$/;"	f
partition	src/Algorithm/Sorting/QuickSort.cpp	/^int partition(IntegerList *a, int low, int high) {$/;"	f
pathTo	include/Eternia/Gamelogic/AI/AIMovement.h	/^        void pathTo(vertex* location); \/\/ tell AI to goto this location. (Direct and pure order)$/;"	p	class:AIMovement
pathTo	src/Gamelogic/AI/AIMovement.h	/^        void pathTo(vertex* location); \/\/ tell AI to goto this location. (Direct and pure order)$/;"	p	class:AIMovement
paused	include/Eternia/Emulation/MPU/msp430.h	/^        bool paused, T0_up, T1_up;$/;"	m	class:MSP430
paused	src/Emulation/MPU/msp430.h	/^        bool paused, T0_up, T1_up;$/;"	m	class:MSP430
pc	include/Eternia/constants.h	/^        const double pc = parsec;$/;"	m	namespace:physical::unit
pc	src/constants.h	/^        const double pc = parsec;$/;"	m	namespace:physical::unit
pdl	include/Eternia/constants.h	/^        const double pdl = poundal;$/;"	m	namespace:physical::unit
pdl	src/constants.h	/^        const double pdl = poundal;$/;"	m	namespace:physical::unit
peck	include/Eternia/constants.h	/^            const double peck = 2.0*fluid::gallons;$/;"	m	namespace:physical::unit::British
peck	include/Eternia/constants.h	/^            const double peck = 8.0*dry::quarts;$/;"	m	namespace:physical::unit::US
peck	src/constants.h	/^            const double peck = 2.0*fluid::gallons;$/;"	m	namespace:physical::unit::British
peck	src/constants.h	/^            const double peck = 8.0*dry::quarts;$/;"	m	namespace:physical::unit::US
pecks	include/Eternia/constants.h	/^            const double pecks = peck;$/;"	m	namespace:physical::unit::British
pecks	include/Eternia/constants.h	/^            const double pecks = peck;$/;"	m	namespace:physical::unit::US
pecks	src/constants.h	/^            const double pecks = peck;$/;"	m	namespace:physical::unit::British
pecks	src/constants.h	/^            const double pecks = peck;$/;"	m	namespace:physical::unit::US
pennyweight	include/Eternia/constants.h	/^        const double pennyweight = 24.0*grains;$/;"	m	namespace:physical::unit
pennyweight	src/constants.h	/^        const double pennyweight = 24.0*grains;$/;"	m	namespace:physical::unit
percent	include/Eternia/constants.h	/^        const double percent = 1.0\/100.0;$/;"	m	namespace:physical::unit
percent	src/constants.h	/^        const double percent = 1.0\/100.0;$/;"	m	namespace:physical::unit
perception	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> perception; \/\/ Accuracy \/ Intelligence$/;"	m	class:SkillSet
perception	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> perception; \/\/ Accuracy \/ Intelligence$/;"	m	class:SkillSet
perch	include/Eternia/constants.h	/^        const double perch = rod;$/;"	m	namespace:physical::unit
perch	src/constants.h	/^        const double perch = rod;$/;"	m	namespace:physical::unit
perches	include/Eternia/constants.h	/^        const double perches = perch;$/;"	m	namespace:physical::unit
perches	src/constants.h	/^        const double perches = perch;$/;"	m	namespace:physical::unit
period	include/Eternia/Engineering/Chemistry/Atom.h	/^        char period;$/;"	m	class:Atom
period	src/Engineering/Chemistry/Atom.h	/^        char period;$/;"	m	class:Atom
perm	include/Eternia/API/APIPermission.h	/^    CharString perm;$/;"	m	class:APIPermission
perm	src/API/APIPermission.h	/^    CharString perm;$/;"	m	class:APIPermission
permissions	include/Eternia/API/APIUser.h	/^    LinkedList<APIPermission> permissions;$/;"	m	class:APIUser
permissions	src/API/APIUser.h	/^    LinkedList<APIPermission> permissions;$/;"	m	class:APIUser
perms	include/Eternia/API/APICore.h	/^    APIPermissionsRegistry perms; \/\/ permissions registry$/;"	m	class:APICore
perms	src/API/APICore.h	/^    APIPermissionsRegistry perms; \/\/ permissions registry$/;"	m	class:APICore
permscope	include/Eternia/API/APIUser.h	/^    APIPermType permscope; \/\/ APIUser uses P_USER, but a MOD uses P_MOD.$/;"	m	class:APIUser
permscope	src/API/APIUser.h	/^    APIPermType permscope; \/\/ APIUser uses P_USER, but a MOD uses P_MOD.$/;"	m	class:APIUser
peta	include/Eternia/constants.h	/^        const double peta = 1e15;$/;"	m	namespace:physical::unit
peta	src/constants.h	/^        const double peta = 1e15;$/;"	m	namespace:physical::unit
petaHertz	include/Eternia/constants.h	/^        const double petaHertz = peta*Hertz;$/;"	m	namespace:physical::unit
petaHertz	src/constants.h	/^        const double petaHertz = peta*Hertz;$/;"	m	namespace:physical::unit
phot	include/Eternia/constants.h	/^            const double phot = apostilb\/pi;$/;"	m	namespace:physical::unit::equivalent
phot	include/Eternia/constants.h	/^        const double phot = lumens\/centimeter\/centimeter;$/;"	m	namespace:physical::unit
phot	src/constants.h	/^            const double phot = apostilb\/pi;$/;"	m	namespace:physical::unit::equivalent
phot	src/constants.h	/^        const double phot = lumens\/centimeter\/centimeter;$/;"	m	namespace:physical::unit
phots	include/Eternia/constants.h	/^            const double phots = phot;$/;"	m	namespace:physical::unit::equivalent
phots	include/Eternia/constants.h	/^        const double phots = phot;$/;"	m	namespace:physical::unit
phots	src/constants.h	/^            const double phots = phot;$/;"	m	namespace:physical::unit::equivalent
phots	src/constants.h	/^        const double phots = phot;$/;"	m	namespace:physical::unit
physical	include/Eternia/constants.h	/^namespace physical {$/;"	n
physical	src/constants.cpp	/^namespace physical {$/;"	n	file:
physical	src/constants.h	/^namespace physical {$/;"	n
physical::KAcceleration	include/Eternia/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
physical::KAcceleration	src/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
physical::KCentripetal	include/Eternia/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
physical::KCentripetal	src/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
physical::KDirection	include/Eternia/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	g	namespace:physical
physical::KDirection	src/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	g	namespace:physical
physical::KDistance	include/Eternia/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
physical::KDistance	src/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
physical::KEnergyType	include/Eternia/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	g	namespace:physical
physical::KEnergyType	src/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	g	namespace:physical
physical::KFriction	include/Eternia/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
physical::KFriction	src/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
physical::KGravity	include/Eternia/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
physical::KGravity	src/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
physical::KItem	include/Eternia/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	g	namespace:physical
physical::KItem	src/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	g	namespace:physical
physical::KMass	include/Eternia/constants.h	/^                KMass$/;"	e	enum:physical::KItem
physical::KMass	src/constants.h	/^                KMass$/;"	e	enum:physical::KItem
physical::KMu	include/Eternia/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
physical::KMu	src/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
physical::KNewton	include/Eternia/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
physical::KNewton	src/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
physical::KNormal	include/Eternia/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
physical::KNormal	src/constants.h	/^    enum KItem {KNormal, KDistance, KNewton, KGravity, KFriction,$/;"	e	enum:physical::KItem
physical::KTension	include/Eternia/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
physical::KTension	src/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
physical::KTime	include/Eternia/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
physical::KTime	src/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
physical::KVelocity	include/Eternia/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
physical::KVelocity	src/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
physical::KVelocityFinal	include/Eternia/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
physical::KVelocityFinal	src/constants.h	/^                KCentripetal, KMu, KVelocity, KVelocityFinal, KAcceleration,$/;"	e	enum:physical::KItem
physical::KineticREnergy	include/Eternia/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
physical::KineticREnergy	src/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
physical::KineticTEnergy	include/Eternia/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
physical::KineticTEnergy	src/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
physical::Kx	include/Eternia/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	e	enum:physical::KDirection
physical::Kx	src/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	e	enum:physical::KDirection
physical::Kxf	include/Eternia/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
physical::Kxf	src/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
physical::Kxi	include/Eternia/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
physical::Kxi	src/constants.h	/^                KTime, KTension, Kxi, Kxf,$/;"	e	enum:physical::KItem
physical::Ky	include/Eternia/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	e	enum:physical::KDirection
physical::Ky	src/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	e	enum:physical::KDirection
physical::Kz	include/Eternia/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	e	enum:physical::KDirection
physical::Kz	src/constants.h	/^    enum KDirection {Kx, Ky, Kz};$/;"	e	enum:physical::KDirection
physical::PotentialGravEnergy	include/Eternia/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
physical::PotentialGravEnergy	src/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
physical::PotentialSpringEnergy	include/Eternia/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
physical::PotentialSpringEnergy	src/constants.h	/^    enum KEnergyType {PotentialGravEnergy, PotentialSpringEnergy, KineticTEnergy, KineticREnergy};$/;"	e	enum:physical::KEnergyType
physical::constant	include/Eternia/constants.h	/^    namespace constant {$/;"	n	namespace:physical
physical::constant	src/constants.h	/^    namespace constant {$/;"	n	namespace:physical
physical::constant::Dalton	include/Eternia/constants.h	/^        const double Dalton = atomic_mass_unit;$/;"	m	namespace:physical::constant
physical::constant::Dalton	src/constants.h	/^        const double Dalton = atomic_mass_unit;$/;"	m	namespace:physical::constant
physical::constant::Daltons	include/Eternia/constants.h	/^        const double Daltons = Dalton;$/;"	m	namespace:physical::constant
physical::constant::Daltons	src/constants.h	/^        const double Daltons = Dalton;$/;"	m	namespace:physical::constant
physical::constant::E_M_P	include/Eternia/constants.h	/^        const double E_M_P = 9.5788309e7*C\/kg*(rad\/(s*T));$/;"	m	namespace:physical::constant
physical::constant::E_M_P	src/constants.h	/^        const double E_M_P = 9.5788309e7*C\/kg*(rad\/(s*T));$/;"	m	namespace:physical::constant
physical::constant::E_M_e	include/Eternia/constants.h	/^        const double E_M_e = 1.75881962e11*C\/kg*(rad\/(s*T));$/;"	m	namespace:physical::constant
physical::constant::E_M_e	src/constants.h	/^        const double E_M_e = 1.75881962e11*C\/kg*(rad\/(s*T));$/;"	m	namespace:physical::constant
physical::constant::G	include/Eternia/constants.h	/^        const double G = 6.67259e-11*m*m*m\/(kg*s*s);$/;"	m	namespace:physical::constant
physical::constant::G	src/constants.h	/^        const double G = 6.67259e-11*m*m*m\/(kg*s*s);$/;"	m	namespace:physical::constant
physical::constant::GeV	include/Eternia/constants.h	/^        const double GeV = 1000000000.0*eV;$/;"	m	namespace:physical::constant
physical::constant::GeV	src/constants.h	/^        const double GeV = 1000000000.0*eV;$/;"	m	namespace:physical::constant
physical::constant::K_B	include/Eternia/constants.h	/^        const double K_B = 1.380658e-23*Joules\/Kelvin;$/;"	m	namespace:physical::constant
physical::constant::K_B	src/constants.h	/^        const double K_B = 1.380658e-23*Joules\/Kelvin;$/;"	m	namespace:physical::constant
physical::constant::Mach	include/Eternia/constants.h	/^        const double Mach = 331.46*meters\/second;$/;"	m	namespace:physical::constant
physical::constant::Mach	src/constants.h	/^        const double Mach = 331.46*meters\/second;$/;"	m	namespace:physical::constant
physical::constant::MeV	include/Eternia/constants.h	/^        const double MeV = 1000000.0*eV;$/;"	m	namespace:physical::constant
physical::constant::MeV	src/constants.h	/^        const double MeV = 1000000.0*eV;$/;"	m	namespace:physical::constant
physical::constant::N_A	include/Eternia/constants.h	/^        const double N_A = 6.0221367e23;$/;"	m	namespace:physical::constant
physical::constant::N_A	src/constants.h	/^        const double N_A = 6.0221367e23;$/;"	m	namespace:physical::constant
physical::constant::Rydberg	include/Eternia/constants.h	/^        const double Rydberg = 13.6054*eV;$/;"	m	namespace:physical::constant
physical::constant::Rydberg	src/constants.h	/^        const double Rydberg = 13.6054*eV;$/;"	m	namespace:physical::constant
physical::constant::Rydbergs	include/Eternia/constants.h	/^        const double Rydbergs = Rydberg;$/;"	m	namespace:physical::constant
physical::constant::Rydbergs	src/constants.h	/^        const double Rydbergs = Rydberg;$/;"	m	namespace:physical::constant
physical::constant::V_molar	include/Eternia/constants.h	/^        const double V_molar = 2.897756e-3*meter*Kelvins;$/;"	m	namespace:physical::constant
physical::constant::V_molar	src/constants.h	/^        const double V_molar = 2.897756e-3*meter*Kelvins;$/;"	m	namespace:physical::constant
physical::constant::a_0	include/Eternia/constants.h	/^        const double a_0 = 0.529177249e-10*meters;$/;"	m	namespace:physical::constant
physical::constant::a_0	src/constants.h	/^        const double a_0 = 0.529177249e-10*meters;$/;"	m	namespace:physical::constant
physical::constant::alpha	include/Eternia/constants.h	/^        const double alpha = 1.0\/137.0359895;$/;"	m	namespace:physical::constant
physical::constant::alpha	src/constants.h	/^        const double alpha = 1.0\/137.0359895;$/;"	m	namespace:physical::constant
physical::constant::amu	include/Eternia/constants.h	/^        const double amu = atomic_mass_unit;$/;"	m	namespace:physical::constant
physical::constant::amu	src/constants.h	/^        const double amu = atomic_mass_unit;$/;"	m	namespace:physical::constant
physical::constant::atomic_mass_unit	include/Eternia/constants.h	/^        const double atomic_mass_unit = 1.6605402e-27*kilograms;$/;"	m	namespace:physical::constant
physical::constant::atomic_mass_unit	src/constants.h	/^        const double atomic_mass_unit = 1.6605402e-27*kilograms;$/;"	m	namespace:physical::constant
physical::constant::atomic_mass_units	include/Eternia/constants.h	/^        const double atomic_mass_units = atomic_mass_unit;$/;"	m	namespace:physical::constant
physical::constant::atomic_mass_units	src/constants.h	/^        const double atomic_mass_units = atomic_mass_unit;$/;"	m	namespace:physical::constant
physical::constant::c	include/Eternia/constants.h	/^        const double c = 2.99792458e8*meters\/second;$/;"	m	namespace:physical::constant
physical::constant::c	src/constants.h	/^        const double c = 2.99792458e8*meters\/second;$/;"	m	namespace:physical::constant
physical::constant::e	include/Eternia/constants.h	/^        const double e = 1.60217733e-19*Coulombs;$/;"	m	namespace:physical::constant
physical::constant::e	src/constants.h	/^        const double e = 1.60217733e-19*Coulombs;$/;"	m	namespace:physical::constant
physical::constant::eV	include/Eternia/constants.h	/^        const double eV = e*V;$/;"	m	namespace:physical::constant
physical::constant::eV	src/constants.h	/^        const double eV = e*V;$/;"	m	namespace:physical::constant
physical::constant::epsilon	include/Eternia/constants.h	/^        const double epsilon = 8.854187817e-12*Farads\/meter;$/;"	m	namespace:physical::constant
physical::constant::epsilon	src/constants.h	/^        const double epsilon = 8.854187817e-12*Farads\/meter;$/;"	m	namespace:physical::constant
physical::constant::g	include/Eternia/constants.h	/^        const double g = units::gravity;$/;"	m	namespace:physical::constant
physical::constant::g	src/constants.h	/^        const double g = units::gravity;$/;"	m	namespace:physical::constant
physical::constant::h	include/Eternia/constants.h	/^        const double h = 6.6260755e-34*Joule*seconds;$/;"	m	namespace:physical::constant
physical::constant::h	src/constants.h	/^        const double h = 6.6260755e-34*Joule*seconds;$/;"	m	namespace:physical::constant
physical::constant::h_bar	include/Eternia/constants.h	/^        const double h_bar = h\/(2.0*pi);$/;"	m	namespace:physical::constant
physical::constant::h_bar	src/constants.h	/^        const double h_bar = h\/(2.0*pi);$/;"	m	namespace:physical::constant
physical::constant::keV	include/Eternia/constants.h	/^        const double keV = 1000.0*eV;$/;"	m	namespace:physical::constant
physical::constant::keV	src/constants.h	/^        const double keV = 1000.0*eV;$/;"	m	namespace:physical::constant
physical::constant::lambda_1eV	include/Eternia/constants.h	/^        const double lambda_1eV = 1.23984244e-6*meters;$/;"	m	namespace:physical::constant
physical::constant::lambda_1eV	src/constants.h	/^        const double lambda_1eV = 1.23984244e-6*meters;$/;"	m	namespace:physical::constant
physical::constant::lambda_bar	include/Eternia/constants.h	/^        const double lambda_bar = 3.86159323e-13*meters;$/;"	m	namespace:physical::constant
physical::constant::lambda_bar	src/constants.h	/^        const double lambda_bar = 3.86159323e-13*meters;$/;"	m	namespace:physical::constant
physical::constant::m_D	include/Eternia/constants.h	/^        const double m_D = 1875.61339*MeV\/(c*c);$/;"	m	namespace:physical::constant
physical::constant::m_D	src/constants.h	/^        const double m_D = 1875.61339*MeV\/(c*c);$/;"	m	namespace:physical::constant
physical::constant::m_P	include/Eternia/constants.h	/^        const double m_P = 1.6726231e-27*kilograms;$/;"	m	namespace:physical::constant
physical::constant::m_P	src/constants.h	/^        const double m_P = 1.6726231e-27*kilograms;$/;"	m	namespace:physical::constant
physical::constant::m_e	include/Eternia/constants.h	/^        const double m_e = 9.1093897e-31*kilograms;$/;"	m	namespace:physical::constant
physical::constant::m_e	src/constants.h	/^        const double m_e = 9.1093897e-31*kilograms;$/;"	m	namespace:physical::constant
physical::constant::mu	include/Eternia/constants.h	/^        const double mu = 12.566370614e-7*Newtons\/(A*A);$/;"	m	namespace:physical::constant
physical::constant::mu	src/constants.h	/^        const double mu = 12.566370614e-7*Newtons\/(A*A);$/;"	m	namespace:physical::constant
physical::constant::mu_B	include/Eternia/constants.h	/^        const double mu_B = 5.78838263e-11*MeV\/Tesla;$/;"	m	namespace:physical::constant
physical::constant::mu_B	src/constants.h	/^        const double mu_B = 5.78838263e-11*MeV\/Tesla;$/;"	m	namespace:physical::constant
physical::constant::mu_N	include/Eternia/constants.h	/^        const double mu_N = 3.15245166e-14*MeV\/Tesla;$/;"	m	namespace:physical::constant
physical::constant::mu_N	src/constants.h	/^        const double mu_N = 3.15245166e-14*MeV\/Tesla;$/;"	m	namespace:physical::constant
physical::constant::r_e	include/Eternia/constants.h	/^        const double r_e = 2.81794092e-15*meters;$/;"	m	namespace:physical::constant
physical::constant::r_e	src/constants.h	/^        const double r_e = 2.81794092e-15*meters;$/;"	m	namespace:physical::constant
physical::constant::sigma_0	include/Eternia/constants.h	/^        const double sigma_0 = 0.66524616*barns;$/;"	m	namespace:physical::constant
physical::constant::sigma_0	src/constants.h	/^        const double sigma_0 = 0.66524616*barns;$/;"	m	namespace:physical::constant
physical::constant::sigma_SB	include/Eternia/constants.h	/^        const double sigma_SB = 5.67051e-8*W\/(m*m*K*K*K*K);$/;"	m	namespace:physical::constant
physical::constant::sigma_SB	src/constants.h	/^        const double sigma_SB = 5.67051e-8*W\/(m*m*K*K*K*K);$/;"	m	namespace:physical::constant
physical::constants	include/Eternia/constants.h	/^    namespace constants = constant;$/;"	x
physical::constants	src/constants.h	/^    namespace constants = constant;$/;"	x
physical::getVariableFromKItem	include/Eternia/constants.h	/^    CharString* getVariableFromKItem(KItem *item);$/;"	p	namespace:physical
physical::getVariableFromKItem	src/constants.cpp	/^    CharString *getVariableFromKItem(KItem *item_) {$/;"	f	namespace:physical
physical::getVariableFromKItem	src/constants.h	/^    CharString* getVariableFromKItem(KItem *item);$/;"	p	namespace:physical
physical::unit	include/Eternia/constants.h	/^    namespace unit { \/\/ conversion factor$/;"	n	namespace:physical
physical::unit	src/constants.h	/^    namespace unit { \/\/ conversion factor$/;"	n	namespace:physical
physical::unit::A	include/Eternia/constants.h	/^        const double A = Ampere;$/;"	m	namespace:physical::unit
physical::unit::A	src/constants.h	/^        const double A = Ampere;$/;"	m	namespace:physical::unit
physical::unit::AU	include/Eternia/constants.h	/^        const double AU = astronomical_unit;$/;"	m	namespace:physical::unit
physical::unit::AU	src/constants.h	/^        const double AU = astronomical_unit;$/;"	m	namespace:physical::unit
physical::unit::Ampere	include/Eternia/constants.h	/^        const double Ampere = 1.0;$/;"	m	namespace:physical::unit
physical::unit::Ampere	src/constants.h	/^        const double Ampere = 1.0;$/;"	m	namespace:physical::unit
physical::unit::Amperes	include/Eternia/constants.h	/^        const double Amperes = Ampere;$/;"	m	namespace:physical::unit
physical::unit::Amperes	src/constants.h	/^        const double Amperes = Ampere;$/;"	m	namespace:physical::unit
physical::unit::Angstrom	include/Eternia/constants.h	/^        const double Angstrom = decinanometer;$/;"	m	namespace:physical::unit
physical::unit::Angstrom	src/constants.h	/^        const double Angstrom = decinanometer;$/;"	m	namespace:physical::unit
physical::unit::Angstroms	include/Eternia/constants.h	/^        const double Angstroms = Angstrom;$/;"	m	namespace:physical::unit
physical::unit::Angstroms	src/constants.h	/^        const double Angstroms = Angstrom;$/;"	m	namespace:physical::unit
physical::unit::Barie	include/Eternia/constants.h	/^        const double Barie = Pascal\/10.0;$/;"	m	namespace:physical::unit
physical::unit::Barie	src/constants.h	/^        const double Barie = Pascal\/10.0;$/;"	m	namespace:physical::unit
physical::unit::Baries	include/Eternia/constants.h	/^        const double Baries = Barie;$/;"	m	namespace:physical::unit
physical::unit::Baries	src/constants.h	/^        const double Baries = Barie;$/;"	m	namespace:physical::unit
physical::unit::Barye	include/Eternia/constants.h	/^        const double Barye = Barie;$/;"	m	namespace:physical::unit
physical::unit::Barye	src/constants.h	/^        const double Barye = Barie;$/;"	m	namespace:physical::unit
physical::unit::Baryes	include/Eternia/constants.h	/^        const double Baryes = Barye;$/;"	m	namespace:physical::unit
physical::unit::Baryes	src/constants.h	/^        const double Baryes = Barye;$/;"	m	namespace:physical::unit
physical::unit::Becquerel	include/Eternia/constants.h	/^        const double Becquerel = 1.0\/second;$/;"	m	namespace:physical::unit
physical::unit::Becquerel	src/constants.h	/^        const double Becquerel = 1.0\/second;$/;"	m	namespace:physical::unit
physical::unit::Becquerels	include/Eternia/constants.h	/^        const double Becquerels = Becquerel;$/;"	m	namespace:physical::unit
physical::unit::Becquerels	src/constants.h	/^        const double Becquerels = Becquerel;$/;"	m	namespace:physical::unit
physical::unit::Biot	include/Eternia/constants.h	/^        const double Biot = 10.0*Amperes;$/;"	m	namespace:physical::unit
physical::unit::Biot	src/constants.h	/^        const double Biot = 10.0*Amperes;$/;"	m	namespace:physical::unit
physical::unit::Biots	include/Eternia/constants.h	/^        const double Biots = Biot;$/;"	m	namespace:physical::unit
physical::unit::Biots	src/constants.h	/^        const double Biots = Biot;$/;"	m	namespace:physical::unit
physical::unit::Blondel	include/Eternia/constants.h	/^        const double Blondel = apostilb\/pi;$/;"	m	namespace:physical::unit
physical::unit::Blondel	src/constants.h	/^        const double Blondel = apostilb\/pi;$/;"	m	namespace:physical::unit
physical::unit::Blondels	include/Eternia/constants.h	/^        const double Blondels = Blondel;$/;"	m	namespace:physical::unit
physical::unit::Blondels	src/constants.h	/^        const double Blondels = Blondel;$/;"	m	namespace:physical::unit
physical::unit::Bq	include/Eternia/constants.h	/^        const double Bq = Becquerel;$/;"	m	namespace:physical::unit
physical::unit::Bq	src/constants.h	/^        const double Bq = Becquerel;$/;"	m	namespace:physical::unit
physical::unit::British	include/Eternia/constants.h	/^        namespace British { \/\/ long$/;"	n	namespace:physical::unit
physical::unit::British	include/Eternia/constants.h	/^        namespace British {$/;"	n	namespace:physical::unit
physical::unit::British	src/constants.h	/^        namespace British { \/\/ long$/;"	n	namespace:physical::unit
physical::unit::British	src/constants.h	/^        namespace British {$/;"	n	namespace:physical::unit
physical::unit::British::barrel	include/Eternia/constants.h	/^            const double barrel = 36.0*fluid::gallons;$/;"	m	namespace:physical::unit::British
physical::unit::British::barrel	src/constants.h	/^            const double barrel = 36.0*fluid::gallons;$/;"	m	namespace:physical::unit::British
physical::unit::British::barrels	include/Eternia/constants.h	/^            const double barrels = barrel;$/;"	m	namespace:physical::unit::British
physical::unit::British::barrels	src/constants.h	/^            const double barrels = barrel;$/;"	m	namespace:physical::unit::British
physical::unit::British::bbl	include/Eternia/constants.h	/^            const double bbl = barrel;$/;"	m	namespace:physical::unit::British
physical::unit::British::bbl	src/constants.h	/^            const double bbl = barrel;$/;"	m	namespace:physical::unit::British
physical::unit::British::bl	include/Eternia/constants.h	/^            const double bl = barrel;$/;"	m	namespace:physical::unit::British
physical::unit::British::bl	src/constants.h	/^            const double bl = barrel;$/;"	m	namespace:physical::unit::British
physical::unit::British::bu	include/Eternia/constants.h	/^            const double bu = bushel;$/;"	m	namespace:physical::unit::British
physical::unit::British::bu	src/constants.h	/^            const double bu = bushel;$/;"	m	namespace:physical::unit::British
physical::unit::British::bushel	include/Eternia/constants.h	/^            const double bushel = 4.0*pecks;$/;"	m	namespace:physical::unit::British
physical::unit::British::bushel	src/constants.h	/^            const double bushel = 4.0*pecks;$/;"	m	namespace:physical::unit::British
physical::unit::British::bushels	include/Eternia/constants.h	/^            const double bushels = bushel;$/;"	m	namespace:physical::unit::British
physical::unit::British::bushels	src/constants.h	/^            const double bushels = bushel;$/;"	m	namespace:physical::unit::British
physical::unit::British::cable_length	include/Eternia/constants.h	/^            const double cable_length = 100.0*fathoms;$/;"	m	namespace:physical::unit::British
physical::unit::British::cable_length	src/constants.h	/^            const double cable_length = 100.0*fathoms;$/;"	m	namespace:physical::unit::British
physical::unit::British::cable_lengths	include/Eternia/constants.h	/^            const double cable_lengths = cable_length;$/;"	m	namespace:physical::unit::British
physical::unit::British::cable_lengths	src/constants.h	/^            const double cable_lengths = cable_length;$/;"	m	namespace:physical::unit::British
physical::unit::British::cwt	include/Eternia/constants.h	/^            const double cwt = hundredweight;$/;"	m	namespace:physical::unit::British
physical::unit::British::cwt	src/constants.h	/^            const double cwt = hundredweight;$/;"	m	namespace:physical::unit::British
physical::unit::British::fluid	include/Eternia/constants.h	/^            namespace fluid {$/;"	n	namespace:physical::unit::British
physical::unit::British::fluid	src/constants.h	/^            namespace fluid {$/;"	n	namespace:physical::unit::British
physical::unit::British::fluid::dr	include/Eternia/constants.h	/^                const double dr = drachm;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::dr	src/constants.h	/^                const double dr = drachm;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::drachm	include/Eternia/constants.h	/^                const double drachm = 60.0*minims;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::drachm	src/constants.h	/^                const double drachm = 60.0*minims;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::drachms	include/Eternia/constants.h	/^                const double drachms = drachm;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::drachms	src/constants.h	/^                const double drachms = drachm;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::gal	include/Eternia/constants.h	/^                const double gal = gallon;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::gal	src/constants.h	/^                const double gal = gallon;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::gallon	include/Eternia/constants.h	/^                const double gallon = 4.0*quarts;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::gallon	src/constants.h	/^                const double gallon = 4.0*quarts;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::gallons	include/Eternia/constants.h	/^                const double gallons = gallon;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::gallons	src/constants.h	/^                const double gallons = gallon;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::gi	include/Eternia/constants.h	/^                const double gi = gill;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::gi	src/constants.h	/^                const double gi = gill;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::gill	include/Eternia/constants.h	/^                const double gill = 5.0*ounces;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::gill	src/constants.h	/^                const double gill = 5.0*ounces;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::gills	include/Eternia/constants.h	/^                const double gills = gill;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::gills	src/constants.h	/^                const double gills = gill;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::ounce	include/Eternia/constants.h	/^                const double ounce = 8.0*drachms;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::ounce	src/constants.h	/^                const double ounce = 8.0*drachms;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::ounces	include/Eternia/constants.h	/^                const double ounces = ounce;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::ounces	src/constants.h	/^                const double ounces = ounce;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::oz	include/Eternia/constants.h	/^                const double oz = ounce;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::oz	src/constants.h	/^                const double oz = ounce;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::pint	include/Eternia/constants.h	/^                const double pint = 4.0*gills;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::pint	src/constants.h	/^                const double pint = 4.0*gills;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::pints	include/Eternia/constants.h	/^                const double pints = pint;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::pints	src/constants.h	/^                const double pints = pint;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::pt	include/Eternia/constants.h	/^                const double pt = pint;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::pt	src/constants.h	/^                const double pt = pint;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::qt	include/Eternia/constants.h	/^                const double qt = quart;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::qt	src/constants.h	/^                const double qt = quart;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::quart	include/Eternia/constants.h	/^                const double quart = 2.0*pints;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::quart	src/constants.h	/^                const double quart = 2.0*pints;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::quarts	include/Eternia/constants.h	/^                const double quarts = quart;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::fluid::quarts	src/constants.h	/^                const double quarts = quart;$/;"	m	namespace:physical::unit::British::fluid
physical::unit::British::hundredweight	include/Eternia/constants.h	/^            const double hundredweight = 112.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit::British
physical::unit::British::hundredweight	src/constants.h	/^            const double hundredweight = 112.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit::British
physical::unit::British::peck	include/Eternia/constants.h	/^            const double peck = 2.0*fluid::gallons;$/;"	m	namespace:physical::unit::British
physical::unit::British::peck	src/constants.h	/^            const double peck = 2.0*fluid::gallons;$/;"	m	namespace:physical::unit::British
physical::unit::British::pecks	include/Eternia/constants.h	/^            const double pecks = peck;$/;"	m	namespace:physical::unit::British
physical::unit::British::pecks	src/constants.h	/^            const double pecks = peck;$/;"	m	namespace:physical::unit::British
physical::unit::British::pk	include/Eternia/constants.h	/^            const double pk = peck;$/;"	m	namespace:physical::unit::British
physical::unit::British::pk	src/constants.h	/^            const double pk = peck;$/;"	m	namespace:physical::unit::British
physical::unit::British::qr	include/Eternia/constants.h	/^            const double qr = quarter;$/;"	m	namespace:physical::unit::British
physical::unit::British::qr	src/constants.h	/^            const double qr = quarter;$/;"	m	namespace:physical::unit::British
physical::unit::British::quarter	include/Eternia/constants.h	/^            const double quarter = hundredweight\/4.0;$/;"	m	namespace:physical::unit::British
physical::unit::British::quarter	src/constants.h	/^            const double quarter = hundredweight\/4.0;$/;"	m	namespace:physical::unit::British
physical::unit::British::quarters	include/Eternia/constants.h	/^            const double quarters = quarter;$/;"	m	namespace:physical::unit::British
physical::unit::British::quarters	src/constants.h	/^            const double quarters = quarter;$/;"	m	namespace:physical::unit::British
physical::unit::British::tn	include/Eternia/constants.h	/^            const double tn = ton;$/;"	m	namespace:physical::unit::British
physical::unit::British::tn	src/constants.h	/^            const double tn = ton;$/;"	m	namespace:physical::unit::British
physical::unit::British::ton	include/Eternia/constants.h	/^            const double ton = 20.0*hundredweight;$/;"	m	namespace:physical::unit::British
physical::unit::British::ton	src/constants.h	/^            const double ton = 20.0*hundredweight;$/;"	m	namespace:physical::unit::British
physical::unit::British::tons	include/Eternia/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::British
physical::unit::British::tons	src/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::British
physical::unit::Btu	include/Eternia/constants.h	/^        const double Btu = 1055.06*Joules;$/;"	m	namespace:physical::unit
physical::unit::Btu	src/constants.h	/^        const double Btu = 1055.06*Joules;$/;"	m	namespace:physical::unit
physical::unit::C	include/Eternia/constants.h	/^        const double C = Coulomb;$/;"	m	namespace:physical::unit
physical::unit::C	src/constants.h	/^        const double C = Coulomb;$/;"	m	namespace:physical::unit
physical::unit::Ci	include/Eternia/constants.h	/^        const double Ci = Curie;$/;"	m	namespace:physical::unit
physical::unit::Ci	src/constants.h	/^        const double Ci = Curie;$/;"	m	namespace:physical::unit
physical::unit::Coulomb	include/Eternia/constants.h	/^        const double Coulomb = Ampere*second;$/;"	m	namespace:physical::unit
physical::unit::Coulomb	src/constants.h	/^        const double Coulomb = Ampere*second;$/;"	m	namespace:physical::unit
physical::unit::Coulombs	include/Eternia/constants.h	/^        const double Coulombs = Coulomb;$/;"	m	namespace:physical::unit
physical::unit::Coulombs	src/constants.h	/^        const double Coulombs = Coulomb;$/;"	m	namespace:physical::unit
physical::unit::Curie	include/Eternia/constants.h	/^        const double Curie = 3.7e+10*Becquerels;$/;"	m	namespace:physical::unit
physical::unit::Curie	src/constants.h	/^        const double Curie = 3.7e+10*Becquerels;$/;"	m	namespace:physical::unit
physical::unit::Curies	include/Eternia/constants.h	/^        const double Curies = Curie;$/;"	m	namespace:physical::unit
physical::unit::Curies	src/constants.h	/^        const double Curies = Curie;$/;"	m	namespace:physical::unit
physical::unit::EHz	include/Eternia/constants.h	/^        const double EHz = exaHertz;$/;"	m	namespace:physical::unit
physical::unit::EHz	src/constants.h	/^        const double EHz = exaHertz;$/;"	m	namespace:physical::unit
physical::unit::English	include/Eternia/constants.h	/^        namespace English = British;$/;"	x
physical::unit::English	src/constants.h	/^        namespace English = British;$/;"	x
physical::unit::F	include/Eternia/constants.h	/^        const double F = Farad;$/;"	m	namespace:physical::unit
physical::unit::F	src/constants.h	/^        const double F = Farad;$/;"	m	namespace:physical::unit
physical::unit::Farad	include/Eternia/constants.h	/^        const double Farad = Coulomb\/Volt;$/;"	m	namespace:physical::unit
physical::unit::Farad	src/constants.h	/^        const double Farad = Coulomb\/Volt;$/;"	m	namespace:physical::unit
physical::unit::Farads	include/Eternia/constants.h	/^        const double Farads = Farad;$/;"	m	namespace:physical::unit
physical::unit::Farads	src/constants.h	/^        const double Farads = Farad;$/;"	m	namespace:physical::unit
physical::unit::Fermi	include/Eternia/constants.h	/^        const double Fermi = meter\/1000000000000000.0;$/;"	m	namespace:physical::unit
physical::unit::Fermi	src/constants.h	/^        const double Fermi = meter\/1000000000000000.0;$/;"	m	namespace:physical::unit
physical::unit::Fermis	include/Eternia/constants.h	/^        const double Fermis = Fermi;$/;"	m	namespace:physical::unit
physical::unit::Fermis	src/constants.h	/^        const double Fermis = Fermi;$/;"	m	namespace:physical::unit
physical::unit::Franklin	include/Eternia/constants.h	/^        const double Franklin = 3.33564e-10*Coulombs;$/;"	m	namespace:physical::unit
physical::unit::Franklin	src/constants.h	/^        const double Franklin = 3.33564e-10*Coulombs;$/;"	m	namespace:physical::unit
physical::unit::Franklins	include/Eternia/constants.h	/^        const double Franklins = Franklin;$/;"	m	namespace:physical::unit
physical::unit::Franklins	src/constants.h	/^        const double Franklins = Franklin;$/;"	m	namespace:physical::unit
physical::unit::Frigorie	include/Eternia/constants.h	/^        const double Frigorie = kilocalorie;$/;"	m	namespace:physical::unit
physical::unit::Frigorie	src/constants.h	/^        const double Frigorie = kilocalorie;$/;"	m	namespace:physical::unit
physical::unit::Frigories	include/Eternia/constants.h	/^        const double Frigories = Frigorie;$/;"	m	namespace:physical::unit
physical::unit::Frigories	src/constants.h	/^        const double Frigories = Frigorie;$/;"	m	namespace:physical::unit
physical::unit::GHz	include/Eternia/constants.h	/^        const double GHz = gigaHertz;$/;"	m	namespace:physical::unit
physical::unit::GHz	src/constants.h	/^        const double GHz = gigaHertz;$/;"	m	namespace:physical::unit
physical::unit::Galileo	include/Eternia/constants.h	/^        const double Galileo = centimeters\/second\/second;$/;"	m	namespace:physical::unit
physical::unit::Galileo	src/constants.h	/^        const double Galileo = centimeters\/second\/second;$/;"	m	namespace:physical::unit
physical::unit::Galileos	include/Eternia/constants.h	/^        const double Galileos = Galileo;$/;"	m	namespace:physical::unit
physical::unit::Galileos	src/constants.h	/^        const double Galileos = Galileo;$/;"	m	namespace:physical::unit
physical::unit::Gauss	include/Eternia/constants.h	/^        const double Gauss = Tesla\/10000.0;$/;"	m	namespace:physical::unit
physical::unit::Gauss	src/constants.h	/^        const double Gauss = Tesla\/10000.0;$/;"	m	namespace:physical::unit
physical::unit::Gilbert	include/Eternia/constants.h	/^        const double Gilbert = 0.795775*Amperes;$/;"	m	namespace:physical::unit
physical::unit::Gilbert	src/constants.h	/^        const double Gilbert = 0.795775*Amperes;$/;"	m	namespace:physical::unit
physical::unit::Gilberts	include/Eternia/constants.h	/^        const double Gilberts = Gilbert;$/;"	m	namespace:physical::unit
physical::unit::Gilberts	src/constants.h	/^        const double Gilberts = Gilbert;$/;"	m	namespace:physical::unit
physical::unit::Gunters	include/Eternia/constants.h	/^        namespace Gunters {$/;"	n	namespace:physical::unit
physical::unit::Gunters	src/constants.h	/^        namespace Gunters {$/;"	n	namespace:physical::unit
physical::unit::Gunters::chain	include/Eternia/constants.h	/^            const double chain = unit::chain;$/;"	m	namespace:physical::unit::Gunters
physical::unit::Gunters::chain	src/constants.h	/^            const double chain = unit::chain;$/;"	m	namespace:physical::unit::Gunters
physical::unit::Gunters::chains	include/Eternia/constants.h	/^            const double chains = chain;$/;"	m	namespace:physical::unit::Gunters
physical::unit::Gunters::chains	src/constants.h	/^            const double chains = chain;$/;"	m	namespace:physical::unit::Gunters
physical::unit::H	include/Eternia/constants.h	/^        const double H = Henry;$/;"	m	namespace:physical::unit
physical::unit::H	src/constants.h	/^        const double H = Henry;$/;"	m	namespace:physical::unit
physical::unit::HP	include/Eternia/constants.h	/^        const double HP = horsepower;$/;"	m	namespace:physical::unit
physical::unit::HP	src/constants.h	/^        const double HP = horsepower;$/;"	m	namespace:physical::unit
physical::unit::Hefner	include/Eternia/constants.h	/^        namespace Hefner {$/;"	n	namespace:physical::unit
physical::unit::Hefner	src/constants.h	/^        namespace Hefner {$/;"	n	namespace:physical::unit
physical::unit::Hefner::candle	include/Eternia/constants.h	/^            const double candle = 0.9*unit::candles;$/;"	m	namespace:physical::unit::Hefner
physical::unit::Hefner::candle	src/constants.h	/^            const double candle = 0.9*unit::candles;$/;"	m	namespace:physical::unit::Hefner
physical::unit::Hefner::candles	include/Eternia/constants.h	/^            const double candles = candle;$/;"	m	namespace:physical::unit::Hefner
physical::unit::Hefner::candles	src/constants.h	/^            const double candles = candle;$/;"	m	namespace:physical::unit::Hefner
physical::unit::Henry	include/Eternia/constants.h	/^        const double Henry = Weber\/Ampere;$/;"	m	namespace:physical::unit
physical::unit::Henry	src/constants.h	/^        const double Henry = Weber\/Ampere;$/;"	m	namespace:physical::unit
physical::unit::Henrys	include/Eternia/constants.h	/^        const double Henrys = Henry;$/;"	m	namespace:physical::unit
physical::unit::Henrys	src/constants.h	/^        const double Henrys = Henry;$/;"	m	namespace:physical::unit
physical::unit::Hertz	include/Eternia/constants.h	/^        const double Hertz = 1.0\/second;$/;"	m	namespace:physical::unit
physical::unit::Hertz	src/constants.h	/^        const double Hertz = 1.0\/second;$/;"	m	namespace:physical::unit
physical::unit::Hz	include/Eternia/constants.h	/^        const double Hz = Hertz;$/;"	m	namespace:physical::unit
physical::unit::Hz	src/constants.h	/^        const double Hz = Hertz;$/;"	m	namespace:physical::unit
physical::unit::Imperial	include/Eternia/constants.h	/^        namespace Imperial = British;$/;"	x
physical::unit::Imperial	src/constants.h	/^        namespace Imperial = British;$/;"	x
physical::unit::J	include/Eternia/constants.h	/^        const double J = Joule;$/;"	m	namespace:physical::unit
physical::unit::J	src/constants.h	/^        const double J = Joule;$/;"	m	namespace:physical::unit
physical::unit::Joule	include/Eternia/constants.h	/^        const double Joule = Newton*meter;$/;"	m	namespace:physical::unit
physical::unit::Joule	src/constants.h	/^        const double Joule = Newton*meter;$/;"	m	namespace:physical::unit
physical::unit::Joules	include/Eternia/constants.h	/^        const double Joules = Joule;$/;"	m	namespace:physical::unit
physical::unit::Joules	src/constants.h	/^        const double Joules = Joule;$/;"	m	namespace:physical::unit
physical::unit::K	include/Eternia/constants.h	/^        const double K = Kelvin;$/;"	m	namespace:physical::unit
physical::unit::K	src/constants.h	/^        const double K = Kelvin;$/;"	m	namespace:physical::unit
physical::unit::Kelvin	include/Eternia/constants.h	/^        const double Kelvin = 1.0;$/;"	m	namespace:physical::unit
physical::unit::Kelvin	src/constants.h	/^        const double Kelvin = 1.0;$/;"	m	namespace:physical::unit
physical::unit::Kelvins	include/Eternia/constants.h	/^        const double Kelvins = Kelvin;$/;"	m	namespace:physical::unit
physical::unit::Kelvins	src/constants.h	/^        const double Kelvins = Kelvin;$/;"	m	namespace:physical::unit
physical::unit::Lambert	include/Eternia/constants.h	/^        const double Lambert = 10000.0*Blondels;$/;"	m	namespace:physical::unit
physical::unit::Lambert	src/constants.h	/^        const double Lambert = 10000.0*Blondels;$/;"	m	namespace:physical::unit
physical::unit::Lamberts	include/Eternia/constants.h	/^        const double Lamberts = Lambert;$/;"	m	namespace:physical::unit
physical::unit::Lamberts	src/constants.h	/^        const double Lamberts = Lambert;$/;"	m	namespace:physical::unit
physical::unit::M	include/Eternia/constants.h	/^        const double M = Maxwell;$/;"	m	namespace:physical::unit
physical::unit::M	src/constants.h	/^        const double M = Maxwell;$/;"	m	namespace:physical::unit
physical::unit::MHz	include/Eternia/constants.h	/^        const double MHz = megaHertz;$/;"	m	namespace:physical::unit
physical::unit::MHz	src/constants.h	/^        const double MHz = megaHertz;$/;"	m	namespace:physical::unit
physical::unit::MW	include/Eternia/constants.h	/^        const double MW = megaWatt;$/;"	m	namespace:physical::unit
physical::unit::MW	src/constants.h	/^        const double MW = megaWatt;$/;"	m	namespace:physical::unit
physical::unit::Maxwell	include/Eternia/constants.h	/^        const double Maxwell = Weber\/100000000.0;$/;"	m	namespace:physical::unit
physical::unit::Maxwell	src/constants.h	/^        const double Maxwell = Weber\/100000000.0;$/;"	m	namespace:physical::unit
physical::unit::Maxwells	include/Eternia/constants.h	/^        const double Maxwells = Maxwell;$/;"	m	namespace:physical::unit
physical::unit::Maxwells	src/constants.h	/^        const double Maxwells = Maxwell;$/;"	m	namespace:physical::unit
physical::unit::N	include/Eternia/constants.h	/^        const double N = Newton;$/;"	m	namespace:physical::unit
physical::unit::N	src/constants.h	/^        const double N = Newton;$/;"	m	namespace:physical::unit
physical::unit::Newton	include/Eternia/constants.h	/^        const double Newton = kilogram*meter\/(second*second);$/;"	m	namespace:physical::unit
physical::unit::Newton	src/constants.h	/^        const double Newton = kilogram*meter\/(second*second);$/;"	m	namespace:physical::unit
physical::unit::Newtons	include/Eternia/constants.h	/^        const double Newtons = Newton;$/;"	m	namespace:physical::unit
physical::unit::Newtons	src/constants.h	/^        const double Newtons = Newton;$/;"	m	namespace:physical::unit
physical::unit::Oe	include/Eternia/constants.h	/^        const double Oe = Oerstedt;$/;"	m	namespace:physical::unit
physical::unit::Oe	src/constants.h	/^        const double Oe = Oerstedt;$/;"	m	namespace:physical::unit
physical::unit::Oerstedt	include/Eternia/constants.h	/^        const double Oerstedt = 79.57747*Ampere\/meter;$/;"	m	namespace:physical::unit
physical::unit::Oerstedt	src/constants.h	/^        const double Oerstedt = 79.57747*Ampere\/meter;$/;"	m	namespace:physical::unit
physical::unit::Oerstedts	include/Eternia/constants.h	/^        const double Oerstedts = Oerstedt;$/;"	m	namespace:physical::unit
physical::unit::Oerstedts	src/constants.h	/^        const double Oerstedts = Oerstedt;$/;"	m	namespace:physical::unit
physical::unit::Ohm	include/Eternia/constants.h	/^        const double Ohm = Volt\/Ampere;$/;"	m	namespace:physical::unit
physical::unit::Ohm	src/constants.h	/^        const double Ohm = Volt\/Ampere;$/;"	m	namespace:physical::unit
physical::unit::Ohms	include/Eternia/constants.h	/^        const double Ohms = Ohm;$/;"	m	namespace:physical::unit
physical::unit::Ohms	src/constants.h	/^        const double Ohms = Ohm;$/;"	m	namespace:physical::unit
physical::unit::PHz	include/Eternia/constants.h	/^        const double PHz = petaHertz;$/;"	m	namespace:physical::unit
physical::unit::PHz	src/constants.h	/^        const double PHz = petaHertz;$/;"	m	namespace:physical::unit
physical::unit::Pa	include/Eternia/constants.h	/^        const double Pa = Pascal;$/;"	m	namespace:physical::unit
physical::unit::Pa	src/constants.h	/^        const double Pa = Pascal;$/;"	m	namespace:physical::unit
physical::unit::Pascal	include/Eternia/constants.h	/^        const double Pascal = Newton\/(meter*meter);$/;"	m	namespace:physical::unit
physical::unit::Pascal	src/constants.h	/^        const double Pascal = Newton\/(meter*meter);$/;"	m	namespace:physical::unit
physical::unit::Pascals	include/Eternia/constants.h	/^        const double Pascals = Pascal;$/;"	m	namespace:physical::unit
physical::unit::Pascals	src/constants.h	/^        const double Pascals = Pascal;$/;"	m	namespace:physical::unit
physical::unit::R	include/Eternia/constants.h	/^        const double R = Rankin;$/;"	m	namespace:physical::unit
physical::unit::R	src/constants.h	/^        const double R = Rankin;$/;"	m	namespace:physical::unit
physical::unit::Rankin	include/Eternia/constants.h	/^        const double Rankin = 1.8*Kelvins;$/;"	m	namespace:physical::unit
physical::unit::Rankin	src/constants.h	/^        const double Rankin = 1.8*Kelvins;$/;"	m	namespace:physical::unit
physical::unit::Rankins	include/Eternia/constants.h	/^        const double Rankins = Rankin;$/;"	m	namespace:physical::unit
physical::unit::Rankins	src/constants.h	/^        const double Rankins = Rankin;$/;"	m	namespace:physical::unit
physical::unit::Rutherford	include/Eternia/constants.h	/^        const double Rutherford = 1000000.0*Becquerels;$/;"	m	namespace:physical::unit
physical::unit::Rutherford	src/constants.h	/^        const double Rutherford = 1000000.0*Becquerels;$/;"	m	namespace:physical::unit
physical::unit::Rutherfords	include/Eternia/constants.h	/^        const double Rutherfords = Rutherford;$/;"	m	namespace:physical::unit
physical::unit::Rutherfords	src/constants.h	/^        const double Rutherfords = Rutherford;$/;"	m	namespace:physical::unit
physical::unit::S	include/Eternia/constants.h	/^        const double S = Siemens;$/;"	m	namespace:physical::unit
physical::unit::S	src/constants.h	/^        const double S = Siemens;$/;"	m	namespace:physical::unit
physical::unit::Siemens	include/Eternia/constants.h	/^        const double Siemens = mho;$/;"	m	namespace:physical::unit
physical::unit::Siemens	src/constants.h	/^        const double Siemens = mho;$/;"	m	namespace:physical::unit
physical::unit::T	include/Eternia/constants.h	/^        const double T = Tesla;$/;"	m	namespace:physical::unit
physical::unit::T	src/constants.h	/^        const double T = Tesla;$/;"	m	namespace:physical::unit
physical::unit::THz	include/Eternia/constants.h	/^        const double THz = teraHertz;$/;"	m	namespace:physical::unit
physical::unit::THz	src/constants.h	/^        const double THz = teraHertz;$/;"	m	namespace:physical::unit
physical::unit::Tesla	include/Eternia/constants.h	/^        const double Tesla = Weber\/(meter*meter);$/;"	m	namespace:physical::unit
physical::unit::Tesla	src/constants.h	/^        const double Tesla = Weber\/(meter*meter);$/;"	m	namespace:physical::unit
physical::unit::Teslas	include/Eternia/constants.h	/^        const double Teslas = Tesla;$/;"	m	namespace:physical::unit
physical::unit::Teslas	src/constants.h	/^        const double Teslas = Tesla;$/;"	m	namespace:physical::unit
physical::unit::Torr	include/Eternia/constants.h	/^        const double Torr = 133.3224*Pascals;$/;"	m	namespace:physical::unit
physical::unit::Torr	src/constants.h	/^        const double Torr = 133.3224*Pascals;$/;"	m	namespace:physical::unit
physical::unit::US	include/Eternia/constants.h	/^        namespace US { \/\/ short$/;"	n	namespace:physical::unit
physical::unit::US	include/Eternia/constants.h	/^        namespace US {$/;"	n	namespace:physical::unit
physical::unit::US	src/constants.h	/^        namespace US { \/\/ short$/;"	n	namespace:physical::unit
physical::unit::US	src/constants.h	/^        namespace US {$/;"	n	namespace:physical::unit
physical::unit::US::barrel	include/Eternia/constants.h	/^            const double barrel = 31.5*liquid::gallons;$/;"	m	namespace:physical::unit::US
physical::unit::US::barrel	src/constants.h	/^            const double barrel = 31.5*liquid::gallons;$/;"	m	namespace:physical::unit::US
physical::unit::US::barrels	include/Eternia/constants.h	/^            const double barrels = barrel;$/;"	m	namespace:physical::unit::US
physical::unit::US::barrels	src/constants.h	/^            const double barrels = barrel;$/;"	m	namespace:physical::unit::US
physical::unit::US::bbl	include/Eternia/constants.h	/^            const double bbl = barrel;$/;"	m	namespace:physical::unit::US
physical::unit::US::bbl	src/constants.h	/^            const double bbl = barrel;$/;"	m	namespace:physical::unit::US
physical::unit::US::bl	include/Eternia/constants.h	/^            const double bl = barrel;$/;"	m	namespace:physical::unit::US
physical::unit::US::bl	src/constants.h	/^            const double bl = barrel;$/;"	m	namespace:physical::unit::US
physical::unit::US::bu	include/Eternia/constants.h	/^            const double bu = bushel;$/;"	m	namespace:physical::unit::US
physical::unit::US::bu	src/constants.h	/^            const double bu = bushel;$/;"	m	namespace:physical::unit::US
physical::unit::US::bushel	include/Eternia/constants.h	/^            const double bushel = 4.0*pecks;$/;"	m	namespace:physical::unit::US
physical::unit::US::bushel	src/constants.h	/^            const double bushel = 4.0*pecks;$/;"	m	namespace:physical::unit::US
physical::unit::US::bushels	include/Eternia/constants.h	/^            const double bushels = bushel;$/;"	m	namespace:physical::unit::US
physical::unit::US::bushels	src/constants.h	/^            const double bushels = bushel;$/;"	m	namespace:physical::unit::US
physical::unit::US::cable_length	include/Eternia/constants.h	/^            const double cable_length = 120.0*fathoms;$/;"	m	namespace:physical::unit::US
physical::unit::US::cable_length	src/constants.h	/^            const double cable_length = 120.0*fathoms;$/;"	m	namespace:physical::unit::US
physical::unit::US::cable_lengths	include/Eternia/constants.h	/^            const double cable_lengths = cable_length;$/;"	m	namespace:physical::unit::US
physical::unit::US::cable_lengths	src/constants.h	/^            const double cable_lengths = cable_length;$/;"	m	namespace:physical::unit::US
physical::unit::US::cwt	include/Eternia/constants.h	/^            const double cwt = hundredweight;$/;"	m	namespace:physical::unit::US
physical::unit::US::cwt	src/constants.h	/^            const double cwt = hundredweight;$/;"	m	namespace:physical::unit::US
physical::unit::US::deadweight	include/Eternia/constants.h	/^            const double deadweight = ton;$/;"	m	namespace:physical::unit::US
physical::unit::US::deadweight	src/constants.h	/^            const double deadweight = ton;$/;"	m	namespace:physical::unit::US
physical::unit::US::dry	include/Eternia/constants.h	/^            namespace dry {$/;"	n	namespace:physical::unit::US
physical::unit::US::dry	src/constants.h	/^            namespace dry {$/;"	n	namespace:physical::unit::US
physical::unit::US::dry::pint	include/Eternia/constants.h	/^                const double pint = 550.61047*cc;$/;"	m	namespace:physical::unit::US::dry
physical::unit::US::dry::pint	src/constants.h	/^                const double pint = 550.61047*cc;$/;"	m	namespace:physical::unit::US::dry
physical::unit::US::dry::pints	include/Eternia/constants.h	/^                const double pints = pint;$/;"	m	namespace:physical::unit::US::dry
physical::unit::US::dry::pints	src/constants.h	/^                const double pints = pint;$/;"	m	namespace:physical::unit::US::dry
physical::unit::US::dry::pt	include/Eternia/constants.h	/^                const double pt = pint;$/;"	m	namespace:physical::unit::US::dry
physical::unit::US::dry::pt	src/constants.h	/^                const double pt = pint;$/;"	m	namespace:physical::unit::US::dry
physical::unit::US::dry::qt	include/Eternia/constants.h	/^                const double qt = quart;$/;"	m	namespace:physical::unit::US::dry
physical::unit::US::dry::qt	src/constants.h	/^                const double qt = quart;$/;"	m	namespace:physical::unit::US::dry
physical::unit::US::dry::quart	include/Eternia/constants.h	/^                const double quart = 2.0*pints;$/;"	m	namespace:physical::unit::US::dry
physical::unit::US::dry::quart	src/constants.h	/^                const double quart = 2.0*pints;$/;"	m	namespace:physical::unit::US::dry
physical::unit::US::dry::quarts	include/Eternia/constants.h	/^                const double quarts = quart;$/;"	m	namespace:physical::unit::US::dry
physical::unit::US::dry::quarts	src/constants.h	/^                const double quarts = quart;$/;"	m	namespace:physical::unit::US::dry
physical::unit::US::hundredweight	include/Eternia/constants.h	/^            const double hundredweight = 100.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit::US
physical::unit::US::hundredweight	src/constants.h	/^            const double hundredweight = 100.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit::US
physical::unit::US::liquid	include/Eternia/constants.h	/^            namespace liquid {$/;"	n	namespace:physical::unit::US
physical::unit::US::liquid	src/constants.h	/^            namespace liquid {$/;"	n	namespace:physical::unit::US
physical::unit::US::liquid::dr	include/Eternia/constants.h	/^                const double dr = dram;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::dr	src/constants.h	/^                const double dr = dram;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::dram	include/Eternia/constants.h	/^                const double dram = 60.0*minims;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::dram	src/constants.h	/^                const double dram = 60.0*minims;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::drams	include/Eternia/constants.h	/^                const double drams = dram;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::drams	src/constants.h	/^                const double drams = dram;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::gal	include/Eternia/constants.h	/^                const double gal = gallon;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::gal	src/constants.h	/^                const double gal = gallon;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::gallon	include/Eternia/constants.h	/^                const double gallon = 4.0*quarts;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::gallon	src/constants.h	/^                const double gallon = 4.0*quarts;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::gallons	include/Eternia/constants.h	/^                const double gallons = gallon;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::gallons	src/constants.h	/^                const double gallons = gallon;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::gill	include/Eternia/constants.h	/^                const double gill = 4.0*ounces;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::gill	src/constants.h	/^                const double gill = 4.0*ounces;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::gills	include/Eternia/constants.h	/^                const double gills = gill;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::gills	src/constants.h	/^                const double gills = gill;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::gl	include/Eternia/constants.h	/^                const double gl = gill;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::gl	src/constants.h	/^                const double gl = gill;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::magnum	include/Eternia/constants.h	/^                const double magnum = 2.0*quarts;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::magnum	src/constants.h	/^                const double magnum = 2.0*quarts;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::magnums	include/Eternia/constants.h	/^                const double magnums = magnum;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::magnums	src/constants.h	/^                const double magnums = magnum;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::ounce	include/Eternia/constants.h	/^                const double ounce = 8.0*drams;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::ounce	src/constants.h	/^                const double ounce = 8.0*drams;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::ounces	include/Eternia/constants.h	/^                const double ounces = ounce;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::ounces	src/constants.h	/^                const double ounces = ounce;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::oz	include/Eternia/constants.h	/^                const double oz = ounce;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::oz	src/constants.h	/^                const double oz = ounce;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::pint	include/Eternia/constants.h	/^                const double pint = 4.0*gills;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::pint	src/constants.h	/^                const double pint = 4.0*gills;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::pints	include/Eternia/constants.h	/^                const double pints = pint;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::pints	src/constants.h	/^                const double pints = pint;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::pt	include/Eternia/constants.h	/^                const double pt = pint;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::pt	src/constants.h	/^                const double pt = pint;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::qt	include/Eternia/constants.h	/^                const double qt = quart;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::qt	src/constants.h	/^                const double qt = quart;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::quart	include/Eternia/constants.h	/^                const double quart = 2.0*pints;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::quart	src/constants.h	/^                const double quart = 2.0*pints;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::quarts	include/Eternia/constants.h	/^                const double quarts = quart;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::liquid::quarts	src/constants.h	/^                const double quarts = quart;$/;"	m	namespace:physical::unit::US::liquid
physical::unit::US::peck	include/Eternia/constants.h	/^            const double peck = 8.0*dry::quarts;$/;"	m	namespace:physical::unit::US
physical::unit::US::peck	src/constants.h	/^            const double peck = 8.0*dry::quarts;$/;"	m	namespace:physical::unit::US
physical::unit::US::pecks	include/Eternia/constants.h	/^            const double pecks = peck;$/;"	m	namespace:physical::unit::US
physical::unit::US::pecks	src/constants.h	/^            const double pecks = peck;$/;"	m	namespace:physical::unit::US
physical::unit::US::pk	include/Eternia/constants.h	/^            const double pk = peck;$/;"	m	namespace:physical::unit::US
physical::unit::US::pk	src/constants.h	/^            const double pk = peck;$/;"	m	namespace:physical::unit::US
physical::unit::US::qr	include/Eternia/constants.h	/^            const double qr = quarter;$/;"	m	namespace:physical::unit::US
physical::unit::US::qr	src/constants.h	/^            const double qr = quarter;$/;"	m	namespace:physical::unit::US
physical::unit::US::quarter	include/Eternia/constants.h	/^            const double quarter = hundredweight\/4.0;$/;"	m	namespace:physical::unit::US
physical::unit::US::quarter	src/constants.h	/^            const double quarter = hundredweight\/4.0;$/;"	m	namespace:physical::unit::US
physical::unit::US::quarters	include/Eternia/constants.h	/^            const double quarters = quarter;$/;"	m	namespace:physical::unit::US
physical::unit::US::quarters	src/constants.h	/^            const double quarters = quarter;$/;"	m	namespace:physical::unit::US
physical::unit::US::tn	include/Eternia/constants.h	/^            const double tn = ton;$/;"	m	namespace:physical::unit::US
physical::unit::US::tn	src/constants.h	/^            const double tn = ton;$/;"	m	namespace:physical::unit::US
physical::unit::US::ton	include/Eternia/constants.h	/^            const double ton = 20.0*hundredweight;$/;"	m	namespace:physical::unit::US
physical::unit::US::ton	src/constants.h	/^            const double ton = 20.0*hundredweight;$/;"	m	namespace:physical::unit::US
physical::unit::US::tons	include/Eternia/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::US
physical::unit::US::tons	src/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::US
physical::unit::V	include/Eternia/constants.h	/^        const double V = Volt;$/;"	m	namespace:physical::unit
physical::unit::V	src/constants.h	/^        const double V = Volt;$/;"	m	namespace:physical::unit
physical::unit::Volt	include/Eternia/constants.h	/^        const double Volt = Watt\/Ampere;$/;"	m	namespace:physical::unit
physical::unit::Volt	src/constants.h	/^        const double Volt = Watt\/Ampere;$/;"	m	namespace:physical::unit
physical::unit::Volts	include/Eternia/constants.h	/^        const double Volts = Volt;$/;"	m	namespace:physical::unit
physical::unit::Volts	src/constants.h	/^        const double Volts = Volt;$/;"	m	namespace:physical::unit
physical::unit::W	include/Eternia/constants.h	/^        const double W = Watt;$/;"	m	namespace:physical::unit
physical::unit::W	src/constants.h	/^        const double W = Watt;$/;"	m	namespace:physical::unit
physical::unit::Watt	include/Eternia/constants.h	/^        const double Watt = Joule\/second;$/;"	m	namespace:physical::unit
physical::unit::Watt	src/constants.h	/^        const double Watt = Joule\/second;$/;"	m	namespace:physical::unit
physical::unit::Watts	include/Eternia/constants.h	/^        const double Watts = Watt;$/;"	m	namespace:physical::unit
physical::unit::Watts	src/constants.h	/^        const double Watts = Watt;$/;"	m	namespace:physical::unit
physical::unit::Wb	include/Eternia/constants.h	/^        const double Wb = Weber;$/;"	m	namespace:physical::unit
physical::unit::Wb	src/constants.h	/^        const double Wb = Weber;$/;"	m	namespace:physical::unit
physical::unit::Weber	include/Eternia/constants.h	/^        const double Weber = Volt*second;$/;"	m	namespace:physical::unit
physical::unit::Weber	src/constants.h	/^        const double Weber = Volt*second;$/;"	m	namespace:physical::unit
physical::unit::Webers	include/Eternia/constants.h	/^        const double Webers = Weber;$/;"	m	namespace:physical::unit
physical::unit::Webers	src/constants.h	/^        const double Webers = Weber;$/;"	m	namespace:physical::unit
physical::unit::Xunit	include/Eternia/constants.h	/^        const double Xunit = 1.00202e-13*meters;$/;"	m	namespace:physical::unit
physical::unit::Xunit	src/constants.h	/^        const double Xunit = 1.00202e-13*meters;$/;"	m	namespace:physical::unit
physical::unit::Xunits	include/Eternia/constants.h	/^        const double Xunits = Xunit;$/;"	m	namespace:physical::unit
physical::unit::Xunits	src/constants.h	/^        const double Xunits = Xunit;$/;"	m	namespace:physical::unit
physical::unit::YHz	include/Eternia/constants.h	/^        const double YHz = yottaHertz;$/;"	m	namespace:physical::unit
physical::unit::YHz	src/constants.h	/^        const double YHz = yottaHertz;$/;"	m	namespace:physical::unit
physical::unit::ZHz	include/Eternia/constants.h	/^        const double ZHz = zettaHertz;$/;"	m	namespace:physical::unit
physical::unit::ZHz	src/constants.h	/^        const double ZHz = zettaHertz;$/;"	m	namespace:physical::unit
physical::unit::a	include/Eternia/constants.h	/^        const double a = are;$/;"	m	namespace:physical::unit
physical::unit::a	src/constants.h	/^        const double a = are;$/;"	m	namespace:physical::unit
physical::unit::acre	include/Eternia/constants.h	/^        const double acre = 4.0*roods;$/;"	m	namespace:physical::unit
physical::unit::acre	src/constants.h	/^        const double acre = 4.0*roods;$/;"	m	namespace:physical::unit
physical::unit::acres	include/Eternia/constants.h	/^        const double acres = acre;$/;"	m	namespace:physical::unit
physical::unit::acres	src/constants.h	/^        const double acres = acre;$/;"	m	namespace:physical::unit
physical::unit::admiralty	include/Eternia/constants.h	/^        namespace admiralty {$/;"	n	namespace:physical::unit
physical::unit::admiralty	src/constants.h	/^        namespace admiralty {$/;"	n	namespace:physical::unit
physical::unit::admiralty::knot	include/Eternia/constants.h	/^            const double knot = 6980.0*feet\/hour;$/;"	m	namespace:physical::unit::admiralty
physical::unit::admiralty::knot	src/constants.h	/^            const double knot = 6980.0*feet\/hour;$/;"	m	namespace:physical::unit::admiralty
physical::unit::admiralty::knots	include/Eternia/constants.h	/^            const double knots = knot;$/;"	m	namespace:physical::unit::admiralty
physical::unit::admiralty::knots	src/constants.h	/^            const double knots = knot;$/;"	m	namespace:physical::unit::admiralty
physical::unit::ap	include/Eternia/constants.h	/^        namespace ap = apothecary;$/;"	x
physical::unit::ap	src/constants.h	/^        namespace ap = apothecary;$/;"	x
physical::unit::apostilb	include/Eternia/constants.h	/^        const double apostilb = candelas\/meter\/meter;$/;"	m	namespace:physical::unit
physical::unit::apostilb	src/constants.h	/^        const double apostilb = candelas\/meter\/meter;$/;"	m	namespace:physical::unit
physical::unit::apostilbs	include/Eternia/constants.h	/^        const double apostilbs = apostilb;$/;"	m	namespace:physical::unit
physical::unit::apostilbs	src/constants.h	/^        const double apostilbs = apostilb;$/;"	m	namespace:physical::unit
physical::unit::apothecary	include/Eternia/constants.h	/^        namespace apothecary { \/\/ weight$/;"	n	namespace:physical::unit
physical::unit::apothecary	src/constants.h	/^        namespace apothecary { \/\/ weight$/;"	n	namespace:physical::unit
physical::unit::apothecary::dr	include/Eternia/constants.h	/^            const double dr = dram;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::dr	src/constants.h	/^            const double dr = dram;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::dram	include/Eternia/constants.h	/^            const double dram = 3.0*scruples;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::dram	src/constants.h	/^            const double dram = 3.0*scruples;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::drams	include/Eternia/constants.h	/^            const double drams = dram;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::drams	src/constants.h	/^            const double drams = dram;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::lb	include/Eternia/constants.h	/^            const double lb = pound;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::lb	src/constants.h	/^            const double lb = pound;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::ounce	include/Eternia/constants.h	/^            const double ounce = 8.0*drams;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::ounce	src/constants.h	/^            const double ounce = 8.0*drams;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::ounces	include/Eternia/constants.h	/^            const double ounces = ounce;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::ounces	src/constants.h	/^            const double ounces = ounce;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::oz	include/Eternia/constants.h	/^            const double oz = ounce;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::oz	src/constants.h	/^            const double oz = ounce;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::pound	include/Eternia/constants.h	/^            const double pound = 12.0*ounces;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::pound	src/constants.h	/^            const double pound = 12.0*ounces;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::pounds	include/Eternia/constants.h	/^            const double pounds = pound;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::pounds	src/constants.h	/^            const double pounds = pound;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::s	include/Eternia/constants.h	/^            const double s = scruple;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::s	src/constants.h	/^            const double s = scruple;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::scruple	include/Eternia/constants.h	/^            const double scruple = 20.0*grains;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::scruple	src/constants.h	/^            const double scruple = 20.0*grains;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::scruples	include/Eternia/constants.h	/^            const double scruples = scruple;$/;"	m	namespace:physical::unit::apothecary
physical::unit::apothecary::scruples	src/constants.h	/^            const double scruples = scruple;$/;"	m	namespace:physical::unit::apothecary
physical::unit::arc	include/Eternia/constants.h	/^        namespace arc {$/;"	n	namespace:physical::unit
physical::unit::arc	src/constants.h	/^        namespace arc {$/;"	n	namespace:physical::unit
physical::unit::arc::centesimal	include/Eternia/constants.h	/^            namespace centesimal {$/;"	n	namespace:physical::unit::arc
physical::unit::arc::centesimal	src/constants.h	/^            namespace centesimal {$/;"	n	namespace:physical::unit::arc
physical::unit::arc::centesimal::min	include/Eternia/constants.h	/^                const double min = minute;$/;"	m	namespace:physical::unit::arc::centesimal
physical::unit::arc::centesimal::min	src/constants.h	/^                const double min = minute;$/;"	m	namespace:physical::unit::arc::centesimal
physical::unit::arc::centesimal::minute	include/Eternia/constants.h	/^                const double minute = grade\/100.0;$/;"	m	namespace:physical::unit::arc::centesimal
physical::unit::arc::centesimal::minute	src/constants.h	/^                const double minute = grade\/100.0;$/;"	m	namespace:physical::unit::arc::centesimal
physical::unit::arc::centesimal::minutes	include/Eternia/constants.h	/^                const double minutes = minute;$/;"	m	namespace:physical::unit::arc::centesimal
physical::unit::arc::centesimal::minutes	src/constants.h	/^                const double minutes = minute;$/;"	m	namespace:physical::unit::arc::centesimal
physical::unit::arc::centesimal::sec	include/Eternia/constants.h	/^                const double sec = second;$/;"	m	namespace:physical::unit::arc::centesimal
physical::unit::arc::centesimal::sec	src/constants.h	/^                const double sec = second;$/;"	m	namespace:physical::unit::arc::centesimal
physical::unit::arc::centesimal::second	include/Eternia/constants.h	/^                const double second = grade\/10000.0;$/;"	m	namespace:physical::unit::arc::centesimal
physical::unit::arc::centesimal::second	src/constants.h	/^                const double second = grade\/10000.0;$/;"	m	namespace:physical::unit::arc::centesimal
physical::unit::arc::centesimal::seconds	include/Eternia/constants.h	/^                const double seconds = second;$/;"	m	namespace:physical::unit::arc::centesimal
physical::unit::arc::centesimal::seconds	src/constants.h	/^                const double seconds = second;$/;"	m	namespace:physical::unit::arc::centesimal
physical::unit::arc::degree	include/Eternia/constants.h	/^            const double degree = pi\/180.0;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::degree	src/constants.h	/^            const double degree = pi\/180.0;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::degrees	include/Eternia/constants.h	/^            const double degrees = degree;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::degrees	src/constants.h	/^            const double degrees = degree;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::grade	include/Eternia/constants.h	/^            const double grade = 0.9*degrees;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::grade	src/constants.h	/^            const double grade = 0.9*degrees;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::grades	include/Eternia/constants.h	/^            const double grades = grade;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::grades	src/constants.h	/^            const double grades = grade;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::min	include/Eternia/constants.h	/^            const double min = minute;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::min	src/constants.h	/^            const double min = minute;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::minute	include/Eternia/constants.h	/^            const double minute = degree\/60.0;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::minute	src/constants.h	/^            const double minute = degree\/60.0;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::minutes	include/Eternia/constants.h	/^            const double minutes = minute;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::minutes	src/constants.h	/^            const double minutes = minute;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::sec	include/Eternia/constants.h	/^            const double sec = second;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::sec	src/constants.h	/^            const double sec = second;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::second	include/Eternia/constants.h	/^            const double second = minute\/60.0;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::second	src/constants.h	/^            const double second = minute\/60.0;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::seconds	include/Eternia/constants.h	/^            const double seconds = second;$/;"	m	namespace:physical::unit::arc
physical::unit::arc::seconds	src/constants.h	/^            const double seconds = second;$/;"	m	namespace:physical::unit::arc
physical::unit::are	include/Eternia/constants.h	/^        const double are = 100.0*meter*meter;$/;"	m	namespace:physical::unit
physical::unit::are	src/constants.h	/^        const double are = 100.0*meter*meter;$/;"	m	namespace:physical::unit
physical::unit::ares	include/Eternia/constants.h	/^        const double ares = are;$/;"	m	namespace:physical::unit
physical::unit::ares	src/constants.h	/^        const double ares = are;$/;"	m	namespace:physical::unit
physical::unit::arpentcan	include/Eternia/constants.h	/^        const double arpentcan = 27.52*statute::miles;$/;"	m	namespace:physical::unit
physical::unit::arpentcan	src/constants.h	/^        const double arpentcan = 27.52*statute::miles;$/;"	m	namespace:physical::unit
physical::unit::arpentcans	include/Eternia/constants.h	/^        const double arpentcans = arpentcan;$/;"	m	namespace:physical::unit
physical::unit::arpentcans	src/constants.h	/^        const double arpentcans = arpentcan;$/;"	m	namespace:physical::unit
physical::unit::arpentlin	include/Eternia/constants.h	/^        const double arpentlin = 191.835*feet;$/;"	m	namespace:physical::unit
physical::unit::arpentlin	src/constants.h	/^        const double arpentlin = 191.835*feet;$/;"	m	namespace:physical::unit
physical::unit::arpentlins	include/Eternia/constants.h	/^        const double arpentlins = arpentlin;$/;"	m	namespace:physical::unit
physical::unit::arpentlins	src/constants.h	/^        const double arpentlins = arpentlin;$/;"	m	namespace:physical::unit
physical::unit::astronomical_unit	include/Eternia/constants.h	/^        const double astronomical_unit = 1.49597871e11*meters;$/;"	m	namespace:physical::unit
physical::unit::astronomical_unit	src/constants.h	/^        const double astronomical_unit = 1.49597871e11*meters;$/;"	m	namespace:physical::unit
physical::unit::astronomical_units	include/Eternia/constants.h	/^        const double astronomical_units = astronomical_unit;$/;"	m	namespace:physical::unit
physical::unit::astronomical_units	src/constants.h	/^        const double astronomical_units = astronomical_unit;$/;"	m	namespace:physical::unit
physical::unit::atm	include/Eternia/constants.h	/^        const double atm = atmosphere;$/;"	m	namespace:physical::unit
physical::unit::atm	src/constants.h	/^        const double atm = atmosphere;$/;"	m	namespace:physical::unit
physical::unit::atmosphere	include/Eternia/constants.h	/^        const double atmosphere = 760.0*Torr;$/;"	m	namespace:physical::unit
physical::unit::atmosphere	src/constants.h	/^        const double atmosphere = 760.0*Torr;$/;"	m	namespace:physical::unit
physical::unit::atmospheres	include/Eternia/constants.h	/^        const double atmospheres = atmosphere;$/;"	m	namespace:physical::unit
physical::unit::atmospheres	src/constants.h	/^        const double atmospheres = atmosphere;$/;"	m	namespace:physical::unit
physical::unit::av	include/Eternia/constants.h	/^        namespace av = avoirdupois;$/;"	x
physical::unit::av	src/constants.h	/^        namespace av = avoirdupois;$/;"	x
physical::unit::avdp	include/Eternia/constants.h	/^        namespace avdp = avoirdupois;$/;"	x
physical::unit::avdp	src/constants.h	/^        namespace avdp = avoirdupois;$/;"	x
physical::unit::avoirdupois	include/Eternia/constants.h	/^        namespace avoirdupois { \/\/ weight$/;"	n	namespace:physical::unit
physical::unit::avoirdupois	src/constants.h	/^        namespace avoirdupois { \/\/ weight$/;"	n	namespace:physical::unit
physical::unit::avoirdupois::dr	include/Eternia/constants.h	/^            const double dr = dram;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::dr	src/constants.h	/^            const double dr = dram;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::dram	include/Eternia/constants.h	/^            const double dram = ounce\/16.0;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::dram	src/constants.h	/^            const double dram = ounce\/16.0;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::drams	include/Eternia/constants.h	/^            const double drams = dram;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::drams	src/constants.h	/^            const double drams = dram;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::lb	include/Eternia/constants.h	/^            const double lb = pound;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::lb	src/constants.h	/^            const double lb = pound;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::ounce	include/Eternia/constants.h	/^            const double ounce = pound\/16.0;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::ounce	src/constants.h	/^            const double ounce = pound\/16.0;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::ounces	include/Eternia/constants.h	/^            const double ounces = ounce;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::ounces	src/constants.h	/^            const double ounces = ounce;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::oz	include/Eternia/constants.h	/^            const double oz = ounce;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::oz	src/constants.h	/^            const double oz = ounce;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::pound	include/Eternia/constants.h	/^            const double pound = 7000.0*grains;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::pound	src/constants.h	/^            const double pound = 7000.0*grains;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::pounds	include/Eternia/constants.h	/^            const double pounds = pound;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::avoirdupois::pounds	src/constants.h	/^            const double pounds = pound;$/;"	m	namespace:physical::unit::avoirdupois
physical::unit::b	include/Eternia/constants.h	/^        const double b = barn;$/;"	m	namespace:physical::unit
physical::unit::b	src/constants.h	/^        const double b = barn;$/;"	m	namespace:physical::unit
physical::unit::bag	include/Eternia/constants.h	/^        const double bag = 94.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
physical::unit::bag	src/constants.h	/^        const double bag = 94.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
physical::unit::bags	include/Eternia/constants.h	/^        const double bags = bag;$/;"	m	namespace:physical::unit
physical::unit::bags	src/constants.h	/^        const double bags = bag;$/;"	m	namespace:physical::unit
physical::unit::bakers	include/Eternia/constants.h	/^        namespace bakers {$/;"	n	namespace:physical::unit
physical::unit::bakers	src/constants.h	/^        namespace bakers {$/;"	n	namespace:physical::unit
physical::unit::bakers::doz	include/Eternia/constants.h	/^            const double doz = dozen;$/;"	m	namespace:physical::unit::bakers
physical::unit::bakers::doz	src/constants.h	/^            const double doz = dozen;$/;"	m	namespace:physical::unit::bakers
physical::unit::bakers::dozen	include/Eternia/constants.h	/^            const double dozen = 13.0;$/;"	m	namespace:physical::unit::bakers
physical::unit::bakers::dozen	src/constants.h	/^            const double dozen = 13.0;$/;"	m	namespace:physical::unit::bakers
physical::unit::bakers::dz	include/Eternia/constants.h	/^            const double dz = dozen;$/;"	m	namespace:physical::unit::bakers
physical::unit::bakers::dz	src/constants.h	/^            const double dz = dozen;$/;"	m	namespace:physical::unit::bakers
physical::unit::bar	include/Eternia/constants.h	/^        const double bar = 10000.0*Pascals;$/;"	m	namespace:physical::unit
physical::unit::bar	src/constants.h	/^        const double bar = 10000.0*Pascals;$/;"	m	namespace:physical::unit
physical::unit::barleycorn	include/Eternia/constants.h	/^        const double barleycorn = inch\/3.0;$/;"	m	namespace:physical::unit
physical::unit::barleycorn	src/constants.h	/^        const double barleycorn = inch\/3.0;$/;"	m	namespace:physical::unit
physical::unit::barleycorns	include/Eternia/constants.h	/^        const double barleycorns = barleycorn;$/;"	m	namespace:physical::unit
physical::unit::barleycorns	src/constants.h	/^        const double barleycorns = barleycorn;$/;"	m	namespace:physical::unit
physical::unit::barn	include/Eternia/constants.h	/^        const double barn = 1.0e-28*meter*meter;$/;"	m	namespace:physical::unit
physical::unit::barn	src/constants.h	/^        const double barn = 1.0e-28*meter*meter;$/;"	m	namespace:physical::unit
physical::unit::barns	include/Eternia/constants.h	/^        const double barns = barn;$/;"	m	namespace:physical::unit
physical::unit::barns	src/constants.h	/^        const double barns = barn;$/;"	m	namespace:physical::unit
physical::unit::bars	include/Eternia/constants.h	/^        const double bars = bar;$/;"	m	namespace:physical::unit
physical::unit::bars	src/constants.h	/^        const double bars = bar;$/;"	m	namespace:physical::unit
physical::unit::boardfeet	include/Eternia/constants.h	/^        const double boardfeet = boardfoot;$/;"	m	namespace:physical::unit
physical::unit::boardfeet	src/constants.h	/^        const double boardfeet = boardfoot;$/;"	m	namespace:physical::unit
physical::unit::boardfoot	include/Eternia/constants.h	/^        const double boardfoot = 144.0*inch*inch*inch;$/;"	m	namespace:physical::unit
physical::unit::boardfoot	src/constants.h	/^        const double boardfoot = 144.0*inch*inch*inch;$/;"	m	namespace:physical::unit
physical::unit::bolt	include/Eternia/constants.h	/^        const double bolt = 40.0*yards;$/;"	m	namespace:physical::unit
physical::unit::bolt	src/constants.h	/^        const double bolt = 40.0*yards;$/;"	m	namespace:physical::unit
physical::unit::bolts	include/Eternia/constants.h	/^        const double bolts = bolt;$/;"	m	namespace:physical::unit
physical::unit::bolts	src/constants.h	/^        const double bolts = bolt;$/;"	m	namespace:physical::unit
physical::unit::bottommeasure	include/Eternia/constants.h	/^        const double bottommeasure = inch\/40.0;$/;"	m	namespace:physical::unit
physical::unit::bottommeasure	src/constants.h	/^        const double bottommeasure = inch\/40.0;$/;"	m	namespace:physical::unit
physical::unit::bottommeasures	include/Eternia/constants.h	/^        const double bottommeasures = bottommeasure;$/;"	m	namespace:physical::unit
physical::unit::bottommeasures	src/constants.h	/^        const double bottommeasures = bottommeasure;$/;"	m	namespace:physical::unit
physical::unit::cal	include/Eternia/constants.h	/^        const double cal = calorie;$/;"	m	namespace:physical::unit
physical::unit::cal	src/constants.h	/^        const double cal = calorie;$/;"	m	namespace:physical::unit
physical::unit::calorie	include/Eternia/constants.h	/^        const double calorie = 4.1868*Joules;$/;"	m	namespace:physical::unit
physical::unit::calorie	src/constants.h	/^        const double calorie = 4.1868*Joules;$/;"	m	namespace:physical::unit
physical::unit::calories	include/Eternia/constants.h	/^        const double calories = calorie;$/;"	m	namespace:physical::unit
physical::unit::calories	src/constants.h	/^        const double calories = calorie;$/;"	m	namespace:physical::unit
physical::unit::candela	include/Eternia/constants.h	/^        const double candela = 1.0;$/;"	m	namespace:physical::unit
physical::unit::candela	src/constants.h	/^        const double candela = 1.0;$/;"	m	namespace:physical::unit
physical::unit::candelas	include/Eternia/constants.h	/^        const double candelas = candela;$/;"	m	namespace:physical::unit
physical::unit::candelas	src/constants.h	/^        const double candelas = candela;$/;"	m	namespace:physical::unit
physical::unit::candle	include/Eternia/constants.h	/^        const double candle = 1.02*candelas;$/;"	m	namespace:physical::unit
physical::unit::candle	src/constants.h	/^        const double candle = 1.02*candelas;$/;"	m	namespace:physical::unit
physical::unit::candles	include/Eternia/constants.h	/^        const double candles = candle;$/;"	m	namespace:physical::unit
physical::unit::candles	src/constants.h	/^        const double candles = candle;$/;"	m	namespace:physical::unit
physical::unit::cc	include/Eternia/constants.h	/^        const double cc = milliliter;$/;"	m	namespace:physical::unit
physical::unit::cc	src/constants.h	/^        const double cc = milliliter;$/;"	m	namespace:physical::unit
physical::unit::cd	include/Eternia/constants.h	/^        const double cd = candela;$/;"	m	namespace:physical::unit
physical::unit::cd	src/constants.h	/^        const double cd = candela;$/;"	m	namespace:physical::unit
physical::unit::cent	include/Eternia/constants.h	/^        const double cent = dollar\/100.0;$/;"	m	namespace:physical::unit
physical::unit::cent	src/constants.h	/^        const double cent = dollar\/100.0;$/;"	m	namespace:physical::unit
physical::unit::cental	include/Eternia/constants.h	/^        const double cental = 100.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
physical::unit::cental	src/constants.h	/^        const double cental = 100.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
physical::unit::centals	include/Eternia/constants.h	/^        const double centals = cental;$/;"	m	namespace:physical::unit
physical::unit::centals	src/constants.h	/^        const double centals = cental;$/;"	m	namespace:physical::unit
physical::unit::centimeter	include/Eternia/constants.h	/^        const double centimeter = meters\/100.0;$/;"	m	namespace:physical::unit
physical::unit::centimeter	src/constants.h	/^        const double centimeter = meters\/100.0;$/;"	m	namespace:physical::unit
physical::unit::centimeters	include/Eternia/constants.h	/^        const double centimeters = centimeter;$/;"	m	namespace:physical::unit
physical::unit::centimeters	src/constants.h	/^        const double centimeters = centimeter;$/;"	m	namespace:physical::unit
physical::unit::cents	include/Eternia/constants.h	/^        const double cents = cent;$/;"	m	namespace:physical::unit
physical::unit::cents	src/constants.h	/^        const double cents = cent;$/;"	m	namespace:physical::unit
physical::unit::centuries	include/Eternia/constants.h	/^        const double centuries = century;$/;"	m	namespace:physical::unit
physical::unit::centuries	src/constants.h	/^        const double centuries = century;$/;"	m	namespace:physical::unit
physical::unit::century	include/Eternia/constants.h	/^        const double century = 100.0*years;$/;"	m	namespace:physical::unit
physical::unit::century	src/constants.h	/^        const double century = 100.0*years;$/;"	m	namespace:physical::unit
physical::unit::cfs	include/Eternia/constants.h	/^        const double cfs = foot*foot*foot\/second;$/;"	m	namespace:physical::unit
physical::unit::cfs	src/constants.h	/^        const double cfs = foot*foot*foot\/second;$/;"	m	namespace:physical::unit
physical::unit::ch	include/Eternia/constants.h	/^        const double ch = chain;$/;"	m	namespace:physical::unit
physical::unit::ch	src/constants.h	/^        const double ch = chain;$/;"	m	namespace:physical::unit
physical::unit::chain	include/Eternia/constants.h	/^        const double chain = 4.0*rods;$/;"	m	namespace:physical::unit
physical::unit::chain	src/constants.h	/^        const double chain = 4.0*rods;$/;"	m	namespace:physical::unit
physical::unit::chains	include/Eternia/constants.h	/^        const double chains = chain;$/;"	m	namespace:physical::unit
physical::unit::chains	src/constants.h	/^        const double chains = chain;$/;"	m	namespace:physical::unit
physical::unit::circular_inch	include/Eternia/constants.h	/^        const double circular_inch = 0.25*pi*inch*inch;$/;"	m	namespace:physical::unit
physical::unit::circular_inch	src/constants.h	/^        const double circular_inch = 0.25*pi*inch*inch;$/;"	m	namespace:physical::unit
physical::unit::circular_inches	include/Eternia/constants.h	/^        const double circular_inches = circular_inch;$/;"	m	namespace:physical::unit
physical::unit::circular_inches	src/constants.h	/^        const double circular_inches = circular_inch;$/;"	m	namespace:physical::unit
physical::unit::circular_mil	include/Eternia/constants.h	/^        const double circular_mil = 0.25*pi*mil*mil;$/;"	m	namespace:physical::unit
physical::unit::circular_mil	src/constants.h	/^        const double circular_mil = 0.25*pi*mil*mil;$/;"	m	namespace:physical::unit
physical::unit::circular_mils	include/Eternia/constants.h	/^        const double circular_mils = circular_mil;$/;"	m	namespace:physical::unit
physical::unit::circular_mils	src/constants.h	/^        const double circular_mils = circular_mil;$/;"	m	namespace:physical::unit
physical::unit::cm	include/Eternia/constants.h	/^        const double cm = centimeter;$/;"	m	namespace:physical::unit
physical::unit::cm	src/constants.h	/^        const double cm = centimeter;$/;"	m	namespace:physical::unit
physical::unit::coomb	include/Eternia/constants.h	/^        const double coomb = 4.0*US::bushels;$/;"	m	namespace:physical::unit
physical::unit::coomb	src/constants.h	/^        const double coomb = 4.0*US::bushels;$/;"	m	namespace:physical::unit
physical::unit::coombs	include/Eternia/constants.h	/^        const double coombs = coomb;$/;"	m	namespace:physical::unit
physical::unit::coombs	src/constants.h	/^        const double coombs = coomb;$/;"	m	namespace:physical::unit
physical::unit::cord	include/Eternia/constants.h	/^        const double cord = 128.0*(ft*ft*ft);$/;"	m	namespace:physical::unit
physical::unit::cord	src/constants.h	/^        const double cord = 128.0*(ft*ft*ft);$/;"	m	namespace:physical::unit
physical::unit::cordfeet	include/Eternia/constants.h	/^        const double cordfeet = cordfoot;$/;"	m	namespace:physical::unit
physical::unit::cordfeet	src/constants.h	/^        const double cordfeet = cordfoot;$/;"	m	namespace:physical::unit
physical::unit::cordfoot	include/Eternia/constants.h	/^        const double cordfoot = cord;$/;"	m	namespace:physical::unit
physical::unit::cordfoot	src/constants.h	/^        const double cordfoot = cord;$/;"	m	namespace:physical::unit
physical::unit::cords	include/Eternia/constants.h	/^        const double cords = cord;$/;"	m	namespace:physical::unit
physical::unit::cords	src/constants.h	/^        const double cords = cord;$/;"	m	namespace:physical::unit
physical::unit::crith	include/Eternia/constants.h	/^        const double crith = 0.0906*grams;$/;"	m	namespace:physical::unit
physical::unit::crith	src/constants.h	/^        const double crith = 0.0906*grams;$/;"	m	namespace:physical::unit
physical::unit::criths	include/Eternia/constants.h	/^        const double criths = crith;$/;"	m	namespace:physical::unit
physical::unit::criths	src/constants.h	/^        const double criths = crith;$/;"	m	namespace:physical::unit
physical::unit::cubit	include/Eternia/constants.h	/^        const double cubit = 18.0*inches;$/;"	m	namespace:physical::unit
physical::unit::cubit	src/constants.h	/^        const double cubit = 18.0*inches;$/;"	m	namespace:physical::unit
physical::unit::cubits	include/Eternia/constants.h	/^        const double cubits = cubit;$/;"	m	namespace:physical::unit
physical::unit::cubits	src/constants.h	/^        const double cubits = cubit;$/;"	m	namespace:physical::unit
physical::unit::cup	include/Eternia/constants.h	/^        const double cup = 8.0*US::liquid::ounces;$/;"	m	namespace:physical::unit
physical::unit::cup	src/constants.h	/^        const double cup = 8.0*US::liquid::ounces;$/;"	m	namespace:physical::unit
physical::unit::cups	include/Eternia/constants.h	/^        const double cups = cup;$/;"	m	namespace:physical::unit
physical::unit::cups	src/constants.h	/^        const double cups = cup;$/;"	m	namespace:physical::unit
physical::unit::da	include/Eternia/constants.h	/^        const double da = day;$/;"	m	namespace:physical::unit
physical::unit::da	src/constants.h	/^        const double da = day;$/;"	m	namespace:physical::unit
physical::unit::day	include/Eternia/constants.h	/^        const double day = 24.0*hours;$/;"	m	namespace:physical::unit
physical::unit::day	src/constants.h	/^        const double day = 24.0*hours;$/;"	m	namespace:physical::unit
physical::unit::days	include/Eternia/constants.h	/^        const double days = day;$/;"	m	namespace:physical::unit
physical::unit::days	src/constants.h	/^        const double days = day;$/;"	m	namespace:physical::unit
physical::unit::decade	include/Eternia/constants.h	/^        const double decade = 10.0*years;$/;"	m	namespace:physical::unit
physical::unit::decade	src/constants.h	/^        const double decade = 10.0*years;$/;"	m	namespace:physical::unit
physical::unit::decades	include/Eternia/constants.h	/^        const double decades = decade;$/;"	m	namespace:physical::unit
physical::unit::decades	src/constants.h	/^        const double decades = decade;$/;"	m	namespace:physical::unit
physical::unit::decimeter	include/Eternia/constants.h	/^        const double decimeter = meters\/10.0;$/;"	m	namespace:physical::unit
physical::unit::decimeter	src/constants.h	/^        const double decimeter = meters\/10.0;$/;"	m	namespace:physical::unit
physical::unit::decimeters	include/Eternia/constants.h	/^        const double decimeters = decimeter;$/;"	m	namespace:physical::unit
physical::unit::decimeters	src/constants.h	/^        const double decimeters = decimeter;$/;"	m	namespace:physical::unit
physical::unit::decinanometer	include/Eternia/constants.h	/^        const double decinanometer = meter\/10000000000.0;$/;"	m	namespace:physical::unit
physical::unit::decinanometer	src/constants.h	/^        const double decinanometer = meter\/10000000000.0;$/;"	m	namespace:physical::unit
physical::unit::decinanometers	include/Eternia/constants.h	/^        const double decinanometers = decinanometer;$/;"	m	namespace:physical::unit
physical::unit::decinanometers	src/constants.h	/^        const double decinanometers = decinanometer;$/;"	m	namespace:physical::unit
physical::unit::diopter	include/Eternia/constants.h	/^        const double diopter = 1.0\/meter;$/;"	m	namespace:physical::unit
physical::unit::diopter	src/constants.h	/^        const double diopter = 1.0\/meter;$/;"	m	namespace:physical::unit
physical::unit::diopters	include/Eternia/constants.h	/^        const double diopters = diopter;$/;"	m	namespace:physical::unit
physical::unit::diopters	src/constants.h	/^        const double diopters = diopter;$/;"	m	namespace:physical::unit
physical::unit::displacement	include/Eternia/constants.h	/^        namespace displacement {$/;"	n	namespace:physical::unit
physical::unit::displacement	src/constants.h	/^        namespace displacement {$/;"	n	namespace:physical::unit
physical::unit::displacement::t	include/Eternia/constants.h	/^            const double t = ton;$/;"	m	namespace:physical::unit::displacement
physical::unit::displacement::t	src/constants.h	/^            const double t = ton;$/;"	m	namespace:physical::unit::displacement
physical::unit::displacement::ton	include/Eternia/constants.h	/^            const double ton = stere;$/;"	m	namespace:physical::unit::displacement
physical::unit::displacement::ton	src/constants.h	/^            const double ton = stere;$/;"	m	namespace:physical::unit::displacement
physical::unit::displacement::tons	include/Eternia/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::displacement
physical::unit::displacement::tons	src/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::displacement
physical::unit::dm	include/Eternia/constants.h	/^        const double dm = decimeter;$/;"	m	namespace:physical::unit
physical::unit::dm	src/constants.h	/^        const double dm = decimeter;$/;"	m	namespace:physical::unit
physical::unit::dollar	include/Eternia/constants.h	/^        const double dollar = 1.0;$/;"	m	namespace:physical::unit
physical::unit::dollar	src/constants.h	/^        const double dollar = 1.0;$/;"	m	namespace:physical::unit
physical::unit::dollars	include/Eternia/constants.h	/^        const double dollars = dollar;$/;"	m	namespace:physical::unit
physical::unit::dollars	src/constants.h	/^        const double dollars = dollar;$/;"	m	namespace:physical::unit
physical::unit::doppelzentner	include/Eternia/constants.h	/^        const double doppelzentner = quintal;$/;"	m	namespace:physical::unit
physical::unit::doppelzentner	src/constants.h	/^        const double doppelzentner = quintal;$/;"	m	namespace:physical::unit
physical::unit::doppelzentners	include/Eternia/constants.h	/^        const double doppelzentners = doppelzentner;$/;"	m	namespace:physical::unit
physical::unit::doppelzentners	src/constants.h	/^        const double doppelzentners = doppelzentner;$/;"	m	namespace:physical::unit
physical::unit::dose	include/Eternia/constants.h	/^        namespace dose { \/\/ energy$/;"	n	namespace:physical::unit
physical::unit::dose	src/constants.h	/^        namespace dose { \/\/ energy$/;"	n	namespace:physical::unit
physical::unit::dose::Gray	include/Eternia/constants.h	/^            const double Gray = Joule\/kilogram;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::Gray	src/constants.h	/^            const double Gray = Joule\/kilogram;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::Grays	include/Eternia/constants.h	/^            const double Grays = Gray;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::Grays	src/constants.h	/^            const double Grays = Gray;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::Gy	include/Eternia/constants.h	/^            const double Gy = Gray;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::Gy	src/constants.h	/^            const double Gy = Gray;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::Sievert	include/Eternia/constants.h	/^            const double Sievert = Gray;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::Sievert	src/constants.h	/^            const double Sievert = Gray;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::Sieverts	include/Eternia/constants.h	/^            const double Sieverts = Sieverts;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::Sieverts	src/constants.h	/^            const double Sieverts = Sieverts;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::rad	include/Eternia/constants.h	/^            const double rad = Gray\/100.0;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::rad	src/constants.h	/^            const double rad = Gray\/100.0;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::rads	include/Eternia/constants.h	/^            const double rads = rad;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::rads	src/constants.h	/^            const double rads = rad;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::rd	include/Eternia/constants.h	/^            const double rd = rad;$/;"	m	namespace:physical::unit::dose
physical::unit::dose::rd	src/constants.h	/^            const double rd = rad;$/;"	m	namespace:physical::unit::dose
physical::unit::doz	include/Eternia/constants.h	/^        const double doz = dozen;$/;"	m	namespace:physical::unit
physical::unit::doz	src/constants.h	/^        const double doz = dozen;$/;"	m	namespace:physical::unit
physical::unit::dozen	include/Eternia/constants.h	/^        const double dozen = 12.0;$/;"	m	namespace:physical::unit
physical::unit::dozen	src/constants.h	/^        const double dozen = 12.0;$/;"	m	namespace:physical::unit
physical::unit::drop	include/Eternia/constants.h	/^        const double drop = 0.03*cc;$/;"	m	namespace:physical::unit
physical::unit::drop	src/constants.h	/^        const double drop = 0.03*cc;$/;"	m	namespace:physical::unit
physical::unit::drops	include/Eternia/constants.h	/^        const double drops = drop;$/;"	m	namespace:physical::unit
physical::unit::drops	src/constants.h	/^        const double drops = drop;$/;"	m	namespace:physical::unit
physical::unit::dwt	include/Eternia/constants.h	/^        const double dwt = pennyweight;$/;"	m	namespace:physical::unit
physical::unit::dwt	src/constants.h	/^        const double dwt = pennyweight;$/;"	m	namespace:physical::unit
physical::unit::dyn	include/Eternia/constants.h	/^        const double dyn = dyne;$/;"	m	namespace:physical::unit
physical::unit::dyn	src/constants.h	/^        const double dyn = dyne;$/;"	m	namespace:physical::unit
physical::unit::dyne	include/Eternia/constants.h	/^        const double dyne = Newton\/100000.0;$/;"	m	namespace:physical::unit
physical::unit::dyne	src/constants.h	/^        const double dyne = Newton\/100000.0;$/;"	m	namespace:physical::unit
physical::unit::dynes	include/Eternia/constants.h	/^        const double dynes = dyne;$/;"	m	namespace:physical::unit
physical::unit::dynes	src/constants.h	/^        const double dynes = dyne;$/;"	m	namespace:physical::unit
physical::unit::dz	include/Eternia/constants.h	/^        const double dz = dozen;$/;"	m	namespace:physical::unit
physical::unit::dz	src/constants.h	/^        const double dz = dozen;$/;"	m	namespace:physical::unit
physical::unit::ell	include/Eternia/constants.h	/^        const double ell = 45.0*inches;$/;"	m	namespace:physical::unit
physical::unit::ell	src/constants.h	/^        const double ell = 45.0*inches;$/;"	m	namespace:physical::unit
physical::unit::ells	include/Eternia/constants.h	/^        const double ells = ell;$/;"	m	namespace:physical::unit
physical::unit::ells	src/constants.h	/^        const double ells = ell;$/;"	m	namespace:physical::unit
physical::unit::engineers	include/Eternia/constants.h	/^        namespace engineers {$/;"	n	namespace:physical::unit
physical::unit::engineers	src/constants.h	/^        namespace engineers {$/;"	n	namespace:physical::unit
physical::unit::engineers::chain	include/Eternia/constants.h	/^            const double chain = 100.0*feet;$/;"	m	namespace:physical::unit::engineers
physical::unit::engineers::chain	src/constants.h	/^            const double chain = 100.0*feet;$/;"	m	namespace:physical::unit::engineers
physical::unit::engineers::chains	include/Eternia/constants.h	/^            const double chains = chain;$/;"	m	namespace:physical::unit::engineers
physical::unit::engineers::chains	src/constants.h	/^            const double chains = chain;$/;"	m	namespace:physical::unit::engineers
physical::unit::engineers::link	include/Eternia/constants.h	/^            const double link = foot;$/;"	m	namespace:physical::unit::engineers
physical::unit::engineers::link	src/constants.h	/^            const double link = foot;$/;"	m	namespace:physical::unit::engineers
physical::unit::engineers::links	include/Eternia/constants.h	/^            const double links = link;$/;"	m	namespace:physical::unit::engineers
physical::unit::engineers::links	src/constants.h	/^            const double links = link;$/;"	m	namespace:physical::unit::engineers
physical::unit::equivalent	include/Eternia/constants.h	/^        namespace equivalent {$/;"	n	namespace:physical::unit
physical::unit::equivalent	src/constants.h	/^        namespace equivalent {$/;"	n	namespace:physical::unit
physical::unit::equivalent::fc	include/Eternia/constants.h	/^            const double fc = foot_candle;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::fc	src/constants.h	/^            const double fc = foot_candle;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::foot_candle	include/Eternia/constants.h	/^            const double foot_candle = unit::foot_candle\/pi;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::foot_candle	src/constants.h	/^            const double foot_candle = unit::foot_candle\/pi;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::foot_candles	include/Eternia/constants.h	/^            const double foot_candles = foot_candle;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::foot_candles	src/constants.h	/^            const double foot_candles = foot_candle;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::lm	include/Eternia/constants.h	/^            const double lm = lumen;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::lm	src/constants.h	/^            const double lm = lumen;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::luces	include/Eternia/constants.h	/^            const double luces = lux;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::luces	src/constants.h	/^            const double luces = lux;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::lumen	include/Eternia/constants.h	/^            const double lumen = unit::lumen\/pi;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::lumen	src/constants.h	/^            const double lumen = unit::lumen\/pi;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::lumens	include/Eternia/constants.h	/^            const double lumens = lumen;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::lumens	src/constants.h	/^            const double lumens = lumen;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::lux	include/Eternia/constants.h	/^            const double lux = unit::lux\/pi;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::lux	src/constants.h	/^            const double lux = unit::lux\/pi;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::luxes	include/Eternia/constants.h	/^            const double luxes = lux;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::luxes	src/constants.h	/^            const double luxes = lux;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::lx	include/Eternia/constants.h	/^            const double lx = lux;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::lx	src/constants.h	/^            const double lx = lux;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::phot	include/Eternia/constants.h	/^            const double phot = apostilb\/pi;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::phot	src/constants.h	/^            const double phot = apostilb\/pi;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::phots	include/Eternia/constants.h	/^            const double phots = phot;$/;"	m	namespace:physical::unit::equivalent
physical::unit::equivalent::phots	src/constants.h	/^            const double phots = phot;$/;"	m	namespace:physical::unit::equivalent
physical::unit::erg	include/Eternia/constants.h	/^        const double erg = Joule\/10000000.0;$/;"	m	namespace:physical::unit
physical::unit::erg	src/constants.h	/^        const double erg = Joule\/10000000.0;$/;"	m	namespace:physical::unit
physical::unit::ergs	include/Eternia/constants.h	/^        const double ergs = erg;$/;"	m	namespace:physical::unit
physical::unit::ergs	src/constants.h	/^        const double ergs = erg;$/;"	m	namespace:physical::unit
physical::unit::exa	include/Eternia/constants.h	/^        const double exa = 1e18;$/;"	m	namespace:physical::unit
physical::unit::exa	src/constants.h	/^        const double exa = 1e18;$/;"	m	namespace:physical::unit
physical::unit::exaHertz	include/Eternia/constants.h	/^        const double exaHertz = exa*Hertz;$/;"	m	namespace:physical::unit
physical::unit::exaHertz	src/constants.h	/^        const double exaHertz = exa*Hertz;$/;"	m	namespace:physical::unit
physical::unit::fathom	include/Eternia/constants.h	/^        const double fathom = 6.0*feet;$/;"	m	namespace:physical::unit
physical::unit::fathom	src/constants.h	/^        const double fathom = 6.0*feet;$/;"	m	namespace:physical::unit
physical::unit::fathoms	include/Eternia/constants.h	/^        const double fathoms = fathom;$/;"	m	namespace:physical::unit
physical::unit::fathoms	src/constants.h	/^        const double fathoms = fathom;$/;"	m	namespace:physical::unit
physical::unit::fc	include/Eternia/constants.h	/^        const double fc = foot_candle;$/;"	m	namespace:physical::unit
physical::unit::fc	src/constants.h	/^        const double fc = foot_candle;$/;"	m	namespace:physical::unit
physical::unit::feet	include/Eternia/constants.h	/^        const double feet = foot;$/;"	m	namespace:physical::unit
physical::unit::feet	src/constants.h	/^        const double feet = foot;$/;"	m	namespace:physical::unit
physical::unit::fifth	include/Eternia/constants.h	/^        const double fifth = US::liquid::gallon\/5.0;$/;"	m	namespace:physical::unit
physical::unit::fifth	src/constants.h	/^        const double fifth = US::liquid::gallon\/5.0;$/;"	m	namespace:physical::unit
physical::unit::fifths	include/Eternia/constants.h	/^        const double fifths = fifth;$/;"	m	namespace:physical::unit
physical::unit::fifths	src/constants.h	/^        const double fifths = fifth;$/;"	m	namespace:physical::unit
physical::unit::finger	include/Eternia/constants.h	/^        const double finger = 7.0*inches\/8.0;$/;"	m	namespace:physical::unit
physical::unit::finger	src/constants.h	/^        const double finger = 7.0*inches\/8.0;$/;"	m	namespace:physical::unit
physical::unit::fingers	include/Eternia/constants.h	/^        const double fingers = finger;$/;"	m	namespace:physical::unit
physical::unit::fingers	src/constants.h	/^        const double fingers = finger;$/;"	m	namespace:physical::unit
physical::unit::firkin	include/Eternia/constants.h	/^        const double firkin = 9.0*US::liquid::gallons;$/;"	m	namespace:physical::unit
physical::unit::firkin	src/constants.h	/^        const double firkin = 9.0*US::liquid::gallons;$/;"	m	namespace:physical::unit
physical::unit::firkins	include/Eternia/constants.h	/^        const double firkins = firkin;$/;"	m	namespace:physical::unit
physical::unit::firkins	src/constants.h	/^        const double firkins = firkin;$/;"	m	namespace:physical::unit
physical::unit::fm	include/Eternia/constants.h	/^        const double fm = fathom;$/;"	m	namespace:physical::unit
physical::unit::fm	src/constants.h	/^        const double fm = fathom;$/;"	m	namespace:physical::unit
physical::unit::foot	include/Eternia/constants.h	/^        const double foot = 12.0*inches;$/;"	m	namespace:physical::unit
physical::unit::foot	src/constants.h	/^        const double foot = 12.0*inches;$/;"	m	namespace:physical::unit
physical::unit::foot_Lambert	include/Eternia/constants.h	/^        const double foot_Lambert = candelas\/foot\/foot\/pi;$/;"	m	namespace:physical::unit
physical::unit::foot_Lambert	src/constants.h	/^        const double foot_Lambert = candelas\/foot\/foot\/pi;$/;"	m	namespace:physical::unit
physical::unit::foot_Lamberts	include/Eternia/constants.h	/^        const double foot_Lamberts = foot_Lambert;$/;"	m	namespace:physical::unit
physical::unit::foot_Lamberts	src/constants.h	/^        const double foot_Lamberts = foot_Lambert;$/;"	m	namespace:physical::unit
physical::unit::foot_candle	include/Eternia/constants.h	/^        const double foot_candle = lumens\/foot\/foot;$/;"	m	namespace:physical::unit
physical::unit::foot_candle	src/constants.h	/^        const double foot_candle = lumens\/foot\/foot;$/;"	m	namespace:physical::unit
physical::unit::foot_candles	include/Eternia/constants.h	/^        const double foot_candles = foot_candle;$/;"	m	namespace:physical::unit
physical::unit::foot_candles	src/constants.h	/^        const double foot_candles = foot_candle;$/;"	m	namespace:physical::unit
physical::unit::fortnight	include/Eternia/constants.h	/^        const double fortnight = 2.0*weeks;$/;"	m	namespace:physical::unit
physical::unit::fortnight	src/constants.h	/^        const double fortnight = 2.0*weeks;$/;"	m	namespace:physical::unit
physical::unit::fortnights	include/Eternia/constants.h	/^        const double fortnights = fortnight;$/;"	m	namespace:physical::unit
physical::unit::fortnights	src/constants.h	/^        const double fortnights = fortnight;$/;"	m	namespace:physical::unit
physical::unit::ft	include/Eternia/constants.h	/^        const double ft = foot;$/;"	m	namespace:physical::unit
physical::unit::ft	src/constants.h	/^        const double ft = foot;$/;"	m	namespace:physical::unit
physical::unit::furlong	include/Eternia/constants.h	/^        const double furlong = 220*yards;$/;"	m	namespace:physical::unit
physical::unit::furlong	src/constants.h	/^        const double furlong = 220*yards;$/;"	m	namespace:physical::unit
physical::unit::furlongs	include/Eternia/constants.h	/^        const double furlongs = furlong;$/;"	m	namespace:physical::unit
physical::unit::furlongs	src/constants.h	/^        const double furlongs = furlong;$/;"	m	namespace:physical::unit
physical::unit::g	include/Eternia/constants.h	/^        const double g = gram;$/;"	m	namespace:physical::unit
physical::unit::g	src/constants.h	/^        const double g = gram;$/;"	m	namespace:physical::unit
physical::unit::gamma	include/Eternia/constants.h	/^        const double gamma = Tesla\/1000000000.0;$/;"	m	namespace:physical::unit
physical::unit::gamma	src/constants.h	/^        const double gamma = Tesla\/1000000000.0;$/;"	m	namespace:physical::unit
physical::unit::geodetic	include/Eternia/constants.h	/^        namespace geodetic {$/;"	n	namespace:physical::unit
physical::unit::geodetic	src/constants.h	/^        namespace geodetic {$/;"	n	namespace:physical::unit
physical::unit::geodetic::feet	include/Eternia/constants.h	/^            const double feet = foot;$/;"	m	namespace:physical::unit::geodetic
physical::unit::geodetic::feet	src/constants.h	/^            const double feet = foot;$/;"	m	namespace:physical::unit::geodetic
physical::unit::geodetic::foot	include/Eternia/constants.h	/^            const double foot = (1200.0\/3937.0)*meters;$/;"	m	namespace:physical::unit::geodetic
physical::unit::geodetic::foot	src/constants.h	/^            const double foot = (1200.0\/3937.0)*meters;$/;"	m	namespace:physical::unit::geodetic
physical::unit::geodetic::ft	include/Eternia/constants.h	/^            const double ft = foot;$/;"	m	namespace:physical::unit::geodetic
physical::unit::geodetic::ft	src/constants.h	/^            const double ft = foot;$/;"	m	namespace:physical::unit::geodetic
physical::unit::geographical	include/Eternia/constants.h	/^        namespace geographical {$/;"	n	namespace:physical::unit
physical::unit::geographical	src/constants.h	/^        namespace geographical {$/;"	n	namespace:physical::unit
physical::unit::geographical::mi	include/Eternia/constants.h	/^            const double mi = mile;$/;"	m	namespace:physical::unit::geographical
physical::unit::geographical::mi	src/constants.h	/^            const double mi = mile;$/;"	m	namespace:physical::unit::geographical
physical::unit::geographical::mile	include/Eternia/constants.h	/^            const double mile = nautical::mile;$/;"	m	namespace:physical::unit::geographical
physical::unit::geographical::mile	src/constants.h	/^            const double mile = nautical::mile;$/;"	m	namespace:physical::unit::geographical
physical::unit::geographical::miles	include/Eternia/constants.h	/^            const double miles = mile;$/;"	m	namespace:physical::unit::geographical
physical::unit::geographical::miles	src/constants.h	/^            const double miles = mile;$/;"	m	namespace:physical::unit::geographical
physical::unit::giga	include/Eternia/constants.h	/^        const double giga = 1e12;$/;"	m	namespace:physical::unit
physical::unit::giga	src/constants.h	/^        const double giga = 1e12;$/;"	m	namespace:physical::unit
physical::unit::gigaHertz	include/Eternia/constants.h	/^        const double gigaHertz = giga*Hertz;$/;"	m	namespace:physical::unit
physical::unit::gigaHertz	src/constants.h	/^        const double gigaHertz = giga*Hertz;$/;"	m	namespace:physical::unit
physical::unit::gr	include/Eternia/constants.h	/^        const double gr = grain;$/;"	m	namespace:physical::unit
physical::unit::gr	src/constants.h	/^        const double gr = grain;$/;"	m	namespace:physical::unit
physical::unit::grain	include/Eternia/constants.h	/^        const double grain = 0.06479891*grams;$/;"	m	namespace:physical::unit
physical::unit::grain	src/constants.h	/^        const double grain = 0.06479891*grams;$/;"	m	namespace:physical::unit
physical::unit::grains	include/Eternia/constants.h	/^        const double grains = grain;$/;"	m	namespace:physical::unit
physical::unit::grains	src/constants.h	/^        const double grains = grain;$/;"	m	namespace:physical::unit
physical::unit::gram	include/Eternia/constants.h	/^        const double gram = kilograms\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::gram	src/constants.h	/^        const double gram = kilograms\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::grams	include/Eternia/constants.h	/^        const double grams = gram;$/;"	m	namespace:physical::unit
physical::unit::grams	src/constants.h	/^        const double grams = gram;$/;"	m	namespace:physical::unit
physical::unit::gravity	include/Eternia/constants.h	/^        const double gravity = 9.80665*meters\/second\/second;$/;"	m	namespace:physical::unit
physical::unit::gravity	src/constants.h	/^        const double gravity = 9.80665*meters\/second\/second;$/;"	m	namespace:physical::unit
physical::unit::gro	include/Eternia/constants.h	/^        const double gro = gross;$/;"	m	namespace:physical::unit
physical::unit::gro	src/constants.h	/^        const double gro = gross;$/;"	m	namespace:physical::unit
physical::unit::gross	include/Eternia/constants.h	/^        const double gross = 12.0*dozen;$/;"	m	namespace:physical::unit
physical::unit::gross	src/constants.h	/^        const double gross = 12.0*dozen;$/;"	m	namespace:physical::unit
physical::unit::ha	include/Eternia/constants.h	/^        const double ha = hectare;$/;"	m	namespace:physical::unit
physical::unit::ha	src/constants.h	/^        const double ha = hectare;$/;"	m	namespace:physical::unit
physical::unit::hand	include/Eternia/constants.h	/^        const double hand = 4.0*inches;$/;"	m	namespace:physical::unit
physical::unit::hand	src/constants.h	/^        const double hand = 4.0*inches;$/;"	m	namespace:physical::unit
physical::unit::hands	include/Eternia/constants.h	/^        const double hands = hand;$/;"	m	namespace:physical::unit
physical::unit::hands	src/constants.h	/^        const double hands = hand;$/;"	m	namespace:physical::unit
physical::unit::hectare	include/Eternia/constants.h	/^        const double hectare = 10000.0*meter*meter;$/;"	m	namespace:physical::unit
physical::unit::hectare	src/constants.h	/^        const double hectare = 10000.0*meter*meter;$/;"	m	namespace:physical::unit
physical::unit::hectares	include/Eternia/constants.h	/^        const double hectares = hectare;$/;"	m	namespace:physical::unit
physical::unit::hectares	src/constants.h	/^        const double hectares = hectare;$/;"	m	namespace:physical::unit
physical::unit::hogshead	include/Eternia/constants.h	/^        const double hogshead = 2.0*US::barrels;$/;"	m	namespace:physical::unit
physical::unit::hogshead	src/constants.h	/^        const double hogshead = 2.0*US::barrels;$/;"	m	namespace:physical::unit
physical::unit::hogsheads	include/Eternia/constants.h	/^        const double hogsheads = hogshead;$/;"	m	namespace:physical::unit
physical::unit::hogsheads	src/constants.h	/^        const double hogsheads = hogshead;$/;"	m	namespace:physical::unit
physical::unit::homestead	include/Eternia/constants.h	/^        const double homestead = section\/4.0;$/;"	m	namespace:physical::unit
physical::unit::homestead	src/constants.h	/^        const double homestead = section\/4.0;$/;"	m	namespace:physical::unit
physical::unit::homesteads	include/Eternia/constants.h	/^        const double homesteads = homestead;$/;"	m	namespace:physical::unit
physical::unit::homesteads	src/constants.h	/^        const double homesteads = homestead;$/;"	m	namespace:physical::unit
physical::unit::horsepower	include/Eternia/constants.h	/^        const double horsepower = 735.49875*Watts;$/;"	m	namespace:physical::unit
physical::unit::horsepower	src/constants.h	/^        const double horsepower = 735.49875*Watts;$/;"	m	namespace:physical::unit
physical::unit::hour	include/Eternia/constants.h	/^        const double hour = 60.0*minutes;$/;"	m	namespace:physical::unit
physical::unit::hour	src/constants.h	/^        const double hour = 60.0*minutes;$/;"	m	namespace:physical::unit
physical::unit::hours	include/Eternia/constants.h	/^        const double hours = hour;$/;"	m	namespace:physical::unit
physical::unit::hours	src/constants.h	/^        const double hours = hour;$/;"	m	namespace:physical::unit
physical::unit::hr	include/Eternia/constants.h	/^        const double hr = hour;$/;"	m	namespace:physical::unit
physical::unit::hr	src/constants.h	/^        const double hr = hour;$/;"	m	namespace:physical::unit
physical::unit::hyl	include/Eternia/constants.h	/^        const double hyl = kilohyl\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::hyl	src/constants.h	/^        const double hyl = kilohyl\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::hyls	include/Eternia/constants.h	/^        const double hyls = hyl;$/;"	m	namespace:physical::unit
physical::unit::hyls	src/constants.h	/^        const double hyls = hyl;$/;"	m	namespace:physical::unit
physical::unit::in	include/Eternia/constants.h	/^        const double in = inch;$/;"	m	namespace:physical::unit
physical::unit::in	src/constants.h	/^        const double in = inch;$/;"	m	namespace:physical::unit
physical::unit::inch	include/Eternia/constants.h	/^        const double inch = 0.0254*meters;$/;"	m	namespace:physical::unit
physical::unit::inch	src/constants.h	/^        const double inch = 0.0254*meters;$/;"	m	namespace:physical::unit
physical::unit::inches	include/Eternia/constants.h	/^        const double inches = inch;$/;"	m	namespace:physical::unit
physical::unit::inches	src/constants.h	/^        const double inches = inch;$/;"	m	namespace:physical::unit
physical::unit::jeroboam	include/Eternia/constants.h	/^        const double jeroboam = 4.0*fifths;$/;"	m	namespace:physical::unit
physical::unit::jeroboam	src/constants.h	/^        const double jeroboam = 4.0*fifths;$/;"	m	namespace:physical::unit
physical::unit::jeroboams	include/Eternia/constants.h	/^        const double jeroboams = jeroboam;$/;"	m	namespace:physical::unit
physical::unit::jeroboams	src/constants.h	/^        const double jeroboams = jeroboam;$/;"	m	namespace:physical::unit
physical::unit::kHz	include/Eternia/constants.h	/^        const double kHz = kiloHertz;$/;"	m	namespace:physical::unit
physical::unit::kHz	src/constants.h	/^        const double kHz = kiloHertz;$/;"	m	namespace:physical::unit
physical::unit::kW	include/Eternia/constants.h	/^        const double kW = kiloWatt;$/;"	m	namespace:physical::unit
physical::unit::kW	src/constants.h	/^        const double kW = kiloWatt;$/;"	m	namespace:physical::unit
physical::unit::kWh	include/Eternia/constants.h	/^        const double kWh = kiloWatthour;$/;"	m	namespace:physical::unit
physical::unit::kWh	src/constants.h	/^        const double kWh = kiloWatthour;$/;"	m	namespace:physical::unit
physical::unit::karat	include/Eternia/constants.h	/^        const double karat = 1.0\/24.0;$/;"	m	namespace:physical::unit
physical::unit::karat	src/constants.h	/^        const double karat = 1.0\/24.0;$/;"	m	namespace:physical::unit
physical::unit::karats	include/Eternia/constants.h	/^        const double karats = karat;$/;"	m	namespace:physical::unit
physical::unit::karats	src/constants.h	/^        const double karats = karat;$/;"	m	namespace:physical::unit
physical::unit::kcal	include/Eternia/constants.h	/^        const double kcal = kilocalorie;$/;"	m	namespace:physical::unit
physical::unit::kcal	src/constants.h	/^        const double kcal = kilocalorie;$/;"	m	namespace:physical::unit
physical::unit::kg	include/Eternia/constants.h	/^        const double kg = kilogram;$/;"	m	namespace:physical::unit
physical::unit::kg	src/constants.h	/^        const double kg = kilogram;$/;"	m	namespace:physical::unit
physical::unit::kilderkin	include/Eternia/constants.h	/^        const double kilderkin = 18.0*US::liquid::gallons;$/;"	m	namespace:physical::unit
physical::unit::kilderkin	src/constants.h	/^        const double kilderkin = 18.0*US::liquid::gallons;$/;"	m	namespace:physical::unit
physical::unit::kilderkins	include/Eternia/constants.h	/^        const double kilderkins = kilderkin;$/;"	m	namespace:physical::unit
physical::unit::kilderkins	src/constants.h	/^        const double kilderkins = kilderkin;$/;"	m	namespace:physical::unit
physical::unit::kilo	include/Eternia/constants.h	/^        const double kilo = 1e3;$/;"	m	namespace:physical::unit
physical::unit::kilo	src/constants.h	/^        const double kilo = 1e3;$/;"	m	namespace:physical::unit
physical::unit::kiloHertz	include/Eternia/constants.h	/^        const double kiloHertz = kilo*Hertz;$/;"	m	namespace:physical::unit
physical::unit::kiloHertz	src/constants.h	/^        const double kiloHertz = kilo*Hertz;$/;"	m	namespace:physical::unit
physical::unit::kiloWatt	include/Eternia/constants.h	/^        const double kiloWatt = 1000.0*Watts;$/;"	m	namespace:physical::unit
physical::unit::kiloWatt	src/constants.h	/^        const double kiloWatt = 1000.0*Watts;$/;"	m	namespace:physical::unit
physical::unit::kiloWatthour	include/Eternia/constants.h	/^        const double kiloWatthour = 3600000.0*Joules;$/;"	m	namespace:physical::unit
physical::unit::kiloWatthour	src/constants.h	/^        const double kiloWatthour = 3600000.0*Joules;$/;"	m	namespace:physical::unit
physical::unit::kiloWatthours	include/Eternia/constants.h	/^        const double kiloWatthours = kiloWatthour;$/;"	m	namespace:physical::unit
physical::unit::kiloWatthours	src/constants.h	/^        const double kiloWatthours = kiloWatthour;$/;"	m	namespace:physical::unit
physical::unit::kiloWatts	include/Eternia/constants.h	/^        const double kiloWatts = kiloWatt;$/;"	m	namespace:physical::unit
physical::unit::kiloWatts	src/constants.h	/^        const double kiloWatts = kiloWatt;$/;"	m	namespace:physical::unit
physical::unit::kilocalorie	include/Eternia/constants.h	/^        const double kilocalorie = 1000.0*calories;$/;"	m	namespace:physical::unit
physical::unit::kilocalorie	src/constants.h	/^        const double kilocalorie = 1000.0*calories;$/;"	m	namespace:physical::unit
physical::unit::kilocalories	include/Eternia/constants.h	/^        const double kilocalories = kilocalorie;$/;"	m	namespace:physical::unit
physical::unit::kilocalories	src/constants.h	/^        const double kilocalories = kilocalorie;$/;"	m	namespace:physical::unit
physical::unit::kilogram	include/Eternia/constants.h	/^        const double kilogram = 1.0;$/;"	m	namespace:physical::unit
physical::unit::kilogram	src/constants.h	/^        const double kilogram = 1.0;$/;"	m	namespace:physical::unit
physical::unit::kilograms	include/Eternia/constants.h	/^        const double kilograms = kilogram;$/;"	m	namespace:physical::unit
physical::unit::kilograms	src/constants.h	/^        const double kilograms = kilogram;$/;"	m	namespace:physical::unit
physical::unit::kilohyl	include/Eternia/constants.h	/^        const double kilohyl = kilogram*gravity*second*second\/meter;$/;"	m	namespace:physical::unit
physical::unit::kilohyl	src/constants.h	/^        const double kilohyl = kilogram*gravity*second*second\/meter;$/;"	m	namespace:physical::unit
physical::unit::kilohyls	include/Eternia/constants.h	/^        const double kilohyls = kilohyl;$/;"	m	namespace:physical::unit
physical::unit::kilohyls	src/constants.h	/^        const double kilohyls = kilohyl;$/;"	m	namespace:physical::unit
physical::unit::kilometer	include/Eternia/constants.h	/^        const double kilometer = 1000.0*meters;$/;"	m	namespace:physical::unit
physical::unit::kilometer	src/constants.h	/^        const double kilometer = 1000.0*meters;$/;"	m	namespace:physical::unit
physical::unit::kilometers	include/Eternia/constants.h	/^        const double kilometers = kilometer;$/;"	m	namespace:physical::unit
physical::unit::kilometers	src/constants.h	/^        const double kilometers = kilometer;$/;"	m	namespace:physical::unit
physical::unit::km	include/Eternia/constants.h	/^        const double km = kilometer;$/;"	m	namespace:physical::unit
physical::unit::km	src/constants.h	/^        const double km = kilometer;$/;"	m	namespace:physical::unit
physical::unit::knot	include/Eternia/constants.h	/^        const double knot = nautical::miles\/hour;$/;"	m	namespace:physical::unit
physical::unit::knot	src/constants.h	/^        const double knot = nautical::miles\/hour;$/;"	m	namespace:physical::unit
physical::unit::knots	include/Eternia/constants.h	/^        const double knots = knot;$/;"	m	namespace:physical::unit
physical::unit::knots	src/constants.h	/^        const double knots = knot;$/;"	m	namespace:physical::unit
physical::unit::kph	include/Eternia/constants.h	/^        const double kph = kilometers\/hour;$/;"	m	namespace:physical::unit
physical::unit::kph	src/constants.h	/^        const double kph = kilometers\/hour;$/;"	m	namespace:physical::unit
physical::unit::l	include/Eternia/constants.h	/^        const double l = liter;$/;"	m	namespace:physical::unit
physical::unit::l	src/constants.h	/^        const double l = liter;$/;"	m	namespace:physical::unit
physical::unit::last	include/Eternia/constants.h	/^        const double last = 80.0*US::bushels;$/;"	m	namespace:physical::unit
physical::unit::last	src/constants.h	/^        const double last = 80.0*US::bushels;$/;"	m	namespace:physical::unit
physical::unit::lasts	include/Eternia/constants.h	/^        const double lasts = last;$/;"	m	namespace:physical::unit
physical::unit::lasts	src/constants.h	/^        const double lasts = last;$/;"	m	namespace:physical::unit
physical::unit::lbf	include/Eternia/constants.h	/^        const double lbf = avoirdupois::pound*gravity;$/;"	m	namespace:physical::unit
physical::unit::lbf	src/constants.h	/^        const double lbf = avoirdupois::pound*gravity;$/;"	m	namespace:physical::unit
physical::unit::li	include/Eternia/constants.h	/^        const double li = link;$/;"	m	namespace:physical::unit
physical::unit::li	src/constants.h	/^        const double li = link;$/;"	m	namespace:physical::unit
physical::unit::lightyear	include/Eternia/constants.h	/^        const double lightyear = 9.4605e15*meters;$/;"	m	namespace:physical::unit
physical::unit::lightyear	src/constants.h	/^        const double lightyear = 9.4605e15*meters;$/;"	m	namespace:physical::unit
physical::unit::lightyears	include/Eternia/constants.h	/^        const double lightyears = lightyear;$/;"	m	namespace:physical::unit
physical::unit::lightyears	src/constants.h	/^        const double lightyears = lightyear;$/;"	m	namespace:physical::unit
physical::unit::line	include/Eternia/constants.h	/^        const double line = inch\/12.0;$/;"	m	namespace:physical::unit
physical::unit::line	src/constants.h	/^        const double line = inch\/12.0;$/;"	m	namespace:physical::unit
physical::unit::lines	include/Eternia/constants.h	/^        const double lines = line;$/;"	m	namespace:physical::unit
physical::unit::lines	src/constants.h	/^        const double lines = line;$/;"	m	namespace:physical::unit
physical::unit::link	include/Eternia/constants.h	/^        const double link = 7.92*inches;$/;"	m	namespace:physical::unit
physical::unit::link	src/constants.h	/^        const double link = 7.92*inches;$/;"	m	namespace:physical::unit
physical::unit::links	include/Eternia/constants.h	/^        const double links = link;$/;"	m	namespace:physical::unit
physical::unit::links	src/constants.h	/^        const double links = link;$/;"	m	namespace:physical::unit
physical::unit::liter	include/Eternia/constants.h	/^        const double liter = stere\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::liter	src/constants.h	/^        const double liter = stere\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::liters	include/Eternia/constants.h	/^        const double liters = liter;$/;"	m	namespace:physical::unit
physical::unit::liters	src/constants.h	/^        const double liters = liter;$/;"	m	namespace:physical::unit
physical::unit::lm	include/Eternia/constants.h	/^        const double lm = lumen;$/;"	m	namespace:physical::unit
physical::unit::lm	src/constants.h	/^        const double lm = lumen;$/;"	m	namespace:physical::unit
physical::unit::luces	include/Eternia/constants.h	/^        const double luces = lux;$/;"	m	namespace:physical::unit
physical::unit::luces	src/constants.h	/^        const double luces = lux;$/;"	m	namespace:physical::unit
physical::unit::lumen	include/Eternia/constants.h	/^        const double lumen = candela*steradian;$/;"	m	namespace:physical::unit
physical::unit::lumen	src/constants.h	/^        const double lumen = candela*steradian;$/;"	m	namespace:physical::unit
physical::unit::lumens	include/Eternia/constants.h	/^        const double lumens = lumen;$/;"	m	namespace:physical::unit
physical::unit::lumens	src/constants.h	/^        const double lumens = lumen;$/;"	m	namespace:physical::unit
physical::unit::lux	include/Eternia/constants.h	/^        const double lux = lumens\/meter\/meter;$/;"	m	namespace:physical::unit
physical::unit::lux	src/constants.h	/^        const double lux = lumens\/meter\/meter;$/;"	m	namespace:physical::unit
physical::unit::luxes	include/Eternia/constants.h	/^        const double luxes = lux;$/;"	m	namespace:physical::unit
physical::unit::luxes	src/constants.h	/^        const double luxes = lux;$/;"	m	namespace:physical::unit
physical::unit::lx	include/Eternia/constants.h	/^        const double lx = lux;$/;"	m	namespace:physical::unit
physical::unit::lx	src/constants.h	/^        const double lx = lux;$/;"	m	namespace:physical::unit
physical::unit::ly	include/Eternia/constants.h	/^        const double ly = lightyear;$/;"	m	namespace:physical::unit
physical::unit::ly	src/constants.h	/^        const double ly = lightyear;$/;"	m	namespace:physical::unit
physical::unit::m	include/Eternia/constants.h	/^        const double m = meter;$/;"	m	namespace:physical::unit
physical::unit::m	src/constants.h	/^        const double m = meter;$/;"	m	namespace:physical::unit
physical::unit::mH	include/Eternia/constants.h	/^        const double mH = milliHenry;$/;"	m	namespace:physical::unit
physical::unit::mH	src/constants.h	/^        const double mH = milliHenry;$/;"	m	namespace:physical::unit
physical::unit::mW	include/Eternia/constants.h	/^        const double mW = milliWatt;$/;"	m	namespace:physical::unit
physical::unit::mW	src/constants.h	/^        const double mW = milliWatt;$/;"	m	namespace:physical::unit
physical::unit::marine	include/Eternia/constants.h	/^        namespace marine = nautical;$/;"	x
physical::unit::marine	src/constants.h	/^        namespace marine = nautical;$/;"	x
physical::unit::mega	include/Eternia/constants.h	/^        const double mega = 1e6;$/;"	m	namespace:physical::unit
physical::unit::mega	src/constants.h	/^        const double mega = 1e6;$/;"	m	namespace:physical::unit
physical::unit::megaHertz	include/Eternia/constants.h	/^        const double megaHertz = mega*Hertz;$/;"	m	namespace:physical::unit
physical::unit::megaHertz	src/constants.h	/^        const double megaHertz = mega*Hertz;$/;"	m	namespace:physical::unit
physical::unit::megaWatt	include/Eternia/constants.h	/^        const double megaWatt = 1000000.0*Watts;$/;"	m	namespace:physical::unit
physical::unit::megaWatt	src/constants.h	/^        const double megaWatt = 1000000.0*Watts;$/;"	m	namespace:physical::unit
physical::unit::megaWatts	include/Eternia/constants.h	/^        const double megaWatts = megaWatt;$/;"	m	namespace:physical::unit
physical::unit::megaWatts	src/constants.h	/^        const double megaWatts = megaWatt;$/;"	m	namespace:physical::unit
physical::unit::meter	include/Eternia/constants.h	/^        const double meter = 1.0;$/;"	m	namespace:physical::unit
physical::unit::meter	src/constants.h	/^        const double meter = 1.0;$/;"	m	namespace:physical::unit
physical::unit::meters	include/Eternia/constants.h	/^        const double meters = meter;$/;"	m	namespace:physical::unit
physical::unit::meters	src/constants.h	/^        const double meters = meter;$/;"	m	namespace:physical::unit
physical::unit::metric	include/Eternia/constants.h	/^        namespace metric { \/\/ weight$/;"	n	namespace:physical::unit
physical::unit::metric	src/constants.h	/^        namespace metric { \/\/ weight$/;"	n	namespace:physical::unit
physical::unit::metric::carat	include/Eternia/constants.h	/^            const double carat = gram\/5.0;$/;"	m	namespace:physical::unit::metric
physical::unit::metric::carat	src/constants.h	/^            const double carat = gram\/5.0;$/;"	m	namespace:physical::unit::metric
physical::unit::metric::carats	include/Eternia/constants.h	/^            const double carats = carat;$/;"	m	namespace:physical::unit::metric
physical::unit::metric::carats	src/constants.h	/^            const double carats = carat;$/;"	m	namespace:physical::unit::metric
physical::unit::metric::t	include/Eternia/constants.h	/^            const double t = ton;$/;"	m	namespace:physical::unit::metric
physical::unit::metric::t	src/constants.h	/^            const double t = ton;$/;"	m	namespace:physical::unit::metric
physical::unit::metric::ton	include/Eternia/constants.h	/^            const double ton = 1000.0*kilograms;$/;"	m	namespace:physical::unit::metric
physical::unit::metric::ton	src/constants.h	/^            const double ton = 1000.0*kilograms;$/;"	m	namespace:physical::unit::metric
physical::unit::metric::tons	include/Eternia/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::metric
physical::unit::metric::tons	src/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::metric
physical::unit::mg	include/Eternia/constants.h	/^        const double mg = milligram;$/;"	m	namespace:physical::unit
physical::unit::mg	src/constants.h	/^        const double mg = milligram;$/;"	m	namespace:physical::unit
physical::unit::mgd	include/Eternia/constants.h	/^        const double mgd = 1000000.0*US::liquid::gallons\/day;$/;"	m	namespace:physical::unit
physical::unit::mgd	src/constants.h	/^        const double mgd = 1000000.0*US::liquid::gallons\/day;$/;"	m	namespace:physical::unit
physical::unit::mho	include/Eternia/constants.h	/^        const double mho = 1.0\/Ohm;$/;"	m	namespace:physical::unit
physical::unit::mho	src/constants.h	/^        const double mho = 1.0\/Ohm;$/;"	m	namespace:physical::unit
physical::unit::mhos	include/Eternia/constants.h	/^        const double mhos = mho;$/;"	m	namespace:physical::unit
physical::unit::mhos	src/constants.h	/^        const double mhos = mho;$/;"	m	namespace:physical::unit
physical::unit::micron	include/Eternia/constants.h	/^        const double micron = meter\/1000000.0;$/;"	m	namespace:physical::unit
physical::unit::micron	src/constants.h	/^        const double micron = meter\/1000000.0;$/;"	m	namespace:physical::unit
physical::unit::microns	include/Eternia/constants.h	/^        const double microns = micron;$/;"	m	namespace:physical::unit
physical::unit::microns	src/constants.h	/^        const double microns = micron;$/;"	m	namespace:physical::unit
physical::unit::microsecond	include/Eternia/constants.h	/^        const double microsecond = second\/1000000.0;$/;"	m	namespace:physical::unit
physical::unit::microsecond	src/constants.h	/^        const double microsecond = second\/1000000.0;$/;"	m	namespace:physical::unit
physical::unit::microseconds	include/Eternia/constants.h	/^        const double microseconds = microsecond;$/;"	m	namespace:physical::unit
physical::unit::microseconds	src/constants.h	/^        const double microseconds = microsecond;$/;"	m	namespace:physical::unit
physical::unit::mil	include/Eternia/constants.h	/^        const double mil = inch\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::mil	src/constants.h	/^        const double mil = inch\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::millenia	include/Eternia/constants.h	/^        const double millenia = millenium;$/;"	m	namespace:physical::unit
physical::unit::millenia	src/constants.h	/^        const double millenia = millenium;$/;"	m	namespace:physical::unit
physical::unit::millenium	include/Eternia/constants.h	/^        const double millenium = 1000.0*years;$/;"	m	namespace:physical::unit
physical::unit::millenium	src/constants.h	/^        const double millenium = 1000.0*years;$/;"	m	namespace:physical::unit
physical::unit::milliHenry	include/Eternia/constants.h	/^        const double milliHenry = Henry\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::milliHenry	src/constants.h	/^        const double milliHenry = Henry\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::milliHenrys	include/Eternia/constants.h	/^        const double milliHenrys = milliHenry;$/;"	m	namespace:physical::unit
physical::unit::milliHenrys	src/constants.h	/^        const double milliHenrys = milliHenry;$/;"	m	namespace:physical::unit
physical::unit::milliWatt	include/Eternia/constants.h	/^        const double milliWatt = Watt\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::milliWatt	src/constants.h	/^        const double milliWatt = Watt\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::milliWatts	include/Eternia/constants.h	/^        const double milliWatts = milliWatt;$/;"	m	namespace:physical::unit
physical::unit::milliWatts	src/constants.h	/^        const double milliWatts = milliWatt;$/;"	m	namespace:physical::unit
physical::unit::milligram	include/Eternia/constants.h	/^        const double milligram = kilogram\/1000000.0;$/;"	m	namespace:physical::unit
physical::unit::milligram	src/constants.h	/^        const double milligram = kilogram\/1000000.0;$/;"	m	namespace:physical::unit
physical::unit::milligrams	include/Eternia/constants.h	/^        const double milligrams = milligram;$/;"	m	namespace:physical::unit
physical::unit::milligrams	src/constants.h	/^        const double milligrams = milligram;$/;"	m	namespace:physical::unit
physical::unit::milliliter	include/Eternia/constants.h	/^        const double milliliter = stere\/1000000.0;$/;"	m	namespace:physical::unit
physical::unit::milliliter	src/constants.h	/^        const double milliliter = stere\/1000000.0;$/;"	m	namespace:physical::unit
physical::unit::milliliters	include/Eternia/constants.h	/^        const double milliliters = milliliter;$/;"	m	namespace:physical::unit
physical::unit::milliliters	src/constants.h	/^        const double milliliters = milliliter;$/;"	m	namespace:physical::unit
physical::unit::millimeter	include/Eternia/constants.h	/^        const double millimeter = meters\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::millimeter	src/constants.h	/^        const double millimeter = meters\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::millimeters	include/Eternia/constants.h	/^        const double millimeters = millimeter;$/;"	m	namespace:physical::unit
physical::unit::millimeters	src/constants.h	/^        const double millimeters = millimeter;$/;"	m	namespace:physical::unit
physical::unit::millisecond	include/Eternia/constants.h	/^        const double millisecond = second\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::millisecond	src/constants.h	/^        const double millisecond = second\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::milliseconds	include/Eternia/constants.h	/^        const double milliseconds = millisecond;$/;"	m	namespace:physical::unit
physical::unit::milliseconds	src/constants.h	/^        const double milliseconds = millisecond;$/;"	m	namespace:physical::unit
physical::unit::mils	include/Eternia/constants.h	/^        const double mils = mil;$/;"	m	namespace:physical::unit
physical::unit::mils	src/constants.h	/^        const double mils = mil;$/;"	m	namespace:physical::unit
physical::unit::min	include/Eternia/constants.h	/^        const double min = minute;$/;"	m	namespace:physical::unit
physical::unit::min	src/constants.h	/^        const double min = minute;$/;"	m	namespace:physical::unit
physical::unit::minersinch	include/Eternia/constants.h	/^        const double minersinch = 1.5*foot*foot*foot\/minute;$/;"	m	namespace:physical::unit
physical::unit::minersinch	src/constants.h	/^        const double minersinch = 1.5*foot*foot*foot\/minute;$/;"	m	namespace:physical::unit
physical::unit::minim	include/Eternia/constants.h	/^        const double minim = 6.161152e-8*(m*m*m);$/;"	m	namespace:physical::unit
physical::unit::minim	src/constants.h	/^        const double minim = 6.161152e-8*(m*m*m);$/;"	m	namespace:physical::unit
physical::unit::minims	include/Eternia/constants.h	/^        const double minims = minim;$/;"	m	namespace:physical::unit
physical::unit::minims	src/constants.h	/^        const double minims = minim;$/;"	m	namespace:physical::unit
physical::unit::minute	include/Eternia/constants.h	/^        const double minute = 60.0*seconds;$/;"	m	namespace:physical::unit
physical::unit::minute	src/constants.h	/^        const double minute = 60.0*seconds;$/;"	m	namespace:physical::unit
physical::unit::minutes	include/Eternia/constants.h	/^        const double minutes = minute;$/;"	m	namespace:physical::unit
physical::unit::minutes	src/constants.h	/^        const double minutes = minute;$/;"	m	namespace:physical::unit
physical::unit::ml	include/Eternia/constants.h	/^        const double ml = milliliter;$/;"	m	namespace:physical::unit
physical::unit::ml	src/constants.h	/^        const double ml = milliliter;$/;"	m	namespace:physical::unit
physical::unit::mm	include/Eternia/constants.h	/^        const double mm = millimeter;$/;"	m	namespace:physical::unit
physical::unit::mm	src/constants.h	/^        const double mm = millimeter;$/;"	m	namespace:physical::unit
physical::unit::mo	include/Eternia/constants.h	/^        const double mo = month;$/;"	m	namespace:physical::unit
physical::unit::mo	src/constants.h	/^        const double mo = month;$/;"	m	namespace:physical::unit
physical::unit::mol	include/Eternia/constants.h	/^        const double mol = mole;$/;"	m	namespace:physical::unit
physical::unit::mol	src/constants.h	/^        const double mol = mole;$/;"	m	namespace:physical::unit
physical::unit::mole	include/Eternia/constants.h	/^        const double mole = 6.0221367e+23;$/;"	m	namespace:physical::unit
physical::unit::mole	src/constants.h	/^        const double mole = 6.0221367e+23;$/;"	m	namespace:physical::unit
physical::unit::moles	include/Eternia/constants.h	/^        const double moles = mole;$/;"	m	namespace:physical::unit
physical::unit::moles	src/constants.h	/^        const double moles = mole;$/;"	m	namespace:physical::unit
physical::unit::month	include/Eternia/constants.h	/^        const double month = year\/12.0;$/;"	m	namespace:physical::unit
physical::unit::month	src/constants.h	/^        const double month = year\/12.0;$/;"	m	namespace:physical::unit
physical::unit::months	include/Eternia/constants.h	/^        const double months = month;$/;"	m	namespace:physical::unit
physical::unit::months	src/constants.h	/^        const double months = month;$/;"	m	namespace:physical::unit
physical::unit::mpg	include/Eternia/constants.h	/^        const double mpg = statute::miles\/US::liquid::gallon;$/;"	m	namespace:physical::unit
physical::unit::mpg	src/constants.h	/^        const double mpg = statute::miles\/US::liquid::gallon;$/;"	m	namespace:physical::unit
physical::unit::mph	include/Eternia/constants.h	/^        const double mph = statute::miles\/hour;$/;"	m	namespace:physical::unit
physical::unit::mph	src/constants.h	/^        const double mph = statute::miles\/hour;$/;"	m	namespace:physical::unit
physical::unit::ms	include/Eternia/constants.h	/^        const double ms = millisecond;$/;"	m	namespace:physical::unit
physical::unit::ms	src/constants.h	/^        const double ms = millisecond;$/;"	m	namespace:physical::unit
physical::unit::nail	include/Eternia/constants.h	/^        const double nail = yard\/16.0;$/;"	m	namespace:physical::unit
physical::unit::nail	src/constants.h	/^        const double nail = yard\/16.0;$/;"	m	namespace:physical::unit
physical::unit::nails	include/Eternia/constants.h	/^        const double nails = nail;$/;"	m	namespace:physical::unit
physical::unit::nails	src/constants.h	/^        const double nails = nail;$/;"	m	namespace:physical::unit
physical::unit::nanometer	include/Eternia/constants.h	/^        const double nanometer = meter\/1000000000.0;$/;"	m	namespace:physical::unit
physical::unit::nanometer	src/constants.h	/^        const double nanometer = meter\/1000000000.0;$/;"	m	namespace:physical::unit
physical::unit::nanometers	include/Eternia/constants.h	/^        const double nanometers = nanometer;$/;"	m	namespace:physical::unit
physical::unit::nanometers	src/constants.h	/^        const double nanometers = nanometer;$/;"	m	namespace:physical::unit
physical::unit::nanosecond	include/Eternia/constants.h	/^        const double nanosecond = second\/1000000000.0;$/;"	m	namespace:physical::unit
physical::unit::nanosecond	src/constants.h	/^        const double nanosecond = second\/1000000000.0;$/;"	m	namespace:physical::unit
physical::unit::nanoseconds	include/Eternia/constants.h	/^        const double nanoseconds = nanosecond;$/;"	m	namespace:physical::unit
physical::unit::nanoseconds	src/constants.h	/^        const double nanoseconds = nanosecond;$/;"	m	namespace:physical::unit
physical::unit::nautical	include/Eternia/constants.h	/^        namespace nautical {$/;"	n	namespace:physical::unit
physical::unit::nautical	src/constants.h	/^        namespace nautical {$/;"	n	namespace:physical::unit
physical::unit::nautical::league	include/Eternia/constants.h	/^            const double league = 3.0*miles;$/;"	m	namespace:physical::unit::nautical
physical::unit::nautical::league	src/constants.h	/^            const double league = 3.0*miles;$/;"	m	namespace:physical::unit::nautical
physical::unit::nautical::leagues	include/Eternia/constants.h	/^            const double leagues = league;$/;"	m	namespace:physical::unit::nautical
physical::unit::nautical::leagues	src/constants.h	/^            const double leagues = league;$/;"	m	namespace:physical::unit::nautical
physical::unit::nautical::mile	include/Eternia/constants.h	/^            const double mile = 1852*meters;$/;"	m	namespace:physical::unit::nautical
physical::unit::nautical::mile	src/constants.h	/^            const double mile = 1852*meters;$/;"	m	namespace:physical::unit::nautical
physical::unit::nautical::miles	include/Eternia/constants.h	/^            const double miles = mile;$/;"	m	namespace:physical::unit::nautical
physical::unit::nautical::miles	src/constants.h	/^            const double miles = mile;$/;"	m	namespace:physical::unit::nautical
physical::unit::nautical::nm	include/Eternia/constants.h	/^            const double nm = mile;$/;"	m	namespace:physical::unit::nautical
physical::unit::nautical::nm	src/constants.h	/^            const double nm = mile;$/;"	m	namespace:physical::unit::nautical
physical::unit::nit	include/Eternia/constants.h	/^        const double nit = apostilb;$/;"	m	namespace:physical::unit
physical::unit::nit	src/constants.h	/^        const double nit = apostilb;$/;"	m	namespace:physical::unit
physical::unit::nits	include/Eternia/constants.h	/^        const double nits = nit;$/;"	m	namespace:physical::unit
physical::unit::nits	src/constants.h	/^        const double nits = nit;$/;"	m	namespace:physical::unit
physical::unit::nm	include/Eternia/constants.h	/^        const double nm = nanometer;$/;"	m	namespace:physical::unit
physical::unit::nm	src/constants.h	/^        const double nm = nanometer;$/;"	m	namespace:physical::unit
physical::unit::noggin	include/Eternia/constants.h	/^        const double noggin = 2.0*US::liquid::ounces;$/;"	m	namespace:physical::unit
physical::unit::noggin	src/constants.h	/^        const double noggin = 2.0*US::liquid::ounces;$/;"	m	namespace:physical::unit
physical::unit::noggins	include/Eternia/constants.h	/^        const double noggins = noggin;$/;"	m	namespace:physical::unit
physical::unit::noggins	src/constants.h	/^        const double noggins = noggin;$/;"	m	namespace:physical::unit
physical::unit::nox	include/Eternia/constants.h	/^        const double nox = lux\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::nox	src/constants.h	/^        const double nox = lux\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::p	include/Eternia/constants.h	/^        const double p = pole;$/;"	m	namespace:physical::unit
physical::unit::p	src/constants.h	/^        const double p = pole;$/;"	m	namespace:physical::unit
physical::unit::pace	include/Eternia/constants.h	/^        const double pace = 5.0*feet;$/;"	m	namespace:physical::unit
physical::unit::pace	src/constants.h	/^        const double pace = 5.0*feet;$/;"	m	namespace:physical::unit
physical::unit::paces	include/Eternia/constants.h	/^        const double paces = pace;$/;"	m	namespace:physical::unit
physical::unit::paces	src/constants.h	/^        const double paces = pace;$/;"	m	namespace:physical::unit
physical::unit::palm	include/Eternia/constants.h	/^        const double palm = 3.0*inches;$/;"	m	namespace:physical::unit
physical::unit::palm	src/constants.h	/^        const double palm = 3.0*inches;$/;"	m	namespace:physical::unit
physical::unit::palms	include/Eternia/constants.h	/^        const double palms = palm;$/;"	m	namespace:physical::unit
physical::unit::palms	src/constants.h	/^        const double palms = palm;$/;"	m	namespace:physical::unit
physical::unit::parasang	include/Eternia/constants.h	/^        const double parasang = 3.5*statute::miles;$/;"	m	namespace:physical::unit
physical::unit::parasang	src/constants.h	/^        const double parasang = 3.5*statute::miles;$/;"	m	namespace:physical::unit
physical::unit::parasangs	include/Eternia/constants.h	/^        const double parasangs = parasang;$/;"	m	namespace:physical::unit
physical::unit::parasangs	src/constants.h	/^        const double parasangs = parasang;$/;"	m	namespace:physical::unit
physical::unit::parsec	include/Eternia/constants.h	/^        const double parsec = AU*radians\/arc::second;$/;"	m	namespace:physical::unit
physical::unit::parsec	src/constants.h	/^        const double parsec = AU*radians\/arc::second;$/;"	m	namespace:physical::unit
physical::unit::parsecs	include/Eternia/constants.h	/^        const double parsecs = parsec;$/;"	m	namespace:physical::unit
physical::unit::parsecs	src/constants.h	/^        const double parsecs = parsec;$/;"	m	namespace:physical::unit
physical::unit::pc	include/Eternia/constants.h	/^        const double pc = parsec;$/;"	m	namespace:physical::unit
physical::unit::pc	src/constants.h	/^        const double pc = parsec;$/;"	m	namespace:physical::unit
physical::unit::pdl	include/Eternia/constants.h	/^        const double pdl = poundal;$/;"	m	namespace:physical::unit
physical::unit::pdl	src/constants.h	/^        const double pdl = poundal;$/;"	m	namespace:physical::unit
physical::unit::pennyweight	include/Eternia/constants.h	/^        const double pennyweight = 24.0*grains;$/;"	m	namespace:physical::unit
physical::unit::pennyweight	src/constants.h	/^        const double pennyweight = 24.0*grains;$/;"	m	namespace:physical::unit
physical::unit::percent	include/Eternia/constants.h	/^        const double percent = 1.0\/100.0;$/;"	m	namespace:physical::unit
physical::unit::percent	src/constants.h	/^        const double percent = 1.0\/100.0;$/;"	m	namespace:physical::unit
physical::unit::perch	include/Eternia/constants.h	/^        const double perch = rod;$/;"	m	namespace:physical::unit
physical::unit::perch	src/constants.h	/^        const double perch = rod;$/;"	m	namespace:physical::unit
physical::unit::perches	include/Eternia/constants.h	/^        const double perches = perch;$/;"	m	namespace:physical::unit
physical::unit::perches	src/constants.h	/^        const double perches = perch;$/;"	m	namespace:physical::unit
physical::unit::peta	include/Eternia/constants.h	/^        const double peta = 1e15;$/;"	m	namespace:physical::unit
physical::unit::peta	src/constants.h	/^        const double peta = 1e15;$/;"	m	namespace:physical::unit
physical::unit::petaHertz	include/Eternia/constants.h	/^        const double petaHertz = peta*Hertz;$/;"	m	namespace:physical::unit
physical::unit::petaHertz	src/constants.h	/^        const double petaHertz = peta*Hertz;$/;"	m	namespace:physical::unit
physical::unit::phot	include/Eternia/constants.h	/^        const double phot = lumens\/centimeter\/centimeter;$/;"	m	namespace:physical::unit
physical::unit::phot	src/constants.h	/^        const double phot = lumens\/centimeter\/centimeter;$/;"	m	namespace:physical::unit
physical::unit::phots	include/Eternia/constants.h	/^        const double phots = phot;$/;"	m	namespace:physical::unit
physical::unit::phots	src/constants.h	/^        const double phots = phot;$/;"	m	namespace:physical::unit
physical::unit::pi	include/Eternia/constants.h	/^        const double pi = 3.14159265358979323846*radians;$/;"	m	namespace:physical::unit
physical::unit::pi	src/constants.h	/^        const double pi = 3.14159265358979323846*radians;$/;"	m	namespace:physical::unit
physical::unit::pica	include/Eternia/constants.h	/^        const double pica = 12.0*points;$/;"	m	namespace:physical::unit
physical::unit::pica	src/constants.h	/^        const double pica = 12.0*points;$/;"	m	namespace:physical::unit
physical::unit::picas	include/Eternia/constants.h	/^        const double picas = pica;$/;"	m	namespace:physical::unit
physical::unit::picas	src/constants.h	/^        const double picas = pica;$/;"	m	namespace:physical::unit
physical::unit::picosecond	include/Eternia/constants.h	/^        const double picosecond = second\/1000000000000.0;$/;"	m	namespace:physical::unit
physical::unit::picosecond	src/constants.h	/^        const double picosecond = second\/1000000000000.0;$/;"	m	namespace:physical::unit
physical::unit::picoseconds	include/Eternia/constants.h	/^        const double picoseconds = picosecond;$/;"	m	namespace:physical::unit
physical::unit::picoseconds	src/constants.h	/^        const double picoseconds = picosecond;$/;"	m	namespace:physical::unit
physical::unit::pieze	include/Eternia/constants.h	/^        const double pieze = 1000.0*Pascals;$/;"	m	namespace:physical::unit
physical::unit::pieze	src/constants.h	/^        const double pieze = 1000.0*Pascals;$/;"	m	namespace:physical::unit
physical::unit::piezes	include/Eternia/constants.h	/^        const double piezes = pieze;$/;"	m	namespace:physical::unit
physical::unit::piezes	src/constants.h	/^        const double piezes = pieze;$/;"	m	namespace:physical::unit
physical::unit::pipe	include/Eternia/constants.h	/^        const double pipe = 4.0*US::barrels;$/;"	m	namespace:physical::unit
physical::unit::pipe	src/constants.h	/^        const double pipe = 4.0*US::barrels;$/;"	m	namespace:physical::unit
physical::unit::pipes	include/Eternia/constants.h	/^        const double pipes = pipe;$/;"	m	namespace:physical::unit
physical::unit::pipes	src/constants.h	/^        const double pipes = pipe;$/;"	m	namespace:physical::unit
physical::unit::point	include/Eternia/constants.h	/^        const double point = inch\/72.27;$/;"	m	namespace:physical::unit
physical::unit::point	src/constants.h	/^        const double point = inch\/72.27;$/;"	m	namespace:physical::unit
physical::unit::points	include/Eternia/constants.h	/^        const double points = point;$/;"	m	namespace:physical::unit
physical::unit::points	src/constants.h	/^        const double points = point;$/;"	m	namespace:physical::unit
physical::unit::pole	include/Eternia/constants.h	/^        const double pole = rod;$/;"	m	namespace:physical::unit
physical::unit::pole	src/constants.h	/^        const double pole = rod;$/;"	m	namespace:physical::unit
physical::unit::poles	include/Eternia/constants.h	/^        const double poles = pole;$/;"	m	namespace:physical::unit
physical::unit::poles	src/constants.h	/^        const double poles = pole;$/;"	m	namespace:physical::unit
physical::unit::poundal	include/Eternia/constants.h	/^        const double poundal = avdp::pound*foot\/(second*second);$/;"	m	namespace:physical::unit
physical::unit::poundal	src/constants.h	/^        const double poundal = avdp::pound*foot\/(second*second);$/;"	m	namespace:physical::unit
physical::unit::poundals	include/Eternia/constants.h	/^        const double poundals = poundal;$/;"	m	namespace:physical::unit
physical::unit::poundals	src/constants.h	/^        const double poundals = poundal;$/;"	m	namespace:physical::unit
physical::unit::proof	include/Eternia/constants.h	/^        const double proof = percent\/2.0;$/;"	m	namespace:physical::unit
physical::unit::proof	src/constants.h	/^        const double proof = percent\/2.0;$/;"	m	namespace:physical::unit
physical::unit::psi	include/Eternia/constants.h	/^        const double psi = lbf\/(inch*inch);$/;"	m	namespace:physical::unit
physical::unit::psi	src/constants.h	/^        const double psi = lbf\/(inch*inch);$/;"	m	namespace:physical::unit
physical::unit::pt	include/Eternia/constants.h	/^        const double pt = point;$/;"	m	namespace:physical::unit
physical::unit::pt	src/constants.h	/^        const double pt = point;$/;"	m	namespace:physical::unit
physical::unit::pz	include/Eternia/constants.h	/^        const double pz = pieze;$/;"	m	namespace:physical::unit
physical::unit::pz	src/constants.h	/^        const double pz = pieze;$/;"	m	namespace:physical::unit
physical::unit::quintal	include/Eternia/constants.h	/^        const double quintal = 100.0*kilograms;$/;"	m	namespace:physical::unit
physical::unit::quintal	src/constants.h	/^        const double quintal = 100.0*kilograms;$/;"	m	namespace:physical::unit
physical::unit::quintals	include/Eternia/constants.h	/^        const double quintals = quintal;$/;"	m	namespace:physical::unit
physical::unit::quintals	src/constants.h	/^        const double quintals = quintal;$/;"	m	namespace:physical::unit
physical::unit::quire	include/Eternia/constants.h	/^        const double quire = 25.0;$/;"	m	namespace:physical::unit
physical::unit::quire	src/constants.h	/^        const double quire = 25.0;$/;"	m	namespace:physical::unit
physical::unit::quires	include/Eternia/constants.h	/^        const double quires = quire;$/;"	m	namespace:physical::unit
physical::unit::quires	src/constants.h	/^        const double quires = quire;$/;"	m	namespace:physical::unit
physical::unit::rad	include/Eternia/constants.h	/^        const double rad = radian;$/;"	m	namespace:physical::unit
physical::unit::rad	src/constants.h	/^        const double rad = radian;$/;"	m	namespace:physical::unit
physical::unit::radian	include/Eternia/constants.h	/^        const double radian = 1.0;$/;"	m	namespace:physical::unit
physical::unit::radian	src/constants.h	/^        const double radian = 1.0;$/;"	m	namespace:physical::unit
physical::unit::radians	include/Eternia/constants.h	/^        const double radians = radian;$/;"	m	namespace:physical::unit
physical::unit::radians	src/constants.h	/^        const double radians = radian;$/;"	m	namespace:physical::unit
physical::unit::rd	include/Eternia/constants.h	/^        const double rd = rod;$/;"	m	namespace:physical::unit
physical::unit::rd	src/constants.h	/^        const double rd = rod;$/;"	m	namespace:physical::unit
physical::unit::ream	include/Eternia/constants.h	/^        const double ream = 500.0;$/;"	m	namespace:physical::unit
physical::unit::ream	src/constants.h	/^        const double ream = 500.0;$/;"	m	namespace:physical::unit
physical::unit::reams	include/Eternia/constants.h	/^        const double reams = ream;$/;"	m	namespace:physical::unit
physical::unit::reams	src/constants.h	/^        const double reams = ream;$/;"	m	namespace:physical::unit
physical::unit::register_tn	include/Eternia/constants.h	/^        const double register_tn = register_ton;$/;"	m	namespace:physical::unit
physical::unit::register_tn	src/constants.h	/^        const double register_tn = register_ton;$/;"	m	namespace:physical::unit
physical::unit::register_ton	include/Eternia/constants.h	/^        const double register_ton = 100.0*(ft*ft*ft);$/;"	m	namespace:physical::unit
physical::unit::register_ton	src/constants.h	/^        const double register_ton = 100.0*(ft*ft*ft);$/;"	m	namespace:physical::unit
physical::unit::register_tons	include/Eternia/constants.h	/^        const double register_tons = register_ton;$/;"	m	namespace:physical::unit
physical::unit::register_tons	src/constants.h	/^        const double register_tons = register_ton;$/;"	m	namespace:physical::unit
physical::unit::ro	include/Eternia/constants.h	/^        const double ro = rood;$/;"	m	namespace:physical::unit
physical::unit::ro	src/constants.h	/^        const double ro = rood;$/;"	m	namespace:physical::unit
physical::unit::rod	include/Eternia/constants.h	/^        const double rod = 198.0*inches;$/;"	m	namespace:physical::unit
physical::unit::rod	src/constants.h	/^        const double rod = 198.0*inches;$/;"	m	namespace:physical::unit
physical::unit::rods	include/Eternia/constants.h	/^        const double rods = rod;$/;"	m	namespace:physical::unit
physical::unit::rods	src/constants.h	/^        const double rods = rod;$/;"	m	namespace:physical::unit
physical::unit::rood	include/Eternia/constants.h	/^        const double rood = 40.0*rod*rod;$/;"	m	namespace:physical::unit
physical::unit::rood	src/constants.h	/^        const double rood = 40.0*rod*rod;$/;"	m	namespace:physical::unit
physical::unit::roods	include/Eternia/constants.h	/^        const double roods = rood;$/;"	m	namespace:physical::unit
physical::unit::roods	src/constants.h	/^        const double roods = rood;$/;"	m	namespace:physical::unit
physical::unit::rope	include/Eternia/constants.h	/^        const double rope = 20.0*feet;$/;"	m	namespace:physical::unit
physical::unit::rope	src/constants.h	/^        const double rope = 20.0*feet;$/;"	m	namespace:physical::unit
physical::unit::ropes	include/Eternia/constants.h	/^        const double ropes = rope;$/;"	m	namespace:physical::unit
physical::unit::ropes	src/constants.h	/^        const double ropes = rope;$/;"	m	namespace:physical::unit
physical::unit::s	include/Eternia/constants.h	/^        const double s = second;$/;"	m	namespace:physical::unit
physical::unit::s	src/constants.h	/^        const double s = second;$/;"	m	namespace:physical::unit
physical::unit::sabin	include/Eternia/constants.h	/^        const double sabin = foot*foot;$/;"	m	namespace:physical::unit
physical::unit::sabin	src/constants.h	/^        const double sabin = foot*foot;$/;"	m	namespace:physical::unit
physical::unit::sabins	include/Eternia/constants.h	/^        const double sabins = sabin;$/;"	m	namespace:physical::unit
physical::unit::sabins	src/constants.h	/^        const double sabins = sabin;$/;"	m	namespace:physical::unit
physical::unit::sack	include/Eternia/constants.h	/^        const double sack = 3.0*US::bushels;$/;"	m	namespace:physical::unit
physical::unit::sack	src/constants.h	/^        const double sack = 3.0*US::bushels;$/;"	m	namespace:physical::unit
physical::unit::sacks	include/Eternia/constants.h	/^        const double sacks = sack;$/;"	m	namespace:physical::unit
physical::unit::sacks	src/constants.h	/^        const double sacks = sack;$/;"	m	namespace:physical::unit
physical::unit::seam	include/Eternia/constants.h	/^        const double seam = 8.0*US::bushels;$/;"	m	namespace:physical::unit
physical::unit::seam	src/constants.h	/^        const double seam = 8.0*US::bushels;$/;"	m	namespace:physical::unit
physical::unit::seams	include/Eternia/constants.h	/^        const double seams = seam;$/;"	m	namespace:physical::unit
physical::unit::seams	src/constants.h	/^        const double seams = seam;$/;"	m	namespace:physical::unit
physical::unit::sec	include/Eternia/constants.h	/^        const double sec = second;$/;"	m	namespace:physical::unit
physical::unit::sec	src/constants.h	/^        const double sec = second;$/;"	m	namespace:physical::unit
physical::unit::second	include/Eternia/constants.h	/^        const double second = 1.0;$/;"	m	namespace:physical::unit
physical::unit::second	src/constants.h	/^        const double second = 1.0;$/;"	m	namespace:physical::unit
physical::unit::seconds	include/Eternia/constants.h	/^        const double seconds = second;$/;"	m	namespace:physical::unit
physical::unit::seconds	src/constants.h	/^        const double seconds = second;$/;"	m	namespace:physical::unit
physical::unit::section	include/Eternia/constants.h	/^        const double section = statute::mile*statute::mile;$/;"	m	namespace:physical::unit
physical::unit::section	src/constants.h	/^        const double section = statute::mile*statute::mile;$/;"	m	namespace:physical::unit
physical::unit::sections	include/Eternia/constants.h	/^        const double sections = section;$/;"	m	namespace:physical::unit
physical::unit::sections	src/constants.h	/^        const double sections = section;$/;"	m	namespace:physical::unit
physical::unit::skein	include/Eternia/constants.h	/^        const double skein = 120*yards;$/;"	m	namespace:physical::unit
physical::unit::skein	src/constants.h	/^        const double skein = 120*yards;$/;"	m	namespace:physical::unit
physical::unit::skeins	include/Eternia/constants.h	/^        const double skeins = skein;$/;"	m	namespace:physical::unit
physical::unit::skeins	src/constants.h	/^        const double skeins = skein;$/;"	m	namespace:physical::unit
physical::unit::skot	include/Eternia/constants.h	/^        const double skot = apostilb\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::skot	src/constants.h	/^        const double skot = apostilb\/1000.0;$/;"	m	namespace:physical::unit
physical::unit::skots	include/Eternia/constants.h	/^        const double skots = skot;$/;"	m	namespace:physical::unit
physical::unit::skots	src/constants.h	/^        const double skots = skot;$/;"	m	namespace:physical::unit
physical::unit::span	include/Eternia/constants.h	/^        const double span = 9.0*inches;$/;"	m	namespace:physical::unit
physical::unit::span	src/constants.h	/^        const double span = 9.0*inches;$/;"	m	namespace:physical::unit
physical::unit::spans	include/Eternia/constants.h	/^        const double spans = span;$/;"	m	namespace:physical::unit
physical::unit::spans	src/constants.h	/^        const double spans = span;$/;"	m	namespace:physical::unit
physical::unit::spindle	include/Eternia/constants.h	/^        const double spindle = 14400*yards;$/;"	m	namespace:physical::unit
physical::unit::spindle	src/constants.h	/^        const double spindle = 14400*yards;$/;"	m	namespace:physical::unit
physical::unit::spindles	include/Eternia/constants.h	/^        const double spindles = spindle;$/;"	m	namespace:physical::unit
physical::unit::spindles	src/constants.h	/^        const double spindles = spindle;$/;"	m	namespace:physical::unit
physical::unit::square	include/Eternia/constants.h	/^        const double square = 100.0*sabin;$/;"	m	namespace:physical::unit
physical::unit::square	src/constants.h	/^        const double square = 100.0*sabin;$/;"	m	namespace:physical::unit
physical::unit::squares	include/Eternia/constants.h	/^        const double squares = square;$/;"	m	namespace:physical::unit
physical::unit::squares	src/constants.h	/^        const double squares = square;$/;"	m	namespace:physical::unit
physical::unit::sr	include/Eternia/constants.h	/^        const double sr = steradian;$/;"	m	namespace:physical::unit
physical::unit::sr	src/constants.h	/^        const double sr = steradian;$/;"	m	namespace:physical::unit
physical::unit::st	include/Eternia/constants.h	/^        const double st = stone;$/;"	m	namespace:physical::unit
physical::unit::st	src/constants.h	/^        const double st = stone;$/;"	m	namespace:physical::unit
physical::unit::statute	include/Eternia/constants.h	/^        namespace statute {$/;"	n	namespace:physical::unit
physical::unit::statute	src/constants.h	/^        namespace statute {$/;"	n	namespace:physical::unit
physical::unit::statute::league	include/Eternia/constants.h	/^            const double league = 3.0*miles;$/;"	m	namespace:physical::unit::statute
physical::unit::statute::league	src/constants.h	/^            const double league = 3.0*miles;$/;"	m	namespace:physical::unit::statute
physical::unit::statute::leagues	include/Eternia/constants.h	/^            const double leagues = league;$/;"	m	namespace:physical::unit::statute
physical::unit::statute::leagues	src/constants.h	/^            const double leagues = league;$/;"	m	namespace:physical::unit::statute
physical::unit::statute::mi	include/Eternia/constants.h	/^            const double mi = mile;$/;"	m	namespace:physical::unit::statute
physical::unit::statute::mi	src/constants.h	/^            const double mi = mile;$/;"	m	namespace:physical::unit::statute
physical::unit::statute::mile	include/Eternia/constants.h	/^            const double mile = 5280.0*feet;$/;"	m	namespace:physical::unit::statute
physical::unit::statute::mile	src/constants.h	/^            const double mile = 5280.0*feet;$/;"	m	namespace:physical::unit::statute
physical::unit::statute::miles	include/Eternia/constants.h	/^            const double miles = mile;$/;"	m	namespace:physical::unit::statute
physical::unit::statute::miles	src/constants.h	/^            const double miles = mile;$/;"	m	namespace:physical::unit::statute
physical::unit::steradian	include/Eternia/constants.h	/^        const double steradian = 1.0;$/;"	m	namespace:physical::unit
physical::unit::steradian	src/constants.h	/^        const double steradian = 1.0;$/;"	m	namespace:physical::unit
physical::unit::steradians	include/Eternia/constants.h	/^        const double steradians = steradian;$/;"	m	namespace:physical::unit
physical::unit::steradians	src/constants.h	/^        const double steradians = steradian;$/;"	m	namespace:physical::unit
physical::unit::stere	include/Eternia/constants.h	/^        const double stere = meter*meter*meter;$/;"	m	namespace:physical::unit
physical::unit::stere	src/constants.h	/^        const double stere = meter*meter*meter;$/;"	m	namespace:physical::unit
physical::unit::steres	include/Eternia/constants.h	/^        const double steres = stere;$/;"	m	namespace:physical::unit
physical::unit::steres	src/constants.h	/^        const double steres = stere;$/;"	m	namespace:physical::unit
physical::unit::stilb	include/Eternia/constants.h	/^        const double stilb = 10000.0*apostilbs;$/;"	m	namespace:physical::unit
physical::unit::stilb	src/constants.h	/^        const double stilb = 10000.0*apostilbs;$/;"	m	namespace:physical::unit
physical::unit::stilbs	include/Eternia/constants.h	/^        const double stilbs = stilb;$/;"	m	namespace:physical::unit
physical::unit::stilbs	src/constants.h	/^        const double stilbs = stilb;$/;"	m	namespace:physical::unit
physical::unit::stone	include/Eternia/constants.h	/^        const double stone = 14.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
physical::unit::stone	src/constants.h	/^        const double stone = 14.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
physical::unit::stones	include/Eternia/constants.h	/^        const double stones = stone;$/;"	m	namespace:physical::unit
physical::unit::stones	src/constants.h	/^        const double stones = stone;$/;"	m	namespace:physical::unit
physical::unit::strike	include/Eternia/constants.h	/^        const double strike = 2.0*US::bushels;$/;"	m	namespace:physical::unit
physical::unit::strike	src/constants.h	/^        const double strike = 2.0*US::bushels;$/;"	m	namespace:physical::unit
physical::unit::strikes	include/Eternia/constants.h	/^        const double strikes = strike;$/;"	m	namespace:physical::unit
physical::unit::strikes	src/constants.h	/^        const double strikes = strike;$/;"	m	namespace:physical::unit
physical::unit::t	include/Eternia/constants.h	/^        namespace t = apothecary;$/;"	x
physical::unit::t	src/constants.h	/^        namespace t = apothecary;$/;"	x
physical::unit::tablespoon	include/Eternia/constants.h	/^        const double tablespoon = 3.0*teaspoons;$/;"	m	namespace:physical::unit
physical::unit::tablespoon	src/constants.h	/^        const double tablespoon = 3.0*teaspoons;$/;"	m	namespace:physical::unit
physical::unit::tablespoons	include/Eternia/constants.h	/^        const double tablespoons = tablespoon;$/;"	m	namespace:physical::unit
physical::unit::tablespoons	src/constants.h	/^        const double tablespoons = tablespoon;$/;"	m	namespace:physical::unit
physical::unit::teaspoon	include/Eternia/constants.h	/^        const double teaspoon = 4.928922*cc;$/;"	m	namespace:physical::unit
physical::unit::teaspoon	src/constants.h	/^        const double teaspoon = 4.928922*cc;$/;"	m	namespace:physical::unit
physical::unit::teaspoons	include/Eternia/constants.h	/^        const double teaspoons = teaspoon;$/;"	m	namespace:physical::unit
physical::unit::teaspoons	src/constants.h	/^        const double teaspoons = teaspoon;$/;"	m	namespace:physical::unit
physical::unit::tera	include/Eternia/constants.h	/^        const double tera = 1e9;$/;"	m	namespace:physical::unit
physical::unit::tera	src/constants.h	/^        const double tera = 1e9;$/;"	m	namespace:physical::unit
physical::unit::teraHertz	include/Eternia/constants.h	/^        const double teraHertz = tera*Hertz;$/;"	m	namespace:physical::unit
physical::unit::teraHertz	src/constants.h	/^        const double teraHertz = tera*Hertz;$/;"	m	namespace:physical::unit
physical::unit::therm	include/Eternia/constants.h	/^        const double therm = 10000.0*Btu;$/;"	m	namespace:physical::unit
physical::unit::therm	src/constants.h	/^        const double therm = 10000.0*Btu;$/;"	m	namespace:physical::unit
physical::unit::thermie	include/Eternia/constants.h	/^        const double thermie = 1000000.0*calories;$/;"	m	namespace:physical::unit
physical::unit::thermie	src/constants.h	/^        const double thermie = 1000000.0*calories;$/;"	m	namespace:physical::unit
physical::unit::thermies	include/Eternia/constants.h	/^        const double thermies = thermie;$/;"	m	namespace:physical::unit
physical::unit::thermies	src/constants.h	/^        const double thermies = thermie;$/;"	m	namespace:physical::unit
physical::unit::therms	include/Eternia/constants.h	/^        const double therms = therm;$/;"	m	namespace:physical::unit
physical::unit::therms	src/constants.h	/^        const double therms = therm;$/;"	m	namespace:physical::unit
physical::unit::timberfeet	include/Eternia/constants.h	/^        const double timberfeet = timberfoot;$/;"	m	namespace:physical::unit
physical::unit::timberfeet	src/constants.h	/^        const double timberfeet = timberfoot;$/;"	m	namespace:physical::unit
physical::unit::timberfoot	include/Eternia/constants.h	/^        const double timberfoot = foot*foot*foot;$/;"	m	namespace:physical::unit
physical::unit::timberfoot	src/constants.h	/^        const double timberfoot = foot*foot*foot;$/;"	m	namespace:physical::unit
physical::unit::township	include/Eternia/constants.h	/^        const double township = 36.0*sections;$/;"	m	namespace:physical::unit
physical::unit::township	src/constants.h	/^        const double township = 36.0*sections;$/;"	m	namespace:physical::unit
physical::unit::townships	include/Eternia/constants.h	/^        const double townships = township;$/;"	m	namespace:physical::unit
physical::unit::townships	src/constants.h	/^        const double townships = township;$/;"	m	namespace:physical::unit
physical::unit::troy	include/Eternia/constants.h	/^        namespace troy = apothecary;$/;"	x
physical::unit::troy	src/constants.h	/^        namespace troy = apothecary;$/;"	x
physical::unit::tun	include/Eternia/constants.h	/^        const double tun = 8.0*US::barrels;$/;"	m	namespace:physical::unit
physical::unit::tun	src/constants.h	/^        const double tun = 8.0*US::barrels;$/;"	m	namespace:physical::unit
physical::unit::tuns	include/Eternia/constants.h	/^        const double tuns = tun;$/;"	m	namespace:physical::unit
physical::unit::tuns	src/constants.h	/^        const double tuns = tun;$/;"	m	namespace:physical::unit
physical::unit::us	include/Eternia/constants.h	/^        const double us = microsecond;$/;"	m	namespace:physical::unit
physical::unit::us	src/constants.h	/^        const double us = microsecond;$/;"	m	namespace:physical::unit
physical::unit::week	include/Eternia/constants.h	/^        const double week = 7.0*days;$/;"	m	namespace:physical::unit
physical::unit::week	src/constants.h	/^        const double week = 7.0*days;$/;"	m	namespace:physical::unit
physical::unit::weeks	include/Eternia/constants.h	/^        const double weeks = week;$/;"	m	namespace:physical::unit
physical::unit::weeks	src/constants.h	/^        const double weeks = week;$/;"	m	namespace:physical::unit
physical::unit::wey	include/Eternia/constants.h	/^        const double wey = 40.0*US::bushels;$/;"	m	namespace:physical::unit
physical::unit::wey	src/constants.h	/^        const double wey = 40.0*US::bushels;$/;"	m	namespace:physical::unit
physical::unit::weymass	include/Eternia/constants.h	/^        const double weymass = 252.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
physical::unit::weymass	src/constants.h	/^        const double weymass = 252.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
physical::unit::weys	include/Eternia/constants.h	/^        const double weys = wey;$/;"	m	namespace:physical::unit
physical::unit::weys	src/constants.h	/^        const double weys = wey;$/;"	m	namespace:physical::unit
physical::unit::yard	include/Eternia/constants.h	/^        const double yard = 3.0*feet;$/;"	m	namespace:physical::unit
physical::unit::yard	src/constants.h	/^        const double yard = 3.0*feet;$/;"	m	namespace:physical::unit
physical::unit::yards	include/Eternia/constants.h	/^        const double yards = yard;$/;"	m	namespace:physical::unit
physical::unit::yards	src/constants.h	/^        const double yards = yard;$/;"	m	namespace:physical::unit
physical::unit::yd	include/Eternia/constants.h	/^        const double yd = yard;$/;"	m	namespace:physical::unit
physical::unit::yd	src/constants.h	/^        const double yd = yard;$/;"	m	namespace:physical::unit
physical::unit::year	include/Eternia/constants.h	/^        const double year = 365.2421896698*days;$/;"	m	namespace:physical::unit
physical::unit::year	src/constants.h	/^        const double year = 365.2421896698*days;$/;"	m	namespace:physical::unit
physical::unit::years	include/Eternia/constants.h	/^        const double years = year;$/;"	m	namespace:physical::unit
physical::unit::years	src/constants.h	/^        const double years = year;$/;"	m	namespace:physical::unit
physical::unit::yotta	include/Eternia/constants.h	/^        const double yotta = 1e24;$/;"	m	namespace:physical::unit
physical::unit::yotta	src/constants.h	/^        const double yotta = 1e24;$/;"	m	namespace:physical::unit
physical::unit::yottaHertz	include/Eternia/constants.h	/^        const double yottaHertz = yotta*Hertz;$/;"	m	namespace:physical::unit
physical::unit::yottaHertz	src/constants.h	/^        const double yottaHertz = yotta*Hertz;$/;"	m	namespace:physical::unit
physical::unit::yr	include/Eternia/constants.h	/^        const double yr = year;$/;"	m	namespace:physical::unit
physical::unit::yr	src/constants.h	/^        const double yr = year;$/;"	m	namespace:physical::unit
physical::unit::zetta	include/Eternia/constants.h	/^        const double zetta = 1e21;$/;"	m	namespace:physical::unit
physical::unit::zetta	src/constants.h	/^        const double zetta = 1e21;$/;"	m	namespace:physical::unit
physical::unit::zettaHertz	include/Eternia/constants.h	/^        const double zettaHertz = zetta*Hertz;$/;"	m	namespace:physical::unit
physical::unit::zettaHertz	src/constants.h	/^        const double zettaHertz = zetta*Hertz;$/;"	m	namespace:physical::unit
physical::units	include/Eternia/constants.h	/^    namespace units = unit;$/;"	x
physical::units	src/constants.h	/^    namespace units = unit;$/;"	x
physics	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> physics; \/\/ General Physics knowledge$/;"	m	class:CraftingStats
physics	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> physics; \/\/ General Physics knowledge$/;"	m	class:CraftingStats
physicsWaitTime	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^const double physicsWaitTime = 50; \/\/ nanoseconds$/;"	v
physicsWaitTime	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^const double physicsWaitTime = 50; \/\/ nanoseconds$/;"	v
physiology	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> physiology; \/\/ Understanding of anatomy and it's applications$/;"	m	class:SkillSet
physiology	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> physiology; \/\/ Understanding of anatomy and it's applications$/;"	m	class:SkillSet
pi	include/Eternia/constants.h	/^        const double pi = 3.14159265358979323846*radians;$/;"	m	namespace:physical::unit
pi	src/constants.h	/^        const double pi = 3.14159265358979323846*radians;$/;"	m	namespace:physical::unit
pica	include/Eternia/constants.h	/^        const double pica = 12.0*points;$/;"	m	namespace:physical::unit
pica	src/constants.h	/^        const double pica = 12.0*points;$/;"	m	namespace:physical::unit
picas	include/Eternia/constants.h	/^        const double picas = pica;$/;"	m	namespace:physical::unit
picas	src/constants.h	/^        const double picas = pica;$/;"	m	namespace:physical::unit
picosecond	include/Eternia/constants.h	/^        const double picosecond = second\/1000000000000.0;$/;"	m	namespace:physical::unit
picosecond	src/constants.h	/^        const double picosecond = second\/1000000000000.0;$/;"	m	namespace:physical::unit
picoseconds	include/Eternia/constants.h	/^        const double picoseconds = picosecond;$/;"	m	namespace:physical::unit
picoseconds	src/constants.h	/^        const double picoseconds = picosecond;$/;"	m	namespace:physical::unit
pieze	include/Eternia/constants.h	/^        const double pieze = 1000.0*Pascals;$/;"	m	namespace:physical::unit
pieze	src/constants.h	/^        const double pieze = 1000.0*Pascals;$/;"	m	namespace:physical::unit
piezes	include/Eternia/constants.h	/^        const double piezes = pieze;$/;"	m	namespace:physical::unit
piezes	src/constants.h	/^        const double piezes = pieze;$/;"	m	namespace:physical::unit
pinA	include/Eternia/Engineering/Electrical/Components/Component.h	/^        PowerValue* pinA; \/\/ normally the Input$/;"	m	class:Component
pinA	src/Engineering/Electrical/Components/Component.h	/^        PowerValue* pinA; \/\/ normally the Input$/;"	m	class:Component
pinB	include/Eternia/Engineering/Electrical/Components/Component.h	/^        PowerValue* pinB; \/\/ normally the Output$/;"	m	class:Component
pinB	src/Engineering/Electrical/Components/Component.h	/^        PowerValue* pinB; \/\/ normally the Output$/;"	m	class:Component
pinD	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        PowerValue* pinD; \/\/ Drain pin 2$/;"	m	class:Mosfet
pinD	include/Eternia/Engineering/Electrical/Components/Transistor.h	/^        PowerValue* pinD; \/\/ Drain pin$/;"	m	class:Transistor
pinD	src/Engineering/Electrical/Components/Mosfet.h	/^        PowerValue* pinD; \/\/ Drain pin 2$/;"	m	class:Mosfet
pinD	src/Engineering/Electrical/Components/Transistor.h	/^        PowerValue* pinD; \/\/ Drain pin$/;"	m	class:Transistor
pinG	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        PowerValue* pinG; \/\/ Gate Pin 1$/;"	m	class:Mosfet
pinG	include/Eternia/Engineering/Electrical/Components/Transistor.h	/^        PowerValue* pinG; \/\/ Gate Pin$/;"	m	class:Transistor
pinG	src/Engineering/Electrical/Components/Mosfet.h	/^        PowerValue* pinG; \/\/ Gate Pin 1$/;"	m	class:Mosfet
pinG	src/Engineering/Electrical/Components/Transistor.h	/^        PowerValue* pinG; \/\/ Gate Pin$/;"	m	class:Transistor
pinS	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        PowerValue* pinS; \/\/ Source pin 3$/;"	m	class:Mosfet
pinS	src/Engineering/Electrical/Components/Mosfet.h	/^        PowerValue* pinS; \/\/ Source pin 3$/;"	m	class:Mosfet
pins	include/Eternia/Engineering/Electrical/IC/IC.h	/^        LinkedList<Pin>* pins;$/;"	m	class:IC
pins	src/Engineering/Electrical/IC/IC.h	/^        LinkedList<Pin>* pins;$/;"	m	class:IC
pint	include/Eternia/constants.h	/^                const double pint = 4.0*gills;$/;"	m	namespace:physical::unit::British::fluid
pint	include/Eternia/constants.h	/^                const double pint = 4.0*gills;$/;"	m	namespace:physical::unit::US::liquid
pint	include/Eternia/constants.h	/^                const double pint = 550.61047*cc;$/;"	m	namespace:physical::unit::US::dry
pint	src/constants.h	/^                const double pint = 4.0*gills;$/;"	m	namespace:physical::unit::British::fluid
pint	src/constants.h	/^                const double pint = 4.0*gills;$/;"	m	namespace:physical::unit::US::liquid
pint	src/constants.h	/^                const double pint = 550.61047*cc;$/;"	m	namespace:physical::unit::US::dry
pints	include/Eternia/constants.h	/^                const double pints = pint;$/;"	m	namespace:physical::unit::British::fluid
pints	include/Eternia/constants.h	/^                const double pints = pint;$/;"	m	namespace:physical::unit::US::dry
pints	include/Eternia/constants.h	/^                const double pints = pint;$/;"	m	namespace:physical::unit::US::liquid
pints	src/constants.h	/^                const double pints = pint;$/;"	m	namespace:physical::unit::British::fluid
pints	src/constants.h	/^                const double pints = pint;$/;"	m	namespace:physical::unit::US::dry
pints	src/constants.h	/^                const double pints = pint;$/;"	m	namespace:physical::unit::US::liquid
pipe	include/Eternia/constants.h	/^        const double pipe = 4.0*US::barrels;$/;"	m	namespace:physical::unit
pipe	src/constants.h	/^        const double pipe = 4.0*US::barrels;$/;"	m	namespace:physical::unit
pipes	include/Eternia/constants.h	/^        const double pipes = pipe;$/;"	m	namespace:physical::unit
pipes	src/constants.h	/^        const double pipes = pipe;$/;"	m	namespace:physical::unit
pistols	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> pistols; \/\/ infantry weapons, basic mount (Laser or ballistic)$/;"	m	class:CraftingStats
pistols	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> pistols; \/\/ infantry weapons, basic mount (Laser or ballistic)$/;"	m	class:CraftingStats
pk	include/Eternia/constants.h	/^            const double pk = peck;$/;"	m	namespace:physical::unit::British
pk	include/Eternia/constants.h	/^            const double pk = peck;$/;"	m	namespace:physical::unit::US
pk	src/constants.h	/^            const double pk = peck;$/;"	m	namespace:physical::unit::British
pk	src/constants.h	/^            const double pk = peck;$/;"	m	namespace:physical::unit::US
plasma	include/Eternia/Engineering/Chemistry/Composite.h	/^enum STATE {solid, liquid, gas, plasma};$/;"	e	enum:STATE
plasma	src/Engineering/Chemistry/Composite.h	/^enum STATE {solid, liquid, gas, plasma};$/;"	e	enum:STATE
plot	include/Eternia/Gamelogic/AI/AIDecide.h	/^        void plot(); \/\/ AI will plot (Strategize) if in command or tainted\/smart.$/;"	p	class:AIDecide
plot	src/Gamelogic/AI/AIDecide.h	/^        void plot(); \/\/ AI will plot (Strategize) if in command or tainted\/smart.$/;"	p	class:AIDecide
point	include/Eternia/constants.h	/^        const double point = inch\/72.27;$/;"	m	namespace:physical::unit
point	src/constants.h	/^        const double point = inch\/72.27;$/;"	m	namespace:physical::unit
points	include/Eternia/constants.h	/^        const double points = point;$/;"	m	namespace:physical::unit
points	src/constants.h	/^        const double points = point;$/;"	m	namespace:physical::unit
pole	include/Eternia/constants.h	/^        const double pole = rod;$/;"	m	namespace:physical::unit
pole	src/constants.h	/^        const double pole = rod;$/;"	m	namespace:physical::unit
poles	include/Eternia/constants.h	/^        const double poles = pole;$/;"	m	namespace:physical::unit
poles	src/constants.h	/^        const double poles = pole;$/;"	m	namespace:physical::unit
political	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> political; \/\/ ability to command the masses$/;"	m	class:SkillSet
political	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> political; \/\/ ability to command the masses$/;"	m	class:SkillSet
poll	include/Eternia/Data/Stack.h	/^        int poll(); \/\/ pull from front of list, do not remove$/;"	p	class:Stack
poll	src/Data/Stack.cpp	/^int Stack::poll() {$/;"	f	class:Stack
poll	src/Data/Stack.h	/^        int poll(); \/\/ pull from front of list, do not remove$/;"	p	class:Stack
pop	include/Eternia/Data/DoubleList.h	/^        double pop(); \/\/ erase front$/;"	p	class:DoubleList
pop	include/Eternia/Data/IntegerList.h	/^        int pop(); \/\/ erase front$/;"	p	class:IntegerList
pop	include/Eternia/Data/Queue.h	/^        void* pop();$/;"	p	class:Queue
pop	include/Eternia/Data/Stack.h	/^        int pop(); \/\/ pull from front of list, removed it$/;"	p	class:Stack
pop	src/Data/DoubleList.cpp	/^double DoubleList::pop() {$/;"	f	class:DoubleList
pop	src/Data/DoubleList.h	/^        double pop(); \/\/ erase front$/;"	p	class:DoubleList
pop	src/Data/IntegerList.cpp	/^int IntegerList::pop() {$/;"	f	class:IntegerList
pop	src/Data/IntegerList.h	/^        int pop(); \/\/ erase front$/;"	p	class:IntegerList
pop	src/Data/Queue.cpp	/^void* Queue::pop() {$/;"	f	class:Queue
pop	src/Data/Queue.h	/^        void* pop();$/;"	p	class:Queue
pop	src/Data/Stack.cpp	/^int Stack::pop() {$/;"	f	class:Stack
pop	src/Data/Stack.h	/^        int pop(); \/\/ pull from front of list, removed it$/;"	p	class:Stack
pop_back	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* pop_back();$/;"	p	class:AbstractDBLinkedDataset
pop_back	src/Data/AbstractDatabase/AbstractDB.h	/^        void* pop_back();$/;"	p	class:AbstractDBLinkedDataset
pop_back	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void* AbstractDBLinkedDataset::pop_back() {$/;"	f	class:AbstractDBLinkedDataset
pop_front	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* pop_front();$/;"	p	class:AbstractDBLinkedDataset
pop_front	src/Data/AbstractDatabase/AbstractDB.h	/^        void* pop_front();$/;"	p	class:AbstractDBLinkedDataset
pop_front	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void* AbstractDBLinkedDataset::pop_front() {$/;"	f	class:AbstractDBLinkedDataset
port	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        int port;$/;"	m	class:P2PNode
port	include/Eternia/WebFramework/Network/SocketServer.h	/^    int port, bufferSize;$/;"	m	class:SocketServer
port	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        int port;$/;"	m	class:P2PNode
port	src/WebFramework/Network/SocketServer.h	/^    int port, bufferSize;$/;"	m	class:SocketServer
portable_reactor	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP portable_reactor; \/\/ reactor powers detection \/ shields$/;"	m	class:AvatarHealth
portable_reactor	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP portable_reactor; \/\/ reactor powers detection \/ shields$/;"	m	class:AvatarHealth
position	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    int position;$/;"	m	struct:__anon9
position	src/Algorithm/Compression/BasicCompressor.h	/^    int position;$/;"	m	struct:__anon3
pound	include/Eternia/constants.h	/^            const double pound = 12.0*ounces;$/;"	m	namespace:physical::unit::apothecary
pound	include/Eternia/constants.h	/^            const double pound = 7000.0*grains;$/;"	m	namespace:physical::unit::avoirdupois
pound	src/constants.h	/^            const double pound = 12.0*ounces;$/;"	m	namespace:physical::unit::apothecary
pound	src/constants.h	/^            const double pound = 7000.0*grains;$/;"	m	namespace:physical::unit::avoirdupois
poundal	include/Eternia/constants.h	/^        const double poundal = avdp::pound*foot\/(second*second);$/;"	m	namespace:physical::unit
poundal	src/constants.h	/^        const double poundal = avdp::pound*foot\/(second*second);$/;"	m	namespace:physical::unit
poundals	include/Eternia/constants.h	/^        const double poundals = poundal;$/;"	m	namespace:physical::unit
poundals	src/constants.h	/^        const double poundals = poundal;$/;"	m	namespace:physical::unit
pounds	include/Eternia/constants.h	/^            const double pounds = pound;$/;"	m	namespace:physical::unit::apothecary
pounds	include/Eternia/constants.h	/^            const double pounds = pound;$/;"	m	namespace:physical::unit::avoirdupois
pounds	src/constants.h	/^            const double pounds = pound;$/;"	m	namespace:physical::unit::apothecary
pounds	src/constants.h	/^            const double pounds = pound;$/;"	m	namespace:physical::unit::avoirdupois
pow	include/Eternia/Math/Functions/Basic.h	/^    double pow(double a, double b); \/\/ power of function, gets the exponent a^b$/;"	p	namespace:Math
pow	src/Math/Functions/Basic.cpp	/^    double pow(double x, double b) {$/;"	f	namespace:Math
pow	src/Math/Functions/Basic.h	/^    double pow(double a, double b); \/\/ power of function, gets the exponent a^b$/;"	p	namespace:Math
powb	include/Eternia/Math/Functions/Basic.h	/^    double powb(double x, double b); \/\/ Cheap and easy power for integers of b$/;"	p	namespace:Math
powb	src/Math/Functions/Basic.cpp	/^    double powb(double x, double b) {$/;"	f	namespace:Math
powb	src/Math/Functions/Basic.h	/^    double powb(double x, double b); \/\/ Cheap and easy power for integers of b$/;"	p	namespace:Math
power	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> power; \/\/ Class mix of electrical; chemistry and physics to create advanced power designs$/;"	m	class:CraftingStats
power	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> power; \/\/ Class mix of electrical; chemistry and physics to create advanced power designs$/;"	m	class:CraftingStats
powerMax	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        PowerValue* powerMax; \/\/ defines max power of a component.$/;"	m	class:ComponentRating
powerMax	src/Engineering/Electrical/Components/ComponentRating.h	/^        PowerValue* powerMax; \/\/ defines max power of a component.$/;"	m	class:ComponentRating
powerTime	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        double powerTime; \/\/ time in which power is applied$/;"	m	class:ComponentRating
powerTime	src/Engineering/Electrical/Components/ComponentRating.h	/^        double powerTime; \/\/ time in which power is applied$/;"	m	class:ComponentRating
power_suit	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> power_suit; \/\/ skill in making better suits.$/;"	m	class:CraftingStats
power_suit	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> power_suit; \/\/ skill in making better suits.$/;"	m	class:CraftingStats
prec	src/Math/Eval.cpp	/^int prec(MOperator op) {$/;"	f
precompileAll	include/Eternia/Programming/CPLScript/CPLScripter.h	/^        void precompileAll(); \/\/ precompiles all of the scripts into *.cpo files.$/;"	p	class:CPLScripter
precompileAll	src/Programming/CPLScript/CPLScripter.h	/^        void precompileAll(); \/\/ precompiles all of the scripts into *.cpo files.$/;"	p	class:CPLScripter
predictability	include/Eternia/Gamelogic/AI/AI.h	/^        double predictability; \/\/ how predictable is this AI? (i.e: randomness of the AI, 0% for insane)$/;"	m	class:AI
predictability	src/Gamelogic/AI/AI.h	/^        double predictability; \/\/ how predictable is this AI? (i.e: randomness of the AI, 0% for insane)$/;"	m	class:AI
prefix	include/Eternia/Data/Logger/Logger.h	/^    CharString logfileloc, prefix;$/;"	m	class:Logger
prefix	include/Eternia/Programming/Instruction.h	/^    char prefix; \/\/ some opcodes have a specific prefix$/;"	m	class:Instruction
prefix	src/Data/Logger/Logger.h	/^    CharString logfileloc, prefix;$/;"	m	class:Logger
prefix	src/Programming/Instruction.h	/^    char prefix; \/\/ some opcodes have a specific prefix$/;"	m	class:Instruction
preload	include/Eternia/Data/FileCache.hpp	/^        void preload(long ID) {$/;"	f	class:FileCache
preload	src/Data/FileCache.hpp	/^        void preload(long ID) {$/;"	f	class:FileCache
preloadMods	include/Eternia/API/APICore.h	/^    void preloadMods(); \/\/ pre-loads mod files and dependencies chains$/;"	p	class:APICore
preloadMods	src/API/APICore.h	/^    void preloadMods(); \/\/ pre-loads mod files and dependencies chains$/;"	p	class:APICore
preloadModule	include/Eternia/API/APICore.h	/^    APIMod* preloadModule(CharString file); \/\/ preloads the module, reads "mod.properties" file.$/;"	p	class:APICore
preloadModule	src/API/APICore.h	/^    APIMod* preloadModule(CharString file); \/\/ preloads the module, reads "mod.properties" file.$/;"	p	class:APICore
prev	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *prev, *next;$/;"	m	class:AbstractDBLinkedNode
prev	include/Eternia/Data/DoubleList.h	/^        DoubleNode *prev, *next;$/;"	m	class:DoubleNode
prev	include/Eternia/Data/IntegerList.h	/^        IntegerNode *prev, *next;$/;"	m	class:IntegerNode
prev	include/Eternia/Data/LinkedListT.h	/^        LinkedNodeT * prev;$/;"	m	class:LinkedNodeT
prev	include/Eternia/Data/LinkedMap.h	/^        void * prev;$/;"	m	class:LinkedMapNode
prev	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *prev, *next;$/;"	m	class:AbstractDBLinkedNode
prev	src/Data/DoubleList.h	/^        DoubleNode *prev, *next;$/;"	m	class:DoubleNode
prev	src/Data/IntegerList.h	/^        IntegerNode *prev, *next;$/;"	m	class:IntegerNode
prev	src/Data/LinkedListT.h	/^        LinkedNodeT * prev;$/;"	m	class:LinkedNodeT
prev	src/Data/LinkedMap.h	/^        void * prev;$/;"	m	class:LinkedMapNode
price	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^    double price; \/\/ Base price for this item.$/;"	m	class:ItemBase
price	src/Gamelogic/Inventory/ItemBase.h	/^    double price; \/\/ Base price for this item.$/;"	m	class:ItemBase
printProfiles	include/Eternia/Data/TimeProfiler.h	/^    void printProfiles(); \/\/ prints out all profiles onto console.$/;"	p	class:TimeProfiler
printProfiles	src/Data/TimeProfiler.cpp	/^void TimeProfiler::printProfiles(){$/;"	f	class:TimeProfiler
printProfiles	src/Data/TimeProfiler.h	/^    void printProfiles(); \/\/ prints out all profiles onto console.$/;"	p	class:TimeProfiler
printValues	include/Eternia/Data/Protect/PType.hpp	/^    void printValues(){$/;"	f	class:PType
printValues	src/Data/Protect/PType.hpp	/^    void printValues(){$/;"	f	class:PType
printWorkingDirectory	include/Eternia/Data/FileSystem.h	/^        void printWorkingDirectory(); \/\/ print current directory location (pwd)$/;"	p	class:FileSystem
printWorkingDirectory	src/Data/FileSystem.cpp	/^void FileSystem::printWorkingDirectory() {$/;"	f	class:FileSystem
printWorkingDirectory	src/Data/FileSystem.h	/^        void printWorkingDirectory(); \/\/ print current directory location (pwd)$/;"	p	class:FileSystem
priority	include/Eternia/Data/PriorityQueue.h	/^        unsigned long priority;$/;"	m	class:PriorityItem
priority	src/Data/PriorityQueue.h	/^        unsigned long priority;$/;"	m	class:PriorityItem
process	include/Eternia/Parsing/InputRedirection.h	/^        bool process(); \/\/ process line by line$/;"	p	class:InputRedirection
process	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        void process(); \/\/ compress data stores$/;"	p	class:P2PCPUServer
process	src/Parsing/InputRedirection.cpp	/^bool InputRedirection::process() {$/;"	f	class:InputRedirection
process	src/Parsing/InputRedirection.h	/^        bool process(); \/\/ process line by line$/;"	p	class:InputRedirection
process	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        void process(); \/\/ compress data stores$/;"	p	class:P2PCPUServer
processLog	include/Eternia/Data/Logger/Logger.h	/^    void processLog(CharString data);$/;"	p	class:Logger
processLog	src/Data/Logger/Logger.cpp	/^void Logger::processLog(CharString data){$/;"	f	class:Logger
processLog	src/Data/Logger/Logger.h	/^    void processLog(CharString data);$/;"	p	class:Logger
profileItem	include/Eternia/Data/TimeProfiler.h	/^    void profileItem(CharString name);$/;"	p	class:TimeProfiler
profileItem	src/Data/TimeProfiler.cpp	/^void TimeProfiler::profileItem(CharString name){$/;"	f	class:TimeProfiler
profileItem	src/Data/TimeProfiler.h	/^    void profileItem(CharString name);$/;"	p	class:TimeProfiler
profilemap	include/Eternia/Data/TimeProfiler.h	/^    HashMap<CyclicList<long>> profilemap;$/;"	m	class:TimeProfiler
profilemap	src/Data/TimeProfiler.h	/^    HashMap<CyclicList<long>> profilemap;$/;"	m	class:TimeProfiler
programWaittime	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^const double programWaittime = 800; \/\/ nanoseconds$/;"	v
programWaittime	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^const double programWaittime = 800; \/\/ nanoseconds$/;"	v
proof	include/Eternia/constants.h	/^        const double proof = percent\/2.0;$/;"	m	namespace:physical::unit
proof	src/constants.h	/^        const double proof = percent\/2.0;$/;"	m	namespace:physical::unit
properties	include/Eternia/Data/Events/Event.h	/^    HashMap<CharString> properties; \/\/ property map$/;"	m	class:Event
properties	src/Data/Events/Event.h	/^    HashMap<CharString> properties; \/\/ property map$/;"	m	class:Event
property	include/Eternia/Math/struct/VectorSpace.h	/^        VECSPACE_PROPERTY property;$/;"	m	class:VectorSpace
property	src/Math/struct/VectorSpace.h	/^        VECSPACE_PROPERTY property;$/;"	m	class:VectorSpace
prospecting	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> prospecting; \/\/ ability to scan area$/;"	m	class:SkillSet
prospecting	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> prospecting; \/\/ ability to scan area$/;"	m	class:SkillSet
proton	include/Eternia/constants.h	/^        const double proton = 1.672621777e-27;$/;"	m	namespace:chemistry::mass
proton	src/constants.h	/^        const double proton = 1.672621777e-27;$/;"	m	namespace:chemistry::mass
protons	include/Eternia/Engineering/Chemistry/Atom.h	/^        int protons;$/;"	m	class:Atom
protons	src/Engineering/Chemistry/Atom.h	/^        int protons;$/;"	m	class:Atom
proximityTest	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void proximityTest(P2PNode player, P2PNode farplayer);$/;"	p	class:P2PLServer
proximityTest	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void proximityTest(P2PNode player, P2PNode farplayer);$/;"	p	class:P2PLServer
psi	include/Eternia/constants.h	/^        const double psi = lbf\/(inch*inch);$/;"	m	namespace:physical::unit
psi	src/constants.h	/^        const double psi = lbf\/(inch*inch);$/;"	m	namespace:physical::unit
psyche	include/Eternia/Gamelogic/Race/Race.h	/^	float psyche; \/\/ likelihood to go "insane", humans have around 0.001 (.1%)$/;"	m	class:Race
psyche	src/Gamelogic/Race/Race.h	/^	float psyche; \/\/ likelihood to go "insane", humans have around 0.001 (.1%)$/;"	m	class:Race
pt	include/Eternia/constants.h	/^                const double pt = pint;$/;"	m	namespace:physical::unit::British::fluid
pt	include/Eternia/constants.h	/^                const double pt = pint;$/;"	m	namespace:physical::unit::US::dry
pt	include/Eternia/constants.h	/^                const double pt = pint;$/;"	m	namespace:physical::unit::US::liquid
pt	include/Eternia/constants.h	/^        const double pt = point;$/;"	m	namespace:physical::unit
pt	src/constants.h	/^                const double pt = pint;$/;"	m	namespace:physical::unit::British::fluid
pt	src/constants.h	/^                const double pt = pint;$/;"	m	namespace:physical::unit::US::dry
pt	src/constants.h	/^                const double pt = pint;$/;"	m	namespace:physical::unit::US::liquid
pt	src/constants.h	/^        const double pt = point;$/;"	m	namespace:physical::unit
ptr	include/Eternia/Serialization/SpecificSerializer.h	/^        void* ptr;$/;"	m	class:PointerType
ptr	src/Serialization/SpecificSerializer.h	/^        void* ptr;$/;"	m	class:PointerType
ptype	include/Eternia/Programming/Program.h	/^        ProgTYPE ptype;$/;"	m	class:Program
ptype	src/Programming/Program.h	/^        ProgTYPE ptype;$/;"	m	class:Program
push	include/Eternia/Data/Queue.h	/^        void push(void* data);$/;"	p	class:Queue
push	include/Eternia/Data/Stack.h	/^        void push(int value); \/\/ push to front of list$/;"	p	class:Stack
push	include/Eternia/Emulation/MPU/msp430.h	/^        void push(unsigned int addr); \/\/ move operator to stack and SP+2$/;"	p	class:MSP430
push	src/Data/Queue.cpp	/^void Queue::push(void* data) {$/;"	f	class:Queue
push	src/Data/Queue.h	/^        void push(void* data);$/;"	p	class:Queue
push	src/Data/Stack.cpp	/^void Stack::push(int input) {$/;"	f	class:Stack
push	src/Data/Stack.h	/^        void push(int value); \/\/ push to front of list$/;"	p	class:Stack
push	src/Emulation/MPU/msp430.h	/^        void push(unsigned int addr); \/\/ move operator to stack and SP+2$/;"	p	class:MSP430
push	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::push(unsigned int addr) {} \/\/ move operator to stack and SP+2$/;"	f	class:MSP430
push_back	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void push_back(void* data);$/;"	p	class:AbstractDBLinkedDataset
push_back	src/Data/AbstractDatabase/AbstractDB.h	/^        void push_back(void* data);$/;"	p	class:AbstractDBLinkedDataset
push_back	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void AbstractDBLinkedDataset::push_back(void* data) {$/;"	f	class:AbstractDBLinkedDataset
push_front	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void push_front(void* data);$/;"	p	class:AbstractDBLinkedDataset
push_front	src/Data/AbstractDatabase/AbstractDB.h	/^        void push_front(void* data);$/;"	p	class:AbstractDBLinkedDataset
push_front	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void AbstractDBLinkedDataset::push_front(void* data) {$/;"	f	class:AbstractDBLinkedDataset
puzzle_solver	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> puzzle_solver; \/\/ solved many puzzles!$/;"	m	class:CraftingStats
puzzle_solver	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> puzzle_solver; \/\/ solved many puzzles!$/;"	m	class:CraftingStats
pythagroreanInequality	include/Eternia/Math/struct/vertex.h	/^    bool pythagroreanInequality(vertex v); \/\/ length(u+v)^2 = length(u)^2 + length(v)^2$/;"	p	class:vertex
pythagroreanInequality	src/Math/struct/vertex.cpp	/^bool vertex::pythagroreanInequality(vertex v) {$/;"	f	class:vertex
pythagroreanInequality	src/Math/struct/vertex.h	/^    bool pythagroreanInequality(vertex v); \/\/ length(u+v)^2 = length(u)^2 + length(v)^2$/;"	p	class:vertex
pz	include/Eternia/constants.h	/^        const double pz = pieze;$/;"	m	namespace:physical::unit
pz	src/constants.h	/^        const double pz = pieze;$/;"	m	namespace:physical::unit
qnxnto	CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qr	include/Eternia/constants.h	/^            const double qr = quarter;$/;"	m	namespace:physical::unit::British
qr	include/Eternia/constants.h	/^            const double qr = quarter;$/;"	m	namespace:physical::unit::US
qr	src/constants.h	/^            const double qr = quarter;$/;"	m	namespace:physical::unit::British
qr	src/constants.h	/^            const double qr = quarter;$/;"	m	namespace:physical::unit::US
qt	include/Eternia/constants.h	/^                const double qt = quart;$/;"	m	namespace:physical::unit::British::fluid
qt	include/Eternia/constants.h	/^                const double qt = quart;$/;"	m	namespace:physical::unit::US::dry
qt	include/Eternia/constants.h	/^                const double qt = quart;$/;"	m	namespace:physical::unit::US::liquid
qt	src/constants.h	/^                const double qt = quart;$/;"	m	namespace:physical::unit::British::fluid
qt	src/constants.h	/^                const double qt = quart;$/;"	m	namespace:physical::unit::US::dry
qt	src/constants.h	/^                const double qt = quart;$/;"	m	namespace:physical::unit::US::liquid
quantity	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        double quantity; \/\/ quantity of force$/;"	m	class:Force
quantity	src/Engineering/Physics/Kinematics/FreeBody.h	/^        double quantity; \/\/ quantity of force$/;"	m	class:Force
quart	include/Eternia/constants.h	/^                const double quart = 2.0*pints;$/;"	m	namespace:physical::unit::British::fluid
quart	include/Eternia/constants.h	/^                const double quart = 2.0*pints;$/;"	m	namespace:physical::unit::US::dry
quart	include/Eternia/constants.h	/^                const double quart = 2.0*pints;$/;"	m	namespace:physical::unit::US::liquid
quart	src/constants.h	/^                const double quart = 2.0*pints;$/;"	m	namespace:physical::unit::British::fluid
quart	src/constants.h	/^                const double quart = 2.0*pints;$/;"	m	namespace:physical::unit::US::dry
quart	src/constants.h	/^                const double quart = 2.0*pints;$/;"	m	namespace:physical::unit::US::liquid
quarter	include/Eternia/constants.h	/^            const double quarter = hundredweight\/4.0;$/;"	m	namespace:physical::unit::British
quarter	include/Eternia/constants.h	/^            const double quarter = hundredweight\/4.0;$/;"	m	namespace:physical::unit::US
quarter	src/constants.h	/^            const double quarter = hundredweight\/4.0;$/;"	m	namespace:physical::unit::British
quarter	src/constants.h	/^            const double quarter = hundredweight\/4.0;$/;"	m	namespace:physical::unit::US
quarters	include/Eternia/constants.h	/^            const double quarters = quarter;$/;"	m	namespace:physical::unit::British
quarters	include/Eternia/constants.h	/^            const double quarters = quarter;$/;"	m	namespace:physical::unit::US
quarters	src/constants.h	/^            const double quarters = quarter;$/;"	m	namespace:physical::unit::British
quarters	src/constants.h	/^            const double quarters = quarter;$/;"	m	namespace:physical::unit::US
quarts	include/Eternia/constants.h	/^                const double quarts = quart;$/;"	m	namespace:physical::unit::British::fluid
quarts	include/Eternia/constants.h	/^                const double quarts = quart;$/;"	m	namespace:physical::unit::US::dry
quarts	include/Eternia/constants.h	/^                const double quarts = quart;$/;"	m	namespace:physical::unit::US::liquid
quarts	src/constants.h	/^                const double quarts = quart;$/;"	m	namespace:physical::unit::British::fluid
quarts	src/constants.h	/^                const double quarts = quart;$/;"	m	namespace:physical::unit::US::dry
quarts	src/constants.h	/^                const double quarts = quart;$/;"	m	namespace:physical::unit::US::liquid
quintal	include/Eternia/constants.h	/^        const double quintal = 100.0*kilograms;$/;"	m	namespace:physical::unit
quintal	src/constants.h	/^        const double quintal = 100.0*kilograms;$/;"	m	namespace:physical::unit
quintals	include/Eternia/constants.h	/^        const double quintals = quintal;$/;"	m	namespace:physical::unit
quintals	src/constants.h	/^        const double quintals = quintal;$/;"	m	namespace:physical::unit
quire	include/Eternia/constants.h	/^        const double quire = 25.0;$/;"	m	namespace:physical::unit
quire	src/constants.h	/^        const double quire = 25.0;$/;"	m	namespace:physical::unit
quires	include/Eternia/constants.h	/^        const double quires = quire;$/;"	m	namespace:physical::unit
quires	src/constants.h	/^        const double quires = quire;$/;"	m	namespace:physical::unit
r	include/Eternia/Data/BitMap.h	/^        unsigned char r;$/;"	m	class:bmbit
r	src/Data/BitMap.h	/^        unsigned char r;$/;"	m	class:bmbit
r_e	include/Eternia/constants.h	/^        const double r_e = 2.81794092e-15*meters;$/;"	m	namespace:physical::constant
r_e	src/constants.h	/^        const double r_e = 2.81794092e-15*meters;$/;"	m	namespace:physical::constant
rad	include/Eternia/constants.h	/^            const double rad = Gray\/100.0;$/;"	m	namespace:physical::unit::dose
rad	include/Eternia/constants.h	/^        const double rad = radian;$/;"	m	namespace:physical::unit
rad	src/constants.h	/^            const double rad = Gray\/100.0;$/;"	m	namespace:physical::unit::dose
rad	src/constants.h	/^        const double rad = radian;$/;"	m	namespace:physical::unit
radian	include/Eternia/constants.h	/^        const double radian = 1.0;$/;"	m	namespace:physical::unit
radian	src/constants.h	/^        const double radian = 1.0;$/;"	m	namespace:physical::unit
radians	include/Eternia/constants.h	/^        const double radians = radian;$/;"	m	namespace:physical::unit
radians	src/constants.h	/^        const double radians = radian;$/;"	m	namespace:physical::unit
radio	include/Eternia/constants.h	/^    const double radio = 50*megaHertz;\/\/6$/;"	m	namespace:electromagnetic
radio	src/constants.h	/^    const double radio = 50*megaHertz;\/\/6$/;"	m	namespace:electromagnetic
radius	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    unsigned int radius;$/;"	m	class:Terrain
radius	include/Eternia/Gamelogic/Environment/Space/Star.h	/^        double radius, weight;$/;"	m	class:Star
radius	src/Gamelogic/Environment/Planet/Planet.h	/^    unsigned int radius;$/;"	m	class:Terrain
radius	src/Gamelogic/Environment/Space/Star.h	/^        double radius, weight;$/;"	m	class:Star
rads	include/Eternia/constants.h	/^            const double rads = rad;$/;"	m	namespace:physical::unit::dose
rads	src/constants.h	/^            const double rads = rad;$/;"	m	namespace:physical::unit::dose
random_sfx	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString random_sfx; \/\/ sfx used at random (may be used in tandom with an animation)$/;"	m	class:AvatarAppearance
random_sfx	src/Gamelogic/Avatar/AvatarAppearance.h	/^    CharString random_sfx; \/\/ sfx used at random (may be used in tandom with an animation)$/;"	m	class:AvatarAppearance
ranged	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> ranged; \/\/ Ranged weaponry$/;"	m	class:SkillSet
ranged	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> ranged; \/\/ Ranged weaponry$/;"	m	class:SkillSet
rank	include/Eternia/Math/struct/Matrix.h	/^    int rank(); \/\/ number of non-zero rows after echeolon form.$/;"	p	class:Matrix
rank	src/Math/struct/Matrix.cpp	/^int Matrix::rank() {$/;"	f	class:Matrix
rank	src/Math/struct/Matrix.h	/^    int rank(); \/\/ number of non-zero rows after echeolon form.$/;"	p	class:Matrix
rate	include/Eternia/Audio/AudioBuffer.h	/^    int rate;$/;"	m	class:AudioBuffer
rate	src/Audio/AudioBuffer.h	/^    int rate;$/;"	m	class:AudioBuffer
rating	include/Eternia/Engineering/Electrical/Components/Component.h	/^        ComponentRating* rating; \/\/ used for basic components, ICs may have multiple ratings due to the pins.$/;"	m	class:Component
rating	src/Engineering/Electrical/Components/Component.h	/^        ComponentRating* rating; \/\/ used for basic components, ICs may have multiple ratings due to the pins.$/;"	m	class:Component
raw	include/Eternia/WebFramework/Network/Types/HTMLRequest.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
raw	include/Eternia/WebFramework/Network/Types/HTMLResponse.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
raw	src/WebFramework/Network/Types/HTMLRequest.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
raw	src/WebFramework/Network/Types/HTMLResponse.h	/^        CharString *body, *head, *raw;$/;"	m	class:HTMLResponse
rawCpy	src/Serialization/SpecificSerializer.cpp	/^void rawCpy(char* a, char* b, int len, int aoff, int boff){$/;"	f
rd	include/Eternia/constants.h	/^            const double rd = rad;$/;"	m	namespace:physical::unit::dose
rd	include/Eternia/constants.h	/^        const double rd = rod;$/;"	m	namespace:physical::unit
rd	src/constants.h	/^            const double rd = rad;$/;"	m	namespace:physical::unit::dose
rd	src/constants.h	/^        const double rd = rod;$/;"	m	namespace:physical::unit
reactor_cooling	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip reactor_cooling; \/\/ Cooling system for reactor$/;"	m	class:PortableArmor
reactor_cooling	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip reactor_cooling; \/\/ Cooling system for reactor$/;"	m	class:PortableArmor
reactor_core	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip reactor_core; \/\/ Specific reactor type (fuel, nuclear, anti-matter)$/;"	m	class:PortableArmor
reactor_core	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip reactor_core; \/\/ Specific reactor type (fuel, nuclear, anti-matter)$/;"	m	class:PortableArmor
readHeader	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void readHeader();$/;"	p	class:AbstractDBTable
readHeader	src/Data/AbstractDatabase/AbstractDB.h	/^        void readHeader();$/;"	p	class:AbstractDBTable
readHeader	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^void AbstractDBTable::readHeader() {$/;"	f	class:AbstractDBTable
real	include/Eternia/Math/Complex.hpp	/^    float real, imaginary;$/;"	m	class:Complex
real	src/Math/Complex.hpp	/^    float real, imaginary;$/;"	m	class:Complex
ream	include/Eternia/constants.h	/^        const double ream = 500.0;$/;"	m	namespace:physical::unit
ream	src/constants.h	/^        const double ream = 500.0;$/;"	m	namespace:physical::unit
reams	include/Eternia/constants.h	/^        const double reams = ream;$/;"	m	namespace:physical::unit
reams	src/constants.h	/^        const double reams = ream;$/;"	m	namespace:physical::unit
recurring	include/Eternia/Data/Events/EventHandle.h	/^        int recurring; \/\/ always run?$/;"	m	class:EventHandle
recurring	src/Data/Events/EventHandle.h	/^        int recurring; \/\/ always run?$/;"	m	class:EventHandle
recvMessage	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        void recvMessage(ChatClient* client, CharString text);$/;"	p	class:ChatClient
recvMessage	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        void recvMessage(ChatClient* client, CharString text);$/;"	p	class:ChatClient
recvPacket	include/Eternia/WebFramework/Network/PacketChannel.h	/^    CharString recvPacket(); \/\/ returns null if no new data.$/;"	p	class:PacketChannel
recvPacket	src/WebFramework/Network/PacketChannel.cpp	/^CharString PacketChannel::recvPacket(){$/;"	f	class:PacketChannel
recvPacket	src/WebFramework/Network/PacketChannel.h	/^    CharString recvPacket(); \/\/ returns null if no new data.$/;"	p	class:PacketChannel
recvWaitPacket	include/Eternia/WebFramework/Network/PacketChannel.h	/^    CharString recvWaitPacket(); \/\/ efficiently waits for a new packet. SYNC$/;"	p	class:PacketChannel
recvWaitPacket	src/WebFramework/Network/PacketChannel.cpp	/^CharString PacketChannel::recvWaitPacket(){$/;"	f	class:PacketChannel
recvWaitPacket	src/WebFramework/Network/PacketChannel.h	/^    CharString recvWaitPacket(); \/\/ efficiently waits for a new packet. SYNC$/;"	p	class:PacketChannel
redirect	include/Eternia/Parsing/InputRedirection.h	/^        void redirect();$/;"	p	class:InputRedirection
redirect	src/Parsing/InputRedirection.cpp	/^void InputRedirection::redirect() {$/;"	f	class:InputRedirection
redirect	src/Parsing/InputRedirection.h	/^        void redirect();$/;"	p	class:InputRedirection
redistributeBoundaries	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void redistributeBoundaries(); \/\/ If there have been changes to boundaries, distribute them.$/;"	p	class:P2PLServer
redistributeBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void redistributeBoundaries(); \/\/ If there have been changes to boundaries, distribute them.$/;"	p	class:P2PLServer
refreeze	include/Eternia/Data/LinkedList.hpp	/^    void refreeze(){$/;"	f	class:LinkedList
refreeze	src/Data/LinkedList.hpp	/^    void refreeze(){$/;"	f	class:LinkedList
regen	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> regen; \/\/ server-side local$/;"	m	class:AvatarHealth
regen	src/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> regen; \/\/ server-side local$/;"	m	class:AvatarHealth
regeneration	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> regeneration; \/\/ Natural healing of body parts (per second)$/;"	m	class:AvatarHealth
regeneration	src/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> regeneration; \/\/ Natural healing of body parts (per second)$/;"	m	class:AvatarHealth
regex	include/Eternia/WebFramework/Templates/Template.h	/^        bool regex; \/\/ is regex or not?$/;"	m	class:TemplateDefinition
regex	src/WebFramework/Templates/Template.h	/^        bool regex; \/\/ is regex or not?$/;"	m	class:TemplateDefinition
registerHandle	include/Eternia/API/APIEventRegistry.h	/^    bool registerHandle(CharString name, EventHandle *handle, int priority); \/\/ register a handle with a specific handler (returns false if handler doesn't exist.$/;"	p	class:APIEventRegistry
registerHandle	src/API/APIEventRegistry.cpp	/^bool APIEventRegistry::registerHandle(CharString name, EventHandle *handle, int priority){$/;"	f	class:APIEventRegistry
registerHandle	src/API/APIEventRegistry.h	/^    bool registerHandle(CharString name, EventHandle *handle, int priority); \/\/ register a handle with a specific handler (returns false if handler doesn't exist.$/;"	p	class:APIEventRegistry
registerUser	include/Eternia/API/APIPermissionsRegistry.h	/^    void registerUser(APIUser *user); \/\/ register a user if it doesn't exist.$/;"	p	class:APIPermissionsRegistry
registerUser	src/API/APIPermissionsRegistry.cpp	/^void APIPermissionsRegistry::registerUser(APIUser *user){$/;"	f	class:APIPermissionsRegistry
registerUser	src/API/APIPermissionsRegistry.h	/^    void registerUser(APIUser *user); \/\/ register a user if it doesn't exist.$/;"	p	class:APIPermissionsRegistry
register_tn	include/Eternia/constants.h	/^        const double register_tn = register_ton;$/;"	m	namespace:physical::unit
register_tn	src/constants.h	/^        const double register_tn = register_ton;$/;"	m	namespace:physical::unit
register_ton	include/Eternia/constants.h	/^        const double register_ton = 100.0*(ft*ft*ft);$/;"	m	namespace:physical::unit
register_ton	src/constants.h	/^        const double register_ton = 100.0*(ft*ft*ft);$/;"	m	namespace:physical::unit
register_tons	include/Eternia/constants.h	/^        const double register_tons = register_ton;$/;"	m	namespace:physical::unit
register_tons	src/constants.h	/^        const double register_tons = register_ton;$/;"	m	namespace:physical::unit
reinitTable	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void reinitTable(); \/\/ close resources for reinit$/;"	p	class:AbstractDBTable
reinitTable	src/Data/AbstractDatabase/AbstractDB.h	/^        void reinitTable(); \/\/ close resources for reinit$/;"	p	class:AbstractDBTable
reinitTable	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^void AbstractDBTable::reinitTable() {$/;"	f	class:AbstractDBTable
relationLevel	include/Eternia/Gamelogic/Race/Relations.h	/^    float relationLevel; \/\/ 100 = allies, -100 = enemies$/;"	m	class:Relations
relationLevel	src/Gamelogic/Race/Relations.h	/^    float relationLevel; \/\/ 100 = allies, -100 = enemies$/;"	m	class:Relations
remove	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void* remove(AbstractDBLinkedNode* node);$/;"	p	class:AbstractDBLinkedDataset
remove	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    void remove(T*){$/;"	f	class:ConcurrentLinkedList
remove	include/Eternia/Data/HashMap.hpp	/^        T* remove(CharString key) {$/;"	f	class:HashMap
remove	include/Eternia/Data/HashMap.hpp	/^        T* remove(CharString* key) {$/;"	f	class:HTEntry
remove	include/Eternia/Data/LinkedList.hpp	/^    T* remove(long index) {$/;"	f	class:LinkedList
remove	include/Eternia/Data/PriorityQueue.h	/^        void remove(PriorityItem* item); \/\/ remove a specific item$/;"	p	class:PriorityQueue
remove	src/Data/AbstractDatabase/AbstractDB.h	/^        void* remove(AbstractDBLinkedNode* node);$/;"	p	class:AbstractDBLinkedDataset
remove	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^void* AbstractDBLinkedDataset::remove(AbstractDBLinkedNode* node) {$/;"	f	class:AbstractDBLinkedDataset
remove	src/Data/ConcurrentLinkedList.hpp	/^    void remove(T*){$/;"	f	class:ConcurrentLinkedList
remove	src/Data/HashMap.hpp	/^        T* remove(CharString key) {$/;"	f	class:HashMap
remove	src/Data/HashMap.hpp	/^        T* remove(CharString* key) {$/;"	f	class:HTEntry
remove	src/Data/LinkedList.hpp	/^    T* remove(long index) {$/;"	f	class:LinkedList
remove	src/Data/PriorityQueue.cpp	/^void PriorityQueue::remove(PriorityItem* item) {$/;"	f	class:PriorityQueue
remove	src/Data/PriorityQueue.h	/^        void remove(PriorityItem* item); \/\/ remove a specific item$/;"	p	class:PriorityQueue
removeAll	include/Eternia/Data/FileSystem.h	/^        void removeAll(DType t, FileStructureNode* location); \/\/ use of '*' mask to remove all of type$/;"	p	class:FileSystem
removeAll	src/Data/FileSystem.cpp	/^void FileSystem::removeAll(DType t, FileStructureNode* location) {$/;"	f	class:FileSystem
removeAll	src/Data/FileSystem.h	/^        void removeAll(DType t, FileStructureNode* location); \/\/ use of '*' mask to remove all of type$/;"	p	class:FileSystem
removeChar	include/Eternia/Data/CharString.h	/^        void removeChar(int index); \/\/ remove character at index.$/;"	p	class:CharString
removeChar	src/Data/CharString.cpp	/^void CharString::removeChar(int index){$/;"	f	class:CharString
removeChar	src/Data/CharString.h	/^        void removeChar(int index); \/\/ remove character at index.$/;"	p	class:CharString
removeChild	include/Eternia/Design/LayoutObject.h	/^        public void removeChild(LayoutObject* child);   \/\/ remove a single child$/;"	p	class:LayoutObject
removeChild	src/Design/LayoutObject.h	/^        public void removeChild(LayoutObject* child);   \/\/ remove a single child$/;"	p	class:LayoutObject
removeDir	include/Eternia/Data/FileSystem.h	/^        void removeDir(CharString location); \/\/ remove directory (rmdir)$/;"	p	class:FileSystem
removeDir	src/Data/FileSystem.cpp	/^void FileSystem::removeDir(CharString location) {$/;"	f	class:FileSystem
removeDir	src/Data/FileSystem.h	/^        void removeDir(CharString location); \/\/ remove directory (rmdir)$/;"	p	class:FileSystem
removeEvent	include/Eternia/Data/Events/EventHandler.h	/^        void removeEvent(EventHandle *event); \/\/ remove a specific object (expensive)$/;"	p	class:EventHandler
removeEvent	src/Data/Events/EventHandler.cpp	/^void EventHandler::removeEvent(EventHandle *event) {$/;"	f	class:EventHandler
removeEvent	src/Data/Events/EventHandler.h	/^        void removeEvent(EventHandle *event); \/\/ remove a specific object (expensive)$/;"	p	class:EventHandler
removeFile	include/Eternia/Data/FileSystem.h	/^        void removeFile(CharString location); \/\/ remove file (rm)$/;"	p	class:FileSystem
removeFile	src/Data/FileSystem.cpp	/^void FileSystem::removeFile(CharString location) {$/;"	f	class:FileSystem
removeFile	src/Data/FileSystem.h	/^        void removeFile(CharString location); \/\/ remove file (rm)$/;"	p	class:FileSystem
removeIndex	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        void removeIndex(int index); \/\/ remove row from index$/;"	p	class:AbstractDBTable
removeIndex	src/Data/AbstractDatabase/AbstractDB.h	/^        void removeIndex(int index); \/\/ remove row from index$/;"	p	class:AbstractDBTable
removeL	include/Eternia/Data/HashMap.hpp	/^        T* removeL(unsigned long ID) {$/;"	f	class:HashMap
removeL	src/Data/HashMap.hpp	/^        T* removeL(unsigned long ID) {$/;"	f	class:HashMap
removeMin	include/Eternia/Data/Heap.h	/^        int removeMin();$/;"	p	class:Heap
removeMin	include/Eternia/Data/PriorityQueue.h	/^        void* removeMin(); \/\/ removes the minimum item$/;"	p	class:PriorityQueue
removeMin	src/Data/Heap.cpp	/^int Heap::removeMin() {$/;"	f	class:Heap
removeMin	src/Data/Heap.h	/^        int removeMin();$/;"	p	class:Heap
removeMin	src/Data/PriorityQueue.cpp	/^void* PriorityQueue::removeMin() {$/;"	f	class:PriorityQueue
removeMin	src/Data/PriorityQueue.h	/^        void* removeMin(); \/\/ removes the minimum item$/;"	p	class:PriorityQueue
removePermission	include/Eternia/API/APIUser.h	/^    bool removePermission(APIUser* user, APIPermission* perm); \/\/ returns false if that user does not have perms to remove perms.$/;"	p	class:APIUser
removePermission	src/API/APIUser.cpp	/^bool APIUser::removePermission(APIUser* user, APIPermission* perm){$/;"	f	class:APIUser
removePermission	src/API/APIUser.h	/^    bool removePermission(APIUser* user, APIPermission* perm); \/\/ returns false if that user does not have perms to remove perms.$/;"	p	class:APIUser
render	include/Eternia/WebFramework/Templates/Template.h	/^        CharString render(); \/\/ Finalizes the template for usage$/;"	p	class:Template
render	src/WebFramework/Templates/Template.cpp	/^CharString Template::render(){$/;"	f	class:Template
render	src/WebFramework/Templates/Template.h	/^        CharString render(); \/\/ Finalizes the template for usage$/;"	p	class:Template
renderingWaitTime	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^const double renderingWaitTime = 180; \/\/ nanoseconds$/;"	v
renderingWaitTime	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessingLimitations.h	/^const double renderingWaitTime = 180; \/\/ nanoseconds$/;"	v
repeatOps	src/Math/Eval.cpp	/^void repeatOps(MOperator op) {$/;"	f
repeating	include/Eternia/Programming/Visual/VProgramNode.h	/^        bool repeating; \/\/ is this node repeating? (like a for loop, conditional)$/;"	m	class:VProgramNode
repeating	src/Programming/Visual/VProgramNode.h	/^        bool repeating; \/\/ is this node repeating? (like a for loop, conditional)$/;"	m	class:VProgramNode
replace	include/Eternia/Data/CharString.h	/^        void replace(char* toFind,char* replaceWith);$/;"	p	class:CharString
replace	src/Data/CharString.cpp	/^void CharString::replace(char* a, char* b) {$/;"	f	class:CharString
replace	src/Data/CharString.h	/^        void replace(char* toFind,char* replaceWith);$/;"	p	class:CharString
replaceKey	include/Eternia/Data/PriorityQueue.h	/^        bool replaceKey(PriorityItem* current, void* at, unsigned long key); \/\/ replaces a priority via data key.$/;"	p	class:PriorityQueue
replaceKey	src/Data/PriorityQueue.cpp	/^bool PriorityQueue::replaceKey(PriorityItem* current, void* at, unsigned long key) {$/;"	f	class:PriorityQueue
replaceKey	src/Data/PriorityQueue.h	/^        bool replaceKey(PriorityItem* current, void* at, unsigned long key); \/\/ replaces a priority via data key.$/;"	p	class:PriorityQueue
replacer	include/Eternia/WebFramework/Templates/Template.h	/^        CharString* replacer;$/;"	m	class:TemplateDefinition
replacer	src/WebFramework/Templates/Template.h	/^        CharString* replacer;$/;"	m	class:TemplateDefinition
request	include/Eternia/WebFramework/Network/RESTFulServer.h	/^        void request(); \/\/ HTML Request fron a client$/;"	p	class:RESTFulServer
request	src/WebFramework/Network/RESTFulServer.h	/^        void request(); \/\/ HTML Request fron a client$/;"	p	class:RESTFulServer
reset	include/Eternia/Data/HashMap.hpp	/^        void reset() {$/;"	f	class:HTEntry
reset	src/Data/HashMap.hpp	/^        void reset() {$/;"	f	class:HTEntry
resetInput	include/Eternia/Programming/Program.h	/^        void resetInput(int slot); \/\/ Reset an input slot$/;"	p	class:Program
resetInput	src/Programming/Program.h	/^        void resetInput(int slot); \/\/ Reset an input slot$/;"	p	class:Program
resetInput	src/Programming/Visual/VisualProgram.cpp	/^void Program::resetInput(int slot) {$/;"	f	class:Program
resetNext	include/Eternia/Data/DoubleList.h	/^        void resetNext();$/;"	p	class:DoubleList
resetNext	include/Eternia/Data/IntegerList.h	/^        void resetNext();$/;"	p	class:IntegerList
resetNext	src/Data/DoubleList.cpp	/^void DoubleList::resetNext() {$/;"	f	class:DoubleList
resetNext	src/Data/DoubleList.h	/^        void resetNext();$/;"	p	class:DoubleList
resetNext	src/Data/IntegerList.cpp	/^void IntegerList::resetNext() {$/;"	f	class:IntegerList
resetNext	src/Data/IntegerList.h	/^        void resetNext();$/;"	p	class:IntegerList
resist	include/Eternia/Engineering/Electrical/Wire.h	/^        double resist; \/\/ Resistivity of this wire$/;"	m	class:Wire
resist	src/Engineering/Electrical/Wire.h	/^        double resist; \/\/ Resistivity of this wire$/;"	m	class:Wire
resistivity	include/Eternia/Engineering/Chemistry/Atom.h	/^        double resistivity;$/;"	m	class:Atom
resistivity	src/Engineering/Chemistry/Atom.h	/^        double resistivity;$/;"	m	class:Atom
resize	include/Eternia/Design/LayoutObject.h	/^        bool resize, draw;$/;"	m	class:LayoutObject
resize	src/Design/LayoutObject.h	/^        bool resize, draw;$/;"	m	class:LayoutObject
restart	include/Eternia/API/APIMod.h	/^    virtual void restart(); \/\/ runs Stop() then Start()$/;"	p	class:APIMod
restart	src/API/APIMod.cpp	/^void APIMod::restart(){$/;"	f	class:APIMod
restart	src/API/APIMod.h	/^    virtual void restart(); \/\/ runs Stop() then Start()$/;"	p	class:APIMod
result	include/Eternia/WebFramework/Network/SocketServer.h	/^    struct addrinfo *result = NULL;$/;"	m	class:SocketServer	typeref:struct:SocketServer::addrinfo
result	src/WebFramework/Network/SocketServer.h	/^    struct addrinfo *result = NULL;$/;"	m	class:SocketServer	typeref:struct:SocketServer::addrinfo
reti	include/Eternia/Emulation/MPU/msp430.h	/^        void reti(); \/\/ gets location from stack reg$/;"	p	class:MSP430
reti	src/Emulation/MPU/msp430.h	/^        void reti(); \/\/ gets location from stack reg$/;"	p	class:MSP430
reti	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::reti() {} \/\/ gets location from stack reg$/;"	f	class:MSP430
reverseBits	src/Algorithm/Cryptography/ExHash.cpp	/^uint64_t reverseBits(uint64_t val) {$/;"	f
rifles	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> rifles; \/\/ infantry weapons, basic mount (Laser or ballistic)$/;"	m	class:CraftingStats
rifles	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> rifles; \/\/ infantry weapons, basic mount (Laser or ballistic)$/;"	m	class:CraftingStats
right	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem *left, *right, *parent; \/\/ node selections.$/;"	m	class:PriorityItem
right	src/Data/PriorityQueue.h	/^        PriorityItem *left, *right, *parent; \/\/ node selections.$/;"	m	class:PriorityItem
right_arm	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip right_arm;$/;"	m	class:PortableArmor
right_arm	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip right_arm;$/;"	m	class:PortableArmor
right_foot	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip right_foot;$/;"	m	class:PortableArmor
right_foot	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip right_foot;$/;"	m	class:PortableArmor
rightarm	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
rightarm	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
rightfoot	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
rightfoot	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
righthand	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
righthand	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
rightknee	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
rightknee	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP leftfoot, rightfoot, leftknee, rightknee;$/;"	m	class:AvatarHealth
rightwrist	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
rightwrist	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP lefthand, leftwrist, leftarm, righthand, rightwrist, rightarm;$/;"	m	class:AvatarHealth
rj_sbox	src/Algorithm/Cryptography/Aes267.cpp	/^#define rj_sbox(/;"	d	file:
rj_sbox	src/Algorithm/Cryptography/Aes267.cpp	/^uint8_t rj_sbox(uint8_t x) {$/;"	f
rj_sbox_inv	src/Algorithm/Cryptography/Aes267.cpp	/^#define rj_sbox_inv(/;"	d	file:
rj_sbox_inv	src/Algorithm/Cryptography/Aes267.cpp	/^uint8_t rj_sbox_inv(uint8_t x) {$/;"	f
rj_xtime	src/Algorithm/Cryptography/Aes267.cpp	/^uint8_t rj_xtime(uint8_t x) {$/;"	f
ro	include/Eternia/constants.h	/^        const double ro = rood;$/;"	m	namespace:physical::unit
ro	src/constants.h	/^        const double ro = rood;$/;"	m	namespace:physical::unit
rod	include/Eternia/constants.h	/^        const double rod = 198.0*inches;$/;"	m	namespace:physical::unit
rod	src/constants.h	/^        const double rod = 198.0*inches;$/;"	m	namespace:physical::unit
rod_percent	include/Eternia/Gamelogic/CoreSystems/Reactor.h	/^	float rod_percent; \/\/ reactor rod$/;"	m	class:Reactor
rod_percent	src/Gamelogic/CoreSystems/Reactor.h	/^	float rod_percent; \/\/ reactor rod$/;"	m	class:Reactor
rods	include/Eternia/constants.h	/^        const double rods = rod;$/;"	m	namespace:physical::unit
rods	src/constants.h	/^        const double rods = rod;$/;"	m	namespace:physical::unit
rood	include/Eternia/constants.h	/^        const double rood = 40.0*rod*rod;$/;"	m	namespace:physical::unit
rood	src/constants.h	/^        const double rood = 40.0*rod*rod;$/;"	m	namespace:physical::unit
roods	include/Eternia/constants.h	/^        const double roods = rood;$/;"	m	namespace:physical::unit
roods	src/constants.h	/^        const double roods = rood;$/;"	m	namespace:physical::unit
rope	include/Eternia/constants.h	/^        const double rope = 20.0*feet;$/;"	m	namespace:physical::unit
rope	src/constants.h	/^        const double rope = 20.0*feet;$/;"	m	namespace:physical::unit
ropes	include/Eternia/constants.h	/^        const double ropes = rope;$/;"	m	namespace:physical::unit
ropes	src/constants.h	/^        const double ropes = rope;$/;"	m	namespace:physical::unit
rotate	include/Eternia/Math/struct/vertex.h	/^    void rotate(double theta, double phi); \/\/ rotate this vector around the origin. (additive)$/;"	p	class:vertex
rotate	src/Math/struct/vertex.cpp	/^void vertex::rotate(double theta_, double phi_){$/;"	f	class:vertex
rotate	src/Math/struct/vertex.h	/^    void rotate(double theta, double phi); \/\/ rotate this vector around the origin. (additive)$/;"	p	class:vertex
rotate_left	include/Eternia/Algorithm/Cryptography/md5.h	/^        static inline uint4 rotate_left(uint4 x, int n);$/;"	p	class:MD5
rotate_left	src/Algorithm/Cryptography/md5.cpp	/^inline MD5::uint4 MD5::rotate_left(uint4 x, int n) {$/;"	f	class:MD5
rotate_left	src/Algorithm/Cryptography/md5.h	/^        static inline uint4 rotate_left(uint4 x, int n);$/;"	p	class:MD5
rowList	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* rowList;$/;"	m	class:AbstractDBCacheMap
rowList	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* rowList;$/;"	m	class:AbstractDBCacheMap
rowSolve	include/Eternia/Math/struct/Matrix.h	/^    void rowSolve(double scalar, int row, int toRow); \/\/ solves a single row using a scaled row.$/;"	p	class:Matrix
rowSolve	src/Math/struct/Matrix.cpp	/^void Matrix::rowSolve(double scalar, int row, int toRow) {$/;"	f	class:Matrix
rowSolve	src/Math/struct/Matrix.h	/^    void rowSolve(double scalar, int row, int toRow); \/\/ solves a single row using a scaled row.$/;"	p	class:Matrix
rows	include/Eternia/Math/struct/Matrix.h	/^    int columns, rows; \/\/ columns, rows$/;"	m	class:Matrix
rows	src/Math/struct/Matrix.h	/^    int columns, rows; \/\/ columns, rows$/;"	m	class:Matrix
rra	include/Eternia/Emulation/MPU/msp430.h	/^        void rra(unsigned int addr);$/;"	p	class:MSP430
rra	src/Emulation/MPU/msp430.h	/^        void rra(unsigned int addr);$/;"	p	class:MSP430
rra	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::rra(unsigned int addr) {}$/;"	f	class:MSP430
rrc	include/Eternia/Emulation/MPU/msp430.h	/^        void rrc(unsigned int addr);$/;"	p	class:MSP430
rrc	src/Emulation/MPU/msp430.h	/^        void rrc(unsigned int addr);$/;"	p	class:MSP430
rrc	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::rrc(unsigned int addr) {}$/;"	f	class:MSP430
runTimer0	include/Eternia/Emulation/MPU/msp430.h	/^        void runTimer0(bool is_mclk);$/;"	p	class:MSP430
runTimer0	src/Emulation/MPU/msp430.h	/^        void runTimer0(bool is_mclk);$/;"	p	class:MSP430
runTimer0	src/Emulation/MPU/msp430_timers.cpp	/^void MSP430::runTimer0(bool is_mclk) {$/;"	f	class:MSP430
runTimer1	include/Eternia/Emulation/MPU/msp430.h	/^        void runTimer1(bool is_mclk);$/;"	p	class:MSP430
runTimer1	src/Emulation/MPU/msp430.h	/^        void runTimer1(bool is_mclk);$/;"	p	class:MSP430
runTimer1	src/Emulation/MPU/msp430_timers.cpp	/^void MSP430::runTimer1(bool is_mclk) {   }$/;"	f	class:MSP430
runs	include/Eternia/Programming/Program.h	/^        int runs; \/\/ number of times this was executed.$/;"	m	class:Program
runs	src/Programming/Program.h	/^        int runs; \/\/ number of times this was executed.$/;"	m	class:Program
s	include/Eternia/constants.h	/^            const double s = scruple;$/;"	m	namespace:physical::unit::apothecary
s	include/Eternia/constants.h	/^        const double s = second;$/;"	m	namespace:physical::unit
s	src/constants.h	/^            const double s = scruple;$/;"	m	namespace:physical::unit::apothecary
s	src/constants.h	/^        const double s = second;$/;"	m	namespace:physical::unit
sPrice	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        double sPrice; \/\/ unique item price (Added to base price, used for final NPC price)$/;"	m	class:DynamicEquip
sPrice	src/Gamelogic/Inventory/DynamicEquip.h	/^        double sPrice; \/\/ unique item price (Added to base price, used for final NPC price)$/;"	m	class:DynamicEquip
sabin	include/Eternia/constants.h	/^        const double sabin = foot*foot;$/;"	m	namespace:physical::unit
sabin	src/constants.h	/^        const double sabin = foot*foot;$/;"	m	namespace:physical::unit
sabins	include/Eternia/constants.h	/^        const double sabins = sabin;$/;"	m	namespace:physical::unit
sabins	src/constants.h	/^        const double sabins = sabin;$/;"	m	namespace:physical::unit
sack	include/Eternia/constants.h	/^        const double sack = 3.0*US::bushels;$/;"	m	namespace:physical::unit
sack	src/constants.h	/^        const double sack = 3.0*US::bushels;$/;"	m	namespace:physical::unit
sacks	include/Eternia/constants.h	/^        const double sacks = sack;$/;"	m	namespace:physical::unit
sacks	src/constants.h	/^        const double sacks = sack;$/;"	m	namespace:physical::unit
sailor_mouth	include/Eternia/Gamelogic/AI/AI.h	/^        double sailor_mouth; \/\/ how often will this AI curse?$/;"	m	class:AI
sailor_mouth	src/Gamelogic/AI/AI.h	/^        double sailor_mouth; \/\/ how often will this AI curse?$/;"	m	class:AI
sampleAnalog	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleAnalog(float value); \/\/ sample an analog signal (-1f -> 1f)$/;"	p	class:TimeSignal
sampleAnalog	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleAnalog(float value, float time); \/\/ sample an analog signal (-1f -> 1f)$/;"	p	class:TimeSignal
sampleAnalog	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleAnalog(float value); \/\/ sample an analog signal (-1f -> 1f)$/;"	p	class:TimeSignal
sampleAnalog	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleAnalog(float value, float time); \/\/ sample an analog signal (-1f -> 1f)$/;"	p	class:TimeSignal
sampleDigital	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleDigital(boolean value); \/\/ sample a digital signal (0->1f)$/;"	p	class:TimeSignal
sampleDigital	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleDigital(boolean value, float time); \/\/ sample a digital signal (0->1f)$/;"	p	class:TimeSignal
sampleDigital	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleDigital(boolean value); \/\/ sample a digital signal (0->1f)$/;"	p	class:TimeSignal
sampleDigital	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void sampleDigital(boolean value, float time); \/\/ sample a digital signal (0->1f)$/;"	p	class:TimeSignal
sampleDouble	include/Eternia/Math/statistics/statistics.h	/^        void sampleDouble(double number); \/\/ adds a double$/;"	p	class:Statistics
sampleDouble	src/Math/statistics/statistics.h	/^        void sampleDouble(double number); \/\/ adds a double$/;"	p	class:Statistics
sampleVector	include/Eternia/Math/statistics/statistics.h	/^        void sampleVector(vertex* v); \/\/ add a vertex$/;"	p	class:Statistics
sampleVector	src/Math/statistics/statistics.h	/^        void sampleVector(vertex* v); \/\/ add a vertex$/;"	p	class:Statistics
sampleVectorWithWeight	include/Eternia/Math/statistics/statistics.h	/^        void sampleVectorWithWeight(vertex* v, double weight); \/\/ adds a vertex with a weight (trails)$/;"	p	class:Statistics
sampleVectorWithWeight	src/Math/statistics/statistics.h	/^        void sampleVectorWithWeight(vertex* v, double weight); \/\/ adds a vertex with a weight (trails)$/;"	p	class:Statistics
samples	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    LinkedList<Sample> samples;$/;"	m	class:FreqSignal
samples	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    LinkedList<Sample> samples;$/;"	m	class:TimeSignal
samples	src/Engineering/Electrical/Signal/FreqSignal.h	/^    LinkedList<Sample> samples;$/;"	m	class:FreqSignal
samples	src/Engineering/Electrical/Signal/TimeSignal.h	/^    LinkedList<Sample> samples;$/;"	m	class:TimeSignal
saveFile	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    void saveFile(CharString location, CharString data); \/\/ convert and save a file$/;"	p	class:BasicCompressor
saveFile	include/Eternia/WebFramework/Encoding/JSON.h	/^        void saveFile(CharString loc); \/\/ save JSON (overwrite) to file$/;"	p	class:JSON
saveFile	src/Algorithm/Compression/BasicCompressor.h	/^    void saveFile(CharString location, CharString data); \/\/ convert and save a file$/;"	p	class:BasicCompressor
saveFile	src/WebFramework/Encoding/JSON.h	/^        void saveFile(CharString loc); \/\/ save JSON (overwrite) to file$/;"	p	class:JSON
sbox	src/Algorithm/Cryptography/Aes267.cpp	/^const uint8_t sbox[256] = {$/;"	v
sboxinv	src/Algorithm/Cryptography/Aes267.cpp	/^const uint8_t sboxinv[256] = {$/;"	v
scale	include/Eternia/Math/struct/Matrix.h	/^    void scale(double scalar); \/\/ multiply all values in matrix by value.$/;"	p	class:Matrix
scale	src/Math/struct/Matrix.cpp	/^void Matrix::scale(double scalar) {$/;"	f	class:Matrix
scale	src/Math/struct/Matrix.h	/^    void scale(double scalar); \/\/ multiply all values in matrix by value.$/;"	p	class:Matrix
science	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> science; \/\/ increased interest in complex systems, makes skill-ups go faster$/;"	m	class:CraftingStats
science	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> science; \/\/ increased interest in complex systems, makes skill-ups go faster$/;"	m	class:CraftingStats
scruple	include/Eternia/constants.h	/^            const double scruple = 20.0*grains;$/;"	m	namespace:physical::unit::apothecary
scruple	src/constants.h	/^            const double scruple = 20.0*grains;$/;"	m	namespace:physical::unit::apothecary
scruples	include/Eternia/constants.h	/^            const double scruples = scruple;$/;"	m	namespace:physical::unit::apothecary
scruples	src/constants.h	/^            const double scruples = scruple;$/;"	m	namespace:physical::unit::apothecary
seam	include/Eternia/constants.h	/^        const double seam = 8.0*US::bushels;$/;"	m	namespace:physical::unit
seam	src/constants.h	/^        const double seam = 8.0*US::bushels;$/;"	m	namespace:physical::unit
seams	include/Eternia/constants.h	/^        const double seams = seam;$/;"	m	namespace:physical::unit
seams	src/constants.h	/^        const double seams = seam;$/;"	m	namespace:physical::unit
sec	include/Eternia/constants.h	/^                const double sec = second;$/;"	m	namespace:physical::unit::arc::centesimal
sec	include/Eternia/constants.h	/^            const double sec = second;$/;"	m	namespace:physical::unit::arc
sec	include/Eternia/constants.h	/^        const double sec = second;$/;"	m	namespace:physical::unit
sec	src/constants.h	/^                const double sec = second;$/;"	m	namespace:physical::unit::arc::centesimal
sec	src/constants.h	/^            const double sec = second;$/;"	m	namespace:physical::unit::arc
sec	src/constants.h	/^        const double sec = second;$/;"	m	namespace:physical::unit
second	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int second, minute, hour;$/;"	m	class:AbstractDBDate
second	include/Eternia/constants.h	/^                const double second = grade\/10000.0;$/;"	m	namespace:physical::unit::arc::centesimal
second	include/Eternia/constants.h	/^            const double second = minute\/60.0;$/;"	m	namespace:physical::unit::arc
second	include/Eternia/constants.h	/^        const double second = 1.0;$/;"	m	namespace:physical::unit
second	src/Data/AbstractDatabase/AbstractDB.h	/^        int second, minute, hour;$/;"	m	class:AbstractDBDate
second	src/constants.h	/^                const double second = grade\/10000.0;$/;"	m	namespace:physical::unit::arc::centesimal
second	src/constants.h	/^            const double second = minute\/60.0;$/;"	m	namespace:physical::unit::arc
second	src/constants.h	/^        const double second = 1.0;$/;"	m	namespace:physical::unit
secondTime	include/Eternia/Emulation/SecondTick.h	/^        double secondTime;$/;"	m	class:SecondTick
secondTime	src/Emulation/SecondTick.h	/^        double secondTime;$/;"	m	class:SecondTick
seconds	include/Eternia/constants.h	/^                const double seconds = second;$/;"	m	namespace:physical::unit::arc::centesimal
seconds	include/Eternia/constants.h	/^            const double seconds = second;$/;"	m	namespace:physical::unit::arc
seconds	include/Eternia/constants.h	/^        const double seconds = second;$/;"	m	namespace:physical::unit
seconds	src/constants.h	/^                const double seconds = second;$/;"	m	namespace:physical::unit::arc::centesimal
seconds	src/constants.h	/^            const double seconds = second;$/;"	m	namespace:physical::unit::arc
seconds	src/constants.h	/^        const double seconds = second;$/;"	m	namespace:physical::unit
section	include/Eternia/constants.h	/^        const double section = statute::mile*statute::mile;$/;"	m	namespace:physical::unit
section	src/constants.h	/^        const double section = statute::mile*statute::mile;$/;"	m	namespace:physical::unit
sections	include/Eternia/constants.h	/^        const double sections = section;$/;"	m	namespace:physical::unit
sections	src/constants.h	/^        const double sections = section;$/;"	m	namespace:physical::unit
sector	include/Eternia/Gamelogic/Location.h	/^        vertex sector; \/\/ sector quadrant$/;"	m	class:Location
sector	include/Eternia/Gamelogic/Ship/Ship.h	/^        vertex sector; \/\/ Galaxy sector of this ship$/;"	m	class:Ship
sector	src/Gamelogic/Location.h	/^        vertex sector; \/\/ sector quadrant$/;"	m	class:Location
sector	src/Gamelogic/Ship/Ship.h	/^        vertex sector; \/\/ Galaxy sector of this ship$/;"	m	class:Ship
security	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ADBT_SECURITY security;$/;"	m	class:AbstractDBCacheMap
security	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ADBT_SECURITY security;$/;"	m	class:AbstractDBTable
security	src/Data/AbstractDatabase/AbstractDB.h	/^        ADBT_SECURITY security;$/;"	m	class:AbstractDBCacheMap
security	src/Data/AbstractDatabase/AbstractDB.h	/^        ADBT_SECURITY security;$/;"	m	class:AbstractDBTable
seed	include/Eternia/Gamelogic/Environment/Object/Tree.h	/^        int seed;$/;"	m	class:Tree
seed	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2; \/\/ seed for planet. (Randomly generated, or loaded from server)$/;"	m	class:Terrain
seed	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2;$/;"	m	class:Atmosphere
seed	src/Gamelogic/Environment/Object/Tree.h	/^        int seed;$/;"	m	class:Tree
seed	src/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2; \/\/ seed for planet. (Randomly generated, or loaded from server)$/;"	m	class:Terrain
seed	src/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2;$/;"	m	class:Atmosphere
seed2	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2; \/\/ seed for planet. (Randomly generated, or loaded from server)$/;"	m	class:Terrain
seed2	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2;$/;"	m	class:Atmosphere
seed2	src/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2; \/\/ seed for planet. (Randomly generated, or loaded from server)$/;"	m	class:Terrain
seed2	src/Gamelogic/Environment/Planet/Planet.h	/^    long long seed, seed2;$/;"	m	class:Atmosphere
seekfirst	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int seekfirst; \/\/ seek to go to get to first row$/;"	m	class:AbstractDBTable
seekfirst	src/Data/AbstractDatabase/AbstractDB.h	/^        int seekfirst; \/\/ seek to go to get to first row$/;"	m	class:AbstractDBTable
seeksize	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int seeksize; \/\/ size total of each row$/;"	m	class:AbstractDBTable
seeksize	src/Data/AbstractDatabase/AbstractDB.h	/^        int seeksize; \/\/ size total of each row$/;"	m	class:AbstractDBTable
self	include/Eternia/Data/LinkedMap.h	/^        LinkedMapNode* const self();$/;"	p	class:LinkedMapNode
self	src/Data/LinkedMap.cpp	/^LinkedMapNode* const LinkedMapNode::self() {$/;"	f	class:LinkedMapNode
self	src/Data/LinkedMap.h	/^        LinkedMapNode* const self();$/;"	p	class:LinkedMapNode
sendAudioBuffer	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        void sendAudioBuffer(ChatClient* client, CharString buffer, int bitrate); \/\/ send a buffered audio value$/;"	p	class:ChatChannel
sendAudioBuffer	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        void sendAudioBuffer(ChatClient* client, CharString buffer, int bitrate); \/\/ send a buffered audio value$/;"	p	class:ChatChannel
sendCPUServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        void sendCPUServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PCPUServer
sendCPUServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        void sendCPUServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PCPUServer
sendDataServerPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        void sendDataServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PDataServer
sendDataServerPacket	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        void sendDataServerPacket(P2PNode server, P2PPacket packet);$/;"	p	class:P2PDataServer
sendIRCPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        void sendIRCPacket(P2PNode client, P2PPacket packet);$/;"	p	class:P2PIRCServer
sendIRCPacket	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        void sendIRCPacket(P2PNode client, P2PPacket packet);$/;"	p	class:P2PIRCServer
sendMessage	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        void sendMessage(ChatClient* client, CharString message); \/\/ send a chat message on this channel$/;"	p	class:ChatChannel
sendMessage	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        void sendMessage(CharString text);$/;"	p	class:ChatClient
sendMessage	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        void sendMessage(ChatClient* client, CharString message); \/\/ send a chat message on this channel$/;"	p	class:ChatChannel
sendMessage	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        void sendMessage(CharString text);$/;"	p	class:ChatClient
sendPacket	include/Eternia/WebFramework/Network/PacketChannel.h	/^    void sendPacket(CharString data); \/\/ SYNC$/;"	p	class:PacketChannel
sendPacket	src/WebFramework/Network/PacketChannel.cpp	/^void PacketChannel::sendPacket(CharString data){$/;"	f	class:PacketChannel
sendPacket	src/WebFramework/Network/PacketChannel.h	/^    void sendPacket(CharString data); \/\/ SYNC$/;"	p	class:PacketChannel
sendPlayerTransfer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void sendPlayerTransfer(P2PNode player, P2PNode server);$/;"	p	class:P2PLServer
sendPlayerTransfer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        void sendPlayerTransfer(P2PNode player, P2PNode server);$/;"	p	class:P2PLServer
sendStreamPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        void sendStreamPacket(P2PNode player, P2PPacket packet);$/;"	p	class:P2PStreamServer
sendStreamPacket	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        void sendStreamPacket(P2PNode player, P2PPacket packet);$/;"	p	class:P2PStreamServer
sender	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        P2PNode sender;$/;"	m	class:P2PPacket
sender	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        P2PNode sender;$/;"	m	class:P2PPacket
separator	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        char separator;$/;"	m	class:SecuredCPUInstructables
separator	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        char separator;$/;"	m	class:SecuredGPUInstructables
separator	src/WebFramework/Network/PacketServer/Packets/Processing/CPU/SecuredCPUInstructables.hpp	/^        char separator;$/;"	m	class:SecuredCPUInstructables
separator	src/WebFramework/Network/PacketServer/Packets/Processing/GPU/SecuredGPUInstructables.hpp	/^        char separator;$/;"	m	class:SecuredGPUInstructables
serialize	include/Eternia/Serialization/BasicSerializer.h	/^        char* serialize(); \/\/ converts this class into a byte stream$/;"	p	class:BasicSerializer
serialize	include/Eternia/Serialization/SpecificSerializer.h	/^    CharString serialize(); \/\/ converts this class into a byte stream, enforce the use of size.$/;"	p	class:SpecificSerializer
serialize	src/Serialization/BasicSerializer.cpp	/^char* BasicSerializer::serialize() {$/;"	f	class:BasicSerializer
serialize	src/Serialization/BasicSerializer.h	/^        char* serialize(); \/\/ converts this class into a byte stream$/;"	p	class:BasicSerializer
serialize	src/Serialization/SpecificSerializer.cpp	/^CharString SpecificSerializer::serialize() {$/;"	f	class:SpecificSerializer
serialize	src/Serialization/SpecificSerializer.h	/^    CharString serialize(); \/\/ converts this class into a byte stream, enforce the use of size.$/;"	p	class:SpecificSerializer
serializeClass	include/Eternia/Serialization/BasicSerializer.h	/^    char* serializeClass(void* object, int size); \/\/ use a pointer for the class$/;"	p	namespace:BasicSerialize
serializeClass	src/Serialization/BasicSerializer.cpp	/^    char* serializeClass(void* object, int size) {$/;"	f	namespace:BasicSerialize
serializeClass	src/Serialization/BasicSerializer.h	/^    char* serializeClass(void* object, int size); \/\/ use a pointer for the class$/;"	p	namespace:BasicSerialize
serializeId	include/Eternia/Serialization/SpecificSerializer.h	/^    CharString serializeId(int id);$/;"	p	class:SpecificSerializer
serializeId	src/Serialization/SpecificSerializer.cpp	/^CharString SpecificSerializer::serializeId(int id){$/;"	f	class:SpecificSerializer
serializeId	src/Serialization/SpecificSerializer.h	/^    CharString serializeId(int id);$/;"	p	class:SpecificSerializer
serv_addr	include/Eternia/WebFramework/Network/SocketServer.h	/^    sockaddr_in serv_addr;$/;"	m	class:SocketServer
serv_addr	src/WebFramework/Network/SocketServer.h	/^    sockaddr_in serv_addr;$/;"	m	class:SocketServer
serverPeerID	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        long serverPeerID;$/;"	m	class:P2PRegisterServer
serverPeerID	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        long serverPeerID;$/;"	m	class:P2PRegisterServer
serverType	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        P2PSERVERTYPE serverType;$/;"	m	class:P2PRegisterServer
serverType	src/WebFramework/Network/PacketServer/Packets/P2P/P2PRegisterServer.hpp	/^        P2PSERVERTYPE serverType;$/;"	m	class:P2PRegisterServer
set	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T set(T val) {$/;"	f	class:CryptoDefiner
set	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        bool set(int index, void* value);$/;"	p	class:BasicFixedPointerArray
set	include/Eternia/Data/CharString.h	/^        void set(CharString stringg);$/;"	p	class:CharString
set	include/Eternia/Data/CharString.h	/^        void set(char* stringg); \/\/ sets pointer for CharString, auto-finds length.$/;"	p	class:CharString
set	include/Eternia/Data/CharString.h	/^        void set(char* stringg, int length); \/\/ sets both the size and pointer for charString$/;"	p	class:CharString
set	include/Eternia/Data/DoubleList.h	/^        void set(int index, double item);$/;"	p	class:DoubleList
set	include/Eternia/Data/HashMap.hpp	/^        void set(HTEntry<T>* entry) {$/;"	f	class:HTEntry
set	include/Eternia/Data/HashTable.h	/^        void set(HTEntry* entry); \/\/ set value directly.$/;"	p	class:HTEntry
set	include/Eternia/Data/IntegerList.h	/^        void set(int i, int item);$/;"	p	class:IntegerList
set	include/Eternia/Data/SpecialTypes.hpp	/^        void set(unsigned int v, unsigned char offset) {$/;"	f	class:UInt512
set	include/Eternia/Math/Equation.h	/^        void set(CharString* equation);$/;"	p	class:Equation
set	include/Eternia/Math/struct/Matrix.h	/^    void set(double **values, int columns, int rows); \/\/ set a double matrix with m columns and n rows.$/;"	p	class:Matrix
set	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        void set(CharString var); \/\/ set this variable, auto-detect type$/;"	p	class:CPLVariable
set	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        T set(T val) {$/;"	f	class:CryptoDefiner
set	src/Data/AbstractDatabase/AbstractDB.h	/^        bool set(int index, void* value);$/;"	p	class:BasicFixedPointerArray
set	src/Data/AbstractDatabase/BasicFixedPointerArray.cpp	/^bool BasicFixedPointerArray::set(int index, void* value) {$/;"	f	class:BasicFixedPointerArray
set	src/Data/CharString.cpp	/^void CharString::set(CharString stringg){$/;"	f	class:CharString
set	src/Data/CharString.cpp	/^void CharString::set(char* stringg) {$/;"	f	class:CharString
set	src/Data/CharString.cpp	/^void CharString::set(char* stringg, int length) {$/;"	f	class:CharString
set	src/Data/CharString.h	/^        void set(CharString stringg);$/;"	p	class:CharString
set	src/Data/CharString.h	/^        void set(char* stringg); \/\/ sets pointer for CharString, auto-finds length.$/;"	p	class:CharString
set	src/Data/CharString.h	/^        void set(char* stringg, int length); \/\/ sets both the size and pointer for charString$/;"	p	class:CharString
set	src/Data/DoubleList.cpp	/^void DoubleList::set(int index, double item) {$/;"	f	class:DoubleList
set	src/Data/DoubleList.h	/^        void set(int index, double item);$/;"	p	class:DoubleList
set	src/Data/HashMap.hpp	/^        void set(HTEntry<T>* entry) {$/;"	f	class:HTEntry
set	src/Data/HashTable.cpp	/^void HTEntry::set(HTEntry* entry) {$/;"	f	class:HTEntry
set	src/Data/HashTable.h	/^        void set(HTEntry* entry); \/\/ set value directly.$/;"	p	class:HTEntry
set	src/Data/IntegerList.cpp	/^void IntegerList::set(int index, int item) {$/;"	f	class:IntegerList
set	src/Data/IntegerList.h	/^        void set(int i, int item);$/;"	p	class:IntegerList
set	src/Data/SpecialTypes.hpp	/^        void set(unsigned int v, unsigned char offset) {$/;"	f	class:UInt512
set	src/Math/Equation.cpp	/^void Equation::set(CharString* eq) {$/;"	f	class:Equation
set	src/Math/Equation.h	/^        void set(CharString* equation);$/;"	p	class:Equation
set	src/Math/struct/Matrix.cpp	/^void Matrix::set(double **values_, int _m, int _n) {$/;"	f	class:Matrix
set	src/Math/struct/Matrix.h	/^    void set(double **values, int columns, int rows); \/\/ set a double matrix with m columns and n rows.$/;"	p	class:Matrix
set	src/Programming/CPLScript/CPLVariable.h	/^        void set(CharString var); \/\/ set this variable, auto-detect type$/;"	p	class:CPLVariable
setADC10Value	include/Eternia/Emulation/MPU/msp430.h	/^        void setADC10Value(unsigned int value); \/\/ sets ADC10MEM and sets ADC10IFG$/;"	p	class:MSP430
setADC10Value	src/Emulation/MPU/msp430.cpp	/^void MSP430::setADC10Value(unsigned int value) {$/;"	f	class:MSP430
setADC10Value	src/Emulation/MPU/msp430.h	/^        void setADC10Value(unsigned int value); \/\/ sets ADC10MEM and sets ADC10IFG$/;"	p	class:MSP430
setAmbientTemperature	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        void setAmbientTemperature(double temp); \/\/ ambient temp may change$/;"	p	class:ComponentRating
setAmbientTemperature	src/Engineering/Electrical/Components/ComponentRating.cpp	/^void ComponentRating::setAmbientTemperature(double temp) {$/;"	f	class:ComponentRating
setAmbientTemperature	src/Engineering/Electrical/Components/ComponentRating.h	/^        void setAmbientTemperature(double temp); \/\/ ambient temp may change$/;"	p	class:ComponentRating
setAmperage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        void setAmperage(double Amperes);$/;"	p	class:PowerValue
setAmperage	src/Engineering/Electrical/PowerValue.cpp	/^void PowerValue::setAmperage(double Amperes) {$/;"	f	class:PowerValue
setAmperage	src/Engineering/Electrical/PowerValue.h	/^        void setAmperage(double Amperes);$/;"	p	class:PowerValue
setBlock	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    void setBlock(int x, int y, int z, Block* block);$/;"	p	class:VoxelGeom
setBlock	src/Gamelogic/Voxel/VoxelGeom.h	/^    void setBlock(int x, int y, int z, Block* block);$/;"	p	class:VoxelGeom
setBlocks	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    void setBlocks(bool use, int length);$/;"	p	class:BasicCompressor
setBlocks	src/Algorithm/Compression/BasicCompressor.h	/^    void setBlocks(bool use, int length);$/;"	p	class:BasicCompressor
setByte	include/Eternia/Emulation/MPU/msp430.h	/^        void setByte(unsigned int address, unsigned char value);$/;"	p	class:MSP430
setByte	src/Emulation/MPU/msp430.cpp	/^void MSP430::setByte(unsigned int address, unsigned char value) {$/;"	f	class:MSP430
setByte	src/Emulation/MPU/msp430.h	/^        void setByte(unsigned int address, unsigned char value);$/;"	p	class:MSP430
setCancelled	include/Eternia/Data/Events/Event.h	/^    void setCancelled(bool value);$/;"	p	class:Event
setCancelled	src/Data/Events/Event.h	/^    void setCancelled(bool value);$/;"	p	class:Event
setDuty	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void setDuty(float value); \/\/ duty from 0 to 1$/;"	p	class:PWM
setDuty	src/Engineering/Electrical/Signal/PWM.cpp	/^void PWM::setDuty(float value) {$/;"	f	class:PWM
setDuty	src/Engineering/Electrical/Signal/PWM.h	/^    void setDuty(float value); \/\/ duty from 0 to 1$/;"	p	class:PWM
setFrequency	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void setFrequency(int frequency); \/\/ set frequency from 1 to 10 MHz$/;"	p	class:PWM
setFrequency	src/Engineering/Electrical/Signal/PWM.cpp	/^void PWM::setFrequency(int freq) {$/;"	f	class:PWM
setFrequency	src/Engineering/Electrical/Signal/PWM.h	/^    void setFrequency(int frequency); \/\/ set frequency from 1 to 10 MHz$/;"	p	class:PWM
setFrequencyEvent	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        void setFrequencyEvent(int frequency, void (function)());$/;"	p	class:CLKProvider
setFrequencyEvent	src/Engineering/Electrical/Signal/CLKProvider.cpp	/^void CLKProvider::setFrequencyEvent(int frequency, void (function)()) {$/;"	f	class:CLKProvider
setFrequencyEvent	src/Engineering/Electrical/Signal/CLKProvider.h	/^        void setFrequencyEvent(int frequency, void (function)());$/;"	p	class:CLKProvider
setID	include/Eternia/Data/HashMap.hpp	/^        void setID() {$/;"	f	class:HTEntry
setID	include/Eternia/Data/HashTable.h	/^        void setID(); \/\/ h(k), hashing function.$/;"	p	class:HTEntry
setID	src/Data/HashMap.hpp	/^        void setID() {$/;"	f	class:HTEntry
setID	src/Data/HashTable.cpp	/^void HTEntry::setID() {$/;"	f	class:HTEntry
setID	src/Data/HashTable.h	/^        void setID(); \/\/ h(k), hashing function.$/;"	p	class:HTEntry
setIncomeTax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        void setIncomeTax(double percent);$/;"	p	class:Tax
setIncomeTax	src/Gamelogic/Economics/Tax/Tax.cpp	/^void Tax::setIncomeTax(double percent) {$/;"	f	class:Tax
setIncomeTax	src/Gamelogic/Economics/Tax/Tax.h	/^        void setIncomeTax(double percent);$/;"	p	class:Tax
setPWMEvent	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void setPWMEvent(void (*function)(bool)); \/\/ enable an interrupt-like event$/;"	p	class:PWM
setPWMEvent	src/Engineering/Electrical/Signal/PWM.cpp	/^void PWM::setPWMEvent(void (*function)(bool)) {$/;"	f	class:PWM
setPWMEvent	src/Engineering/Electrical/Signal/PWM.h	/^    void setPWMEvent(void (*function)(bool)); \/\/ enable an interrupt-like event$/;"	p	class:PWM
setParent	include/Eternia/Design/LayoutObject.h	/^        public void setParent(LayoutObject* child);$/;"	p	class:LayoutObject
setParent	src/Design/LayoutObject.h	/^        public void setParent(LayoutObject* child);$/;"	p	class:LayoutObject
setPeriod	include/Eternia/Data/Events/EventHandle.h	/^        void setPeriod(long periodlen); \/\/ set the time period for occurence in ms (precedes recurring)$/;"	p	class:EventHandle
setPeriod	src/Data/Events/EventHandle.cpp	/^void EventHandle::setPeriod(long periodlen) {$/;"	f	class:EventHandle
setPeriod	src/Data/Events/EventHandle.h	/^        void setPeriod(long periodlen); \/\/ set the time period for occurence in ms (precedes recurring)$/;"	p	class:EventHandle
setPin	include/Eternia/Engineering/Electrical/IC/General/IC555.h	/^        virtual void setPin(int pin, double value); \/\/ set the value on a pin$/;"	p	class:IC555
setPin	include/Eternia/Engineering/Electrical/IC/IC.h	/^        void setPin(int pin, Pin* value); \/\/ set the value on a pin$/;"	p	class:IC
setPin	src/Engineering/Electrical/IC/General/IC555.cpp	/^void IC555::setPin(int pin, double value) {$/;"	f	class:IC555
setPin	src/Engineering/Electrical/IC/General/IC555.h	/^        virtual void setPin(int pin, double value); \/\/ set the value on a pin$/;"	p	class:IC555
setPin	src/Engineering/Electrical/IC/IC.h	/^        void setPin(int pin, Pin* value); \/\/ set the value on a pin$/;"	p	class:IC
setPins	include/Eternia/Engineering/Electrical/IC/IC.h	/^        void setPins(LinkedList<Pin>* list); \/\/ set the initial pins list$/;"	p	class:IC
setPins	src/Engineering/Electrical/IC/IC.cpp	/^void IC::setPins(LinkedList<Pin>* list) {$/;"	f	class:IC
setPins	src/Engineering/Electrical/IC/IC.h	/^        void setPins(LinkedList<Pin>* list); \/\/ set the initial pins list$/;"	p	class:IC
setPower	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        void setPower(PowerValue* power); \/\/ for initial power setting$/;"	p	class:ComponentRating
setPower	include/Eternia/Engineering/Electrical/IC/RAM.h	/^        void setPower(PowerValue* value); \/\/ Sets the input power value$/;"	p	class:RAM
setPower	include/Eternia/Engineering/Electrical/PowerValue.h	/^        void setPower(); \/\/ Power Law$/;"	p	class:PowerValue
setPower	src/Engineering/Electrical/Components/ComponentRating.cpp	/^void ComponentRating::setPower(PowerValue* power) {$/;"	f	class:ComponentRating
setPower	src/Engineering/Electrical/Components/ComponentRating.h	/^        void setPower(PowerValue* power); \/\/ for initial power setting$/;"	p	class:ComponentRating
setPower	src/Engineering/Electrical/IC/RAM.h	/^        void setPower(PowerValue* value); \/\/ Sets the input power value$/;"	p	class:RAM
setPower	src/Engineering/Electrical/PowerValue.cpp	/^void PowerValue::setPower() {$/;"	f	class:PowerValue
setPower	src/Engineering/Electrical/PowerValue.h	/^        void setPower(); \/\/ Power Law$/;"	p	class:PowerValue
setProperty	include/Eternia/Data/Events/Event.h	/^    void setProperty(CharString name, T data);$/;"	p	class:Event
setProperty	src/Data/Events/Event.h	/^    void setProperty(CharString name, T data);$/;"	p	class:Event
setPtr	include/Eternia/Data/CharString.h	/^        void setPtr(char* data, int length); \/\/ sets a raw pointer, no changes or copying$/;"	p	class:CharString
setPtr	src/Data/CharString.cpp	/^void CharString::setPtr(char* data, int length) { \/\/ sets a raw pointer, no changes or copying.$/;"	f	class:CharString
setPtr	src/Data/CharString.h	/^        void setPtr(char* data, int length); \/\/ sets a raw pointer, no changes or copying$/;"	p	class:CharString
setRealTime	include/Eternia/Emulation/SecondTick.h	/^        void setRealTime(bool use); \/\/ set getTime() to realtime if true$/;"	p	class:SecondTick
setRealTime	src/Emulation/SecondTick.cpp	/^void SecondTick::setRealTime(bool use) {$/;"	f	class:SecondTick
setRealTime	src/Emulation/SecondTick.h	/^        void setRealTime(bool use); \/\/ set getTime() to realtime if true$/;"	p	class:SecondTick
setRecurForever	include/Eternia/Data/Events/EventHandle.h	/^        void setRecurForever(); \/\/ recur forever... and ever... and ever$/;"	p	class:EventHandle
setRecurForever	src/Data/Events/EventHandle.cpp	/^void EventHandle::setRecurForever() {$/;"	f	class:EventHandle
setRecurForever	src/Data/Events/EventHandle.h	/^        void setRecurForever(); \/\/ recur forever... and ever... and ever$/;"	p	class:EventHandle
setRecurrences	include/Eternia/Data/Events/EventHandle.h	/^        void setRecurrences(int recurs);$/;"	p	class:EventHandle
setRecurrences	src/Data/Events/EventHandle.cpp	/^void EventHandle::setRecurrences(int recurs) {$/;"	f	class:EventHandle
setRecurrences	src/Data/Events/EventHandle.h	/^        void setRecurrences(int recurs);$/;"	p	class:EventHandle
setSalesTax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        void setSalesTax(double percent);$/;"	p	class:Tax
setSalesTax	src/Gamelogic/Economics/Tax/Tax.cpp	/^void Tax::setSalesTax(double percent) {$/;"	f	class:Tax
setSalesTax	src/Gamelogic/Economics/Tax/Tax.h	/^        void setSalesTax(double percent);$/;"	p	class:Tax
setSize	include/Eternia/Data/CharString.h	/^        void setSize(int size); \/\/ sets the size of the CharString$/;"	p	class:CharString
setSize	src/Data/CharString.cpp	/^void CharString::setSize(int i) {$/;"	f	class:CharString
setSize	src/Data/CharString.h	/^        void setSize(int size); \/\/ sets the size of the CharString$/;"	p	class:CharString
setStableOrbit	include/Eternia/Math/struct/vertex.h	/^    void setStableOrbit(VertexObject body, double eccentricity, bool CCW_orbit);$/;"	p	class:VertexObject
setStableOrbit	src/Math/struct/vertex.cpp	/^void VertexObject::setStableOrbit(VertexObject body, double eccentricity, bool CCW_orbit){$/;"	f	class:VertexObject
setStableOrbit	src/Math/struct/vertex.h	/^    void setStableOrbit(VertexObject body, double eccentricity, bool CCW_orbit);$/;"	p	class:VertexObject
setTickInterval	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void setTickInterval(float seconds); \/\/ how many seconds expected per tick?$/;"	p	class:PWM
setTickInterval	src/Engineering/Electrical/Signal/PWM.cpp	/^void PWM::setTickInterval(float seconds) {$/;"	f	class:PWM
setTickInterval	src/Engineering/Electrical/Signal/PWM.h	/^    void setTickInterval(float seconds); \/\/ how many seconds expected per tick?$/;"	p	class:PWM
setTimeDispersal	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        void setTimeDispersal(int time);$/;"	p	class:CLKModule
setTimeDispersal	src/Engineering/Electrical/Signal/CLKProvider.cpp	/^void CLKModule::setTimeDispersal(int time) {$/;"	f	class:CLKModule
setTimeDispersal	src/Engineering/Electrical/Signal/CLKProvider.h	/^        void setTimeDispersal(int time);$/;"	p	class:CLKModule
setTradeTax	include/Eternia/Gamelogic/Economics/Tax/Tax.h	/^        void setTradeTax(double percent);$/;"	p	class:Tax
setTradeTax	src/Gamelogic/Economics/Tax/Tax.cpp	/^void Tax::setTradeTax(double percent) {$/;"	f	class:Tax
setTradeTax	src/Gamelogic/Economics/Tax/Tax.h	/^        void setTradeTax(double percent);$/;"	p	class:Tax
setValue	include/Eternia/API/APIMod.h	/^    bool setValue(APIMod* mod, CharString valname, void* val);$/;"	p	class:APIMod
setValue	include/Eternia/Engineering/Electrical/Pin.h	/^        void setValue(PowerValue* value);$/;"	p	class:Pin
setValue	src/API/APIMod.h	/^    bool setValue(APIMod* mod, CharString valname, void* val);$/;"	p	class:APIMod
setValue	src/Engineering/Electrical/Pin.h	/^        void setValue(PowerValue* value);$/;"	p	class:Pin
setVariable	include/Eternia/Programming/Program.h	/^        VProgramVariable* setVariable(int slot, VarTYPE typex, VProgramVariable* var);$/;"	p	class:Program
setVariable	src/Programming/Program.h	/^        VProgramVariable* setVariable(int slot, VarTYPE typex, VProgramVariable* var);$/;"	p	class:Program
setVariable	src/Programming/Visual/VisualProgram.cpp	/^VProgramVariable* Program::setVariable(int slot, VarTYPE typex, VProgramVariable* var) {$/;"	f	class:Program
setVariableValue	include/Eternia/Math/Equation.h	/^        void setVariableValue(CharString* variable, CharString* value); \/\/ replaces variable with variable value.$/;"	p	class:Equation
setVariableValue	src/Math/Equation.h	/^        void setVariableValue(CharString* variable, CharString* value); \/\/ replaces variable with variable value.$/;"	p	class:Equation
setVoltage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        void setVoltage(double Voltage);$/;"	p	class:PowerValue
setVoltage	src/Engineering/Electrical/PowerValue.cpp	/^void PowerValue::setVoltage(double Voltage) {$/;"	f	class:PowerValue
setVoltage	src/Engineering/Electrical/PowerValue.h	/^        void setVoltage(double Voltage);$/;"	p	class:PowerValue
setWord	include/Eternia/Emulation/MPU/msp430.h	/^        void setWord(unsigned int address, unsigned int value);$/;"	p	class:MSP430
setWord	src/Emulation/MPU/msp430.cpp	/^void MSP430::setWord(unsigned int address, unsigned int value) {$/;"	f	class:MSP430
setWord	src/Emulation/MPU/msp430.h	/^        void setWord(unsigned int address, unsigned int value);$/;"	p	class:MSP430
set_	include/Eternia/Data/CharString.h	/^        void set_(const char* stringg, const int length);$/;"	p	class:CharString
set_	src/Data/CharString.cpp	/^void CharString::set_(const char* stringg, const int length) {$/;"	f	class:CharString
set_	src/Data/CharString.h	/^        void set_(const char* stringg, const int length);$/;"	p	class:CharString
shield	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP shield;$/;"	m	class:AvatarHealth
shield	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> shield; \/\/ Shielding: better levels mean better resistances$/;"	m	class:SkillSet
shield	include/Eternia/Gamelogic/Inventory/DynamicEquip.h	/^        double shield; \/\/ unique shield increases$/;"	m	class:DynamicEquip
shield	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP shield;$/;"	m	class:AvatarHealth
shield	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> shield; \/\/ Shielding: better levels mean better resistances$/;"	m	class:SkillSet
shield	src/Gamelogic/Inventory/DynamicEquip.h	/^        double shield; \/\/ unique shield increases$/;"	m	class:DynamicEquip
shields	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> shields; \/\/ basic shields skill$/;"	m	class:CraftingStats
shields	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> shields; \/\/ basic shields skill$/;"	m	class:CraftingStats
shiftLeft	include/Eternia/Data/CharString.h	/^        char* shiftLeft(const int len);$/;"	p	class:CharString
shiftLeft	src/Data/CharString.cpp	/^char* CharString::shiftLeft(const int x) {$/;"	f	class:CharString
shiftLeft	src/Data/CharString.h	/^        char* shiftLeft(const int len);$/;"	p	class:CharString
ships	include/Eternia/Gamelogic/Ship/ShipHangar.h	/^        LinkedList<Ship> ships();$/;"	p	class:ShipHangar
ships	src/Gamelogic/Ship/ShipHangar.h	/^        LinkedList<Ship> ships();$/;"	p	class:ShipHangar
shufflelocs	src/Algorithm/Cryptography/ExHash.cpp	/^const int shufflelocs[64] = {32, 41, 42, 12, 14, 45, 48, 37, 13, 63, 5, 44, 20, 58, 18, 22, 2, 8, 33, 6, 60, 51, 16, 49, 57, 50, 46, 21, 43, 19, 61, 38, 11, 10, 24, 3, 52, 47, 28, 9, 27, 35, 26, 25, 54, 62, 36, 4, 40, 0, 1, 56, 7, 34, 30, 15, 17, 31, 53, 39, 29, 23, 59, 55};$/;"	v
side	include/Eternia/Gamelogic/Avatar/AvatarGear.h	/^        PType<GEAR_SIDE> side;$/;"	m	class:MountedEquip
side	src/Gamelogic/Avatar/AvatarGear.h	/^        PType<GEAR_SIDE> side;$/;"	m	class:MountedEquip
sigma_0	include/Eternia/constants.h	/^        const double sigma_0 = 0.66524616*barns;$/;"	m	namespace:physical::constant
sigma_0	src/constants.h	/^        const double sigma_0 = 0.66524616*barns;$/;"	m	namespace:physical::constant
sigma_SB	include/Eternia/constants.h	/^        const double sigma_SB = 5.67051e-8*W\/(m*m*K*K*K*K);$/;"	m	namespace:physical::constant
sigma_SB	src/constants.h	/^        const double sigma_SB = 5.67051e-8*W\/(m*m*K*K*K*K);$/;"	m	namespace:physical::constant
simSecond	include/Eternia/Math/struct/vertex.h	/^    void simSecond();$/;"	p	class:VertexObject
simSecond	src/Math/struct/vertex.cpp	/^void VertexObject::simSecond() {$/;"	f	class:VertexObject
simSecond	src/Math/struct/vertex.h	/^    void simSecond();$/;"	p	class:VertexObject
sin	include/Eternia/Math/Functions/Trig.h	/^    double sin(double); \/\/ x - x3\/3! + x5\/5! - x7\/7! ...$/;"	p	namespace:Math
sin	src/Math/Functions/Trig.cpp	/^    double sin(double x) {$/;"	f	namespace:Math
sin	src/Math/Functions/Trig.h	/^    double sin(double); \/\/ x - x3\/3! + x5\/5! - x7\/7! ...$/;"	p	namespace:Math
sinh	include/Eternia/Math/Functions/Trig.h	/^    double sinh(double); \/\/(e^x−e^−x)\/2$/;"	p	namespace:Math
sinh	src/Math/Functions/Trig.cpp	/^    double sinh(double x) {$/;"	f	namespace:Math
sinh	src/Math/Functions/Trig.h	/^    double sinh(double); \/\/(e^x−e^−x)\/2$/;"	p	namespace:Math
size	include/Eternia/Data/ConcurrentLinkedList.hpp	/^    int size(){$/;"	f	class:ConcurrentLinkedList
size	include/Eternia/Data/DoubleList.h	/^        int size();$/;"	p	class:DoubleList
size	include/Eternia/Data/HashMap.hpp	/^        int collides,size; \/\/ for use with hashmap debugging.$/;"	m	class:HashMap
size	include/Eternia/Data/HashMap.hpp	/^        unsigned long size;$/;"	m	class:HTEntry
size	include/Eternia/Data/Heap.h	/^        int *HeapList, size;$/;"	m	class:Heap
size	include/Eternia/Data/IntegerList.h	/^        int size();$/;"	p	class:IntegerList
size	include/Eternia/Data/LinkedList.hpp	/^    int size() {$/;"	f	class:LinkedList
size	include/Eternia/Data/LinkedListT.h	/^        int size();$/;"	p	class:LinkedListT
size	include/Eternia/Data/PriorityQueue.h	/^        int size;$/;"	m	class:PriorityQueue
size	include/Eternia/Data/Queue.h	/^        int size();$/;"	p	class:Queue
size	include/Eternia/Data/Stack.h	/^        int size;$/;"	m	class:Stack
size	src/Data/ConcurrentLinkedList.hpp	/^    int size(){$/;"	f	class:ConcurrentLinkedList
size	src/Data/DoubleList.cpp	/^int DoubleList::size() {$/;"	f	class:DoubleList
size	src/Data/DoubleList.h	/^        int size();$/;"	p	class:DoubleList
size	src/Data/HashMap.hpp	/^        int collides,size; \/\/ for use with hashmap debugging.$/;"	m	class:HashMap
size	src/Data/HashMap.hpp	/^        unsigned long size;$/;"	m	class:HTEntry
size	src/Data/Heap.h	/^        int *HeapList, size;$/;"	m	class:Heap
size	src/Data/IntegerList.cpp	/^int IntegerList::size() {$/;"	f	class:IntegerList
size	src/Data/IntegerList.h	/^        int size();$/;"	p	class:IntegerList
size	src/Data/LinkedList.hpp	/^    int size() {$/;"	f	class:LinkedList
size	src/Data/LinkedListT.cpp	/^int LinkedListT::size() {$/;"	f	class:LinkedListT
size	src/Data/LinkedListT.h	/^        int size();$/;"	p	class:LinkedListT
size	src/Data/PriorityQueue.h	/^        int size;$/;"	m	class:PriorityQueue
size	src/Data/Queue.cpp	/^int Queue::size() {$/;"	f	class:Queue
size	src/Data/Queue.h	/^        int size();$/;"	p	class:Queue
size	src/Data/Stack.h	/^        int size;$/;"	m	class:Stack
size_type	include/Eternia/Algorithm/Cryptography/md5.h	/^        typedef unsigned int size_type; \/\/ must be 32bit$/;"	t	class:MD5
size_type	src/Algorithm/Cryptography/md5.h	/^        typedef unsigned int size_type; \/\/ must be 32bit$/;"	t	class:MD5
sizex	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    int sizex;$/;"	m	class:VoxelGeom
sizex	src/Gamelogic/Voxel/VoxelGeom.h	/^    int sizex;$/;"	m	class:VoxelGeom
sizey	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    int sizey;$/;"	m	class:VoxelGeom
sizey	src/Gamelogic/Voxel/VoxelGeom.h	/^    int sizey;$/;"	m	class:VoxelGeom
skein	include/Eternia/constants.h	/^        const double skein = 120*yards;$/;"	m	namespace:physical::unit
skein	src/constants.h	/^        const double skein = 120*yards;$/;"	m	namespace:physical::unit
skeins	include/Eternia/constants.h	/^        const double skeins = skein;$/;"	m	namespace:physical::unit
skeins	src/constants.h	/^        const double skeins = skein;$/;"	m	namespace:physical::unit
skillInit	include/Eternia/Gamelogic/Avatar/Skills/Skill.h	/^    void skillInit(CharString name, SKCLASS classType, double cost, double castTime); \/\/ Initialize this skill$/;"	p	class:Skill
skillInit	src/Gamelogic/Avatar/Skills/Skill.h	/^    void skillInit(CharString name, SKCLASS classType, double cost, double castTime); \/\/ Initialize this skill$/;"	p	class:Skill
skills	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        SkillSet skills;$/;"	m	class:Avatar
skills	src/Gamelogic/Avatar/Avatar.h	/^        SkillSet skills;$/;"	m	class:Avatar
skin_color	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex skin_color; \/\/ skin color$/;"	m	class:AvatarAppearance
skin_color	src/Gamelogic/Avatar/AvatarAppearance.h	/^    vertex skin_color; \/\/ skin color$/;"	m	class:AvatarAppearance
skot	include/Eternia/constants.h	/^        const double skot = apostilb\/1000.0;$/;"	m	namespace:physical::unit
skot	src/constants.h	/^        const double skot = apostilb\/1000.0;$/;"	m	namespace:physical::unit
skots	include/Eternia/constants.h	/^        const double skots = skot;$/;"	m	namespace:physical::unit
skots	src/constants.h	/^        const double skots = skot;$/;"	m	namespace:physical::unit
sleep	include/Eternia/Gamelogic/Race/Race.h	/^	float sleep; \/\/ Ratio to sleep of the day. Humans normally have a 29.1% time sleep for each day. (0.291)$/;"	m	class:Race
sleep	main.cpp	/^void sleep( time_t delay ) {$/;"	f
sleep	src/Gamelogic/Race/Race.h	/^	float sleep; \/\/ Ratio to sleep of the day. Humans normally have a 29.1% time sleep for each day. (0.291)$/;"	m	class:Race
slice	include/Eternia/Data/LinkedList.hpp	/^    LinkedList<T> slice(int start, int count, int skip){$/;"	f	class:LinkedList
slice	src/Data/LinkedList.hpp	/^    LinkedList<T> slice(int start, int count, int skip){$/;"	f	class:LinkedList
slot	include/Eternia/Programming/Visual/VProgramNode.h	/^        int slot; \/\/ slot for input\/output$/;"	m	class:VProgramNode
slot	src/Programming/Visual/VProgramNode.h	/^        int slot; \/\/ slot for input\/output$/;"	m	class:VProgramNode
smarts	include/Eternia/Gamelogic/AI/AI.h	/^        double smarts; \/\/ this combined with taint will completely obliterate you$/;"	m	class:AI
smarts	src/Gamelogic/AI/AI.h	/^        double smarts; \/\/ this combined with taint will completely obliterate you$/;"	m	class:AI
smclk	include/Eternia/Emulation/MPU/msp430.h	/^        void smclk();$/;"	p	class:MSP430
smclk	src/Emulation/MPU/msp430.cpp	/^void MSP430::smclk() {$/;"	f	class:MSP430
smclk	src/Emulation/MPU/msp430.h	/^        void smclk();$/;"	p	class:MSP430
smclk_cnt	include/Eternia/Emulation/MPU/msp430.h	/^        int smclk_cnt;$/;"	m	class:MSP430
smclk_cnt	src/Emulation/MPU/msp430.h	/^        int smclk_cnt;$/;"	m	class:MSP430
sockaddr_un	include/Eternia/WebFramework/Network/SockClient.h	/^struct sockaddr_un {$/;"	s
sockaddr_un	src/WebFramework/Network/SockClient.h	/^struct sockaddr_un {$/;"	s
sockaddr_un::sun_family	include/Eternia/WebFramework/Network/SockClient.h	/^    sa_family_t sun_family;               \/* AF_UNIX *\/$/;"	m	struct:sockaddr_un
sockaddr_un::sun_family	src/WebFramework/Network/SockClient.h	/^    sa_family_t sun_family;               \/* AF_UNIX *\/$/;"	m	struct:sockaddr_un
sockaddr_un::sun_path	include/Eternia/WebFramework/Network/SockClient.h	/^    char        sun_path[108];            \/* pathname *\/$/;"	m	struct:sockaddr_un
sockaddr_un::sun_path	src/WebFramework/Network/SockClient.h	/^    char        sun_path[108];            \/* pathname *\/$/;"	m	struct:sockaddr_un
sockd	include/Eternia/WebFramework/Network/SockClient.h	/^        int sockd;$/;"	m	class:SockClient
sockd	src/WebFramework/Network/SockClient.h	/^        int sockd;$/;"	m	class:SockClient
socketfd	include/Eternia/WebFramework/Network/SocketServer.h	/^    int socketfd;$/;"	m	class:SocketServer
socketfd	src/WebFramework/Network/SocketServer.h	/^    int socketfd;$/;"	m	class:SocketServer
solid	include/Eternia/Engineering/Chemistry/Composite.h	/^enum STATE {solid, liquid, gas, plasma};$/;"	e	enum:STATE
solid	src/Engineering/Chemistry/Composite.h	/^enum STATE {solid, liquid, gas, plasma};$/;"	e	enum:STATE
solve	include/Eternia/Math/Equation.h	/^        double solve(CharString* variable); \/\/ calls solveForVariable() and determines if it can be solved directly for an answer.$/;"	p	class:Equation
solve	src/Math/Equation.h	/^        double solve(CharString* variable); \/\/ calls solveForVariable() and determines if it can be solved directly for an answer.$/;"	p	class:Equation
solveForVariable	include/Eternia/Math/Equation.h	/^        Equation* solveForVariable(CharString* variable); \/\/ algeraeically solve the equation for variable.$/;"	p	class:Equation
solveForVariable	src/Math/Equation.h	/^        Equation* solveForVariable(CharString* variable); \/\/ algeraeically solve the equation for variable.$/;"	p	class:Equation
solvePath	include/Eternia/Gamelogic/AI/AIMovement.h	/^        LinkedList<vertex>* solvePath(); \/\/ solve path, AI predictability is accounted for. (Lee Algorithm)$/;"	p	class:AIMovement
solvePath	src/Gamelogic/AI/AIMovement.h	/^        LinkedList<vertex>* solvePath(); \/\/ solve path, AI predictability is accounted for. (Lee Algorithm)$/;"	p	class:AIMovement
solveSquareDeterminant	include/Eternia/Math/struct/Matrix.h	/^    double solveSquareDeterminant(double a, double b, double c, double d); \/\/ solve a 2x2 determinant$/;"	p	class:Matrix
solveSquareDeterminant	src/Math/struct/Matrix.cpp	/^double Matrix::solveSquareDeterminant(double a, double b, double c, double d) {$/;"	f	class:Matrix
solveSquareDeterminant	src/Math/struct/Matrix.h	/^    double solveSquareDeterminant(double a, double b, double c, double d); \/\/ solve a 2x2 determinant$/;"	p	class:Matrix
sortDown	include/Eternia/Data/Heap.h	/^        void sortDown(); \/\/ implement downheap and sort the list.$/;"	p	class:Heap
sortDown	src/Data/Heap.cpp	/^void Heap::sortDown() {$/;"	f	class:Heap
sortDown	src/Data/Heap.h	/^        void sortDown(); \/\/ implement downheap and sort the list.$/;"	p	class:Heap
sortUp	include/Eternia/Data/Heap.h	/^        void sortUp(); \/\/ implement upheap and sort the list.$/;"	p	class:Heap
sortUp	src/Data/Heap.cpp	/^void Heap::sortUp() {$/;"	f	class:Heap
sortUp	src/Data/Heap.h	/^        void sortUp(); \/\/ implement upheap and sort the list.$/;"	p	class:Heap
sound	include/Eternia/constants.h	/^    namespace sound {$/;"	n	namespace:electromagnetic
sound	src/constants.cpp	/^    namespace sound {$/;"	n	namespace:electromagnetic	file:
sound	src/constants.h	/^    namespace sound {$/;"	n	namespace:electromagnetic
space_piloting	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> space_piloting; \/\/ Space piloting skill$/;"	m	class:SkillSet
space_piloting	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> space_piloting; \/\/ Space piloting skill$/;"	m	class:SkillSet
span	include/Eternia/constants.h	/^        const double span = 9.0*inches;$/;"	m	namespace:physical::unit
span	src/constants.h	/^        const double span = 9.0*inches;$/;"	m	namespace:physical::unit
spans	include/Eternia/Math/struct/VectorSpace.h	/^        bool spans(VectorSpace* W); \/\/ returns whether this spans W$/;"	p	class:VectorSpace
spans	include/Eternia/constants.h	/^        const double spans = span;$/;"	m	namespace:physical::unit
spans	src/Math/struct/VectorSpace.cpp	/^bool VectorSpace::spans(VectorSpace* W) {$/;"	f	class:VectorSpace
spans	src/Math/struct/VectorSpace.h	/^        bool spans(VectorSpace* W); \/\/ returns whether this spans W$/;"	p	class:VectorSpace
spans	src/constants.h	/^        const double spans = span;$/;"	m	namespace:physical::unit
specialtypes_h_	include/Eternia/Data/SpecialTypes.hpp	/^#define specialtypes_h_$/;"	d
specialtypes_h_	src/Data/SpecialTypes.hpp	/^#define specialtypes_h_$/;"	d
specific_heat	include/Eternia/Engineering/Chemistry/Atom.h	/^        double specific_heat;$/;"	m	class:Atom
specific_heat	src/Engineering/Chemistry/Atom.h	/^        double specific_heat;$/;"	m	class:Atom
spindle	include/Eternia/constants.h	/^        const double spindle = 14400*yards;$/;"	m	namespace:physical::unit
spindle	src/constants.h	/^        const double spindle = 14400*yards;$/;"	m	namespace:physical::unit
spindles	include/Eternia/constants.h	/^        const double spindles = spindle;$/;"	m	namespace:physical::unit
spindles	src/constants.h	/^        const double spindles = spindle;$/;"	m	namespace:physical::unit
split	include/Eternia/Data/CharString.h	/^        LinkedList<CharString>* split(char splitter,char stopper);$/;"	p	class:CharString
split	src/Data/CharString.cpp	/^LinkedList<CharString>* CharString::split(char splitter,char stopper) {$/;"	f	class:CharString
split	src/Data/CharString.h	/^        LinkedList<CharString>* split(char splitter,char stopper);$/;"	p	class:CharString
springK	include/Eternia/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
springK	src/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
sqrt	include/Eternia/Math/Functions/Basic.h	/^    double sqrt(double x);$/;"	p	namespace:Math
sqrt	src/Math/Functions/Basic.cpp	/^    double sqrt(double number) {$/;"	f	namespace:Math
sqrt	src/Math/Functions/Basic.h	/^    double sqrt(double x);$/;"	p	namespace:Math
square	include/Eternia/constants.h	/^        const double square = 100.0*sabin;$/;"	m	namespace:physical::unit
square	src/constants.h	/^        const double square = 100.0*sabin;$/;"	m	namespace:physical::unit
squares	include/Eternia/constants.h	/^        const double squares = square;$/;"	m	namespace:physical::unit
squares	src/constants.h	/^        const double squares = square;$/;"	m	namespace:physical::unit
sr	include/Eternia/constants.h	/^        const double sr = steradian;$/;"	m	namespace:physical::unit
sr	src/constants.h	/^        const double sr = steradian;$/;"	m	namespace:physical::unit
st	include/Eternia/constants.h	/^        const double st = stone;$/;"	m	namespace:physical::unit
st	src/constants.h	/^        const double st = stone;$/;"	m	namespace:physical::unit
stacksize	include/Eternia/Gamelogic/Inventory/ItemBase.h	/^    int stacksize; \/\/ number of items in this stack.$/;"	m	class:ItemBase
stacksize	src/Gamelogic/Inventory/ItemBase.h	/^    int stacksize; \/\/ number of items in this stack.$/;"	m	class:ItemBase
start	include/Eternia/API/APIMod.h	/^    virtual void start(); \/\/ start the script engine (Loads the script, preps modules)$/;"	p	class:APIMod
start	include/Eternia/WebFramework/Network/RESTFulServer.h	/^        void start(); \/\/ Start the RESTFul server$/;"	p	class:RESTFulServer
start	include/Eternia/WebFramework/Network/SocketServer.h	/^    void start(); \/\/ Start the server$/;"	p	class:SocketServer
start	src/API/APIMod.cpp	/^void APIMod::start(){$/;"	f	class:APIMod
start	src/API/APIMod.h	/^    virtual void start(); \/\/ start the script engine (Loads the script, preps modules)$/;"	p	class:APIMod
start	src/WebFramework/Network/RESTFulServer.h	/^        void start(); \/\/ Start the RESTFul server$/;"	p	class:RESTFulServer
start	src/WebFramework/Network/SocketServer.cpp	/^void SocketServer::start() {$/;"	f	class:SocketServer
start	src/WebFramework/Network/SocketServer.h	/^    void start(); \/\/ Start the server$/;"	p	class:SocketServer
startSample	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    void startSample(); \/\/ sets up time offset$/;"	p	class:TimeSignal
startSample	src/Engineering/Electrical/Signal/TimeSignal.h	/^    void startSample(); \/\/ sets up time offset$/;"	p	class:TimeSignal
startTime	include/Eternia/Data/TimeProfiler.h	/^    long startTime; \/\/ time used when taking a delta$/;"	m	class:TimeProfiler
startTime	src/Data/TimeProfiler.h	/^    long startTime; \/\/ time used when taking a delta$/;"	m	class:TimeProfiler
started	include/Eternia/WebFramework/Network/SocketServer.h	/^    bool started;$/;"	m	class:SocketServer
started	src/WebFramework/Network/SocketServer.h	/^    bool started;$/;"	m	class:SocketServer
startsWith	include/Eternia/Data/CharString.h	/^        bool startsWith(CharString starter);$/;"	p	class:CharString
startsWith	src/Data/CharString.cpp	/^bool CharString::startsWith(CharString starter) {$/;"	f	class:CharString
startsWith	src/Data/CharString.h	/^        bool startsWith(CharString starter);$/;"	p	class:CharString
state	include/Eternia/Algorithm/Cryptography/md5.h	/^        uint4 state[4];   \/\/ digest so far$/;"	m	class:MD5
state	src/Algorithm/Cryptography/md5.h	/^        uint4 state[4];   \/\/ digest so far$/;"	m	class:MD5
statute	include/Eternia/constants.h	/^        namespace statute {$/;"	n	namespace:physical::unit
statute	src/constants.h	/^        namespace statute {$/;"	n	namespace:physical::unit
steradian	include/Eternia/constants.h	/^        const double steradian = 1.0;$/;"	m	namespace:physical::unit
steradian	src/constants.h	/^        const double steradian = 1.0;$/;"	m	namespace:physical::unit
steradians	include/Eternia/constants.h	/^        const double steradians = steradian;$/;"	m	namespace:physical::unit
steradians	src/constants.h	/^        const double steradians = steradian;$/;"	m	namespace:physical::unit
stere	include/Eternia/constants.h	/^        const double stere = meter*meter*meter;$/;"	m	namespace:physical::unit
stere	src/constants.h	/^        const double stere = meter*meter*meter;$/;"	m	namespace:physical::unit
steres	include/Eternia/constants.h	/^        const double steres = stere;$/;"	m	namespace:physical::unit
steres	src/constants.h	/^        const double steres = stere;$/;"	m	namespace:physical::unit
stilb	include/Eternia/constants.h	/^        const double stilb = 10000.0*apostilbs;$/;"	m	namespace:physical::unit
stilb	src/constants.h	/^        const double stilb = 10000.0*apostilbs;$/;"	m	namespace:physical::unit
stilbs	include/Eternia/constants.h	/^        const double stilbs = stilb;$/;"	m	namespace:physical::unit
stilbs	src/constants.h	/^        const double stilbs = stilb;$/;"	m	namespace:physical::unit
stone	include/Eternia/constants.h	/^        const double stone = 14.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
stone	src/constants.h	/^        const double stone = 14.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
stones	include/Eternia/constants.h	/^        const double stones = stone;$/;"	m	namespace:physical::unit
stones	src/constants.h	/^        const double stones = stone;$/;"	m	namespace:physical::unit
stop	include/Eternia/API/APIMod.h	/^    virtual void stop(); \/\/ stop the script engine (Unloads script, attempts to unload DLL)$/;"	p	class:APIMod
stop	include/Eternia/Parsing/InputRedirection.h	/^        bool stop;$/;"	m	class:InputRedirection
stop	src/API/APIMod.cpp	/^void APIMod::stop(){$/;"	f	class:APIMod
stop	src/API/APIMod.h	/^    virtual void stop(); \/\/ stop the script engine (Unloads script, attempts to unload DLL)$/;"	p	class:APIMod
stop	src/Parsing/InputRedirection.h	/^        bool stop;$/;"	m	class:InputRedirection
store_file	include/Eternia/Data/FileCache.hpp	/^        char* store_file;$/;"	m	class:FileCache
store_file	src/Data/FileCache.hpp	/^        char* store_file;$/;"	m	class:FileCache
strain	include/Eternia/Gamelogic/Avatar/Disease.h	/^        PType<double> strain; \/\/ Strain ID, applied when researches find a strain$/;"	m	class:Disease
strain	src/Gamelogic/Avatar/Disease.h	/^        PType<double> strain; \/\/ Strain ID, applied when researches find a strain$/;"	m	class:Disease
strength	include/Eternia/Engineering/Chemistry/Composite.h	/^	float strength; \/\/ strength, in kJ\/mol$/;"	m	class:AtomBond
strength	include/Eternia/Gamelogic/AI/AI.h	/^        double strength; \/\/ how "Tough" is this AI? (0% for a total wimp, 100% for a Tychus)$/;"	m	class:AI
strength	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> strength; \/\/ Muscle development$/;"	m	class:AvatarAppearance
strength	include/Eternia/Gamelogic/Avatar/Mood.h	/^        PType<int> strength; \/\/ strength of this mood from 1-10, 10 being completely overwhelming$/;"	m	class:Mood
strength	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> strength; \/\/ Attack Strength \/ Carry ability \/ Awe$/;"	m	class:SkillSet
strength	src/Engineering/Chemistry/Composite.h	/^	float strength; \/\/ strength, in kJ\/mol$/;"	m	class:AtomBond
strength	src/Gamelogic/AI/AI.h	/^        double strength; \/\/ how "Tough" is this AI? (0% for a total wimp, 100% for a Tychus)$/;"	m	class:AI
strength	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> strength; \/\/ Muscle development$/;"	m	class:AvatarAppearance
strength	src/Gamelogic/Avatar/Mood.h	/^        PType<int> strength; \/\/ strength of this mood from 1-10, 10 being completely overwhelming$/;"	m	class:Mood
strength	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> strength; \/\/ Attack Strength \/ Carry ability \/ Awe$/;"	m	class:SkillSet
strike	include/Eternia/constants.h	/^        const double strike = 2.0*US::bushels;$/;"	m	namespace:physical::unit
strike	src/constants.h	/^        const double strike = 2.0*US::bushels;$/;"	m	namespace:physical::unit
strikes	include/Eternia/constants.h	/^        const double strikes = strike;$/;"	m	namespace:physical::unit
strikes	src/constants.h	/^        const double strikes = strike;$/;"	m	namespace:physical::unit
string	include/Eternia/Programming/Visual/VProgramVariable.h	/^        CharString string; \/\/ string value of this variable$/;"	m	class:VProgramVariable
string	src/Programming/Visual/VProgramVariable.h	/^        CharString string; \/\/ string value of this variable$/;"	m	class:VProgramVariable
stringx	include/Eternia/Data/CharString.h	/^        char* stringx;$/;"	m	class:CharString
stringx	src/Data/CharString.h	/^        char* stringx;$/;"	m	class:CharString
stuborness	include/Eternia/Gamelogic/AI/AI.h	/^        double stuborness; \/\/ does not want to follow orders (100% for true enemy)$/;"	m	class:AI
stuborness	src/Gamelogic/AI/AI.h	/^        double stuborness; \/\/ does not want to follow orders (100% for true enemy)$/;"	m	class:AI
study	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void study(StudyTYPE st, double value);$/;"	p	class:Avatar
study	src/Gamelogic/Avatar/Avatar.cpp	/^void study(StudyTYPE st, double value) {$/;"	f
study	src/Gamelogic/Avatar/Avatar.h	/^        void study(StudyTYPE st, double value);$/;"	p	class:Avatar
stuff	include/Eternia/Gamelogic/AI/AIDecide.h	/^        void stuff(); \/\/ AI will do stuff if he\/she is not commanded or is bored.$/;"	p	class:AIDecide
stuff	src/Gamelogic/AI/AIDecide.h	/^        void stuff(); \/\/ AI will do stuff if he\/she is not commanded or is bored.$/;"	p	class:AIDecide
stype	include/Eternia/WebFramework/Network/SocketServer.h	/^    SocketServerType stype; \/\/ UDP, TCP or ICMP. Changes some of the control logic$/;"	m	class:SocketServer
stype	src/WebFramework/Network/SocketServer.h	/^    SocketServerType stype; \/\/ UDP, TCP or ICMP. Changes some of the control logic$/;"	m	class:SocketServer
subNodes	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PNode* subNodes; \/\/ Sub L Nodes (May come in pairs based on pop. density)$/;"	m	class:P2PLServer
subNodes	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        P2PNode* subNodes; \/\/ Sub L Nodes (May come in pairs based on pop. density)$/;"	m	class:P2PLServer
substr	include/Eternia/Data/CharString.h	/^        CharString substr(int index, int len); \/\/ grab a string of size LEN beginning at index.$/;"	p	class:CharString
substr	src/Data/CharString.cpp	/^CharString CharString::substr(int index, int lenx){$/;"	f	class:CharString
substr	src/Data/CharString.h	/^        CharString substr(int index, int len); \/\/ grab a string of size LEN beginning at index.$/;"	p	class:CharString
subtraction	include/Eternia/Math/Eval.h	/^                addition=7,subtraction=8,multiplication=9,division=10,Modulus=11,exponent=12$/;"	e	enum:MOperator
subtraction	src/Math/Eval.h	/^                addition=7,subtraction=8,multiplication=9,division=10,Modulus=11,exponent=12$/;"	e	enum:MOperator
sun_family	include/Eternia/WebFramework/Network/SockClient.h	/^    sa_family_t sun_family;               \/* AF_UNIX *\/$/;"	m	struct:sockaddr_un
sun_family	src/WebFramework/Network/SockClient.h	/^    sa_family_t sun_family;               \/* AF_UNIX *\/$/;"	m	struct:sockaddr_un
sun_path	include/Eternia/WebFramework/Network/SockClient.h	/^    char        sun_path[108];            \/* pathname *\/$/;"	m	struct:sockaddr_un
sun_path	src/WebFramework/Network/SockClient.h	/^    char        sun_path[108];            \/* pathname *\/$/;"	m	struct:sockaddr_un
swap	src/Data/Heap.cpp	/^void swap(int &x, int &y) {$/;"	f
swords	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> swords; \/\/ overall sword making skill.$/;"	m	class:CraftingStats
swords	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> swords; \/\/ overall sword making skill.$/;"	m	class:CraftingStats
swordsmanship	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> swordsmanship; \/\/ Melee Weaponry$/;"	m	class:SkillSet
swordsmanship	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> swordsmanship; \/\/ Melee Weaponry$/;"	m	class:SkillSet
swpb	include/Eternia/Emulation/MPU/msp430.h	/^        void swpb(unsigned int addr);$/;"	p	class:MSP430
swpb	src/Emulation/MPU/msp430.h	/^        void swpb(unsigned int addr);$/;"	p	class:MSP430
swpb	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::swpb(unsigned int addr) {}$/;"	f	class:MSP430
sxt	include/Eternia/Emulation/MPU/msp430.h	/^        void sxt(unsigned int addr);$/;"	p	class:MSP430
sxt	src/Emulation/MPU/msp430.h	/^        void sxt(unsigned int addr);$/;"	p	class:MSP430
sxt	src/Emulation/MPU/msp430_Instructions.cpp	/^void MSP430::sxt(unsigned int addr) {}$/;"	f	class:MSP430
symbol	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    char* symbol;$/;"	m	struct:__anon9
symbol	include/Eternia/Engineering/Chemistry/Atom.h	/^        char* symbol;$/;"	m	class:Atom
symbol	src/Algorithm/Compression/BasicCompressor.h	/^    char* symbol;$/;"	m	struct:__anon3
symbol	src/Engineering/Chemistry/Atom.h	/^        char* symbol;$/;"	m	class:Atom
symptoms	include/Eternia/Gamelogic/Avatar/Disease.h	/^        LinkedList<DISEASE_SYMPTOMS> symptoms; \/\/ symptoms of the disease$/;"	m	class:Disease
symptoms	src/Gamelogic/Avatar/Disease.h	/^        LinkedList<DISEASE_SYMPTOMS> symptoms; \/\/ symptoms of the disease$/;"	m	class:Disease
t	include/Eternia/constants.h	/^            const double t = ton;$/;"	m	namespace:physical::unit::displacement
t	include/Eternia/constants.h	/^            const double t = ton;$/;"	m	namespace:physical::unit::metric
t	include/Eternia/constants.h	/^        namespace t = apothecary;$/;"	x
t	src/constants.h	/^            const double t = ton;$/;"	m	namespace:physical::unit::displacement
t	src/constants.h	/^            const double t = ton;$/;"	m	namespace:physical::unit::metric
t	src/constants.h	/^        namespace t = apothecary;$/;"	x
tablespoon	include/Eternia/constants.h	/^        const double tablespoon = 3.0*teaspoons;$/;"	m	namespace:physical::unit
tablespoon	src/constants.h	/^        const double tablespoon = 3.0*teaspoons;$/;"	m	namespace:physical::unit
tablespoons	include/Eternia/constants.h	/^        const double tablespoons = tablespoon;$/;"	m	namespace:physical::unit
tablespoons	src/constants.h	/^        const double tablespoons = tablespoon;$/;"	m	namespace:physical::unit
tag	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        char* tag;$/;"	m	class:ChatChannel
tag	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        CharString tag, name;$/;"	m	class:ChatClient
tag	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        char* tag;$/;"	m	class:ChatChannel
tag	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        CharString tag, name;$/;"	m	class:ChatClient
tagcolor	include/Eternia/WebFramework/Backend/ChatManager/ChatChannel.h	/^        vertex tagcolor;$/;"	m	class:ChatChannel
tagcolor	src/WebFramework/Backend/ChatManager/ChatChannel.h	/^        vertex tagcolor;$/;"	m	class:ChatChannel
tail	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *head, *tail;$/;"	m	class:AbstractDBLinkedDataset
tail	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedNode *head, *tail;$/;"	m	class:AbstractDBLinkedDataset
tail_length	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> tail_length, horn_length; \/\/ Alien$/;"	m	class:AvatarAppearance
tail_length	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> tail_length, horn_length; \/\/ Alien$/;"	m	class:AvatarAppearance
taint	include/Eternia/Gamelogic/AI/AI.h	/^        double taint; \/\/ how often will this AI betray you? (100% for true enemy)$/;"	m	class:AI
taint	src/Gamelogic/AI/AI.h	/^        double taint; \/\/ how often will this AI betray you? (100% for true enemy)$/;"	m	class:AI
talker	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> talker; \/\/ persuasion$/;"	m	class:SkillSet
talker	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> talker; \/\/ persuasion$/;"	m	class:SkillSet
tan	include/Eternia/Math/Functions/Trig.h	/^    double tan(double); \/\/$/;"	p	namespace:Math
tan	src/Math/Functions/Trig.cpp	/^    double tan(double x) {$/;"	f	namespace:Math
tan	src/Math/Functions/Trig.h	/^    double tan(double); \/\/$/;"	p	namespace:Math
tanh	include/Eternia/Math/Functions/Trig.h	/^    double tanh(double);$/;"	p	namespace:Math
tanh	src/Math/Functions/Trig.cpp	/^    double tanh(double x) {$/;"	f	namespace:Math
tanh	src/Math/Functions/Trig.h	/^    double tanh(double);$/;"	p	namespace:Math
taxes	include/Eternia/Gamelogic/Social/Government/Government.h	/^        Tax taxes;$/;"	m	class:Government
taxes	src/Gamelogic/Social/Government/Government.h	/^        Tax taxes;$/;"	m	class:Government
tcpConnectionAcceptor	include/Eternia/WebFramework/Network/SocketServer.h	/^    void tcpConnectionAcceptor();$/;"	p	class:SocketServer
tcpConnectionAcceptor	src/WebFramework/Network/SocketServer.cpp	/^void SocketServer::tcpConnectionAcceptor() {$/;"	f	class:SocketServer
tcpConnectionAcceptor	src/WebFramework/Network/SocketServer.h	/^    void tcpConnectionAcceptor();$/;"	p	class:SocketServer
teaspoon	include/Eternia/constants.h	/^        const double teaspoon = 4.928922*cc;$/;"	m	namespace:physical::unit
teaspoon	src/constants.h	/^        const double teaspoon = 4.928922*cc;$/;"	m	namespace:physical::unit
teaspoons	include/Eternia/constants.h	/^        const double teaspoons = teaspoon;$/;"	m	namespace:physical::unit
teaspoons	src/constants.h	/^        const double teaspoons = teaspoon;$/;"	m	namespace:physical::unit
technique	include/Eternia/Gamelogic/Avatar/SkillSet.h	/^        PType<double> technique; \/\/ Skill with using "Magic" with nanorobots$/;"	m	class:SkillSet
technique	src/Gamelogic/Avatar/SkillSet.h	/^        PType<double> technique; \/\/ Skill with using "Magic" with nanorobots$/;"	m	class:SkillSet
tempBan	include/Eternia/WebFramework/Backend/ChatManager/ChatClient.h	/^        void tempBan(ChatChannel* channel, long ms); \/\/ temp ban from specific channel$/;"	p	class:ChatClient
tempBan	src/WebFramework/Backend/ChatManager/ChatClient.h	/^        void tempBan(ChatChannel* channel, long ms); \/\/ temp ban from specific channel$/;"	p	class:ChatClient
tempTolerance	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        double tempTolerance; \/\/ if 5% above this point, the resistor will stop working.$/;"	m	class:Resistor
tempTolerance	src/Engineering/Electrical/Components/Resistor.h	/^        double tempTolerance; \/\/ if 5% above this point, the resistor will stop working.$/;"	m	class:Resistor
temperatureMax	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        double temperatureMax; \/\/ defines max temperature of a component in Celsius.$/;"	m	class:ComponentRating
temperatureMax	src/Engineering/Electrical/Components/ComponentRating.h	/^        double temperatureMax; \/\/ defines max temperature of a component in Celsius.$/;"	m	class:ComponentRating
templateList	include/Eternia/WebFramework/Templates/Template.h	/^        LinkedList<TemplateDefinition> templateList;$/;"	m	class:Template
templateList	src/WebFramework/Templates/Template.h	/^        LinkedList<TemplateDefinition> templateList;$/;"	m	class:Template
tempreature	include/Eternia/Gamelogic/Race/Race.h	/^	float tempreature; \/\/ living temperature, in kelvin (Humans like 294.817 kelvin, 71 fahrenheit)$/;"	m	class:Race
tempreature	src/Gamelogic/Race/Race.h	/^	float tempreature; \/\/ living temperature, in kelvin (Humans like 294.817 kelvin, 71 fahrenheit)$/;"	m	class:Race
tera	include/Eternia/constants.h	/^        const double tera = 1e9;$/;"	m	namespace:physical::unit
tera	src/constants.h	/^        const double tera = 1e9;$/;"	m	namespace:physical::unit
teraHertz	include/Eternia/constants.h	/^        const double teraHertz = tera*Hertz;$/;"	m	namespace:physical::unit
teraHertz	src/constants.h	/^        const double teraHertz = tera*Hertz;$/;"	m	namespace:physical::unit
terrain	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    Terrain terrain; \/\/ defines terrain and oceans, ect.$/;"	m	class:Planet
terrain	src/Gamelogic/Environment/Planet/Planet.h	/^    Terrain terrain; \/\/ defines terrain and oceans, ect.$/;"	m	class:Planet
testASM	include/Eternia/asm/asm1.h	/^void testASM();$/;"	p
testASM	src/asm/asm1.cpp	/^void testASM() {$/;"	f
testASM	src/asm/asm1.h	/^void testASM();$/;"	p
testAbstractDB	src/Data/test/testAbstractDB.cpp	/^void testAbstractDB() {$/;"	f
testAbstractDB	src/Data/test/testAbstractDB.h	/^void testAbstractDB();$/;"	p
testAvatarFight	src/Gamelogic/test/testGameLogic.cpp	/^void testAvatarFight(){$/;"	f
testAvatarSerializer	src/Gamelogic/test/testGameLogic.cpp	/^void testAvatarSerializer() {$/;"	f
testBasics	src/Math/test/testMath.cpp	/^void testBasics(char* a) {$/;"	f
testBitMap	src/Data/test/testDataStructures.cpp	/^void testBitMap() {$/;"	f
testClientHandler	src/WebFramework/Network/test/NetworkTest.hpp	/^void testClientHandler(CharString* dataIn, CharString* dataOut, void* d){$/;"	f
testDB_h	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^#define testDB_h$/;"	d
testDB_h	src/Data/AbstractDatabase/AbstractDB.h	/^#define testDB_h$/;"	d
testDataStructures	src/Data/test/testDataStructures.cpp	/^void testDataStructures() {$/;"	f
testDataStructures	src/Data/test/testDataStructures.h	/^void testDataStructures();$/;"	p
testEquation	src/Math/test/testMath.cpp	/^void testEquation(char* a) {$/;"	f
testEventHandler	src/Data/Events/test/testEventHandler.hpp	/^void testEventHandler() {$/;"	f
testExHash	src/Algorithm/Cryptography/test/testExHash.hpp	/^void testExHash() {$/;"	f
testFileCache	src/Data/test/testDataStructures.cpp	/^void testFileCache() {$/;"	f
testFriction	src/Engineering/Physics/test/testFriction.cpp	/^void testFriction() {$/;"	f
testFriction	src/Engineering/Physics/test/testFriction.h	/^void testFriction();$/;"	p
testGameLogic	src/Gamelogic/test/testGameLogic.cpp	/^void testGameLogic() {$/;"	f
testGameLogic	src/Gamelogic/test/testGameLogic.h	/^void testGameLogic();$/;"	p
testGravity	src/Engineering/Physics/test/testGravity.cpp	/^void testGravity() {$/;"	f
testGravity	src/Engineering/Physics/test/testGravity.h	/^void testGravity();$/;"	p
testHashMap	src/Data/test/testDataStructures.cpp	/^void testHashMap() {$/;"	f
testHashedPerm	src/API/APIUser.cpp	/^bool testHashedPerm(bool* val){$/;"	f
testInterrupts	include/Eternia/Emulation/MPU/msp430.h	/^        void testInterrupts();$/;"	p	class:MSP430
testInterrupts	src/Emulation/MPU/msp430.h	/^        void testInterrupts();$/;"	p	class:MSP430
testInterrupts	src/Emulation/MPU/msp430_Interrupts.cpp	/^void MSP430::testInterrupts() {$/;"	f	class:MSP430
testMath	src/Math/test/testMath.cpp	/^void testMath() {$/;"	f
testMath	src/Math/test/testMath.h	/^void testMath();$/;"	p
testNetwork	src/WebFramework/Network/test/NetworkTest.hpp	/^void testNetwork(){$/;"	f
testObjectBOT	src/Data/Events/test/testEventHandler.hpp	/^void testObjectBOT() {$/;"	f
testObjectDouble	src/Data/Events/test/testEventHandler.hpp	/^void testObjectDouble(void* dat, void* dat2) {$/;"	f
testObjectMID	src/Data/Events/test/testEventHandler.hpp	/^void testObjectMID() {$/;"	f
testObjectSingle	src/Data/Events/test/testEventHandler.hpp	/^void testObjectSingle(void* dat) {$/;"	f
testObjectTOP	src/Data/Events/test/testEventHandler.hpp	/^void testObjectTOP() {$/;"	f
testPType	src/Data/test/testPType.cpp	/^void testPType(){$/;"	f
testPType	src/Data/test/testPType.h	/^void testPType();$/;"	p
testParsers	src/Parsing/test/testParsers.cpp	/^void testParsers() {$/;"	f
testParsers	src/Parsing/test/testParsers.h	/^void testParsers(); \/\/ test parsing system$/;"	p
testPriorityQueue	src/Data/test/testDataStructures.cpp	/^void testPriorityQueue() {$/;"	f
testQueue	src/Data/test/testDataStructures.cpp	/^void testQueue() {$/;"	f
testSecureParser	src/Parsing/test/testParsers.cpp	/^void testSecureParser() {$/;"	f
testSerializers	src/Serialization/test/testSerializers.hpp	/^void testSerializers() {$/;"	f
testShip	src/Gamelogic/test/testGameLogic.cpp	/^void testShip() {$/;"	f
testSimpleParser	src/Parsing/test/testParsers.cpp	/^void testSimpleParser() {$/;"	f
testStructures	src/Math/test/testMath.cpp	/^void testStructures(char* a) {$/;"	f
testStructures	src/Math/test/testMath.h	/^void testStructures(char* a);$/;"	p
testViolate	include/Eternia/Data/Protect/PType.hpp	/^    void testViolate(){$/;"	f	class:PType
testViolate	src/Data/Protect/PType.hpp	/^    void testViolate(){$/;"	f	class:PType
testfunc	include/Eternia/Algorithm/Cryptography/CryptoDefines.h	/^void testfunc() {$/;"	f
testfunc	src/Algorithm/Cryptography/CryptoDefines.h	/^void testfunc() {$/;"	f
therm	include/Eternia/constants.h	/^        const double therm = 10000.0*Btu;$/;"	m	namespace:physical::unit
therm	src/constants.h	/^        const double therm = 10000.0*Btu;$/;"	m	namespace:physical::unit
thermal_conductivity	include/Eternia/Engineering/Chemistry/Atom.h	/^        double thermal_conductivity;$/;"	m	class:Atom
thermal_conductivity	include/Eternia/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	float thermal_conductivity; \/\/ W\/(m.K)$/;"	m	class:PhysicalMaterial
thermal_conductivity	src/Engineering/Chemistry/Atom.h	/^        double thermal_conductivity;$/;"	m	class:Atom
thermal_conductivity	src/Gamelogic/CoreSystems/PhysicalMaterial.h	/^	float thermal_conductivity; \/\/ W\/(m.K)$/;"	m	class:PhysicalMaterial
thermie	include/Eternia/constants.h	/^        const double thermie = 1000000.0*calories;$/;"	m	namespace:physical::unit
thermie	src/constants.h	/^        const double thermie = 1000000.0*calories;$/;"	m	namespace:physical::unit
thermies	include/Eternia/constants.h	/^        const double thermies = thermie;$/;"	m	namespace:physical::unit
thermies	src/constants.h	/^        const double thermies = thermie;$/;"	m	namespace:physical::unit
therms	include/Eternia/constants.h	/^        const double therms = therm;$/;"	m	namespace:physical::unit
therms	src/constants.h	/^        const double therms = therm;$/;"	m	namespace:physical::unit
thirst	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP thirst; \/\/ Thirst is also realistic. May be modified by NanoRobots.$/;"	m	class:AvatarHealth
thirst	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP thirst; \/\/ Thirst is also realistic. May be modified by NanoRobots.$/;"	m	class:AvatarHealth
thrust	include/Eternia/Math/struct/vertex.h	/^    void thrust(VertexObject thrust); \/\/ applies force$/;"	p	class:VertexObject
thrust	src/Math/struct/vertex.cpp	/^void VertexObject::thrust(VertexObject thrust) {$/;"	f	class:VertexObject
thrust	src/Math/struct/vertex.h	/^    void thrust(VertexObject thrust); \/\/ applies force$/;"	p	class:VertexObject
tick	include/Eternia/Engineering/Electrical/Circuit.h	/^        void tick(SecondTick* tickTime); \/\/ operate time for entire circuit, emulate current, voltage, temperature$/;"	p	class:Circuit
tick	include/Eternia/Engineering/Electrical/Components/Capacitor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Capacitor
tick	include/Eternia/Engineering/Electrical/Components/Component.h	/^        void tick(SecondTick* tickTime); \/\/ operate the component$/;"	p	class:Component
tick	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        void tick(SecondTick* tickTime); \/\/ calculate temperature, or death due to overpower$/;"	p	class:ComponentRating
tick	include/Eternia/Engineering/Electrical/Components/HBridge.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:HBridge
tick	include/Eternia/Engineering/Electrical/Components/Inductor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Inductor
tick	include/Eternia/Engineering/Electrical/Components/Inverter.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Inverter
tick	include/Eternia/Engineering/Electrical/Components/LBridge.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:LBridge
tick	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Mosfet
tick	include/Eternia/Engineering/Electrical/Components/Rectifier.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:__anon12
tick	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Resistor
tick	include/Eternia/Engineering/Electrical/Components/Transistor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Transistor
tick	include/Eternia/Engineering/Electrical/IC/General/IC555.h	/^        virtual void tick(SecondTick* tickTime); \/\/ operate the component$/;"	p	class:IC555
tick	include/Eternia/Engineering/Electrical/IC/IC.h	/^        void tick(SecondTick* tickTime); \/\/ operate the component$/;"	p	class:IC
tick	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        void tick();$/;"	p	class:CLKModule
tick	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        void tick();$/;"	p	class:CLKProvider
tick	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    void tick(); \/\/ manual tick$/;"	p	class:PWM
tick	include/Eternia/Gamelogic/AI/AIDecide.h	/^        void tick(); \/\/ game time tick$/;"	p	class:AIDecide
tick	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        void tick(double t); \/\/ game tick, evaluate avatar health, equips, skills, ect.$/;"	p	class:Avatar
tick	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        void tick(double tps); \/\/ tick Regen, power, diseases and moods.$/;"	p	class:AvatarHealth
tick	include/Eternia/Gamelogic/Avatar/Disease.h	/^        void tick(double tps);$/;"	p	class:Disease
tick	include/Eternia/Gamelogic/Avatar/Mood.h	/^        void tick(double tps);$/;"	p	class:Mood
tick	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    void tick(double tps); \/\/ perform interest ticks$/;"	p	class:Account
tick	include/Eternia/Gamelogic/Economics/Banking/Banking.h	/^        void tick(); \/\/ tick for each game tick$/;"	p	class:Banking
tick	include/Eternia/Math/struct/vertex.h	/^    void tick(double second); \/\/ tick for acceleration and velocity$/;"	p	class:VertexObject
tick	include/Eternia/Programming/Program.h	/^        ProgramError* tick(); \/\/ Run program from Head (Or textual)$/;"	p	class:Program
tick	src/Engineering/Electrical/Circuit.h	/^        void tick(SecondTick* tickTime); \/\/ operate time for entire circuit, emulate current, voltage, temperature$/;"	p	class:Circuit
tick	src/Engineering/Electrical/Components/Capacitor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Capacitor
tick	src/Engineering/Electrical/Components/Component.h	/^        void tick(SecondTick* tickTime); \/\/ operate the component$/;"	p	class:Component
tick	src/Engineering/Electrical/Components/ComponentRating.cpp	/^void ComponentRating::tick(SecondTick* tickTime) {$/;"	f	class:ComponentRating
tick	src/Engineering/Electrical/Components/ComponentRating.h	/^        void tick(SecondTick* tickTime); \/\/ calculate temperature, or death due to overpower$/;"	p	class:ComponentRating
tick	src/Engineering/Electrical/Components/HBridge.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:HBridge
tick	src/Engineering/Electrical/Components/Inductor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Inductor
tick	src/Engineering/Electrical/Components/Inverter.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Inverter
tick	src/Engineering/Electrical/Components/LBridge.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:LBridge
tick	src/Engineering/Electrical/Components/Mosfet.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Mosfet
tick	src/Engineering/Electrical/Components/Rectifier.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:__anon6
tick	src/Engineering/Electrical/Components/Resistor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Resistor
tick	src/Engineering/Electrical/Components/Transistor.h	/^        void tick(SecondTick* tickTime); \/\/ operate time$/;"	p	class:Transistor
tick	src/Engineering/Electrical/IC/General/IC555.cpp	/^void IC555::tick(SecondTick* tickTime) {$/;"	f	class:IC555
tick	src/Engineering/Electrical/IC/General/IC555.h	/^        virtual void tick(SecondTick* tickTime); \/\/ operate the component$/;"	p	class:IC555
tick	src/Engineering/Electrical/IC/IC.h	/^        void tick(SecondTick* tickTime); \/\/ operate the component$/;"	p	class:IC
tick	src/Engineering/Electrical/Signal/CLKProvider.cpp	/^void CLKModule::tick() {$/;"	f	class:CLKModule
tick	src/Engineering/Electrical/Signal/CLKProvider.cpp	/^void CLKProvider::tick() {$/;"	f	class:CLKProvider
tick	src/Engineering/Electrical/Signal/CLKProvider.h	/^        void tick();$/;"	p	class:CLKModule
tick	src/Engineering/Electrical/Signal/CLKProvider.h	/^        void tick();$/;"	p	class:CLKProvider
tick	src/Engineering/Electrical/Signal/PWM.cpp	/^void PWM::tick() {$/;"	f	class:PWM
tick	src/Engineering/Electrical/Signal/PWM.h	/^    void tick(); \/\/ manual tick$/;"	p	class:PWM
tick	src/Gamelogic/AI/AIDecide.h	/^        void tick(); \/\/ game time tick$/;"	p	class:AIDecide
tick	src/Gamelogic/Avatar/Avatar.cpp	/^void Avatar::tick(double tps) {$/;"	f	class:Avatar
tick	src/Gamelogic/Avatar/Avatar.h	/^        void tick(double t); \/\/ game tick, evaluate avatar health, equips, skills, ect.$/;"	p	class:Avatar
tick	src/Gamelogic/Avatar/AvatarHealth.cpp	/^void AvatarHealth::tick(double tps) {$/;"	f	class:AvatarHealth
tick	src/Gamelogic/Avatar/AvatarHealth.h	/^        void tick(double tps); \/\/ tick Regen, power, diseases and moods.$/;"	p	class:AvatarHealth
tick	src/Gamelogic/Avatar/Disease.cpp	/^void Disease::tick(double tps) {$/;"	f	class:Disease
tick	src/Gamelogic/Avatar/Disease.h	/^        void tick(double tps);$/;"	p	class:Disease
tick	src/Gamelogic/Avatar/Mood.cpp	/^void Mood::tick(double tps) {$/;"	f	class:Mood
tick	src/Gamelogic/Avatar/Mood.h	/^        void tick(double tps);$/;"	p	class:Mood
tick	src/Gamelogic/Economics/Banking/Account.h	/^    void tick(double tps); \/\/ perform interest ticks$/;"	p	class:Account
tick	src/Gamelogic/Economics/Banking/Banking.h	/^        void tick(); \/\/ tick for each game tick$/;"	p	class:Banking
tick	src/Math/struct/vertex.cpp	/^void VertexObject::tick(double second){$/;"	f	class:VertexObject
tick	src/Math/struct/vertex.h	/^    void tick(double second); \/\/ tick for acceleration and velocity$/;"	p	class:VertexObject
tick	src/Programming/Program.cpp	/^ProgramError* Program::tick() {$/;"	f	class:Program
tick	src/Programming/Program.h	/^        ProgramError* tick(); \/\/ Run program from Head (Or textual)$/;"	p	class:Program
tick2	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	void tick2(double time); \/\/ tick amount of time$/;"	p	class:HardPoint2Gimbal
tick2	src/Gamelogic/CoreSystems/Hardpoint.h	/^	void tick2(double time); \/\/ tick amount of time$/;"	p	class:HardPoint2Gimbal
tickGNode	include/Eternia/Programming/Program.h	/^        VProgramError* tickGNode(VProgramNode*,VProgramError*);$/;"	p	class:Program
tickGNode	src/Programming/Program.h	/^        VProgramError* tickGNode(VProgramNode*,VProgramError*);$/;"	p	class:Program
tickGNode	src/Programming/Visual/VisualProgram.cpp	/^VProgramError* Program::tickGNode(VProgramNode* node, VProgramError* error) {$/;"	f	class:Program
tickNode	include/Eternia/Programming/Visual/VProgramNode.h	/^        void tickNode(); \/\/ tick this node and perform the given functions.$/;"	p	class:VProgramNode
tickNode	src/Programming/Visual/VProgramNode.h	/^        void tickNode(); \/\/ tick this node and perform the given functions.$/;"	p	class:VProgramNode
tickRegen	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        void tickRegen(PType<double> regen);$/;"	p	class:BodyPartHP
tickRegen	src/Gamelogic/Avatar/AvatarHealth.cpp	/^void BodyPartHP::tickRegen(PType<double> regen) {$/;"	f	class:BodyPartHP
tickRegen	src/Gamelogic/Avatar/AvatarHealth.h	/^        void tickRegen(PType<double> regen);$/;"	p	class:BodyPartHP
tickRes	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
tickRes	src/Engineering/Electrical/Signal/PWM.h	/^    int frequency, count, tickRes, autoTickfind, lastClock;$/;"	m	class:PWM
tickinterval	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    float duty, tickinterval;$/;"	m	class:PWM
tickinterval	src/Engineering/Electrical/Signal/PWM.h	/^    float duty, tickinterval;$/;"	m	class:PWM
tiedItem	include/Eternia/Engineering/Physics/Kinematics/FreeBody.h	/^        FreeBody* tiedItem;$/;"	m	class:Force
tiedItem	src/Engineering/Physics/Kinematics/FreeBody.h	/^        FreeBody* tiedItem;$/;"	m	class:Force
timberfeet	include/Eternia/constants.h	/^        const double timberfeet = timberfoot;$/;"	m	namespace:physical::unit
timberfeet	src/constants.h	/^        const double timberfeet = timberfoot;$/;"	m	namespace:physical::unit
timberfoot	include/Eternia/constants.h	/^        const double timberfoot = foot*foot*foot;$/;"	m	namespace:physical::unit
timberfoot	src/constants.h	/^        const double timberfoot = foot*foot*foot;$/;"	m	namespace:physical::unit
time	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    float time; \/\/ time displacement in seconds.$/;"	m	class:TimeSample
time	src/Engineering/Electrical/Signal/TimeSignal.h	/^    float time; \/\/ time displacement in seconds.$/;"	m	class:TimeSample
timediff	include/Eternia/Data/Events/EventHandle.h	/^        long timex, timediff;$/;"	m	class:EventHandle
timediff	src/Data/Events/EventHandle.h	/^        long timex, timediff;$/;"	m	class:EventHandle
timedispersal	include/Eternia/Engineering/Electrical/Signal/CLKProvider.h	/^        float timedispersal;$/;"	m	class:CLKModule
timedispersal	src/Engineering/Electrical/Signal/CLKProvider.h	/^        float timedispersal;$/;"	m	class:CLKModule
timex	include/Eternia/Data/Events/EventHandle.h	/^        long timex, timediff;$/;"	m	class:EventHandle
timex	src/Data/Events/EventHandle.h	/^        long timex, timediff;$/;"	m	class:EventHandle
tn	include/Eternia/constants.h	/^            const double tn = ton;$/;"	m	namespace:physical::unit::British
tn	include/Eternia/constants.h	/^            const double tn = ton;$/;"	m	namespace:physical::unit::US
tn	src/constants.h	/^            const double tn = ton;$/;"	m	namespace:physical::unit::British
tn	src/constants.h	/^            const double tn = ton;$/;"	m	namespace:physical::unit::US
toID	include/Eternia/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        long toID;$/;"	m	class:VoipPacket
toID	src/WebFramework/Network/PacketServer/Packets/Devices/VoipPacket.hpp	/^        long toID;$/;"	m	class:VoipPacket
toOutput	include/Eternia/Math/struct/Matrix.h	/^    CharString* toOutput(); \/\/ converts to a string for output into console. (or w\/e)$/;"	p	class:Matrix
toOutput	src/Math/struct/Matrix.cpp	/^CharString* Matrix::toOutput() {$/;"	f	class:Matrix
toOutput	src/Math/struct/Matrix.h	/^    CharString* toOutput(); \/\/ converts to a string for output into console. (or w\/e)$/;"	p	class:Matrix
toPeerID	include/Eternia/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        long toPeerID;$/;"	m	class:P2PPassagePacket
toPeerID	src/WebFramework/Network/PacketServer/Packets/P2P/P2PPassagePacket.hpp	/^        long toPeerID;$/;"	m	class:P2PPassagePacket
togo	include/Eternia/Gamelogic/AI/AIMovement.h	/^        LinkedList<vertex>* togo; \/\/ verticies to go through$/;"	m	class:AIMovement
togo	src/Gamelogic/AI/AIMovement.h	/^        LinkedList<vertex>* togo; \/\/ verticies to go through$/;"	m	class:AIMovement
tolerance	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        double tolerance; \/\/ Percentage tolerance, 0 for none (Gold band)$/;"	m	class:Resistor
tolerance	src/Engineering/Electrical/Components/Resistor.h	/^        double tolerance; \/\/ Percentage tolerance, 0 for none (Gold band)$/;"	m	class:Resistor
ton	include/Eternia/constants.h	/^            const double ton = 1000.0*kilograms;$/;"	m	namespace:physical::unit::metric
ton	include/Eternia/constants.h	/^            const double ton = 20.0*hundredweight;$/;"	m	namespace:physical::unit::British
ton	include/Eternia/constants.h	/^            const double ton = 20.0*hundredweight;$/;"	m	namespace:physical::unit::US
ton	include/Eternia/constants.h	/^            const double ton = stere;$/;"	m	namespace:physical::unit::displacement
ton	src/constants.h	/^            const double ton = 1000.0*kilograms;$/;"	m	namespace:physical::unit::metric
ton	src/constants.h	/^            const double ton = 20.0*hundredweight;$/;"	m	namespace:physical::unit::British
ton	src/constants.h	/^            const double ton = 20.0*hundredweight;$/;"	m	namespace:physical::unit::US
ton	src/constants.h	/^            const double ton = stere;$/;"	m	namespace:physical::unit::displacement
tons	include/Eternia/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::British
tons	include/Eternia/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::US
tons	include/Eternia/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::displacement
tons	include/Eternia/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::metric
tons	src/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::British
tons	src/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::US
tons	src/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::displacement
tons	src/constants.h	/^            const double tons = ton;$/;"	m	namespace:physical::unit::metric
top	include/Eternia/Data/LinkedList.hpp	/^    LinkedNode<T>* top() {$/;"	f	class:LinkedList
top	include/Eternia/Data/PriorityQueue.h	/^        PriorityItem* top(); \/\/ returns the head item.$/;"	p	class:PriorityQueue
top	src/Data/LinkedList.hpp	/^    LinkedNode<T>* top() {$/;"	f	class:LinkedList
top	src/Data/PriorityQueue.cpp	/^PriorityItem* PriorityQueue::top() {$/;"	f	class:PriorityQueue
top	src/Data/PriorityQueue.h	/^        PriorityItem* top(); \/\/ returns the head item.$/;"	p	class:PriorityQueue
toreplace	include/Eternia/WebFramework/Templates/Template.h	/^        CharString toreplace;$/;"	m	class:TemplateDefinition
toreplace	src/WebFramework/Templates/Template.h	/^        CharString toreplace;$/;"	m	class:TemplateDefinition
torqueX	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	float torqueX; \/\/ Torque also includes the Y-axis turning mechanism's mass.$/;"	m	class:HardPoint2Gimbal
torqueX	src/Gamelogic/CoreSystems/Hardpoint.h	/^	float torqueX; \/\/ Torque also includes the Y-axis turning mechanism's mass.$/;"	m	class:HardPoint2Gimbal
torqueY	include/Eternia/Gamelogic/CoreSystems/Hardpoint.h	/^	float torqueY; \/\/ Torque only includes the weapon's mass.$/;"	m	class:HardPoint2Gimbal
torqueY	src/Gamelogic/CoreSystems/Hardpoint.h	/^	float torqueY; \/\/ Torque only includes the weapon's mass.$/;"	m	class:HardPoint2Gimbal
torso	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP head, torso, abdomen;$/;"	m	class:AvatarHealth
torso	include/Eternia/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip torso;$/;"	m	class:PortableArmor
torso	src/Gamelogic/Avatar/AvatarHealth.h	/^        BodyPartHP head, torso, abdomen;$/;"	m	class:AvatarHealth
torso	src/Gamelogic/Inventory/PortableArmor.h	/^        DynamicEquip torso;$/;"	m	class:PortableArmor
torso_width	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
torso_width	src/Gamelogic/Avatar/AvatarAppearance.h	/^    PType<double> hip_width, torso_width, leg_diameter, arm_diameter; \/\/ base$/;"	m	class:AvatarAppearance
totalMass	include/Eternia/Engineering/Chemistry/Composite.h	/^        double totalMass; \/\/ total composite mass$/;"	m	class:Composite
totalMass	src/Engineering/Chemistry/Composite.h	/^        double totalMass; \/\/ total composite mass$/;"	m	class:Composite
totalvalue	include/Eternia/Gamelogic/Economics/Banking/Banking.h	/^        double totalvalue; \/\/ total bank value in crypto-currency$/;"	m	class:Banking
totalvalue	src/Gamelogic/Economics/Banking/Banking.h	/^        double totalvalue; \/\/ total bank value in crypto-currency$/;"	m	class:Banking
township	include/Eternia/constants.h	/^        const double township = 36.0*sections;$/;"	m	namespace:physical::unit
township	src/constants.h	/^        const double township = 36.0*sections;$/;"	m	namespace:physical::unit
townships	include/Eternia/constants.h	/^        const double townships = township;$/;"	m	namespace:physical::unit
townships	src/constants.h	/^        const double townships = township;$/;"	m	namespace:physical::unit
tpe	include/Eternia/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        PTypes tpe;$/;"	m	class:CryptoDefiner
tpe	src/Algorithm/Cryptography/CryptoDefiner_Class.hpp	/^        PTypes tpe;$/;"	m	class:CryptoDefiner
tracks	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> tracks; \/\/ better tracks for vehicles$/;"	m	class:CraftingStats
tracks	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> tracks; \/\/ better tracks for vehicles$/;"	m	class:CraftingStats
transferAccount	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    bool transferAccount(); \/\/ perform a full account transfer$/;"	p	class:Account
transferAccount	src/Gamelogic/Economics/Banking/Account.h	/^    bool transferAccount(); \/\/ perform a full account transfer$/;"	p	class:Account
transform	include/Eternia/Algorithm/Cryptography/md5.h	/^        void transform(const uint1 block[blocksize]);$/;"	p	class:MD5
transform	src/Algorithm/Cryptography/md5.cpp	/^void MD5::transform(const uint1 block[blocksize]) {$/;"	f	class:MD5
transform	src/Algorithm/Cryptography/md5.h	/^        void transform(const uint1 block[blocksize]);$/;"	p	class:MD5
translateString	include/Eternia/Localization/LanguageController.h	/^        CharString* translateString(CharString* sentence); \/\/ Determine$/;"	p	class:LanguageController
translateString	src/Localization/LanguageController.h	/^        CharString* translateString(CharString* sentence); \/\/ Determine$/;"	p	class:LanguageController
translateWord	include/Eternia/Localization/LanguageController.h	/^        CharString* translateWord(CharString* word);$/;"	p	class:LanguageController
translateWord	src/Localization/LanguageController.h	/^        CharString* translateWord(CharString* word);$/;"	p	class:LanguageController
transpose	include/Eternia/Math/struct/Matrix.h	/^    void transpose(); \/\/ transpose the matrix A T$/;"	p	class:Matrix
transpose	src/Math/struct/Matrix.cpp	/^void Matrix::transpose() {$/;"	f	class:Matrix
transpose	src/Math/struct/Matrix.h	/^    void transpose(); \/\/ transpose the matrix A T$/;"	p	class:Matrix
traverse_find	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        bool traverse_find(void* data); \/\/ find if data exists$/;"	p	class:AbstractDBLinkedDataset
traverse_find	src/Data/AbstractDatabase/AbstractDB.h	/^        bool traverse_find(void* data); \/\/ find if data exists$/;"	p	class:AbstractDBLinkedDataset
triangleInequality	include/Eternia/Math/struct/vertex.h	/^    bool triangleInequality(vertex V); \/\/ length(u+v) <= length(u) + length(v)$/;"	p	class:vertex
triangleInequality	src/Math/struct/vertex.cpp	/^bool vertex::triangleInequality(vertex v) {$/;"	f	class:vertex
triangleInequality	src/Math/struct/vertex.h	/^    bool triangleInequality(vertex V); \/\/ length(u+v) <= length(u) + length(v)$/;"	p	class:vertex
troy	include/Eternia/constants.h	/^        namespace troy = apothecary;$/;"	x
troy	src/constants.h	/^        namespace troy = apothecary;$/;"	x
tun	include/Eternia/constants.h	/^        const double tun = 8.0*US::barrels;$/;"	m	namespace:physical::unit
tun	src/constants.h	/^        const double tun = 8.0*US::barrels;$/;"	m	namespace:physical::unit
tuns	include/Eternia/constants.h	/^        const double tuns = tun;$/;"	m	namespace:physical::unit
tuns	src/constants.h	/^        const double tuns = tun;$/;"	m	namespace:physical::unit
turret_class	include/Eternia/Gamelogic/CoreSystems/Turret.h	/^	int turret_class; \/\/ class of the weapon, more or less just used for identifying it's ship fitting.$/;"	m	class:Turret
turret_class	src/Gamelogic/CoreSystems/Turret.h	/^	int turret_class; \/\/ class of the weapon, more or less just used for identifying it's ship fitting.$/;"	m	class:Turret
turrets	include/Eternia/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> turrets; \/\/ skill in making better turrets.$/;"	m	class:CraftingStats
turrets	src/Gamelogic/Crafting/CraftingStats.h	/^        PType<double> turrets; \/\/ skill in making better turrets.$/;"	m	class:CraftingStats
tvalue	include/Eternia/Data/Protect/PType.hpp	/^    T tvalue; \/\/ vector to determine memory hacking$/;"	m	class:PType
tvalue	src/Data/Protect/PType.hpp	/^    T tvalue; \/\/ vector to determine memory hacking$/;"	m	class:PType
type	include/Eternia/API/APIMod.h	/^    APIModType type;$/;"	m	class:APIMod
type	include/Eternia/API/APIPermission.h	/^    APIPermType type;$/;"	m	class:APIPermission
type	include/Eternia/Data/FileSystem.h	/^        DType type;$/;"	m	class:FileStructureNode
type	include/Eternia/Engineering/Chemistry/Atom.h	/^        ELEMENT_TYPE type;$/;"	m	class:Atom
type	include/Eternia/Engineering/Electrical/Components/Diode.h	/^        DIODETYPE type;$/;"	m	class:Diode
type	include/Eternia/Gamelogic/Avatar/Avatar.h	/^        AvatarTYPE type;$/;"	m	class:Avatar
type	include/Eternia/Gamelogic/Avatar/Disease.h	/^        PType<DISEASE_TYPE> type; \/\/ type id for disease (parasite, virus, ect)$/;"	m	class:Disease
type	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        MSType type; \/\/ type of ship part$/;"	m	class:ModularShipPart
type	include/Eternia/Math/statistics/statistics.h	/^        SAMPLERTYPE type;$/;"	m	class:Statistics
type	include/Eternia/Programming/CPLScript/CPLVariable.h	/^        CPLVarType type;$/;"	m	class:CPLVariable
type	include/Eternia/Programming/Visual/VProgramError.h	/^        PEType type;$/;"	m	class:VProgramError
type	include/Eternia/Programming/Visual/VProgramNode.h	/^        PNodeType type; \/\/ type of node, conditional$/;"	m	class:VProgramNode
type	include/Eternia/Programming/Visual/VProgramVariable.h	/^        PV_Type type;$/;"	m	class:VProgramVariable
type	include/Eternia/Serialization/SpecificSerializer.h	/^        SSEType type;$/;"	m	class:PointerType
type	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        P2PTYPE type;$/;"	m	class:P2PLClient
type	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        P2PNodeType type;$/;"	m	class:P2PNode
type	src/API/APIMod.h	/^    APIModType type;$/;"	m	class:APIMod
type	src/API/APIPermission.h	/^    APIPermType type;$/;"	m	class:APIPermission
type	src/Data/FileSystem.h	/^        DType type;$/;"	m	class:FileStructureNode
type	src/Engineering/Chemistry/Atom.h	/^        ELEMENT_TYPE type;$/;"	m	class:Atom
type	src/Engineering/Electrical/Components/Diode.h	/^        DIODETYPE type;$/;"	m	class:Diode
type	src/Gamelogic/Avatar/Avatar.h	/^        AvatarTYPE type;$/;"	m	class:Avatar
type	src/Gamelogic/Avatar/Disease.h	/^        PType<DISEASE_TYPE> type; \/\/ type id for disease (parasite, virus, ect)$/;"	m	class:Disease
type	src/Gamelogic/Ship/ModularShipPart.h	/^        MSType type; \/\/ type of ship part$/;"	m	class:ModularShipPart
type	src/Math/statistics/statistics.h	/^        SAMPLERTYPE type;$/;"	m	class:Statistics
type	src/Programming/CPLScript/CPLVariable.h	/^        CPLVarType type;$/;"	m	class:CPLVariable
type	src/Programming/Visual/VProgramError.h	/^        PEType type;$/;"	m	class:VProgramError
type	src/Programming/Visual/VProgramNode.h	/^        PNodeType type; \/\/ type of node, conditional$/;"	m	class:VProgramNode
type	src/Programming/Visual/VProgramVariable.h	/^        PV_Type type;$/;"	m	class:VProgramVariable
type	src/Serialization/SpecificSerializer.h	/^        SSEType type;$/;"	m	class:PointerType
type	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        P2PTYPE type;$/;"	m	class:P2PLClient
type	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        P2PNodeType type;$/;"	m	class:P2PNode
typeSize	include/Eternia/Data/LinkedList.hpp	/^    int typeSize() {$/;"	f	class:LinkedList
typeSize	src/Data/LinkedList.hpp	/^    int typeSize() {$/;"	f	class:LinkedList
typecode	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        INSTRUCTIONTYPE typecode; \/\/ what to do? (Determines variables below)$/;"	m	class:GPUInstruction
typecode	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        INSTRUCTIONTYPE typecode; \/\/ what to do? (Determines variables below)$/;"	m	class:GPUInstruction
uint1	include/Eternia/Algorithm/Cryptography/md5.h	/^        typedef unsigned char uint1; \/\/  8bit$/;"	t	class:MD5
uint1	src/Algorithm/Cryptography/md5.h	/^        typedef unsigned char uint1; \/\/  8bit$/;"	t	class:MD5
uint4	include/Eternia/Algorithm/Cryptography/md5.h	/^        typedef unsigned int uint4;  \/\/ 32bit$/;"	t	class:MD5
uint4	src/Algorithm/Cryptography/md5.h	/^        typedef unsigned int uint4;  \/\/ 32bit$/;"	t	class:MD5
ultraviolet	include/Eternia/constants.h	/^    const double ultraviolet = 750*petaHertz;\/\/15$/;"	m	namespace:electromagnetic
ultraviolet	src/constants.h	/^    const double ultraviolet = 750*petaHertz;\/\/15$/;"	m	namespace:electromagnetic
unfreeze	include/Eternia/Data/LinkedList.hpp	/^    void unfreeze(void* list, int bytes) {$/;"	f	class:LinkedList
unfreeze	src/Data/LinkedList.hpp	/^    void unfreeze(void* list, int bytes) {$/;"	f	class:LinkedList
unit	include/Eternia/constants.h	/^    namespace unit { \/\/ conversion factor$/;"	n	namespace:physical
unit	src/constants.h	/^    namespace unit { \/\/ conversion factor$/;"	n	namespace:physical
unitVector	include/Eternia/Math/struct/vertex.h	/^    vertex unitVector(); \/\/ Directional vector$/;"	p	class:vertex
unitVector	src/Math/struct/vertex.cpp	/^vertex vertex::unitVector() {$/;"	f	class:vertex
unitVector	src/Math/struct/vertex.h	/^    vertex unitVector(); \/\/ Directional vector$/;"	p	class:vertex
units	include/Eternia/Gamelogic/Economics/StockMarket/Stock.h	/^	long paidPrice, units;$/;"	m	class:Stock
units	include/Eternia/constants.h	/^    namespace units = unit;$/;"	x
units	src/Gamelogic/Economics/StockMarket/Stock.h	/^	long paidPrice, units;$/;"	m	class:Stock
units	src/constants.h	/^    namespace units = unit;$/;"	x
unload	include/Eternia/Data/FileCache.hpp	/^        void unload(long ID) {$/;"	f	class:FileCache
unload	src/Data/FileCache.hpp	/^        void unload(long ID) {$/;"	f	class:FileCache
unloadModule	include/Eternia/API/APICore.h	/^    bool unloadModule(APIMod* mod); \/\/ unload a module. false if kept loaded.$/;"	p	class:APICore
unloadModule	src/API/APICore.h	/^    bool unloadModule(APIMod* mod); \/\/ unload a module. false if kept loaded.$/;"	p	class:APICore
unlocked	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<bool> unlocked; \/\/ account unlocked$/;"	m	class:Account
unlocked	src/Gamelogic/Economics/Banking/Account.h	/^    PType<bool> unlocked; \/\/ account unlocked$/;"	m	class:Account
unsolvedVars	include/Eternia/Engineering/Physics/Work.h	/^        bool unsolvedVars(); \/\/ does this have unsolved variables?$/;"	p	class:EnergyValue
unsolvedVars	src/Engineering/Physics/Work.h	/^        bool unsolvedVars(); \/\/ does this have unsolved variables?$/;"	p	class:EnergyValue
update	include/Eternia/Algorithm/Cryptography/md5.h	/^        void update(const char *buf, size_type length);$/;"	p	class:MD5
update	include/Eternia/Algorithm/Cryptography/md5.h	/^        void update(const unsigned char *buf, size_type length);$/;"	p	class:MD5
update	src/Algorithm/Cryptography/md5.cpp	/^void MD5::update(const char input[], size_type length) {$/;"	f	class:MD5
update	src/Algorithm/Cryptography/md5.cpp	/^void MD5::update(const unsigned char input[], size_type length) {$/;"	f	class:MD5
update	src/Algorithm/Cryptography/md5.h	/^        void update(const char *buf, size_type length);$/;"	p	class:MD5
update	src/Algorithm/Cryptography/md5.h	/^        void update(const unsigned char *buf, size_type length);$/;"	p	class:MD5
upheap	include/Eternia/Data/Heap.h	/^        void upheap(int from, int to); \/\/ sort through list to make sure that it is sorted (Bottom up)$/;"	p	class:Heap
upheap	include/Eternia/Data/PriorityQueue.h	/^        void upheap(PriorityItem* current); \/\/ sort through list to make sure that it is sorted (Bottom up)$/;"	p	class:PriorityQueue
upheap	src/Data/Heap.cpp	/^void Heap::upheap(int from, int to) {$/;"	f	class:Heap
upheap	src/Data/Heap.h	/^        void upheap(int from, int to); \/\/ sort through list to make sure that it is sorted (Bottom up)$/;"	p	class:Heap
upheap	src/Data/PriorityQueue.cpp	/^void PriorityQueue::upheap(PriorityItem* current) {$/;"	f	class:PriorityQueue
upheap	src/Data/PriorityQueue.h	/^        void upheap(PriorityItem* current); \/\/ sort through list to make sure that it is sorted (Bottom up)$/;"	p	class:PriorityQueue
upper	include/Eternia/Math/struct/Matrix.h	/^    void upper(); \/\/ linearly solves the upper quadrant$/;"	p	class:Matrix
upper	src/Math/struct/Matrix.cpp	/^void Matrix::upper() {$/;"	f	class:Matrix
upper	src/Math/struct/Matrix.h	/^    void upper(); \/\/ linearly solves the upper quadrant$/;"	p	class:Matrix
us	include/Eternia/constants.h	/^        const double us = microsecond;$/;"	m	namespace:physical::unit
us	src/constants.h	/^        const double us = microsecond;$/;"	m	namespace:physical::unit
useBlocks	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    bool useBlocks; \/\/ segment the data into blocks$/;"	m	class:BasicCompressor
useBlocks	src/Algorithm/Compression/BasicCompressor.h	/^    bool useBlocks; \/\/ segment the data into blocks$/;"	m	class:BasicCompressor
useMemMap	include/Eternia/Gamelogic/Voxel/VoxelGeom.h	/^    bool useMemMap;$/;"	m	class:VoxelGeom
useMemMap	src/Gamelogic/Voxel/VoxelGeom.h	/^    bool useMemMap;$/;"	m	class:VoxelGeom
useTrue	include/Eternia/Emulation/SecondTick.h	/^        bool useTrue;$/;"	m	class:SecondTick
useTrue	src/Emulation/SecondTick.h	/^        bool useTrue;$/;"	m	class:SecondTick
userHasPermission	include/Eternia/API/APIPermissionsRegistry.h	/^    bool userHasPermission(APIUser *user, APIPermission perm);$/;"	p	class:APIPermissionsRegistry
userHasPermission	src/API/APIPermissionsRegistry.cpp	/^bool APIPermissionsRegistry::userHasPermission(APIUser *user, APIPermission perm){$/;"	f	class:APIPermissionsRegistry
userHasPermission	src/API/APIPermissionsRegistry.h	/^    bool userHasPermission(APIUser *user, APIPermission perm);$/;"	p	class:APIPermissionsRegistry
users	include/Eternia/API/APIPermissionsRegistry.h	/^    LinkedList<APIUser> users;$/;"	m	class:APIPermissionsRegistry
users	src/API/APIPermissionsRegistry.h	/^    LinkedList<APIUser> users;$/;"	m	class:APIPermissionsRegistry
vLen	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int vLen;$/;"	m	class:AbstractDBFieldValue
vLen	src/Data/AbstractDatabase/AbstractDB.h	/^        int vLen;$/;"	m	class:AbstractDBFieldValue
val	include/Eternia/Data/SpecialTypes.hpp	/^        uint64_t val[16]; \/\/ 512 bits$/;"	m	class:UInt512
val	include/Eternia/Engineering/Electrical/Pin.h	/^        PowerValue* val;$/;"	m	class:Pin
val	src/Data/SpecialTypes.hpp	/^        uint64_t val[16]; \/\/ 512 bits$/;"	m	class:UInt512
val	src/Engineering/Electrical/Pin.h	/^        PowerValue* val;$/;"	m	class:Pin
valence	include/Eternia/Engineering/Chemistry/Atom.h	/^        char valence; \/\/ "bond-slots"$/;"	m	class:Atom
valence	src/Engineering/Chemistry/Atom.h	/^        char valence; \/\/ "bond-slots"$/;"	m	class:Atom
value	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        char* value; \/\/ raw character value list$/;"	m	class:AbstractDBFieldValue
value	include/Eternia/Data/Protect/PType.hpp	/^    T value; \/\/ Base value$/;"	m	class:PType
value	include/Eternia/Engineering/Electrical/Signal/PWM.h	/^    bool value;$/;"	m	class:PWM
value	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    float value;$/;"	m	class:TimeSample
value	include/Eternia/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> value, max;$/;"	m	class:BodyPartHP
value	include/Eternia/Gamelogic/Economics/Banking/Account.h	/^    PType<double> value; \/\/ account value$/;"	m	class:Account
value	include/Eternia/Gamelogic/Inventory/DynamicAttribute.h	/^        double value;$/;"	m	class:DynamicAttribute
value	src/Data/AbstractDatabase/AbstractDB.h	/^        char* value; \/\/ raw character value list$/;"	m	class:AbstractDBFieldValue
value	src/Data/Protect/PType.hpp	/^    T value; \/\/ Base value$/;"	m	class:PType
value	src/Engineering/Electrical/Signal/PWM.h	/^    bool value;$/;"	m	class:PWM
value	src/Engineering/Electrical/Signal/TimeSignal.h	/^    float value;$/;"	m	class:TimeSample
value	src/Gamelogic/Avatar/AvatarHealth.h	/^        PType<double> value, max;$/;"	m	class:BodyPartHP
value	src/Gamelogic/Economics/Banking/Account.h	/^    PType<double> value; \/\/ account value$/;"	m	class:Account
value	src/Gamelogic/Inventory/DynamicAttribute.h	/^        double value;$/;"	m	class:DynamicAttribute
valueList	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* valueList;$/;"	m	class:AbstractDBRow
valueList	src/Data/AbstractDatabase/AbstractDB.h	/^        AbstractDBLinkedDataset* valueList;$/;"	m	class:AbstractDBRow
values	include/Eternia/Math/struct/Matrix.h	/^    double **values;$/;"	m	class:Matrix
values	src/Math/struct/Matrix.h	/^    double **values;$/;"	m	class:Matrix
var1	include/Eternia/Programming/Visual/VProgramNode.h	/^        int var1, var2, var3; \/\/ slot locations for vars$/;"	m	class:VProgramNode
var1	src/Programming/Visual/VProgramNode.h	/^        int var1, var2, var3; \/\/ slot locations for vars$/;"	m	class:VProgramNode
var1slot	include/Eternia/Programming/Visual/VProgramNode.h	/^        VarTYPE var1slot, var2slot, var3slot;$/;"	m	class:VProgramNode
var1slot	src/Programming/Visual/VProgramNode.h	/^        VarTYPE var1slot, var2slot, var3slot;$/;"	m	class:VProgramNode
var2	include/Eternia/Programming/Visual/VProgramNode.h	/^        int var1, var2, var3; \/\/ slot locations for vars$/;"	m	class:VProgramNode
var2	src/Programming/Visual/VProgramNode.h	/^        int var1, var2, var3; \/\/ slot locations for vars$/;"	m	class:VProgramNode
var2slot	include/Eternia/Programming/Visual/VProgramNode.h	/^        VarTYPE var1slot, var2slot, var3slot;$/;"	m	class:VProgramNode
var2slot	src/Programming/Visual/VProgramNode.h	/^        VarTYPE var1slot, var2slot, var3slot;$/;"	m	class:VProgramNode
var3	include/Eternia/Programming/Visual/VProgramNode.h	/^        int var1, var2, var3; \/\/ slot locations for vars$/;"	m	class:VProgramNode
var3	src/Programming/Visual/VProgramNode.h	/^        int var1, var2, var3; \/\/ slot locations for vars$/;"	m	class:VProgramNode
var3slot	include/Eternia/Programming/Visual/VProgramNode.h	/^        VarTYPE var1slot, var2slot, var3slot;$/;"	m	class:VProgramNode
var3slot	src/Programming/Visual/VProgramNode.h	/^        VarTYPE var1slot, var2slot, var3slot;$/;"	m	class:VProgramNode
vec1	include/Eternia/Data/Protect/PType.hpp	/^    long long *vec1, *vec2;$/;"	m	class:PType
vec1	src/Data/Protect/PType.hpp	/^    long long *vec1, *vec2;$/;"	m	class:PType
vec2	include/Eternia/Data/Protect/PType.hpp	/^    long long *vec1, *vec2;$/;"	m	class:PType
vec2	src/Data/Protect/PType.hpp	/^    long long *vec1, *vec2;$/;"	m	class:PType
velocity	include/Eternia/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
velocity	include/Eternia/Math/struct/vertex.h	/^    vertex velocity, acceleration;$/;"	m	class:VertexObject
velocity	src/Engineering/Physics/Work.h	/^        double Gravity, heightx, velocity, RotVelo, springK; \/\/ input vars.$/;"	m	class:EnergyValue
velocity	src/Math/struct/vertex.h	/^    vertex velocity, acceleration;$/;"	m	class:VertexObject
version	include/Eternia/API/APIMod.h	/^    CharString file, language, version;$/;"	m	class:APIMod
version	src/API/APIMod.h	/^    CharString file, language, version;$/;"	m	class:APIMod
vertex	include/Eternia/Math/struct/vertex.h	/^    vertex();$/;"	p	class:vertex
vertex	include/Eternia/Math/struct/vertex.h	/^    vertex(double x,double y,double z);$/;"	p	class:vertex
vertex	include/Eternia/Math/struct/vertex.h	/^class vertex : public SpecificSerializer{$/;"	c
vertex	src/Engineering/Physics/test/testGravity.h	/^    class vertex;$/;"	x
vertex	src/Math/struct/vertex.cpp	/^vertex::vertex() {$/;"	f	class:vertex
vertex	src/Math/struct/vertex.cpp	/^vertex::vertex(double _x,double _y,double _z) {$/;"	f	class:vertex
vertex	src/Math/struct/vertex.h	/^    vertex();$/;"	p	class:vertex
vertex	src/Math/struct/vertex.h	/^    vertex(double x,double y,double z);$/;"	p	class:vertex
vertex	src/Math/struct/vertex.h	/^class vertex : public SpecificSerializer{$/;"	c
vertex::VECOP_DEC	include/Eternia/Math/struct/vertex.h	/^    VECOP_DEC(*);$/;"	m	class:vertex
vertex::VECOP_DEC	src/Math/struct/vertex.h	/^    VECOP_DEC(*);$/;"	m	class:vertex
vertex::VECOP_DEC_COMP	include/Eternia/Math/struct/vertex.h	/^    VECOP_DEC_COMP(==);$/;"	m	class:vertex
vertex::VECOP_DEC_COMP	src/Math/struct/vertex.h	/^    VECOP_DEC_COMP(==);$/;"	m	class:vertex
vertex::VECOP_DEC_EQ	include/Eternia/Math/struct/vertex.h	/^    VECOP_DEC_EQ(*=);$/;"	m	class:vertex
vertex::VECOP_DEC_EQ	src/Math/struct/vertex.h	/^    VECOP_DEC_EQ(*=);$/;"	m	class:vertex
vertex::angle	include/Eternia/Math/struct/vertex.h	/^    double angle(vertex  v2); \/\/ angle from v2 based on 0 deg (X-direction)$/;"	p	class:vertex
vertex::angle	src/Math/struct/vertex.cpp	/^double vertex::angle(vertex w) {$/;"	f	class:vertex
vertex::angle	src/Math/struct/vertex.h	/^    double angle(vertex  v2); \/\/ angle from v2 based on 0 deg (X-direction)$/;"	p	class:vertex
vertex::cauchySchwarzInequality	include/Eternia/Math/struct/vertex.h	/^    bool cauchySchwarzInequality(vertex v); \/\/ abs(dot(u,v)) <= length(u)*length(v)$/;"	p	class:vertex
vertex::cauchySchwarzInequality	src/Math/struct/vertex.cpp	/^bool vertex::cauchySchwarzInequality(vertex v) {$/;"	f	class:vertex
vertex::cauchySchwarzInequality	src/Math/struct/vertex.h	/^    bool cauchySchwarzInequality(vertex v); \/\/ abs(dot(u,v)) <= length(u)*length(v)$/;"	p	class:vertex
vertex::cross	include/Eternia/Math/struct/vertex.h	/^    vertex cross(vertex v2); \/\/ Cross-product$/;"	p	class:vertex
vertex::cross	src/Math/struct/vertex.cpp	/^vertex vertex::cross(vertex v2) {$/;"	f	class:vertex
vertex::cross	src/Math/struct/vertex.h	/^    vertex cross(vertex v2); \/\/ Cross-product$/;"	p	class:vertex
vertex::distance	include/Eternia/Math/struct/vertex.h	/^    double distance(vertex  v2);$/;"	p	class:vertex
vertex::distance	src/Math/struct/vertex.cpp	/^double vertex::distance(vertex v2) {$/;"	f	class:vertex
vertex::distance	src/Math/struct/vertex.h	/^    double distance(vertex  v2);$/;"	p	class:vertex
vertex::dot	include/Eternia/Math/struct/vertex.h	/^    double dot(vertex v2); \/\/ Dot-product$/;"	p	class:vertex
vertex::dot	src/Math/struct/vertex.cpp	/^double vertex::dot(vertex v2) {$/;"	f	class:vertex
vertex::dot	src/Math/struct/vertex.h	/^    double dot(vertex v2); \/\/ Dot-product$/;"	p	class:vertex
vertex::getPhi	include/Eternia/Math/struct/vertex.h	/^    double getPhi();$/;"	p	class:vertex
vertex::getPhi	src/Math/struct/vertex.cpp	/^double vertex::getPhi(){$/;"	f	class:vertex
vertex::getPhi	src/Math/struct/vertex.h	/^    double getPhi();$/;"	p	class:vertex
vertex::getTheta	include/Eternia/Math/struct/vertex.h	/^    double getTheta();$/;"	p	class:vertex
vertex::getTheta	src/Math/struct/vertex.cpp	/^double vertex::getTheta(){$/;"	f	class:vertex
vertex::getTheta	src/Math/struct/vertex.h	/^    double getTheta();$/;"	p	class:vertex
vertex::isOrthagonal	include/Eternia/Math/struct/vertex.h	/^    bool isOrthagonal(vertex v); \/\/ returns whether this is orthagonal.$/;"	p	class:vertex
vertex::isOrthagonal	src/Math/struct/vertex.cpp	/^bool vertex::isOrthagonal(vertex v) {$/;"	f	class:vertex
vertex::isOrthagonal	src/Math/struct/vertex.h	/^    bool isOrthagonal(vertex v); \/\/ returns whether this is orthagonal.$/;"	p	class:vertex
vertex::length	include/Eternia/Math/struct/vertex.h	/^    double length(); \/\/ returns total distance between point and origin.$/;"	p	class:vertex
vertex::length	src/Math/struct/vertex.cpp	/^double vertex::length() {$/;"	f	class:vertex
vertex::length	src/Math/struct/vertex.h	/^    double length(); \/\/ returns total distance between point and origin.$/;"	p	class:vertex
vertex::length2	include/Eternia/Math/struct/vertex.h	/^    double length2(); \/\/ returns total distance between point and origin powered by 2$/;"	p	class:vertex
vertex::length2	src/Math/struct/vertex.h	/^    double length2(); \/\/ returns total distance between point and origin powered by 2$/;"	p	class:vertex
vertex::operator =	include/Eternia/Math/struct/vertex.h	/^    vertex operator=(vertex b);$/;"	p	class:vertex
vertex::operator =	src/Math/struct/vertex.cpp	/^vertex vertex::operator=(vertex b){$/;"	f	class:vertex
vertex::operator =	src/Math/struct/vertex.h	/^    vertex operator=(vertex b);$/;"	p	class:vertex
vertex::pythagroreanInequality	include/Eternia/Math/struct/vertex.h	/^    bool pythagroreanInequality(vertex v); \/\/ length(u+v)^2 = length(u)^2 + length(v)^2$/;"	p	class:vertex
vertex::pythagroreanInequality	src/Math/struct/vertex.cpp	/^bool vertex::pythagroreanInequality(vertex v) {$/;"	f	class:vertex
vertex::pythagroreanInequality	src/Math/struct/vertex.h	/^    bool pythagroreanInequality(vertex v); \/\/ length(u+v)^2 = length(u)^2 + length(v)^2$/;"	p	class:vertex
vertex::rotate	include/Eternia/Math/struct/vertex.h	/^    void rotate(double theta, double phi); \/\/ rotate this vector around the origin. (additive)$/;"	p	class:vertex
vertex::rotate	src/Math/struct/vertex.cpp	/^void vertex::rotate(double theta_, double phi_){$/;"	f	class:vertex
vertex::rotate	src/Math/struct/vertex.h	/^    void rotate(double theta, double phi); \/\/ rotate this vector around the origin. (additive)$/;"	p	class:vertex
vertex::triangleInequality	include/Eternia/Math/struct/vertex.h	/^    bool triangleInequality(vertex V); \/\/ length(u+v) <= length(u) + length(v)$/;"	p	class:vertex
vertex::triangleInequality	src/Math/struct/vertex.cpp	/^bool vertex::triangleInequality(vertex v) {$/;"	f	class:vertex
vertex::triangleInequality	src/Math/struct/vertex.h	/^    bool triangleInequality(vertex V); \/\/ length(u+v) <= length(u) + length(v)$/;"	p	class:vertex
vertex::unitVector	include/Eternia/Math/struct/vertex.h	/^    vertex unitVector(); \/\/ Directional vector$/;"	p	class:vertex
vertex::unitVector	src/Math/struct/vertex.cpp	/^vertex vertex::unitVector() {$/;"	f	class:vertex
vertex::unitVector	src/Math/struct/vertex.h	/^    vertex unitVector(); \/\/ Directional vector$/;"	p	class:vertex
vertex::vertex	include/Eternia/Math/struct/vertex.h	/^    vertex();$/;"	p	class:vertex
vertex::vertex	include/Eternia/Math/struct/vertex.h	/^    vertex(double x,double y,double z);$/;"	p	class:vertex
vertex::vertex	src/Math/struct/vertex.cpp	/^vertex::vertex() {$/;"	f	class:vertex
vertex::vertex	src/Math/struct/vertex.cpp	/^vertex::vertex(double _x,double _y,double _z) {$/;"	f	class:vertex
vertex::vertex	src/Math/struct/vertex.h	/^    vertex();$/;"	p	class:vertex
vertex::vertex	src/Math/struct/vertex.h	/^    vertex(double x,double y,double z);$/;"	p	class:vertex
vertex::x	include/Eternia/Math/struct/vertex.h	/^    double x;$/;"	m	class:vertex
vertex::x	src/Math/struct/vertex.h	/^    double x;$/;"	m	class:vertex
vertex::y	include/Eternia/Math/struct/vertex.h	/^    double y;$/;"	m	class:vertex
vertex::y	src/Math/struct/vertex.h	/^    double y;$/;"	m	class:vertex
vertex::z	include/Eternia/Math/struct/vertex.h	/^    double z;$/;"	m	class:vertex
vertex::z	src/Math/struct/vertex.h	/^    double z;$/;"	m	class:vertex
vertex::~vertex	include/Eternia/Math/struct/vertex.h	/^    virtual ~vertex();$/;"	p	class:vertex
vertex::~vertex	src/Math/struct/vertex.cpp	/^vertex::~vertex() { $/;"	f	class:vertex
vertex::~vertex	src/Math/struct/vertex.h	/^    virtual ~vertex();$/;"	p	class:vertex
vertexList	include/Eternia/Data/Graph.h	/^        LinkedListT* vertexList; \/\/ structure that stores this.$/;"	m	class:GVertex
vertexList	src/Data/Graph.h	/^        LinkedListT* vertexList; \/\/ structure that stores this.$/;"	m	class:GVertex
vertexMap	include/Eternia/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        LinkedList<vertex>* vertexMap;$/;"	m	class:GPUInstruction
vertexMap	src/WebFramework/Network/PacketServer/Packets/Processing/ProcessorInstruction.h	/^        LinkedList<vertex>* vertexMap;$/;"	m	class:GPUInstruction
verticies	include/Eternia/Data/Graph.h	/^        LinkedListT* verticies(); \/\/ returns the full list of verticies$/;"	p	class:Graph
verticies	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    LinkedList<vertex> verticies;$/;"	m	class:Terrain
verticies	src/Data/Graph.h	/^        LinkedListT* verticies(); \/\/ returns the full list of verticies$/;"	p	class:Graph
verticies	src/Gamelogic/Environment/Planet/Planet.h	/^    LinkedList<vertex> verticies;$/;"	m	class:Terrain
verticiesList	include/Eternia/Data/Graph.h	/^        LinkedListT* verticiesList;$/;"	m	class:Graph
verticiesList	src/Data/Graph.h	/^        LinkedListT* verticiesList;$/;"	m	class:Graph
vision_range	include/Eternia/Gamelogic/Mob/Mob.h	/^        double vision_range;$/;"	m	class:Mob
vision_range	src/Gamelogic/Mob/Mob.h	/^        double vision_range;$/;"	m	class:Mob
voltage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double voltage; \/\/ Applied voltage$/;"	m	class:PowerValue
voltage	src/Engineering/Electrical/PowerValue.h	/^        double voltage; \/\/ Applied voltage$/;"	m	class:PowerValue
war	include/Eternia/Gamelogic/Race/Relations.h	/^	bool war; \/\/ are both parties at war? (Some races may consider everybody at war with them, true xenophobes)$/;"	m	class:Relations
war	src/Gamelogic/Race/Relations.h	/^	bool war; \/\/ are both parties at war? (Some races may consider everybody at war with them, true xenophobes)$/;"	m	class:Relations
wattage	include/Eternia/Engineering/Electrical/PowerValue.h	/^        double wattage; \/\/ Raw wattage in this point on the curcuit. (Auto-assigned)$/;"	m	class:PowerValue
wattage	src/Engineering/Electrical/PowerValue.h	/^        double wattage; \/\/ Raw wattage in this point on the curcuit. (Auto-assigned)$/;"	m	class:PowerValue
week	include/Eternia/constants.h	/^        const double week = 7.0*days;$/;"	m	namespace:physical::unit
week	src/constants.h	/^        const double week = 7.0*days;$/;"	m	namespace:physical::unit
weeks	include/Eternia/constants.h	/^        const double weeks = week;$/;"	m	namespace:physical::unit
weeks	src/constants.h	/^        const double weeks = week;$/;"	m	namespace:physical::unit
weight	include/Eternia/Gamelogic/Environment/Space/Star.h	/^        double radius, weight;$/;"	m	class:Star
weight	include/Eternia/Gamelogic/Ship/ModularShipPart.h	/^        double armor, weight;$/;"	m	class:ModularShipPart
weight	src/Gamelogic/Environment/Space/Star.h	/^        double radius, weight;$/;"	m	class:Star
weight	src/Gamelogic/Ship/ModularShipPart.h	/^        double armor, weight;$/;"	m	class:ModularShipPart
wey	include/Eternia/constants.h	/^        const double wey = 40.0*US::bushels;$/;"	m	namespace:physical::unit
wey	src/constants.h	/^        const double wey = 40.0*US::bushels;$/;"	m	namespace:physical::unit
weymass	include/Eternia/constants.h	/^        const double weymass = 252.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
weymass	src/constants.h	/^        const double weymass = 252.0*avoirdupois::pounds;$/;"	m	namespace:physical::unit
weys	include/Eternia/constants.h	/^        const double weys = wey;$/;"	m	namespace:physical::unit
weys	src/constants.h	/^        const double weys = wey;$/;"	m	namespace:physical::unit
width	include/Eternia/Data/BitMap.h	/^        int width;$/;"	m	class:BitMap
width	include/Eternia/Design/LayoutObject.h	/^        int width, height;$/;"	m	class:LayoutObject
width	src/Data/BitMap.h	/^        int width;$/;"	m	class:BitMap
width	src/Design/LayoutObject.h	/^        int width, height;$/;"	m	class:LayoutObject
wireList	include/Eternia/Engineering/Electrical/Circuit.h	/^        LinkedList<Wire>* wireList;$/;"	m	class:Circuit
wireList	src/Engineering/Electrical/Circuit.h	/^        LinkedList<Wire>* wireList;$/;"	m	class:Circuit
wsaData	include/Eternia/WebFramework/Network/SocketServer.h	/^    WSADATA wsaData;$/;"	m	class:SocketServer
wsaData	src/WebFramework/Network/SocketServer.h	/^    WSADATA wsaData;$/;"	m	class:SocketServer
x	include/Eternia/Design/LayoutObject.h	/^        int x,y;$/;"	m	class:LayoutObject
x	include/Eternia/Math/struct/vertex.h	/^    double x;$/;"	m	class:vertex
x	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x,y; \/\/ x, y coords$/;"	m	class:P2PBoundaries
x	src/Design/LayoutObject.h	/^        int x,y;$/;"	m	class:LayoutObject
x	src/Math/struct/vertex.h	/^    double x;$/;"	m	class:vertex
x	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x,y; \/\/ x, y coords$/;"	m	class:P2PBoundaries
x1	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x1,y1; \/\/ other edge of boundary.$/;"	m	class:P2PBoundaries
x1	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x1,y1; \/\/ other edge of boundary.$/;"	m	class:P2PBoundaries
xenophilia	include/Eternia/Gamelogic/Race/Race.h	/^	float xenophilia; \/\/ -1 = hatred towards other races, 1 = love new races$/;"	m	class:Race
xenophilia	src/Gamelogic/Race/Race.h	/^	float xenophilia; \/\/ -1 = hatred towards other races, 1 = love new races$/;"	m	class:Race
xray	include/Eternia/constants.h	/^    const double xray = 3*exaHertz; \/\/18$/;"	m	namespace:electromagnetic
xray	src/constants.h	/^    const double xray = 3*exaHertz; \/\/18$/;"	m	namespace:electromagnetic
y	include/Eternia/Design/LayoutObject.h	/^        int x,y;$/;"	m	class:LayoutObject
y	include/Eternia/Math/struct/vertex.h	/^    double y;$/;"	m	class:vertex
y	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x,y; \/\/ x, y coords$/;"	m	class:P2PBoundaries
y	src/Design/LayoutObject.h	/^        int x,y;$/;"	m	class:LayoutObject
y	src/Math/struct/vertex.h	/^    double y;$/;"	m	class:vertex
y	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x,y; \/\/ x, y coords$/;"	m	class:P2PBoundaries
y1	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x1,y1; \/\/ other edge of boundary.$/;"	m	class:P2PBoundaries
y1	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        long x1,y1; \/\/ other edge of boundary.$/;"	m	class:P2PBoundaries
yard	include/Eternia/constants.h	/^        const double yard = 3.0*feet;$/;"	m	namespace:physical::unit
yard	src/constants.h	/^        const double yard = 3.0*feet;$/;"	m	namespace:physical::unit
yards	include/Eternia/constants.h	/^        const double yards = yard;$/;"	m	namespace:physical::unit
yards	src/constants.h	/^        const double yards = yard;$/;"	m	namespace:physical::unit
yd	include/Eternia/constants.h	/^        const double yd = yard;$/;"	m	namespace:physical::unit
yd	src/constants.h	/^        const double yd = yard;$/;"	m	namespace:physical::unit
year	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        int day, month, year;$/;"	m	class:AbstractDBDate
year	include/Eternia/constants.h	/^        const double year = 365.2421896698*days;$/;"	m	namespace:physical::unit
year	src/Data/AbstractDatabase/AbstractDB.h	/^        int day, month, year;$/;"	m	class:AbstractDBDate
year	src/constants.h	/^        const double year = 365.2421896698*days;$/;"	m	namespace:physical::unit
years	include/Eternia/constants.h	/^        const double years = year;$/;"	m	namespace:physical::unit
years	src/constants.h	/^        const double years = year;$/;"	m	namespace:physical::unit
yotta	include/Eternia/constants.h	/^        const double yotta = 1e24;$/;"	m	namespace:physical::unit
yotta	src/constants.h	/^        const double yotta = 1e24;$/;"	m	namespace:physical::unit
yottaHertz	include/Eternia/constants.h	/^        const double yottaHertz = yotta*Hertz;$/;"	m	namespace:physical::unit
yottaHertz	src/constants.h	/^        const double yottaHertz = yotta*Hertz;$/;"	m	namespace:physical::unit
yr	include/Eternia/constants.h	/^        const double yr = year;$/;"	m	namespace:physical::unit
yr	src/constants.h	/^        const double yr = year;$/;"	m	namespace:physical::unit
z	include/Eternia/Math/struct/vertex.h	/^    double z;$/;"	m	class:vertex
z	src/Math/struct/vertex.h	/^    double z;$/;"	m	class:vertex
zetta	include/Eternia/constants.h	/^        const double zetta = 1e21;$/;"	m	namespace:physical::unit
zetta	src/constants.h	/^        const double zetta = 1e21;$/;"	m	namespace:physical::unit
zettaHertz	include/Eternia/constants.h	/^        const double zettaHertz = zetta*Hertz;$/;"	m	namespace:physical::unit
zettaHertz	src/constants.h	/^        const double zettaHertz = zetta*Hertz;$/;"	m	namespace:physical::unit
~(	include/Eternia/Engineering/Chemistry/Hadron/Baryon.h	/^        virtual ~();$/;"	m	class:__anon11
~(	include/Eternia/Engineering/Chemistry/Hadron/Meson.h	/^        virtual ~();$/;"	m	class:__anon10
~(	include/Eternia/Engineering/Electrical/Components/Rectifier.h	/^        virtual ~();$/;"	m	class:__anon12
~(	src/Engineering/Chemistry/Hadron/Baryon.h	/^        virtual ~();$/;"	m	class:__anon5
~(	src/Engineering/Chemistry/Hadron/Meson.h	/^        virtual ~();$/;"	m	class:__anon4
~(	src/Engineering/Electrical/Components/Rectifier.h	/^        virtual ~();$/;"	m	class:__anon6
~APIEventRegistry	include/Eternia/API/APIEventRegistry.h	/^    virtual ~APIEventRegistry();$/;"	p	class:APIEventRegistry
~APIEventRegistry	src/API/APIEventRegistry.cpp	/^APIEventRegistry::~APIEventRegistry(){$/;"	f	class:APIEventRegistry
~APIEventRegistry	src/API/APIEventRegistry.h	/^    virtual ~APIEventRegistry();$/;"	p	class:APIEventRegistry
~APIMod	include/Eternia/API/APIMod.h	/^    virtual ~APIMod();$/;"	p	class:APIMod
~APIMod	src/API/APIMod.cpp	/^APIMod::~APIMod(){$/;"	f	class:APIMod
~APIMod	src/API/APIMod.h	/^    virtual ~APIMod();$/;"	p	class:APIMod
~APIPermissionsRegistry	include/Eternia/API/APIPermissionsRegistry.h	/^    virtual ~APIPermissionsRegistry();$/;"	p	class:APIPermissionsRegistry
~APIPermissionsRegistry	src/API/APIPermissionsRegistry.cpp	/^APIPermissionsRegistry::~APIPermissionsRegistry(){}$/;"	f	class:APIPermissionsRegistry
~APIPermissionsRegistry	src/API/APIPermissionsRegistry.h	/^    virtual ~APIPermissionsRegistry();$/;"	p	class:APIPermissionsRegistry
~APIUser	include/Eternia/API/APIUser.h	/^    virtual ~APIUser();$/;"	p	class:APIUser
~APIUser	src/API/APIUser.cpp	/^APIUser::~APIUser(){}$/;"	f	class:APIUser
~APIUser	src/API/APIUser.h	/^    virtual ~APIUser();$/;"	p	class:APIUser
~AbstractDBCacheMap	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBCacheMap();$/;"	p	class:AbstractDBCacheMap
~AbstractDBCacheMap	src/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBCacheMap();$/;"	p	class:AbstractDBCacheMap
~AbstractDBCacheMap	src/Data/AbstractDatabase/AbstractDBCacheMap.cpp	/^AbstractDBCacheMap::~AbstractDBCacheMap() {$/;"	f	class:AbstractDBCacheMap
~AbstractDBField	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBField();$/;"	p	class:AbstractDBField
~AbstractDBField	src/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBField();$/;"	p	class:AbstractDBField
~AbstractDBField	src/Data/AbstractDatabase/AbstractDBField.cpp	/^AbstractDBField::~AbstractDBField() {$/;"	f	class:AbstractDBField
~AbstractDBFieldValue	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        virtual ~AbstractDBFieldValue();$/;"	p	class:AbstractDBFieldValue
~AbstractDBFieldValue	src/Data/AbstractDatabase/AbstractDB.h	/^        virtual ~AbstractDBFieldValue();$/;"	p	class:AbstractDBFieldValue
~AbstractDBLinkedDataset	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBLinkedDataset();$/;"	p	class:AbstractDBLinkedDataset
~AbstractDBLinkedDataset	src/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBLinkedDataset();$/;"	p	class:AbstractDBLinkedDataset
~AbstractDBLinkedDataset	src/Data/AbstractDatabase/AbstractDBLinkedData.cpp	/^AbstractDBLinkedDataset::~AbstractDBLinkedDataset() {$/;"	f	class:AbstractDBLinkedDataset
~AbstractDBTable	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBTable();$/;"	p	class:AbstractDBTable
~AbstractDBTable	src/Data/AbstractDatabase/AbstractDB.h	/^        ~AbstractDBTable();$/;"	p	class:AbstractDBTable
~AbstractDBTable	src/Data/AbstractDatabase/AbstractDBTable.cpp	/^AbstractDBTable::~AbstractDBTable() {$/;"	f	class:AbstractDBTable
~AntiNeutron	include/Eternia/Engineering/Chemistry/Hadron/AntiNeutron.h	/^        virtual ~AntiNeutron();$/;"	p	class:AntiNeutron
~AntiNeutron	src/Engineering/Chemistry/Hadron/AntiNeutron.h	/^        virtual ~AntiNeutron();$/;"	p	class:AntiNeutron
~AntiProton	include/Eternia/Engineering/Chemistry/Hadron/AntiProton.h	/^        virtual ~AntiProton();$/;"	p	class:AntiProton
~AntiProton	src/Engineering/Chemistry/Hadron/AntiProton.h	/^        virtual ~AntiProton();$/;"	p	class:AntiProton
~Atmosphere	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    virtual ~Atmosphere();$/;"	p	class:Atmosphere
~Atmosphere	src/Gamelogic/Environment/Planet/Planet.h	/^    virtual ~Atmosphere();$/;"	p	class:Atmosphere
~Atmosphere	src/Gamelogic/Environment/Planet/Planet_Atmosphere.cpp	/^Atmosphere::~Atmosphere(){$/;"	f	class:Atmosphere
~Atom	include/Eternia/Engineering/Chemistry/Atom.h	/^        virtual ~Atom();$/;"	p	class:Atom
~Atom	src/Engineering/Chemistry/Atom.cpp	/^Atom::~Atom() {}$/;"	f	class:Atom
~Atom	src/Engineering/Chemistry/Atom.h	/^        virtual ~Atom();$/;"	p	class:Atom
~AvatarAppearance	include/Eternia/Gamelogic/Avatar/AvatarAppearance.h	/^    virtual ~AvatarAppearance();$/;"	p	class:AvatarAppearance
~AvatarAppearance	src/Gamelogic/Avatar/AvatarAppearance.cpp	/^AvatarAppearance::~AvatarAppearance(){$/;"	f	class:AvatarAppearance
~AvatarAppearance	src/Gamelogic/Avatar/AvatarAppearance.h	/^    virtual ~AvatarAppearance();$/;"	p	class:AvatarAppearance
~BasicCompressor	include/Eternia/Algorithm/Compression/BasicCompressor.h	/^    virtual ~BasicCompressor();$/;"	p	class:BasicCompressor
~BasicCompressor	src/Algorithm/Compression/BasicCompressor.h	/^    virtual ~BasicCompressor();$/;"	p	class:BasicCompressor
~BasicFixedPointerArray	include/Eternia/Data/AbstractDatabase/AbstractDB.h	/^        ~BasicFixedPointerArray();$/;"	p	class:BasicFixedPointerArray
~BasicFixedPointerArray	src/Data/AbstractDatabase/AbstractDB.h	/^        ~BasicFixedPointerArray();$/;"	p	class:BasicFixedPointerArray
~BasicFixedPointerArray	src/Data/AbstractDatabase/BasicFixedPointerArray.cpp	/^BasicFixedPointerArray::~BasicFixedPointerArray() {$/;"	f	class:BasicFixedPointerArray
~BitMap	include/Eternia/Data/BitMap.h	/^        virtual ~BitMap();$/;"	p	class:BitMap
~BitMap	src/Data/BitMap.cpp	/^BitMap::~BitMap() {$/;"	f	class:BitMap
~BitMap	src/Data/BitMap.h	/^        virtual ~BitMap();$/;"	p	class:BitMap
~Building	include/Eternia/Gamelogic/Buildings/Building.h	/^    virtual ~Building();$/;"	p	class:Building
~Building	src/Gamelogic/Buildings/Building.cpp	/^Building::~Building(){$/;"	f	class:Building
~Building	src/Gamelogic/Buildings/Building.h	/^    virtual ~Building();$/;"	p	class:Building
~Capacitor	include/Eternia/Engineering/Electrical/Components/Capacitor.h	/^        virtual ~Capacitor();$/;"	p	class:Capacitor
~Capacitor	src/Engineering/Electrical/Components/Capacitor.h	/^        virtual ~Capacitor();$/;"	p	class:Capacitor
~ChannelledClient	include/Eternia/WebFramework/Network/ChannelledClient.h	/^    virtual ~ChannelledClient();$/;"	p	class:ChannelledClient
~ChannelledClient	src/WebFramework/Network/ChannelledClient.cpp	/^ChannelledClient::~ChannelledClient(){}$/;"	f	class:ChannelledClient
~ChannelledClient	src/WebFramework/Network/ChannelledClient.h	/^    virtual ~ChannelledClient();$/;"	p	class:ChannelledClient
~CharString	include/Eternia/Data/CharString.h	/^        virtual ~CharString();$/;"	p	class:CharString
~CharString	src/Data/CharString.cpp	/^CharString::~CharString(){$/;"	f	class:CharString
~CharString	src/Data/CharString.h	/^        virtual ~CharString();$/;"	p	class:CharString
~Circuit	include/Eternia/Engineering/Electrical/Circuit.h	/^        virtual ~Circuit();$/;"	p	class:Circuit
~Circuit	src/Engineering/Electrical/Circuit.h	/^        virtual ~Circuit();$/;"	p	class:Circuit
~CircularMotion	include/Eternia/Engineering/Physics/Kinematics/CircularMotion.h	/^        virtual ~CircularMotion();$/;"	p	class:CircularMotion
~CircularMotion	src/Engineering/Physics/Kinematics/CircularMotion.cpp	/^CircularMotion::~CircularMotion() {$/;"	f	class:CircularMotion
~CircularMotion	src/Engineering/Physics/Kinematics/CircularMotion.h	/^        virtual ~CircularMotion();$/;"	p	class:CircularMotion
~Complex	include/Eternia/Math/Complex.hpp	/^    ~Complex(){}$/;"	f	class:Complex
~Complex	src/Math/Complex.hpp	/^    ~Complex(){}$/;"	f	class:Complex
~ComponentRating	include/Eternia/Engineering/Electrical/Components/ComponentRating.h	/^        virtual ~ComponentRating();$/;"	p	class:ComponentRating
~ComponentRating	src/Engineering/Electrical/Components/ComponentRating.cpp	/^ComponentRating::~ComponentRating() {$/;"	f	class:ComponentRating
~ComponentRating	src/Engineering/Electrical/Components/ComponentRating.h	/^        virtual ~ComponentRating();$/;"	p	class:ComponentRating
~Composite	include/Eternia/Engineering/Chemistry/Composite.h	/^        virtual ~Composite();$/;"	p	class:Composite
~Composite	src/Engineering/Chemistry/Composite.cpp	/^Composite::~Composite() {$/;"	f	class:Composite
~Composite	src/Engineering/Chemistry/Composite.h	/^        virtual ~Composite();$/;"	p	class:Composite
~CyclicList	include/Eternia/Data/CyclicList.hpp	/^    ~CyclicList(){}$/;"	f	class:CyclicList
~CyclicList	src/Data/CyclicList.hpp	/^    ~CyclicList(){}$/;"	f	class:CyclicList
~Diode	include/Eternia/Engineering/Electrical/Components/Diode.h	/^        virtual ~Diode();$/;"	p	class:Diode
~Diode	src/Engineering/Electrical/Components/Diode.h	/^        virtual ~Diode();$/;"	p	class:Diode
~DoubleList	include/Eternia/Data/DoubleList.h	/^        virtual ~DoubleList();$/;"	p	class:DoubleList
~DoubleList	src/Data/DoubleList.cpp	/^DoubleList::~DoubleList() {$/;"	f	class:DoubleList
~DoubleList	src/Data/DoubleList.h	/^        virtual ~DoubleList();$/;"	p	class:DoubleList
~EventHandle	include/Eternia/Data/Events/EventHandle.h	/^        ~EventHandle();$/;"	p	class:EventHandle
~EventHandle	src/Data/Events/EventHandle.h	/^        ~EventHandle();$/;"	p	class:EventHandle
~EventHandler	include/Eternia/Data/Events/EventHandler.h	/^        ~EventHandler();$/;"	p	class:EventHandler
~EventHandler	src/Data/Events/EventHandler.cpp	/^EventHandler::~EventHandler() {$/;"	f	class:EventHandler
~EventHandler	src/Data/Events/EventHandler.h	/^        ~EventHandler();$/;"	p	class:EventHandler
~FileCache	include/Eternia/Data/FileCache.hpp	/^        ~FileCache() {$/;"	f	class:FileCache
~FileCache	src/Data/FileCache.hpp	/^        ~FileCache() {$/;"	f	class:FileCache
~FileSystem	include/Eternia/Data/FileSystem.h	/^        virtual ~FileSystem();$/;"	p	class:FileSystem
~FileSystem	src/Data/FileSystem.cpp	/^FileSystem::~FileSystem() {}$/;"	f	class:FileSystem
~FileSystem	src/Data/FileSystem.h	/^        virtual ~FileSystem();$/;"	p	class:FileSystem
~FluidMechanics	include/Eternia/Engineering/Physics/FluidMechanics/FluidMechanics.h	/^        virtual ~FluidMechanics();$/;"	p	class:FluidMechanics
~FluidMechanics	src/Engineering/Physics/FluidMechanics/FluidMechanics.cpp	/^FluidMechanics::~FluidMechanics() {$/;"	f	class:FluidMechanics
~FluidMechanics	src/Engineering/Physics/FluidMechanics/FluidMechanics.h	/^        virtual ~FluidMechanics();$/;"	p	class:FluidMechanics
~FreqSignal	include/Eternia/Engineering/Electrical/Signal/FreqSignal.h	/^    virtual ~FreqSignal();$/;"	p	class:FreqSignal
~FreqSignal	src/Engineering/Electrical/Signal/FreqSignal.h	/^    virtual ~FreqSignal();$/;"	p	class:FreqSignal
~GEdge	include/Eternia/Data/Graph.h	/^        virtual ~GEdge();$/;"	p	class:GEdge
~GEdge	src/Data/Graph.h	/^        virtual ~GEdge();$/;"	p	class:GEdge
~GVertex	include/Eternia/Data/Graph.h	/^        virtual ~GVertex();$/;"	p	class:GVertex
~GVertex	src/Data/Graph.h	/^        virtual ~GVertex();$/;"	p	class:GVertex
~Graph	include/Eternia/Data/Graph.h	/^        virtual ~Graph();$/;"	p	class:Graph
~Graph	src/Data/Graph.h	/^        virtual ~Graph();$/;"	p	class:Graph
~HBridge	include/Eternia/Engineering/Electrical/Components/HBridge.h	/^        virtual ~HBridge();$/;"	p	class:HBridge
~HBridge	src/Engineering/Electrical/Components/HBridge.h	/^        virtual ~HBridge();$/;"	p	class:HBridge
~HTMLServer	include/Eternia/WebFramework/Network/HTMLServer.h	/^    virtual ~HTMLServer();$/;"	p	class:HTMLServer
~HTMLServer	src/WebFramework/Network/HTMLServer.h	/^    virtual ~HTMLServer();$/;"	p	class:HTMLServer
~Heap	include/Eternia/Data/Heap.h	/^        virtual ~Heap();$/;"	p	class:Heap
~Heap	src/Data/Heap.cpp	/^Heap::~Heap() {$/;"	f	class:Heap
~Heap	src/Data/Heap.h	/^        virtual ~Heap();$/;"	p	class:Heap
~IC555	include/Eternia/Engineering/Electrical/IC/General/IC555.h	/^        virtual ~IC555();$/;"	p	class:IC555
~IC555	src/Engineering/Electrical/IC/General/IC555.cpp	/^IC555::~IC555() {$/;"	f	class:IC555
~IC555	src/Engineering/Electrical/IC/General/IC555.h	/^        virtual ~IC555();$/;"	p	class:IC555
~IntegerList	include/Eternia/Data/IntegerList.h	/^        virtual ~IntegerList();$/;"	p	class:IntegerList
~IntegerList	src/Data/IntegerList.cpp	/^IntegerList::~IntegerList() {$/;"	f	class:IntegerList
~IntegerList	src/Data/IntegerList.h	/^        virtual ~IntegerList();$/;"	p	class:IntegerList
~Inverter	include/Eternia/Engineering/Electrical/Components/Inverter.h	/^        virtual ~Inverter();$/;"	p	class:Inverter
~Inverter	src/Engineering/Electrical/Components/Inverter.h	/^        virtual ~Inverter();$/;"	p	class:Inverter
~LBridge	include/Eternia/Engineering/Electrical/Components/LBridge.h	/^        virtual ~LBridge();$/;"	p	class:LBridge
~LBridge	src/Engineering/Electrical/Components/LBridge.h	/^        virtual ~LBridge();$/;"	p	class:LBridge
~LayoutObject	include/Eternia/Design/LayoutObject.h	/^        ~LayoutObject();$/;"	p	class:LayoutObject
~LayoutObject	src/Design/LayoutObject.h	/^        ~LayoutObject();$/;"	p	class:LayoutObject
~LinkedList	include/Eternia/Data/LinkedList.hpp	/^    ~LinkedList() {$/;"	f	class:LinkedList
~LinkedList	src/Data/LinkedList.hpp	/^    ~LinkedList() {$/;"	f	class:LinkedList
~LinkedListT	include/Eternia/Data/LinkedListT.h	/^        virtual ~LinkedListT();$/;"	p	class:LinkedListT
~LinkedListT	src/Data/LinkedListT.cpp	/^LinkedListT::~LinkedListT() {$/;"	f	class:LinkedListT
~LinkedListT	src/Data/LinkedListT.h	/^        virtual ~LinkedListT();$/;"	p	class:LinkedListT
~LinkedMap	include/Eternia/Data/LinkedMap.h	/^        virtual ~LinkedMap();$/;"	p	class:LinkedMap
~LinkedMap	src/Data/LinkedMap.cpp	/^LinkedMap::~LinkedMap() {$/;"	f	class:LinkedMap
~LinkedMap	src/Data/LinkedMap.h	/^        virtual ~LinkedMap();$/;"	p	class:LinkedMap
~LinkedMapNode	include/Eternia/Data/LinkedMap.h	/^        virtual ~LinkedMapNode();$/;"	p	class:LinkedMapNode
~LinkedMapNode	src/Data/LinkedMap.cpp	/^LinkedMapNode::~LinkedMapNode() {$/;"	f	class:LinkedMapNode
~LinkedMapNode	src/Data/LinkedMap.h	/^        virtual ~LinkedMapNode();$/;"	p	class:LinkedMapNode
~LinkedNode	include/Eternia/Data/LinkedList.hpp	/^    ~LinkedNode() {$/;"	f	class:LinkedNode
~LinkedNode	src/Data/LinkedList.hpp	/^    ~LinkedNode() {$/;"	f	class:LinkedNode
~LinkedNodeT	include/Eternia/Data/LinkedListT.h	/^        virtual ~LinkedNodeT();$/;"	p	class:LinkedNodeT
~LinkedNodeT	src/Data/LinkedListT.cpp	/^LinkedNodeT::~LinkedNodeT() {$/;"	f	class:LinkedNodeT
~LinkedNodeT	src/Data/LinkedListT.h	/^        virtual ~LinkedNodeT();$/;"	p	class:LinkedNodeT
~LocalLayout	include/Eternia/Design/LocalLayout.h	/^        virtual ~LocalLayout();$/;"	p	class:LocalLayout
~LocalLayout	src/Design/LocalLayout.h	/^        virtual ~LocalLayout();$/;"	p	class:LocalLayout
~Logger	include/Eternia/Data/Logger/Logger.h	/^    virtual ~Logger(); \/\/ if ASYNC, stop thread$/;"	p	class:Logger
~Logger	src/Data/Logger/Logger.cpp	/^Logger::~Logger(){$/;"	f	class:Logger
~Logger	src/Data/Logger/Logger.h	/^    virtual ~Logger(); \/\/ if ASYNC, stop thread$/;"	p	class:Logger
~Matrix	include/Eternia/Math/struct/Matrix.h	/^    virtual ~Matrix();$/;"	p	class:Matrix
~Matrix	src/Math/struct/Matrix.cpp	/^Matrix::~Matrix() {$/;"	f	class:Matrix
~Matrix	src/Math/struct/Matrix.h	/^    virtual ~Matrix();$/;"	p	class:Matrix
~Mosfet	include/Eternia/Engineering/Electrical/Components/Mosfet.h	/^        virtual ~Mosfet();$/;"	p	class:Mosfet
~Mosfet	src/Engineering/Electrical/Components/Mosfet.h	/^        virtual ~Mosfet();$/;"	p	class:Mosfet
~NetworkManager	include/Eternia/WebFramework/Network/PacketServer/NetworkManager.h	/^        virtual ~NetworkManager();$/;"	p	class:NetworkManager
~NetworkManager	src/WebFramework/Network/PacketServer/NetworkManager.cpp	/^NetworkManager::~NetworkManager() {$/;"	f	class:NetworkManager
~NetworkManager	src/WebFramework/Network/PacketServer/NetworkManager.h	/^        virtual ~NetworkManager();$/;"	p	class:NetworkManager
~Neutrino	include/Eternia/Engineering/Chemistry/Hadron/Neutrino.h	/^        virtual ~Neutrino();$/;"	p	class:Neutrino
~Neutrino	src/Engineering/Chemistry/Hadron/Neutrino.h	/^        virtual ~Neutrino();$/;"	p	class:Neutrino
~Neutron	include/Eternia/Engineering/Chemistry/Hadron/Neutron.h	/^        virtual ~Neutron();$/;"	p	class:Neutron
~Neutron	src/Engineering/Chemistry/Hadron/Neutron.h	/^        virtual ~Neutron();$/;"	p	class:Neutron
~Ocean	include/Eternia/Gamelogic/Environment/Planet/Ocean.h	/^        virtual ~Ocean();$/;"	p	class:Ocean
~Ocean	src/Gamelogic/Environment/Planet/Ocean.cpp	/^Ocean::~Ocean() {$/;"	f	class:Ocean
~Ocean	src/Gamelogic/Environment/Planet/Ocean.h	/^        virtual ~Ocean();$/;"	p	class:Ocean
~P2PBoundaries	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        virtual ~P2PBoundaries();$/;"	p	class:P2PBoundaries
~P2PBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.cpp	/^P2PBoundaries::~P2PBoundaries() {$/;"	f	class:P2PBoundaries
~P2PBoundaries	src/WebFramework/Network/PacketServer/P2P/P2PBoundaries.h	/^        virtual ~P2PBoundaries();$/;"	p	class:P2PBoundaries
~P2PCPUServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        virtual ~P2PCPUServer();$/;"	p	class:P2PCPUServer
~P2PCPUServer	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.cpp	/^P2PCPUServer::~P2PCPUServer() {$/;"	f	class:P2PCPUServer
~P2PCPUServer	src/WebFramework/Network/PacketServer/P2P/P2PCPUServer.h	/^        virtual ~P2PCPUServer();$/;"	p	class:P2PCPUServer
~P2PDataServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        virtual ~P2PDataServer();$/;"	p	class:P2PDataServer
~P2PDataServer	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.cpp	/^P2PDataServer::~P2PDataServer() {$/;"	f	class:P2PDataServer
~P2PDataServer	src/WebFramework/Network/PacketServer/P2P/P2PDataServer.h	/^        virtual ~P2PDataServer();$/;"	p	class:P2PDataServer
~P2PIRCServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        virtual ~P2PIRCServer();$/;"	p	class:P2PIRCServer
~P2PIRCServer	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.cpp	/^P2PIRCServer::~P2PIRCServer() {$/;"	f	class:P2PIRCServer
~P2PIRCServer	src/WebFramework/Network/PacketServer/P2P/P2PIRCServer.h	/^        virtual ~P2PIRCServer();$/;"	p	class:P2PIRCServer
~P2PLClient	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        virtual ~P2PLClient();$/;"	p	class:P2PLClient
~P2PLClient	src/WebFramework/Network/PacketServer/P2P/P2PLClient.cpp	/^P2PLClient::~P2PLClient() {$/;"	f	class:P2PLClient
~P2PLClient	src/WebFramework/Network/PacketServer/P2P/P2PLClient.h	/^        virtual ~P2PLClient();$/;"	p	class:P2PLClient
~P2PLServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        virtual ~P2PLServer();$/;"	p	class:P2PLServer
~P2PLServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.cpp	/^P2PLServer::~P2PLServer() {$/;"	f	class:P2PLServer
~P2PLServer	src/WebFramework/Network/PacketServer/P2P/P2PLServer.h	/^        virtual ~P2PLServer();$/;"	p	class:P2PLServer
~P2PManager	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        virtual ~P2PManager();$/;"	p	class:P2PManager
~P2PManager	src/WebFramework/Network/PacketServer/P2P/P2PManager.cpp	/^P2PManager::~P2PManager() {$/;"	f	class:P2PManager
~P2PManager	src/WebFramework/Network/PacketServer/P2P/P2PManager.h	/^        virtual ~P2PManager();$/;"	p	class:P2PManager
~P2PNode	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        virtual ~P2PNode();$/;"	p	class:P2PNode
~P2PNode	src/WebFramework/Network/PacketServer/P2P/P2PNode.cpp	/^P2PNode::~P2PNode() {$/;"	f	class:P2PNode
~P2PNode	src/WebFramework/Network/PacketServer/P2P/P2PNode.h	/^        virtual ~P2PNode();$/;"	p	class:P2PNode
~P2PNodeCache	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        virtual ~P2PNodeCache();$/;"	p	class:P2PNodeCache
~P2PNodeCache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.cpp	/^P2PNodeCache::~P2PNodeCache() {$/;"	f	class:P2PNodeCache
~P2PNodeCache	src/WebFramework/Network/PacketServer/P2P/P2PNodeCache.h	/^        virtual ~P2PNodeCache();$/;"	p	class:P2PNodeCache
~P2PPacket	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        virtual ~P2PPacket();$/;"	p	class:P2PPacket
~P2PPacket	src/WebFramework/Network/PacketServer/P2P/P2PPacket.cpp	/^P2PPacket::~P2PPacket() {$/;"	f	class:P2PPacket
~P2PPacket	src/WebFramework/Network/PacketServer/P2P/P2PPacket.h	/^        virtual ~P2PPacket();$/;"	p	class:P2PPacket
~P2PStreamServer	include/Eternia/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        virtual ~P2PStreamServer();$/;"	p	class:P2PStreamServer
~P2PStreamServer	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.cpp	/^P2PStreamServer::~P2PStreamServer() {$/;"	f	class:P2PStreamServer
~P2PStreamServer	src/WebFramework/Network/PacketServer/P2P/P2PStreamServer.h	/^        virtual ~P2PStreamServer();$/;"	p	class:P2PStreamServer
~PType	include/Eternia/Data/Protect/PType.hpp	/^    ~PType(){$/;"	f	class:PType
~PType	src/Data/Protect/PType.hpp	/^    ~PType(){$/;"	f	class:PType
~PacketChannel	include/Eternia/WebFramework/Network/PacketChannel.h	/^    virtual ~PacketChannel();$/;"	p	class:PacketChannel
~PacketChannel	src/WebFramework/Network/PacketChannel.cpp	/^PacketChannel::~PacketChannel(){$/;"	f	class:PacketChannel
~PacketChannel	src/WebFramework/Network/PacketChannel.h	/^    virtual ~PacketChannel();$/;"	p	class:PacketChannel
~Pin	include/Eternia/Engineering/Electrical/Pin.h	/^        virtual ~Pin();$/;"	p	class:Pin
~Pin	src/Engineering/Electrical/Pin.cpp	/^Pin::~Pin() {}$/;"	f	class:Pin
~Pin	src/Engineering/Electrical/Pin.h	/^        virtual ~Pin();$/;"	p	class:Pin
~Pion	include/Eternia/Engineering/Chemistry/Hadron/Pion.h	/^        virtual ~Pion();$/;"	p	class:Pion
~Pion	src/Engineering/Chemistry/Hadron/Pion.h	/^        virtual ~Pion();$/;"	p	class:Pion
~Planet	include/Eternia/Gamelogic/Environment/Planet/Planet.h	/^    virtual ~Planet();$/;"	p	class:Planet
~Planet	src/Gamelogic/Environment/Planet/Planet.cpp	/^Planet::~Planet() {$/;"	f	class:Planet
~Planet	src/Gamelogic/Environment/Planet/Planet.h	/^    virtual ~Planet();$/;"	p	class:Planet
~Positron	include/Eternia/Engineering/Chemistry/Hadron/Positron.h	/^        virtual ~Positron();$/;"	p	class:Positron
~Positron	src/Engineering/Chemistry/Hadron/Positron.h	/^        virtual ~Positron();$/;"	p	class:Positron
~PowerPlant	include/Eternia/Gamelogic/Buildings/Power/PowerPlant.h	/^    virtual ~PowerPlant();$/;"	p	class:PowerPlant
~PowerPlant	src/Gamelogic/Buildings/Power/PowerPlant.cpp	/^PowerPlant::~PowerPlant() {$/;"	f	class:PowerPlant
~PowerPlant	src/Gamelogic/Buildings/Power/PowerPlant.h	/^    virtual ~PowerPlant();$/;"	p	class:PowerPlant
~PowerValue	include/Eternia/Engineering/Electrical/PowerValue.h	/^        virtual ~PowerValue();$/;"	p	class:PowerValue
~PowerValue	src/Engineering/Electrical/PowerValue.cpp	/^PowerValue::~PowerValue() {$/;"	f	class:PowerValue
~PowerValue	src/Engineering/Electrical/PowerValue.h	/^        virtual ~PowerValue();$/;"	p	class:PowerValue
~PriorityItem	include/Eternia/Data/PriorityQueue.h	/^        virtual ~PriorityItem();$/;"	p	class:PriorityItem
~PriorityItem	src/Data/PriorityQueue.cpp	/^PriorityItem::~PriorityItem() {$/;"	f	class:PriorityItem
~PriorityItem	src/Data/PriorityQueue.h	/^        virtual ~PriorityItem();$/;"	p	class:PriorityItem
~PriorityQueue	include/Eternia/Data/PriorityQueue.h	/^        virtual ~PriorityQueue();$/;"	p	class:PriorityQueue
~PriorityQueue	src/Data/PriorityQueue.cpp	/^PriorityQueue::~PriorityQueue() {$/;"	f	class:PriorityQueue
~PriorityQueue	src/Data/PriorityQueue.h	/^        virtual ~PriorityQueue();$/;"	p	class:PriorityQueue
~Proton	include/Eternia/Engineering/Chemistry/Hadron/Proton.h	/^        virtual ~Proton();$/;"	p	class:Proton
~Proton	src/Engineering/Chemistry/Hadron/Proton.h	/^        virtual ~Proton();$/;"	p	class:Proton
~Queue	include/Eternia/Data/Queue.h	/^        virtual ~Queue();$/;"	p	class:Queue
~Queue	src/Data/Queue.cpp	/^Queue::~Queue() {$/;"	f	class:Queue
~Queue	src/Data/Queue.h	/^        virtual ~Queue();$/;"	p	class:Queue
~RAM	include/Eternia/Engineering/Electrical/IC/RAM.h	/^        virtual ~RAM();$/;"	p	class:RAM
~RAM	src/Engineering/Electrical/IC/RAM.cpp	/^RAM::~RAM() {$/;"	f	class:RAM
~RAM	src/Engineering/Electrical/IC/RAM.h	/^        virtual ~RAM();$/;"	p	class:RAM
~Resistor	include/Eternia/Engineering/Electrical/Components/Resistor.h	/^        virtual ~Resistor();$/;"	p	class:Resistor
~Resistor	src/Engineering/Electrical/Components/Resistor.h	/^        virtual ~Resistor();$/;"	p	class:Resistor
~SecondTick	include/Eternia/Emulation/SecondTick.h	/^        virtual ~SecondTick(); \/\/ expire$/;"	p	class:SecondTick
~SecondTick	src/Emulation/SecondTick.cpp	/^SecondTick::~SecondTick() {}$/;"	f	class:SecondTick
~SecondTick	src/Emulation/SecondTick.h	/^        virtual ~SecondTick(); \/\/ expire$/;"	p	class:SecondTick
~SecuredParser	include/Eternia/Parsing/SecuredParser.h	/^        virtual ~SecuredParser();$/;"	p	class:SecuredParser
~SecuredParser	src/Parsing/SecuredParser.cpp	/^SecuredParser::~SecuredParser() {$/;"	f	class:SecuredParser
~SecuredParser	src/Parsing/SecuredParser.h	/^        virtual ~SecuredParser();$/;"	p	class:SecuredParser
~SelectionSort	include/Eternia/Algorithm/Sorting/SelectionSort.h	/^        virtual ~SelectionSort();$/;"	p	class:SelectionSort
~SelectionSort	src/Algorithm/Sorting/SelectionSort.h	/^        virtual ~SelectionSort();$/;"	p	class:SelectionSort
~Serializable	include/Eternia/Serialization/Serializable.hpp	/^    ~Serializable(){}$/;"	f	class:Serializable
~Serializable	src/Serialization/Serializable.hpp	/^    ~Serializable(){}$/;"	f	class:Serializable
~SpecificSerializer	include/Eternia/Serialization/SpecificSerializer.h	/^    virtual ~SpecificSerializer();$/;"	p	class:SpecificSerializer
~SpecificSerializer	src/Serialization/SpecificSerializer.cpp	/^SpecificSerializer::~SpecificSerializer(){$/;"	f	class:SpecificSerializer
~SpecificSerializer	src/Serialization/SpecificSerializer.h	/^    virtual ~SpecificSerializer();$/;"	p	class:SpecificSerializer
~SplitResult	include/Eternia/Data/SplitResult.h	/^        virtual ~SplitResult();$/;"	p	class:SplitResult
~SplitResult	src/Data/SplitResult.cpp	/^SplitResult::~SplitResult() {}$/;"	f	class:SplitResult
~SplitResult	src/Data/SplitResult.h	/^        virtual ~SplitResult();$/;"	p	class:SplitResult
~Stack	include/Eternia/Data/Stack.h	/^        virtual ~Stack();$/;"	p	class:Stack
~Stack	src/Data/Stack.cpp	/^Stack::~Stack() {$/;"	f	class:Stack
~Stack	src/Data/Stack.h	/^        virtual ~Stack();$/;"	p	class:Stack
~Template	include/Eternia/WebFramework/Templates/Template.h	/^        virtual ~Template();$/;"	p	class:Template
~Template	src/WebFramework/Templates/Template.cpp	/^Template::~Template(){}$/;"	f	class:Template
~Template	src/WebFramework/Templates/Template.h	/^        virtual ~Template();$/;"	p	class:Template
~ThermalDynamics	include/Eternia/Engineering/Physics/ThermalDynamics/ThermalDynamics.h	/^        virtual ~ThermalDynamics();$/;"	p	class:ThermalDynamics
~ThermalDynamics	src/Engineering/Physics/ThermalDynamics/ThermalDynamics.cpp	/^ThermalDynamics::~ThermalDynamics() {$/;"	f	class:ThermalDynamics
~ThermalDynamics	src/Engineering/Physics/ThermalDynamics/ThermalDynamics.h	/^        virtual ~ThermalDynamics();$/;"	p	class:ThermalDynamics
~TimeProfiler	include/Eternia/Data/TimeProfiler.h	/^    virtual ~TimeProfiler();$/;"	p	class:TimeProfiler
~TimeProfiler	src/Data/TimeProfiler.cpp	/^TimeProfiler::~TimeProfiler(){}$/;"	f	class:TimeProfiler
~TimeProfiler	src/Data/TimeProfiler.h	/^    virtual ~TimeProfiler();$/;"	p	class:TimeProfiler
~TimeSignal	include/Eternia/Engineering/Electrical/Signal/TimeSignal.h	/^    virtual ~TimeSignal();$/;"	p	class:TimeSignal
~TimeSignal	src/Engineering/Electrical/Signal/TimeSignal.h	/^    virtual ~TimeSignal();$/;"	p	class:TimeSignal
~Transistor	include/Eternia/Engineering/Electrical/Components/Transistor.h	/^        virtual ~Transistor();$/;"	p	class:Transistor
~Transistor	src/Engineering/Electrical/Components/Transistor.h	/^        virtual ~Transistor();$/;"	p	class:Transistor
~VertexObject	include/Eternia/Math/struct/vertex.h	/^    virtual ~VertexObject();$/;"	p	class:VertexObject
~VertexObject	src/Math/struct/vertex.cpp	/^VertexObject::~VertexObject() {  }$/;"	f	class:VertexObject
~VertexObject	src/Math/struct/vertex.h	/^    virtual ~VertexObject();$/;"	p	class:VertexObject
~View	include/Eternia/Design/View.h	/^        ~View();$/;"	p	class:View
~View	src/Design/View.h	/^        ~View();$/;"	p	class:View
~Wire	include/Eternia/Engineering/Electrical/Wire.h	/^        virtual ~Wire();$/;"	p	class:Wire
~Wire	src/Engineering/Electrical/Wire.h	/^        virtual ~Wire();$/;"	p	class:Wire
~vertex	include/Eternia/Math/struct/vertex.h	/^    virtual ~vertex();$/;"	p	class:vertex
~vertex	src/Math/struct/vertex.cpp	/^vertex::~vertex() { $/;"	f	class:vertex
~vertex	src/Math/struct/vertex.h	/^    virtual ~vertex();$/;"	p	class:vertex
